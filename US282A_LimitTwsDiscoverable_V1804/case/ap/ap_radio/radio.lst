
radio.exe:     file format elf32-tradlittlemips

Disassembly of section .text:

bfc1e900 <sys_op_entry>:
bfc1e900:	6b0f      	li	v1,15
bfc1e902:	e805      	break	0

bfc1e904 <libc_op_entry>:
bfc1e904:	6b10      	li	v1,16
bfc1e906:	e805      	break	0

bfc1e908 <audio_device_op_entry>:
bfc1e908:	6b0a      	li	v1,10
bfc1e90a:	e805      	break	0

bfc1e90c <key_op_entry>:
bfc1e90c:	6b08      	li	v1,8
bfc1e90e:	e805      	break	0

bfc1e910 <lcd_op_entry>:
bfc1e910:	6b06      	li	v1,6
bfc1e912:	e805      	break	0

bfc1e914 <tts_op_entry>:
bfc1e914:	6b0b      	li	v1,11
bfc1e916:	e805      	break	0

bfc1e918 <ccd_op_entry>:
bfc1e918:	6b09      	li	v1,9
bfc1e91a:	e805      	break	0

bfc1e91c <base_op_entry>:
bfc1e91c:	6b00      	li	v1,0
bfc1e91e:	e805      	break	0

bfc1e920 <stub_mod_cmd>:
bfc1e920:	6b40      	li	v1,64
bfc1e922:	e805      	break	0

bfc1e924 <handle_timers>:
bfc1e924:	f004 64f5 	save	a0,40,ra,s0-s1
 * \ingroup      app_timer
 * \note
 *******************************************************************************/
void handle_timers(app_timer_t *timers, uint8 count)
{
bfc1e928:	ed11      	zeb	a1
bfc1e92a:	6c00      	li	a0,0
    app_timer_t *tm;
    uint32 cur_time_ms = sys_get_ab_timer(); //如果没有执行软定时器服务例程，认为当前时间不变
bfc1e92c:	b041      	lw	s0,bfc1ea30 <handle_timers+0x10c>
bfc1e92e:	d504      	sw	a1,16(sp)
bfc1e930:	67c4      	move	a2,a0
bfc1e932:	67a4      	move	a1,a0
bfc1e934:	e840      	jalr	s0
bfc1e936:	6f1c      	li	a3,28
bfc1e938:	9304      	lw	v1,16(sp)
    uint32 next_time_ms;
    uint16 next_timeout;
    uint8 i;
    bool need_proc;

    for (i = 0; i < count; i++)
bfc1e93a:	6702      	move	s0,v0
bfc1e93c:	6a00      	li	v0,0
bfc1e93e:	d205      	sw	v0,20(sp)
bfc1e940:	2374      	beqz	v1,bfc1ea2a <handle_timers+0x106>
bfc1e942:	9405      	lw	a0,20(sp)
    {
        tm = timers + i;
bfc1e944:	970a      	lw	a3,40(sp)
bfc1e946:	3690      	sll	a2,a0,4
bfc1e948:	e7d1      	addu	a0,a3,a2
bfc1e94a:	a460      	lbu	v1,0(a0)

        //定时器正在运行才需要执行
        if (tm->state != TIMER_STATE_RUNNING)
bfc1e94c:	6d03      	li	a1,3
bfc1e94e:	ed6c      	and	a1,v1
bfc1e950:	7501      	cmpi	a1,1
bfc1e952:	6164      	btnez	bfc1ea1c <handle_timers+0xf8>
bfc1e954:	6a0c      	li	v0,12
        {
            continue;
        }

        //UI类定时器在背光等熄灭后不需要执行
        if ((tm->attrb != APP_TIMER_ATTRB_CONTROL) && (g_app_info_state.backlight_state == BACKLIGHT_STATE_OFF))
bfc1e956:	eb4c      	and	v1,v0
bfc1e958:	7304      	cmpi	v1,4
bfc1e95a:	6004      	bteqz	bfc1e964 <handle_timers+0x40>
bfc1e95c:	b536      	lw	a1,bfc1ea34 <handle_timers+0x110>
bfc1e95e:	a563      	lbu	v1,3(a1)
bfc1e960:	7302      	cmpi	v1,2
bfc1e962:	605c      	bteqz	bfc1ea1c <handle_timers+0xf8>
bfc1e964:	b735      	lw	a3,bfc1ea38 <handle_timers+0x114>
        {
            continue;
        }

        //TAG场景检查
        if ((tm->tag != g_this_app_timer_tag) && (tm->tag != APP_TIMER_TAG_SYS))
bfc1e966:	a461      	lbu	v1,1(a0)
bfc1e968:	a7c0      	lbu	a2,0(a3)
bfc1e96a:	ee6e      	xor	a2,v1
bfc1e96c:	2602      	beqz	a2,bfc1e972 <handle_timers+0x4e>
bfc1e96e:	73ff      	cmpi	v1,255
bfc1e970:	6155      	btnez	bfc1ea1c <handle_timers+0xf8>
bfc1e972:	677d      	move	v1,sp
        {
            continue;
        }

        g_app_timer_id = i;
bfc1e974:	b132      	lw	s1,bfc1ea3c <handle_timers+0x118>
bfc1e976:	a354      	lbu	v0,20(v1)
bfc1e978:	c140      	sb	v0,0(s1)
bfc1e97a:	9cc2      	lw	a2,8(a0)
        need_proc = FALSE;
        if (cur_time_ms >= tm->timeout_expires) //定时时间已到
bfc1e97c:	6900      	li	s1,0
bfc1e97e:	e8c3      	sltu	s0,a2
bfc1e980:	6135      	btnez	bfc1e9ec <handle_timers+0xc8>
bfc1e982:	a460      	lbu	v1,0(a0)
        {
            //单发软定时器一次执行完后 kill 掉
            if (tm->type == TIMER_TYPE_SINGLE_SHOT)
bfc1e984:	6d10      	li	a1,16
bfc1e986:	ed6c      	and	a1,v1
bfc1e988:	2504      	beqz	a1,bfc1e992 <handle_timers+0x6e>
bfc1e98a:	6904      	li	s1,4
            {
                tm->state = TIMER_STATE_NOUSED;
bfc1e98c:	ef2b      	neg	a3,s1
bfc1e98e:	ebec      	and	v1,a3
bfc1e990:	c460      	sb	v1,0(a0)
bfc1e992:	a4e0      	lbu	a3,0(a0)
            }
            need_proc = TRUE;

            next_timeout = tm->timeout;
            if ((tm->twinkle == TRUE) && (tm->on_off == TRUE))
bfc1e994:	6a60      	li	v0,96
bfc1e996:	eaec      	and	v0,a3
bfc1e998:	7260      	cmpi	v0,96
bfc1e99a:	6901      	li	s1,1
bfc1e99c:	ac62      	lhu	v1,4(a0)
bfc1e99e:	6101      	btnez	bfc1e9a2 <handle_timers+0x7e>
bfc1e9a0:	ac63      	lhu	v1,6(a0)
            {
                next_timeout = tm->timeout_off;
bfc1e9a2:	e0cb      	subu	v0,s0,a2
            }
            next_time_ms = cur_time_ms + next_timeout;

            //重设软定时器超时时间
            if (next_timeout > (cur_time_ms - tm->timeout_expires))
bfc1e9a4:	ea63      	sltu	v0,v1
bfc1e9a6:	e075      	addu	a1,s0,v1
bfc1e9a8:	6003      	bteqz	bfc1e9b0 <handle_timers+0x8c>
bfc1e9aa:	e675      	addu	a1,a2,v1
            {
                //当前时间>=这次expires时间<下次expires时间
                tm->timeout_expires += next_timeout; //直接在expires上加定时周期，以确保多次定时时间准确
bfc1e9ac:	dca2      	sw	a1,8(a0)
bfc1e9ae:	1001      	b	bfc1e9b2 <handle_timers+0x8e>
bfc1e9b0:	dca2      	sw	a1,8(a0)
            }
            else
            {
                //当前时间>=下次expires时间
                //已经错过了一次expires(说明timeout太短了)
                //将下次expires时间设置到当前时间的timeout之后, 不然下次timeout立即就会到来
                tm->timeout_expires = next_time_ms;
bfc1e9b2:	6e20      	li	a2,32
            }

            if (tm->twinkle == TRUE)
bfc1e9b4:	eeec      	and	a2,a3
bfc1e9b6:	6767      	move	v1,a3
bfc1e9b8:	2619      	beqz	a2,bfc1e9ec <handle_timers+0xc8>
bfc1e9ba:	6d40      	li	a1,64
            {
                if (tm->on_off == TRUE)
bfc1e9bc:	efac      	and	a3,a1
bfc1e9be:	2705      	beqz	a3,bfc1e9ca <handle_timers+0xa6>
bfc1e9c0:	6d41      	li	a1,65
                {
                    tm->on_off = FALSE;
bfc1e9c2:	eaab      	neg	v0,a1
bfc1e9c4:	eb4c      	and	v1,v0
bfc1e9c6:	c460      	sb	v1,0(a0)
bfc1e9c8:	1011      	b	bfc1e9ec <handle_timers+0xc8>
bfc1e9ca:	ebad      	or	v1,a1
                }
                else
                {
                    tm->on_off = TRUE;
bfc1e9cc:	c460      	sb	v1,0(a0)
bfc1e9ce:	a462      	lbu	v1,2(a0)

                    if (tm->count != 0xff)
bfc1e9d0:	67c3      	move	a2,v1
bfc1e9d2:	ee11      	zeb	a2
bfc1e9d4:	76ff      	cmpi	a2,255
bfc1e9d6:	6002      	bteqz	bfc1e9dc <handle_timers+0xb8>
bfc1e9d8:	43ef      	addiu	a3,v1,-1
                    {
                        tm->count--;
bfc1e9da:	c4e2      	sb	a3,2(a0)
bfc1e9dc:	a4a2      	lbu	a1,2(a0)
                    }
                    if (tm->count == 0)
bfc1e9de:	2d06      	bnez	a1,bfc1e9ec <handle_timers+0xc8>
bfc1e9e0:	a420      	lbu	s1,0(a0)
                    {
                        tm->state = TIMER_STATE_NOUSED;
bfc1e9e2:	6a04      	li	v0,4
bfc1e9e4:	eb4b      	neg	v1,v0
bfc1e9e6:	e96c      	and	s1,v1
bfc1e9e8:	c420      	sb	s1,0(a0)
bfc1e9ea:	6725      	move	s1,a1
                        need_proc = FALSE;
bfc1e9ec:	a4c0      	lbu	a2,0(a0)
                    }
                }
            }
        }

        next_timeout = tm->timeout;
        if ((tm->twinkle == TRUE) && (tm->on_off == FALSE))
bfc1e9ee:	6f60      	li	a3,96
bfc1e9f0:	eeec      	and	a2,a3
bfc1e9f2:	7620      	cmpi	a2,32
bfc1e9f4:	aca2      	lhu	a1,4(a0)
bfc1e9f6:	6101      	btnez	bfc1e9fa <handle_timers+0xd6>
bfc1e9f8:	aca3      	lhu	a1,6(a0)
        {
            next_timeout = tm->timeout_off;
bfc1e9fa:	e0ad      	addu	v1,s0,a1
        }
        next_time_ms = cur_time_ms + next_timeout;
bfc1e9fc:	9c02      	lw	s0,8(a0)

        if (next_time_ms < tm->timeout_expires)
bfc1e9fe:	eb03      	sltu	v1,s0
bfc1ea00:	6001      	bteqz	bfc1ea04 <handle_timers+0xe0>
bfc1ea02:	dc62      	sw	v1,8(a0)
        {
            //如果系统时间因某种原因落在超时时间点后面，那么必须修复该时间点
            tm->timeout_expires = next_time_ms;
bfc1ea04:	7101      	cmpi	s1,1
        }

        //调用软定时器服务例程
        if ((need_proc == TRUE) && (tm->func_proc != NULL))
bfc1ea06:	6103      	btnez	bfc1ea0e <handle_timers+0xea>
bfc1ea08:	9c43      	lw	v0,12(a0)
bfc1ea0a:	2201      	beqz	v0,bfc1ea0e <handle_timers+0xea>
bfc1ea0c:	eac0      	jalrc	v0
        {
            tm->func_proc();
bfc1ea0e:	6c00      	li	a0,0
        }

        //执行过软定时器服务例程，重新加载当前时间，这样时间较为准确
        cur_time_ms = sys_get_ab_timer();
bfc1ea10:	b208      	lw	v0,bfc1ea30 <handle_timers+0x10c>
bfc1ea12:	67a4      	move	a1,a0
bfc1ea14:	67c4      	move	a2,a0
bfc1ea16:	ea40      	jalr	v0
bfc1ea18:	6f1c      	li	a3,28
bfc1ea1a:	6702      	move	s0,v0
bfc1ea1c:	9305      	lw	v1,20(sp)
bfc1ea1e:	9404      	lw	a0,16(sp)
bfc1ea20:	43a1      	addiu	a1,v1,1
bfc1ea22:	ed11      	zeb	a1
bfc1ea24:	ed83      	sltu	a1,a0
bfc1ea26:	d505      	sw	a1,20(sp)
bfc1ea28:	618c      	btnez	bfc1e942 <handle_timers+0x1e>
bfc1ea2a:	6475      	restore	40,ra,s0-s1
bfc1ea2c:	e8a0      	jrc	ra
bfc1ea2e:	0000      	addiu	s0,sp,0
bfc1ea30:	e901      	sdbbp	8
bfc1ea32:	bfc1      	lwu	a2,4(a3)
bfc1ea34:	a0c0      	lbu	a2,0(s0)
bfc1ea36:	9fc1      	lw	a2,4(a3)
bfc1ea38:	998d      	lw	a0,52(s1)
bfc1ea3a:	9fc1      	lw	a2,4(a3)
bfc1ea3c:	998c      	lw	a0,48(s1)
bfc1ea3e:	9fc1      	lw	a2,4(a3)

bfc1ea40 <get_sys_msg>:
bfc1ea40:	64e4      	save	32,ra,s0
 * \li  该接口只在前台AP的 get_app_msg 中调用，也就是说，系统消息从发出到被处理，
 *      可能会被 delay 一些时间，直到有前台AP进入消息循环。
 *******************************************************************************/
bool get_sys_msg(sys_msg_t *sys_msg)
{
bfc1ea42:	6704      	move	s0,a0
bfc1ea44:	6b00      	li	v1,0
    msg_apps_t msg;

    //须把type清0，因为系统消息长度为2个字节，sys_mq_receive 并不会覆盖到type（4字节）高2字节，会导致type错误
    sys_msg->type = MSG_NULL;
bfc1ea46:	b20a      	lw	v0,bfc1ea6c <get_sys_msg+0x2c>
    if (sys_mq_receive(MQ_ID_SYS, (void *) sys_msg) == 0)
bfc1ea48:	cc60      	sh	v1,0(a0)
bfc1ea4a:	67b0      	move	a1,s0
bfc1ea4c:	6c05      	li	a0,5
bfc1ea4e:	6e00      	li	a2,0
bfc1ea50:	ea40      	jalr	v0
bfc1ea52:	6f19      	li	a3,25
bfc1ea54:	6b00      	li	v1,0
    {
        msg.type = sys_msg->type;
        return broadcast_msg(&msg, TRUE);
    }

    //消息队列已空，返回false
    return FALSE;
bfc1ea56:	2a07      	bnez	v0,bfc1ea66 <get_sys_msg+0x26>
bfc1ea58:	a880      	lhu	a0,0(s0)
bfc1ea5a:	b206      	lw	v0,bfc1ea70 <get_sys_msg+0x30>
bfc1ea5c:	d404      	sw	a0,16(sp)
bfc1ea5e:	6d01      	li	a1,1
bfc1ea60:	ea40      	jalr	v0
bfc1ea62:	0404      	addiu	a0,sp,16
bfc1ea64:	6762      	move	v1,v0
bfc1ea66:	6743      	move	v0,v1
}
bfc1ea68:	6464      	restore	32,ra,s0
bfc1ea6a:	e8a0      	jrc	ra
bfc1ea6c:	e901      	sdbbp	8
bfc1ea6e:	bfc1      	lwu	a2,4(a3)
bfc1ea70:	5d21      	sltiu	a1,33
bfc1ea72:	482e      	addiu	s0,46

bfc1ea74 <get_app_msg>:
bfc1ea74:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    接收应用私有消息（有些来自于接收系统消息时转发的）。
 * \param[in]    none
 * \param[out]   private_msg：返回接收到的应用私有消息
 * \return       bool
 * \retval           TRUE 接收应用私有消息成功。
 * \retval           FALSE 接收应用私有消息失败。
 * \ingroup      applib_msg
 * \par          exmaple code
 * \code
 例子1：应用私有消息处理
 private_msg_t private_msg;
 app_result_e result;
 bool ret;

 ret = get_app_msg(&private_msg);
 if(ret == TRUE)
 {
 result = msg_callback(&private_msg);
 if(result == RESULT_REDRAW)
 {
 返回重绘
 }
 else
 {
 其他返回值处理
 }
 }
 * \endcode
 * \note
 *******************************************************************************/
bool get_app_msg(private_msg_t *private_msg)
{
bfc1ea76:	6724      	move	s1,a0
bfc1ea78:	b413      	lw	a0,bfc1eac4 <.LBE2+0x24>
    if (g_this_app_info->app_type == APP_TYPE_GUI) //前台应用
bfc1ea7a:	9c60      	lw	v1,0(a0)
bfc1ea7c:	a342      	lbu	v0,2(v1)
bfc1ea7e:	7201      	cmpi	v0,1
bfc1ea80:	610f      	btnez	bfc1eaa0 <.LBE2>
bfc1ea82:	b012      	lw	s0,bfc1eac8 <.LBE2+0x28>
    {
        if (g_buffer_app_msg.msg.type != MSG_NULL) //缓冲消息，直接拷贝
bfc1ea84:	98a0      	lw	a1,0(s0)
bfc1ea86:	2509      	beqz	a1,bfc1ea9a <.LBB2>
bfc1ea88:	b211      	lw	v0,bfc1eacc <.LBE2+0x2c>
        {
            libc_memcpy(private_msg, &g_buffer_app_msg, sizeof(private_msg_t));
bfc1ea8a:	6e10      	li	a2,16
bfc1ea8c:	6791      	move	a0,s1
bfc1ea8e:	67b0      	move	a1,s0
bfc1ea90:	ea40      	jalr	v0
bfc1ea92:	6f00      	li	a3,0
bfc1ea94:	6e00      	li	a2,0
            g_buffer_app_msg.msg.type = MSG_NULL;
bfc1ea96:	d8c0      	sw	a2,0(s0)
bfc1ea98:	1011      	b	bfc1eabc <.LBE2+0x1c>

bfc1ea9a <.LBB2>:
bfc1ea9a:	1a1f 7a90 	jal	bfc1ea40 <get_sys_msg>
            return TRUE;
        }
        else
        {
            sys_msg_t sys_msg;
            //获取系统消息并广播
            get_sys_msg(&sys_msg);
bfc1ea9e:	0404      	addiu	a0,sp,16

bfc1eaa0 <.LBE2>:
bfc1eaa0:	b309      	lw	v1,bfc1eac4 <.LBE2+0x24>
        }
    }
    //接收 应用私有消息
    if (sys_mq_receive((uint32) (g_this_app_info->mq_id), (void *) private_msg) == 0)
bfc1eaa2:	b20c      	lw	v0,bfc1ead0 <.LBE2+0x30>
bfc1eaa4:	9be0      	lw	a3,0(v1)
bfc1eaa6:	67b1      	move	a1,s1
bfc1eaa8:	a783      	lbu	a0,3(a3)
bfc1eaaa:	6e00      	li	a2,0
bfc1eaac:	ea40      	jalr	v0
bfc1eaae:	6f19      	li	a3,25
bfc1eab0:	6b00      	li	v1,0
    {
        g_this_app_msg_hook(private_msg);
        return TRUE;
    }

    //消息队列已空，返回false
    return FALSE;
bfc1eab2:	2a05      	bnez	v0,bfc1eabe <.LBE2+0x1e>
bfc1eab4:	b408      	lw	a0,bfc1ead4 <.LBE2+0x34>
bfc1eab6:	9c40      	lw	v0,0(a0)
bfc1eab8:	ea40      	jalr	v0
bfc1eaba:	6791      	move	a0,s1
bfc1eabc:	6b01      	li	v1,1
bfc1eabe:	6743      	move	v0,v1
}
bfc1eac0:	6475      	restore	40,ra,s0-s1
bfc1eac2:	e8a0      	jrc	ra
bfc1eac4:	9990      	lw	a0,64(s1)
bfc1eac6:	9fc1      	lw	a2,4(a3)
bfc1eac8:	a0f4      	lbu	a3,20(s0)
bfc1eaca:	9fc1      	lw	a2,4(a3)
bfc1eacc:	e905      	break	8
bfc1eace:	bfc1      	lwu	a2,4(a3)
bfc1ead0:	e901      	sdbbp	8
bfc1ead2:	bfc1      	lwu	a2,4(a3)
bfc1ead4:	9984      	lw	a0,16(s1)
bfc1ead6:	9fc1      	lw	a2,4(a3)

bfc1ead8 <get_gui_msg>:
bfc1ead8:	f004 64f5 	save	a0,40,ra,s0-s1
 * \endcode
 * \note
 *******************************************************************************/
bool get_gui_msg(input_gui_msg_t *input_msg)
{
bfc1eadc:	b321      	lw	v1,bfc1eb60 <get_gui_msg+0x88>
    uint32 tmp_cur_ab_timer = sys_get_ab_timer();
bfc1eade:	6c00      	li	a0,0
bfc1eae0:	67a4      	move	a1,a0
bfc1eae2:	67c4      	move	a2,a0
bfc1eae4:	eb40      	jalr	v1
bfc1eae6:	6f1c      	li	a3,28
bfc1eae8:	b11f      	lw	s1,bfc1eb64 <get_gui_msg+0x8c>
    int key_cnt;
    bool ret;

    if (g_buffer_gui_msg.data.kmsg.val != KEY_NULL)
bfc1eaea:	d204      	sw	v0,16(sp)
bfc1eaec:	a101      	lbu	s0,1(s1)
bfc1eaee:	200a      	beqz	s0,bfc1eb04 <get_gui_msg+0x2c>
bfc1eaf0:	940a      	lw	a0,40(sp)
    {
        //缓冲消息，直接拷贝
        libc_memcpy(input_msg, &g_buffer_gui_msg, sizeof(input_gui_msg_t));
bfc1eaf2:	b21e      	lw	v0,bfc1eb68 <get_gui_msg+0x90>
bfc1eaf4:	67b1      	move	a1,s1
bfc1eaf6:	6e05      	li	a2,5
bfc1eaf8:	ea40      	jalr	v0
bfc1eafa:	6f00      	li	a3,0
bfc1eafc:	6a00      	li	v0,0
        g_buffer_gui_msg.data.kmsg.val = KEY_NULL;
bfc1eafe:	6d01      	li	a1,1
        return TRUE;
bfc1eb00:	c141      	sb	v0,1(s1)
bfc1eb02:	102b      	b	bfc1eb5a <get_gui_msg+0x82>
bfc1eb04:	b317      	lw	v1,bfc1eb60 <get_gui_msg+0x88>
    }

    key_cnt = sys_mq_traverse(MQ_ID_GUI, NULL, 0);
bfc1eb06:	6c06      	li	a0,6
bfc1eb08:	67b0      	move	a1,s0
bfc1eb0a:	67d0      	move	a2,s0
bfc1eb0c:	eb40      	jalr	v1
bfc1eb0e:	6f3f      	li	a3,63
bfc1eb10:	5201      	slti	v0,1
    if (key_cnt <= 0)
bfc1eb12:	6782      	move	a0,v0
bfc1eb14:	b316      	lw	v1,bfc1eb6c <get_gui_msg+0x94>
bfc1eb16:	600c      	bteqz	bfc1eb30 <get_gui_msg+0x58>
bfc1eb18:	abc3      	lhu	a2,6(v1)
    {
        if ((uint16) ((uint16) tmp_cur_ab_timer - g_key_infor.last_detect_timestamp) > 500)
bfc1eb1a:	9404      	lw	a0,16(sp)
bfc1eb1c:	e4d7      	subu	a1,a0,a2
bfc1eb1e:	ed31      	zeh	a1
bfc1eb20:	f1e0 5d15 	sltiu	a1,501
bfc1eb24:	6103      	btnez	bfc1eb2c <get_gui_msg+0x54>
bfc1eb26:	c30c      	sb	s0,12(v1)
        {
            g_key_infor.status = KEY_STATUS_NULL;
bfc1eb28:	c30a      	sb	s0,10(v1)
            g_key_infor.dck_flag = FALSE;
bfc1eb2a:	c309      	sb	s0,9(v1)
            g_key_infor.dck_fail = FALSE;
bfc1eb2c:	67b0      	move	a1,s0
        }
        return FALSE;
bfc1eb2e:	1015      	b	bfc1eb5a <get_gui_msg+0x82>
bfc1eb30:	67bd      	move	a1,sp
    }
    else
    {
        g_key_infor.last_detect_timestamp = (uint16) tmp_cur_ab_timer;
bfc1eb32:	a3ea      	lbu	a3,10(v1)
    }

    if (g_key_infor.dck_flag == TRUE)
bfc1eb34:	ad48      	lhu	v0,16(a1)
bfc1eb36:	7701      	cmpi	a3,1
bfc1eb38:	cb43      	sh	v0,6(v1)
bfc1eb3a:	6105      	btnez	bfc1eb46 <get_gui_msg+0x6e>
bfc1eb3c:	b20d      	lw	v0,bfc1eb70 <get_gui_msg+0x98>
    {
        if (com_need_cont_dck_deal((uint8) key_cnt) == FALSE)
bfc1eb3e:	ea40      	jalr	v0
bfc1eb40:	ec11      	zeb	a0
bfc1eb42:	67a2      	move	a1,v0
        {
            return FALSE;
bfc1eb44:	220a      	beqz	v0,bfc1eb5a <get_gui_msg+0x82>
bfc1eb46:	b20c      	lw	v0,bfc1eb74 <get_gui_msg+0x9c>
        }
    }

    if (com_phy_key_fsm(input_msg) == FALSE)
bfc1eb48:	ea40      	jalr	v0
bfc1eb4a:	940a      	lw	a0,40(sp)
bfc1eb4c:	67a2      	move	a1,v0
    {
        return FALSE;
bfc1eb4e:	2205      	beqz	v0,bfc1eb5a <get_gui_msg+0x82>
bfc1eb50:	b30a      	lw	v1,bfc1eb78 <get_gui_msg+0xa0>
    }

    //收到gui消息，表示有用户操作，进行一些系统处理，比如：
    //0.长按按键后过滤掉后续按键
    //1.背光关闭计时，屏幕保护计时，省电关机计时，返回正在播放计时 清0
    //2.按键音处理
    //3.按键锁处理
    ret = g_this_gui_msg_hook(input_msg);
bfc1eb52:	9b40      	lw	v0,0(v1)
bfc1eb54:	ea40      	jalr	v0
bfc1eb56:	940a      	lw	a0,40(sp)
bfc1eb58:	67a2      	move	a1,v0
bfc1eb5a:	6745      	move	v0,a1

    return ret;
}
bfc1eb5c:	6475      	restore	40,ra,s0-s1
bfc1eb5e:	e8a0      	jrc	ra
bfc1eb60:	e901      	sdbbp	8
bfc1eb62:	bfc1      	lwu	a2,4(a3)
bfc1eb64:	a0ec      	lbu	a3,12(s0)
bfc1eb66:	9fc1      	lw	a2,4(a3)
bfc1eb68:	e905      	break	8
bfc1eb6a:	bfc1      	lwu	a2,4(a3)
bfc1eb6c:	a1cc      	lbu	a2,12(s1)
bfc1eb6e:	9fc1      	lw	a2,4(a3)
bfc1eb70:	5871      	sltiu	s0,113
bfc1eb72:	484e      	addiu	s0,78
bfc1eb74:	58c9      	sltiu	s0,201
bfc1eb76:	484e      	addiu	s0,78
bfc1eb78:	9980      	lw	a0,0(s1)
bfc1eb7a:	9fc1      	lw	a2,4(a3)

bfc1eb7c <com_view_loop>:
bfc1eb7c:	64f7      	save	56,ra,s0-s1
    return result;
}

app_result_e com_view_loop(void)
{
bfc1eb7e:	b624      	lw	a2,bfc1ec0c <com_view_loop+0x90>
    app_result_e result = RESULT_NONE_EVENT;
    input_gui_msg_t gui_msg;
    private_msg_t pri_msg;

    //实时能量检测，动态更新DAE参数
#if (SUPPORT_DETECT_ENERGY == 1)
    if ((sys_comval->signal_energy_enable == 1)
bfc1eb80:	b424      	lw	a0,bfc1ec10 <com_view_loop+0x94>
bfc1eb82:	9ea0      	lw	a1,0(a2)
bfc1eb84:	b324      	lw	v1,bfc1ec14 <com_view_loop+0x98>
bfc1eb86:	9d50      	lw	v0,64(a1)
bfc1eb88:	6902      	li	s1,2
bfc1eb8a:	ea8c      	and	v0,a0
bfc1eb8c:	ea6e      	xor	v0,v1
bfc1eb8e:	2a06      	bnez	v0,bfc1eb9c <com_view_loop+0x20>
bfc1eb90:	b222      	lw	v0,bfc1ec18 <com_view_loop+0x9c>
bfc1eb92:	a2ea      	lbu	a3,10(v0)
bfc1eb94:	7701      	cmpi	a3,1
bfc1eb96:	6102      	btnez	bfc1eb9c <com_view_loop+0x20>
bfc1eb98:	b321      	lw	v1,bfc1ec1c <com_view_loop+0xa0>
            && (sys_comval->signal_variable_mode == 1)
            && (g_app_info_state_all.energy_available_flag == TRUE))
    {
        com_detect_energy_realtime();
bfc1eb9a:	ebc0      	jalrc	v1
bfc1eb9c:	b221      	lw	v0,bfc1ec1c <com_view_loop+0xa0>
    }
#endif

    if (get_gui_msg(&gui_msg) == TRUE)
bfc1eb9e:	ea40      	jalr	v0
bfc1eba0:	0404      	addiu	a0,sp,16
bfc1eba2:	7201      	cmpi	v0,1
bfc1eba4:	6103      	btnez	bfc1ebac <com_view_loop+0x30>
bfc1eba6:	b220      	lw	v0,bfc1ec24 <com_view_loop+0xa8>
    {
        result = com_view_loop_key(&gui_msg);
bfc1eba8:	0404      	addiu	a0,sp,16
bfc1ebaa:	1010      	b	bfc1ebcc <com_view_loop+0x50>
bfc1ebac:	0006      	addiu	s0,sp,24
    }
    else if (get_app_msg(&pri_msg) == TRUE)
bfc1ebae:	b21f      	lw	v0,bfc1ec28 <com_view_loop+0xac>
bfc1ebb0:	ea40      	jalr	v0
bfc1ebb2:	6790      	move	a0,s0
bfc1ebb4:	7201      	cmpi	v0,1
bfc1ebb6:	6105      	btnez	bfc1ebc2 <com_view_loop+0x46>
bfc1ebb8:	b11d      	lw	s1,bfc1ec2c <com_view_loop+0xb0>
    {
        result = com_view_loop_sys(&pri_msg, FALSE);
bfc1ebba:	6790      	move	a0,s0
bfc1ebbc:	e940      	jalr	s1
bfc1ebbe:	6d00      	li	a1,0
bfc1ebc0:	1006      	b	bfc1ebce <com_view_loop+0x52>
bfc1ebc2:	b51c      	lw	a1,bfc1ec30 <com_view_loop+0xb4>
    }
    else if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
bfc1ebc4:	a58c      	lbu	a0,12(a1)
bfc1ebc6:	2406      	beqz	a0,bfc1ebd4 <com_view_loop+0x58>
bfc1ebc8:	b21b      	lw	v0,bfc1ec34 <com_view_loop+0xb8>
    {
        result = com_btmanager_loop(FALSE);
bfc1ebca:	6c00      	li	a0,0
bfc1ebcc:	eac0      	jalrc	v0
bfc1ebce:	5a21      	sltiu	v0,33
    }
    else
    {
        ; //nothing for QAC
    }

    if (result > RESULT_COMMON_RESERVE)
bfc1ebd0:	6722      	move	s1,v0
bfc1ebd2:	6019      	bteqz	bfc1ec06 <com_view_loop+0x8a>
bfc1ebd4:	b619      	lw	a2,bfc1ec38 <com_view_loop+0xbc>
    {
        return result;
    }

    //软定时器扫描
    if (g_app_timer_count > 0)
bfc1ebd6:	a6a0      	lbu	a1,0(a2)
bfc1ebd8:	2504      	beqz	a1,bfc1ebe2 <com_view_loop+0x66>
bfc1ebda:	b719      	lw	a3,bfc1ec3c <com_view_loop+0xc0>
    {
        handle_timers(g_app_timer_vector, g_app_timer_count);
bfc1ebdc:	b319      	lw	v1,bfc1ec40 <com_view_loop+0xc4>
bfc1ebde:	eb40      	jalr	v1
bfc1ebe0:	9f80      	lw	a0,0(a3)
bfc1ebe2:	b419      	lw	a0,bfc1ec44 <com_view_loop+0xc8>
    }
    handle_timers(g_com_app_timer_vct, COM_APP_TIMER_MAX);
bfc1ebe4:	b317      	lw	v1,bfc1ec40 <com_view_loop+0xc4>
bfc1ebe6:	eb40      	jalr	v1
bfc1ebe8:	6d08      	li	a1,8
bfc1ebea:	b518      	lw	a1,bfc1ec48 <com_view_loop+0xcc>

    //DSP打印和中断打印代理打印
    //sys_dsp_print();

    if (g_keytone_infor.count > 0 || g_keytone_infor.thread_eixt == TRUE)
bfc1ebec:	b418      	lw	a0,bfc1ec4c <com_view_loop+0xd0>
bfc1ebee:	9d40      	lw	v0,0(a1)
bfc1ebf0:	ea8c      	and	v0,a0
bfc1ebf2:	2202      	beqz	v0,bfc1ebf8 <com_view_loop+0x7c>
bfc1ebf4:	b217      	lw	v0,bfc1ec50 <com_view_loop+0xd4>
    {
        keytone_play_deal();
bfc1ebf6:	eac0      	jalrc	v0
bfc1ebf8:	b317      	lw	v1,bfc1ec50 <com_view_loop+0xd4>
    }

    if ((g_tts_play_info.status != TTS_STATUS_IDLE) || (g_tts_play_info.count > 0))
bfc1ebfa:	a3c4      	lbu	a2,4(v1)
bfc1ebfc:	2e02      	bnez	a2,bfc1ec02 <com_view_loop+0x86>
bfc1ebfe:	a3e2      	lbu	a3,2(v1)
bfc1ec00:	2702      	beqz	a3,bfc1ec06 <com_view_loop+0x8a>
bfc1ec02:	b216      	lw	v0,bfc1ec58 <com_view_loop+0xdc>
    {
        com_tts_state_play_deal();
bfc1ec04:	eac0      	jalrc	v0
bfc1ec06:	6751      	move	v0,s1
    }

    return result;
}
bfc1ec08:	6477      	restore	56,ra,s0-s1
bfc1ec0a:	e8a0      	jrc	ra
bfc1ec0c:	999c      	lw	a0,112(s1)
bfc1ec0e:	9fc1      	lw	a2,4(a3)
bfc1ec10:	00ff      	addiu	s0,sp,1020
bfc1ec12:	00ff      	addiu	s0,sp,1020
bfc1ec14:	0001      	addiu	s0,sp,4
bfc1ec16:	0001      	addiu	s0,sp,4
bfc1ec18:	a094      	lbu	a0,20(s0)
bfc1ec1a:	9fc1      	lw	a2,4(a3)
bfc1ec1c:	0dc9      	la	a1,bfc1ef40 <radio_search_ke_maplist+0x38>
bfc1ec1e:	bfc1      	lwu	a2,4(a3)
bfc1ec20:	ead9      	multu	v0,a2
bfc1ec22:	bfc1      	lwu	a2,4(a3)
bfc1ec24:	5d49      	sltiu	a1,73
bfc1ec26:	4876      	addiu	s0,118
bfc1ec28:	ea75      	0xea75
bfc1ec2a:	bfc1      	lwu	a2,4(a3)
bfc1ec2c:	5e1d      	sltiu	a2,29
bfc1ec2e:	487a      	addiu	s0,122
bfc1ec30:	a080      	lbu	a0,0(s0)
bfc1ec32:	9fc1      	lw	a2,4(a3)
bfc1ec34:	0909      	la	s1,bfc1ec58 <com_view_loop+0xdc>
bfc1ec36:	bfc1      	lwu	a2,4(a3)
bfc1ec38:	9998      	lw	a0,96(s1)
bfc1ec3a:	9fc1      	lw	a2,4(a3)
bfc1ec3c:	9988      	lw	a0,32(s1)
bfc1ec3e:	9fc1      	lw	a2,4(a3)
bfc1ec40:	e925      	break	9
bfc1ec42:	bfc1      	lwu	a2,4(a3)
bfc1ec44:	a104      	lbu	s0,4(s1)
bfc1ec46:	9fc1      	lw	a2,4(a3)
bfc1ec48:	a234      	lbu	s1,20(v0)
bfc1ec4a:	9fc1      	lw	a2,4(a3)
bfc1ec4c:	00ff      	addiu	s0,sp,1020
bfc1ec4e:	0400      	addiu	a0,sp,0
bfc1ec50:	5c29      	sltiu	a0,41
bfc1ec52:	485a      	addiu	s0,90
bfc1ec54:	a1f4      	lbu	a3,20(s1)
bfc1ec56:	9fc1      	lw	a2,4(a3)
bfc1ec58:	5bfd      	sltiu	v1,253
bfc1ec5a:	483a      	addiu	s0,58

bfc1ec5c <com_view_update>:
bfc1ec5c:	64c3      	save	24,ra
}

//只有当前视图更新才有效
int __section__(".rcode") com_view_update(uint8 view_id)
{
bfc1ec5e:	b50d      	lw	a1,bfc1ec90 <com_view_update+0x34>
    view_infor_t *p_tmp_view_infor;

    if (g_view_manager_infor.top >= MVC_VIEW_DEEPTH)
bfc1ec60:	6a01      	li	v0,1
    {
        return -1;
bfc1ec62:	a560      	lbu	v1,0(a1)
bfc1ec64:	ec11      	zeb	a0
bfc1ec66:	5b03      	sltiu	v1,3
bfc1ec68:	ea4b      	neg	v0
bfc1ec6a:	600f      	bteqz	bfc1ec8a <com_view_update+0x2e>
bfc1ec6c:	b70a      	lw	a3,bfc1ec94 <com_view_update+0x38>
    }

    p_tmp_view_infor = &g_view_infor[g_view_manager_infor.top];
bfc1ec6e:	3370      	sll	v1,4
bfc1ec70:	e3ed      	addu	v1,a3
bfc1ec72:	a3c0      	lbu	a2,0(v1)
    if ((p_tmp_view_infor->id != view_id) && (p_tmp_view_infor->type == VIEW_TYPE_MSG))
bfc1ec74:	ee8e      	xor	a2,a0
bfc1ec76:	2605      	beqz	a2,bfc1ec82 <com_view_update+0x26>
bfc1ec78:	a341      	lbu	v0,1(v1)
bfc1ec7a:	6c01      	li	a0,1
    {
        return -1;
bfc1ec7c:	7202      	cmpi	v0,2
bfc1ec7e:	ea8b      	neg	v0,a0
bfc1ec80:	6004      	bteqz	bfc1ec8a <com_view_update+0x2e>
bfc1ec82:	9b43      	lw	v0,12(v1)
    }

    (p_tmp_view_infor->view_cb)(VIEW_UPDATE_STATUS);
bfc1ec84:	ea40      	jalr	v0
bfc1ec86:	6c03      	li	a0,3
bfc1ec88:	6a00      	li	v0,0

    return 0;
bfc1ec8a:	6443      	restore	24,ra
}
bfc1ec8c:	e8a0      	jrc	ra
bfc1ec8e:	0000      	addiu	s0,sp,0
bfc1ec90:	99dc      	lw	a2,112(s1)
bfc1ec92:	9fc1      	lw	a2,4(a3)
bfc1ec94:	99ac      	lw	a1,48(s1)
bfc1ec96:	9fc1      	lw	a2,4(a3)

bfc1ec98 <should_be_passed>:
bfc1ec98:	b508      	lw	a1,bfc1ecb8 <should_be_passed+0x20>
{ 76000, 85500, 91000, 96000, 104000, 108000 };

//是否应该被跳过的频点
bool should_be_passed(uint32 freq)
{
bfc1ec9a:	6b00      	li	v1,0
    //单位kHz(把各个波段都值都可以填到这里)
    //这里有些是方案产生的干扰频率，有些时FM芯片不能处理的频率
    uint8 n;

    for (n = 0; n < ARR_COUNT(freq_passed); n++)
bfc1ec9c:	3668      	sll	a2,v1,2
    {
        if (freq_passed[n] == freq)
bfc1ec9e:	e6a9      	addu	v0,a2,a1
bfc1eca0:	9a40      	lw	v0,0(v0)
bfc1eca2:	ea8e      	xor	v0,a0
bfc1eca4:	2207      	beqz	v0,bfc1ecb4 <should_be_passed+0x1c>
bfc1eca6:	43e1      	addiu	a3,v1,1
bfc1eca8:	6767      	move	v1,a3
bfc1ecaa:	eb11      	zeb	v1
bfc1ecac:	5b06      	sltiu	v1,6
bfc1ecae:	61f6      	btnez	bfc1ec9c <should_be_passed+0x4>
bfc1ecb0:	e820      	jr	ra
        {
            return TRUE;
        }
    }
    return FALSE;
}
bfc1ecb2:	6a00      	li	v0,0
bfc1ecb4:	e820      	jr	ra
bfc1ecb6:	4241      	addiu	v0,v0,1
bfc1ecb8:	ee08      	dsrl	s0,6
bfc1ecba:	bfc1      	lwu	a2,4(a3)

bfc1ecbc <whether_in_list>:
bfc1ecbc:	6b00      	li	v1,0

//判断指定频率是否在当前的保存列表中
//freq: 频率
//p_freq: 当前波段对应的预设电台的数组
//返回值: 当频率在数组中时，返回下标；否则返回0xff
uint8 whether_in_list(uint32 freq, uint32 *p_freq)
{
    uint8 ret;
    uint32 *ptr;
    uint8 num;
    uint32 tmp;

    /* 当前波段电台列表*/
    ptr = p_freq;

    for (num = 0; num < MAX_STATION_COUNT; num++)
bfc1ecbe:	1005      	b	bfc1ecca <whether_in_list+0xe>
bfc1ecc0:	4341      	addiu	v0,v1,1
bfc1ecc2:	6762      	move	v1,v0
bfc1ecc4:	eb11      	zeb	v1
bfc1ecc6:	5b28      	sltiu	v1,40
bfc1ecc8:	6005      	bteqz	bfc1ecd4 <whether_in_list+0x18>
bfc1ecca:	3768      	sll	a3,v1,2
    {
        tmp = *(ptr + num);
bfc1eccc:	e7b9      	addu	a2,a3,a1
bfc1ecce:	9e40      	lw	v0,0(a2)
bfc1ecd0:	ea8e      	xor	v0,a0
        if (tmp == freq)
bfc1ecd2:	2af6      	bnez	v0,bfc1ecc0 <whether_in_list+0x4>
bfc1ecd4:	7328      	cmpi	v1,40
        {
            //在列表中已找到
            break;
        }
    }

    //在列表中未找到
    if (num == MAX_STATION_COUNT)
bfc1ecd6:	6aff      	li	v0,255
    {
        ret = 0xff;
bfc1ecd8:	6002      	bteqz	bfc1ecde <whether_in_list+0x22>
bfc1ecda:	4341      	addiu	v0,v1,1
    }
    else
    {
        ret = num + 1;
bfc1ecdc:	ea11      	zeb	v0
bfc1ecde:	e8a0      	jrc	ra

bfc1ece0 <radio_send_sync_msg>:
    }
    return ret;
}
bfc1ece0:	f00e 64f7 	save	a0-a3,56,ra,s0-s1

int radio_send_sync_msg(uint8 app_id, msg_apps_t *msg, msg_reply_t *reply, uint32 timeout)
{
bfc1ece4:	6705      	move	s0,a1
bfc1ece6:	b52d      	lw	a1,bfc1ed98 <radio_send_sync_msg+0xb8>
    private_msg_t cur_send_pmsg;
    //msg_reply_t temp_reply;
    os_event_t *sem; //同步消息同步信号量指针
    int retvalue = ERR_NO_ERR;
    uint8 mq_id = MQ_ID_EGN;

    PRINT_DBG_INT("sync msg:", msg->type);

    //无限时等待信号量，同时只能有1个线程发送同步消息
    libc_sem_wait(thread_mutex, 0);
bfc1ece8:	6900      	li	s1,0
bfc1ecea:	9d80      	lw	a0,0(a1)
bfc1ecec:	b32c      	lw	v1,bfc1ed9c <radio_send_sync_msg+0xbc>
bfc1ecee:	67b1      	move	a1,s1
bfc1ecf0:	67d1      	move	a2,s1
bfc1ecf2:	eb40      	jalr	v1
bfc1ecf4:	6f14      	li	a3,20
bfc1ecf6:	b32a      	lw	v1,bfc1ed9c <radio_send_sync_msg+0xbc>

    //填充私有消息结构体
    libc_memcpy(&(cur_send_pmsg.msg), msg, sizeof(msg_apps_t));
bfc1ecf8:	67b0      	move	a1,s0
bfc1ecfa:	0404      	addiu	a0,sp,16
bfc1ecfc:	6e08      	li	a2,8
bfc1ecfe:	eb40      	jalr	v1
bfc1ed00:	67f1      	move	a3,s1
bfc1ed02:	b027      	lw	s0,bfc1ed9c <radio_send_sync_msg+0xbc>
    libc_sem_init(&sem, 0);
bfc1ed04:	0408      	addiu	a0,sp,32
bfc1ed06:	67b1      	move	a1,s1
bfc1ed08:	67d1      	move	a2,s1
bfc1ed0a:	e840      	jalr	s0
bfc1ed0c:	6f12      	li	a3,18
bfc1ed0e:	9408      	lw	a0,32(sp)
    cur_send_pmsg.sem = sem;
bfc1ed10:	9310      	lw	v1,64(sp)
    cur_send_pmsg.reply = reply;
bfc1ed12:	b224      	lw	v0,bfc1eda0 <radio_send_sync_msg+0xc0>

    //发送消息到队列中
    if (sys_mq_send((uint32) (mq_id), (void *) &cur_send_pmsg) < 0)
bfc1ed14:	d406      	sw	a0,24(sp)
bfc1ed16:	d307      	sw	v1,28(sp)
bfc1ed18:	6c02      	li	a0,2
bfc1ed1a:	0504      	addiu	a1,sp,16
bfc1ed1c:	67d1      	move	a2,s1
bfc1ed1e:	ea40      	jalr	v0
bfc1ed20:	6f18      	li	a3,24
bfc1ed22:	ea22      	slt	v0,s1
bfc1ed24:	6117      	btnez	bfc1ed54 <radio_send_sync_msg+0x74>
bfc1ed26:	9408      	lw	a0,32(sp)
    {
        //PRINT_ERR("sync msg ERR_MSGQUEUE_FULL!!");
        retvalue = ERR_MSGQUEUE_FULL;
    }
    else
    {
        //等待同步消息回应
        if (libc_sem_wait(sem, timeout) < 0)
bfc1ed28:	9511      	lw	a1,68(sp)
bfc1ed2a:	b01d      	lw	s0,bfc1ed9c <radio_send_sync_msg+0xbc>
bfc1ed2c:	67d1      	move	a2,s1
bfc1ed2e:	e840      	jalr	s0
bfc1ed30:	6f14      	li	a3,20
bfc1ed32:	5200      	slti	v0,0
bfc1ed34:	611f      	btnez	bfc1ed74 <radio_send_sync_msg+0x94>
bfc1ed36:	6d00      	li	a1,0
        {
            //PRINT_ERR("sync msg ERR_SYNC_TIMEOUT!!");
            retvalue = ERR_SYNC_TIMEOUT;
        }
    }

    libc_sem_destroy(&sem);
bfc1ed38:	b019      	lw	s0,bfc1ed9c <radio_send_sync_msg+0xbc>
bfc1ed3a:	0408      	addiu	a0,sp,32
bfc1ed3c:	67c5      	move	a2,a1
bfc1ed3e:	e840      	jalr	s0
bfc1ed40:	6f13      	li	a3,19
bfc1ed42:	b616      	lw	a2,bfc1ed98 <radio_send_sync_msg+0xb8>
    libc_sem_post(thread_mutex);
bfc1ed44:	6d00      	li	a1,0
bfc1ed46:	9e80      	lw	a0,0(a2)
bfc1ed48:	6f16      	li	a3,22
bfc1ed4a:	e840      	jalr	s0
bfc1ed4c:	67c5      	move	a2,a1
bfc1ed4e:	6751      	move	v0,s1

    PRINT_DBG_INT("sync msg ret:", msg->type);

    return retvalue;
}
bfc1ed50:	6477      	restore	56,ra,s0-s1
bfc1ed52:	e8a0      	jrc	ra
bfc1ed54:	6d00      	li	a1,0
bfc1ed56:	b012      	lw	s0,bfc1ed9c <radio_send_sync_msg+0xbc>
bfc1ed58:	0408      	addiu	a0,sp,32
bfc1ed5a:	67c5      	move	a2,a1
bfc1ed5c:	e840      	jalr	s0
bfc1ed5e:	6f13      	li	a3,19
bfc1ed60:	b60e      	lw	a2,bfc1ed98 <radio_send_sync_msg+0xb8>
bfc1ed62:	6d00      	li	a1,0
bfc1ed64:	9e80      	lw	a0,0(a2)
bfc1ed66:	412e      	addiu	s1,s1,-2
bfc1ed68:	67c5      	move	a2,a1
bfc1ed6a:	e840      	jalr	s0
bfc1ed6c:	6f16      	li	a3,22
bfc1ed6e:	6751      	move	v0,s1
bfc1ed70:	6477      	restore	56,ra,s0-s1
bfc1ed72:	e8a0      	jrc	ra
bfc1ed74:	6d00      	li	a1,0
bfc1ed76:	b00a      	lw	s0,bfc1ed9c <radio_send_sync_msg+0xbc>
bfc1ed78:	0408      	addiu	a0,sp,32
bfc1ed7a:	67c5      	move	a2,a1
bfc1ed7c:	e840      	jalr	s0
bfc1ed7e:	6f13      	li	a3,19
bfc1ed80:	b606      	lw	a2,bfc1ed98 <radio_send_sync_msg+0xb8>
bfc1ed82:	6d00      	li	a1,0
bfc1ed84:	9e80      	lw	a0,0(a2)
bfc1ed86:	6904      	li	s1,4
bfc1ed88:	e92b      	neg	s1
bfc1ed8a:	67c5      	move	a2,a1
bfc1ed8c:	e840      	jalr	s0
bfc1ed8e:	6f16      	li	a3,22
bfc1ed90:	6751      	move	v0,s1
bfc1ed92:	6477      	restore	56,ra,s0-s1
bfc1ed94:	e8a0      	jrc	ra
bfc1ed96:	0000      	addiu	s0,sp,0
bfc1ed98:	9994      	lw	a0,80(s1)
bfc1ed9a:	9fc1      	lw	a2,4(a3)
bfc1ed9c:	e905      	break	8
bfc1ed9e:	bfc1      	lwu	a2,4(a3)
bfc1eda0:	e901      	sdbbp	8
bfc1eda2:	bfc1      	lwu	a2,4(a3)

bfc1eda4 <radio_send_msg>:
bfc1eda4:	64c5      	save	40,ra

bool radio_send_msg(void *input_param, void *output_param, uint32 msg_type)
{
bfc1eda6:	b20a      	lw	v0,bfc1edcc <radio_send_msg+0x28>
    bool bret = TRUE;
    msg_apps_t msg;
    //返回消息内容存放变量
    msg_reply_t reply;

    //存放输入参数的地址
    msg.content.addr = input_param;

    //存放获取参数的地址
    reply.content = output_param;

    //消息类型(即消息名称)
    msg.type = msg_type;

    //发送同步消息
    bret = (bool) (radio_send_sync_msg(APP_ID_FMENGINE, &msg, &reply, 0) == ERR_NO_ERR);
bfc1eda8:	d405      	sw	a0,20(sp)
bfc1edaa:	d507      	sw	a1,28(sp)
bfc1edac:	d604      	sw	a2,16(sp)
bfc1edae:	6c12      	li	a0,18
bfc1edb0:	0504      	addiu	a1,sp,16
bfc1edb2:	0606      	addiu	a2,sp,24
bfc1edb4:	ea40      	jalr	v0
bfc1edb6:	6f00      	li	a3,0
bfc1edb8:	679d      	move	a0,sp

    if (reply.type == MSG_REPLY_FAILED)
bfc1edba:	5a01      	sltiu	v0,1
bfc1edbc:	a458      	lbu	v0,24(a0)
bfc1edbe:	6778      	move	v1,t8
bfc1edc0:	7202      	cmpi	v0,2
bfc1edc2:	6101      	btnez	bfc1edc6 <radio_send_msg+0x22>
bfc1edc4:	6b00      	li	v1,0
    {
        bret = FALSE;
bfc1edc6:	6743      	move	v0,v1
    }
    return bret;
}
bfc1edc8:	6445      	restore	40,ra
bfc1edca:	e8a0      	jrc	ra
bfc1edcc:	ece1      	sdbbp	39
bfc1edce:	bfc1      	lwu	a2,4(a3)

bfc1edd0 <radio_get_freq>:
bfc1edd0:	64c3      	save	24,ra

//获取当前频率
bool radio_get_freq(void)
{
bfc1edd2:	b505      	lw	a1,bfc1ede4 <radio_get_freq+0x14>
    return radio_send_msg(NULL, &g_engine_status.FM_CurrentFreq, MSG_FMENGINE_GET_FREQ);
bfc1edd4:	b205      	lw	v0,bfc1ede8 <radio_get_freq+0x18>
bfc1edd6:	f300 6e12 	li	a2,786
bfc1edda:	ea40      	jalr	v0
bfc1eddc:	6c00      	li	a0,0
bfc1edde:	6443      	restore	24,ra
}
bfc1ede0:	e8a0      	jrc	ra
bfc1ede2:	0000      	addiu	s0,sp,0
bfc1ede4:	9d4c      	lw	v0,48(a1)
bfc1ede6:	9fc1      	lw	a2,4(a3)
bfc1ede8:	eda5      	break	45
bfc1edea:	bfc1      	lwu	a2,4(a3)

bfc1edec <release_mute_timer>:
bfc1edec:	64c3      	save	24,ra

//解除静音
void release_mute_timer(void)
{
bfc1edee:	b205      	lw	v0,bfc1ee00 <release_mute_timer+0x14>
    //解除静音
    radio_set_mute(releaseMUTE);
bfc1edf0:	ea40      	jalr	v0
bfc1edf2:	6c00      	li	a0,0
bfc1edf4:	b204      	lw	v0,bfc1ee04 <release_mute_timer+0x18>
    g_mute_set_timer = -1;
bfc1edf6:	6b01      	li	v1,1
bfc1edf8:	eb6b      	neg	v1
bfc1edfa:	c260      	sb	v1,0(v0)
bfc1edfc:	6443      	restore	24,ra
bfc1edfe:	e8a0      	jrc	ra
bfc1ee00:	0301      	addiu	v1,sp,4
bfc1ee02:	4002      	addiu	s0,s0,2
bfc1ee04:	9f29      	lw	s1,36(a3)
bfc1ee06:	9fc1      	lw	a2,4(a3)

bfc1ee08 <freq_passed>:
bfc1ee08:	28e0 0001 4dfc 0001 6378 0001 7700 0001     .(...M..xc...w..
bfc1ee18:	9640 0001 a5e0 0001                         @.......

bfc1ee20 <min_freq>:
bfc1ee20:	55cc 0001 28e0 0001 55cc 0001               .U...(...U..

bfc1ee2c <max_freq>:
bfc1ee2c:	a5e0 0001 5f90 0001 a5e0 0001               ....._......

bfc1ee38 <radio_rcp_cmd_cb_tbl>:
bfc1ee38:	2053 0000 02b5 402a 2153 0000 02f9 402a     S ....*@S!....*@
bfc1ee48:	0051 0000 ef51 bfc1 2051 0000 0231 402a     Q...Q...Q ..1.*@
bfc1ee58:	2151 0000 02b1 402a 2343 0000 0385 402a     Q!....*@C#....*@
bfc1ee68:	2443 0000 03a9 402a 2543 0000 03cd 402a     C$....*@C%....*@
bfc1ee78:	2643 0000 03fd 402a 2743 0000 042d 402a     C&....*@C'..-.*@
	...

bfc1ee90 <radio_play_ke_maplist>:
bfc1ee90:	000e 0002 0401 4012 0003 0002 0401 4012     .......@.......@
bfc1eea0:	000f 0002 03dd 4012 0002 0002 03dd 4012     .......@.......@
bfc1eeb0:	0003 010c 0201 4012 0002 010c 0215 4012     .......@.......@
bfc1eec0:	0001 0002 0579 4012 0001 0002 0579 4012     ....y..@....y..@
bfc1eed0:	0009 0002 02f9 4016 000a 0002 02bd 4012     .......@.......@
bfc1eee0:	001a 0003 0391 4016 0000 0000 0000 0000     .......@........

bfc1eef0 <radio_digit_ke_maplist>:
bfc1eef0:	001a 0003 0269 400e 0001 0002 0285 400e     ....i..@.......@
	...

bfc1ef08 <radio_search_ke_maplist>:
bfc1ef08:	0003 013f 032d 400e 0002 013f 032d 400e     ..?.-..@..?.-..@
bfc1ef18:	000e 013f 032d 400e 000f 013f 032d 400e     ..?.-..@..?.-..@
bfc1ef28:	0001 013f 032d 400e 001f 013f 032d 400e     ..?.-..@..?.-..@
bfc1ef38:	0005 013f 032d 400e 0006 013f 032d 400e     ..?.-..@..?.-..@
	...

bfc1ef50 <radio_get_global_rcp_info>:
bfc1ef50:	64ea      	save	80,ra,s0
}

/*RCP获取全局信息结构体*/
app_result_e __section__(".rcode") radio_get_global_rcp_info(uint32 data1, uint32 data2)
{
bfc1ef52:	000a      	addiu	s0,sp,40
    uint8 tmp_radio_global_rcp_info[sizeof(radio_global_rcp_info_t) + RCP_COMMAND_HEAD_SIZE];
    radio_global_rcp_info_t * p_radio_global_rcp_info = (radio_global_rcp_info_t *) (tmp_radio_global_rcp_info
bfc1ef54:	b219      	lw	v0,bfc1efb8 <radio_get_global_rcp_info+0x68>
            + RCP_COMMAND_HEAD_SIZE);
    uint8 is_station;

    libc_memset(p_radio_global_rcp_info, 0x00, sizeof(radio_global_rcp_info_t));
bfc1ef56:	6d00      	li	a1,0
bfc1ef58:	6e20      	li	a2,32
bfc1ef5a:	6f01      	li	a3,1
bfc1ef5c:	ea40      	jalr	v0
bfc1ef5e:	6790      	move	a0,s0
bfc1ef60:	b217      	lw	v0,bfc1efbc <radio_get_global_rcp_info+0x6c>

    //获取公共信息
    com_get_com_info(&(p_radio_global_rcp_info->com_info));
bfc1ef62:	ea40      	jalr	v0
bfc1ef64:	6790      	move	a0,s0
bfc1ef66:	b417      	lw	a0,bfc1efc0 <radio_get_global_rcp_info+0x70>
    //获取APP信息
    p_radio_global_rcp_info->app_info.searching = g_searching_flag;
bfc1ef68:	b517      	lw	a1,bfc1efc4 <radio_get_global_rcp_info+0x74>
    p_radio_global_rcp_info->app_info.mute = !g_playing_flag;
bfc1ef6a:	a4c0      	lbu	a2,0(a0)
bfc1ef6c:	679d      	move	a0,sp
bfc1ef6e:	f040 c4c0 	sb	a2,64(a0)
bfc1ef72:	a560      	lbu	v1,0(a1)
bfc1ef74:	b715      	lw	a3,bfc1efc8 <radio_get_global_rcp_info+0x78>
    p_radio_global_rcp_info->app_info.band = g_radio_config.band_mode;
bfc1ef76:	5b01      	sltiu	v1,1
bfc1ef78:	6758      	move	v0,t8
bfc1ef7a:	f040 c441 	sb	v0,65(a0)
bfc1ef7e:	f200 a7c4 	lbu	a2,516(a3)
bfc1ef82:	b513      	lw	a1,bfc1efcc <radio_get_global_rcp_info+0x7c>

    p_radio_global_rcp_info->app_info.freq = g_engine_status.FM_CurrentFreq;/*该变量必须保证跟引擎实际频点一致*/
bfc1ef84:	f040 c4c3 	sb	a2,67(a0)
bfc1ef88:	b312      	lw	v1,bfc1efd0 <radio_get_global_rcp_info+0x80>

    is_station = whether_in_list(g_engine_status.FM_CurrentFreq, pfreq);
bfc1ef8a:	9d80      	lw	a0,0(a1)
bfc1ef8c:	b212      	lw	v0,bfc1efd4 <radio_get_global_rcp_info+0x84>
bfc1ef8e:	9ba0      	lw	a1,0(v1)
bfc1ef90:	ea40      	jalr	v0
bfc1ef92:	d411      	sw	a0,68(sp)
bfc1ef94:	72ff      	cmpi	v0,255
    p_radio_global_rcp_info->app_info.is_station = (uint8) (is_station != 0xff);
bfc1ef96:	6b00      	li	v1,0
bfc1ef98:	6001      	bteqz	bfc1ef9c <radio_get_global_rcp_info+0x4c>
bfc1ef9a:	6b01      	li	v1,1
bfc1ef9c:	67fd      	move	a3,sp
bfc1ef9e:	f040 c762 	sb	v1,66(a3)
bfc1efa2:	6c00      	li	a0,0

    com_rcp_send_pkg(0, 0, tmp_radio_global_rcp_info, sizeof(radio_global_rcp_info_t),
bfc1efa4:	6f20      	li	a3,32
bfc1efa6:	b30d      	lw	v1,bfc1efd8 <radio_get_global_rcp_info+0x88>
bfc1efa8:	d704      	sw	a3,16(sp)
bfc1efaa:	67a4      	move	a1,a0
bfc1efac:	eb40      	jalr	v1
bfc1efae:	0606      	addiu	a2,sp,24
bfc1efb0:	6a00      	li	v0,0
            sizeof(radio_global_rcp_info_t));

    return RESULT_NULL;
}
bfc1efb2:	646a      	restore	80,ra,s0
bfc1efb4:	e8a0      	jrc	ra
bfc1efb6:	0000      	addiu	s0,sp,0
bfc1efb8:	e905      	break	8
bfc1efba:	bfc1      	lwu	a2,4(a3)
bfc1efbc:	0c49      	la	a0,bfc1f0e0 <radio_get_global_rcp_info+0x190>
bfc1efbe:	bfc1      	lwu	a2,4(a3)
bfc1efc0:	9f25      	lw	s1,20(a3)
bfc1efc2:	9fc1      	lw	a2,4(a3)
bfc1efc4:	9f24      	lw	s1,16(a3)
bfc1efc6:	9fc1      	lw	a2,4(a3)
bfc1efc8:	9a9c      	lw	a0,112(v0)
bfc1efca:	9fc1      	lw	a2,4(a3)
bfc1efcc:	9d4c      	lw	v0,48(a1)
bfc1efce:	9fc1      	lw	a2,4(a3)
bfc1efd0:	9ca8      	lw	a1,32(a0)
bfc1efd2:	9fc1      	lw	a2,4(a3)
bfc1efd4:	ecbd      	dmultu	a0,a1
bfc1efd6:	bfc1      	lwu	a2,4(a3)
bfc1efd8:	5f29      	sltiu	a3,41
bfc1efda:	482a      	addiu	s0,42
	...
Disassembly of section BANK_CONTROL_1_0:

40020200 <process_start>:
40020200:	64d4      	save	32,ra,s1
40020202:	0104      	addiu	s1,sp,16
40020204:	d984      	sw	a0,16(s1)
40020206:	9944      	lw	v0,16(s1)
40020208:	6782      	move	a0,v0
4002020a:	6d00      	li	a1,0
4002020c:	b207      	lw	v0,40020228 <BANK_CONTROL_1_ADDR_BASE+0x28>
4002020e:	eac0      	jalrc	v0
40020210:	c140      	sb	v0,0(s1)
40020212:	8140      	lb	v0,0(s1)
40020214:	6782      	move	a0,v0
40020216:	6d00      	li	a1,0
40020218:	6e00      	li	a2,0
4002021a:	6f0e      	li	a3,14
4002021c:	b204      	lw	v0,4002022c <BANK_CONTROL_1_ADDR_BASE+0x2c>
4002021e:	eac0      	jalrc	v0
40020220:	6a00      	li	v0,0
40020222:	65b9      	move	sp,s1
40020224:	6452      	restore	16,ra,s1
40020226:	e8a0      	jrc	ra
40020228:	0505      	addiu	a1,sp,20
4002022a:	4006      	addiu	s0,s0,6
4002022c:	e905      	break	8
4002022e:	bfc1      	lwu	a2,4(a3)

40020230 <__start>:
40020230:	64d6      	save	48,ra,s1
40020232:	0104      	addiu	s1,sp,16
40020234:	d988      	sw	a0,32(s1)
40020236:	d9a9      	sw	a1,36(s1)
40020238:	6c00      	li	a0,0
4002023a:	6d00      	li	a1,0
4002023c:	6e00      	li	a2,0
4002023e:	6f10      	li	a3,16
40020240:	b220      	lw	v0,400202c0 <__start+0x90>
40020242:	eac0      	jalrc	v0
40020244:	c150      	sb	v0,16(s1)
40020246:	8170      	lb	v1,16(s1)
40020248:	6a01      	li	v0,1
4002024a:	ea4b      	neg	v0
4002024c:	ea6e      	xor	v0,v1
4002024e:	5a01      	sltiu	v0,1
40020250:	6004      	bteqz	4002025a <__start+0x2a>
40020252:	6a01      	li	v0,1
40020254:	ea4b      	neg	v0
40020256:	d945      	sw	v0,20(s1)
40020258:	102e      	b	400202b6 <__start+0x86>
4002025a:	b21b      	lw	v0,400202c4 <__start+0x94>
4002025c:	d940      	sw	v0,0(s1)
4002025e:	9948      	lw	v0,32(s1)
40020260:	d941      	sw	v0,4(s1)
40020262:	9949      	lw	v0,36(s1)
40020264:	9a41      	lw	v0,4(v0)
40020266:	d942      	sw	v0,8(s1)
40020268:	9949      	lw	v0,36(s1)
4002026a:	aa41      	lhu	v0,2(v0)
4002026c:	c946      	sh	v0,12(s1)
4002026e:	6c00      	li	a0,0
40020270:	6d00      	li	a1,0
40020272:	6e00      	li	a2,0
40020274:	6f33      	li	a3,51
40020276:	b215      	lw	v0,400202c8 <__start+0x98>
40020278:	eac0      	jalrc	v0
4002027a:	9949      	lw	v0,36(s1)
4002027c:	aa40      	lhu	v0,0(v0)
4002027e:	8170      	lb	v1,16(s1)
40020280:	6791      	move	a0,s1
40020282:	67a2      	move	a1,v0
40020284:	67c3      	move	a2,v1
40020286:	6f4a      	li	a3,74
40020288:	b210      	lw	v0,400202c8 <__start+0x98>
4002028a:	eac0      	jalrc	v0
4002028c:	5200      	slti	v0,0
4002028e:	6011      	bteqz	400202b2 <__start+0x82>
40020290:	8150      	lb	v0,16(s1)
40020292:	6782      	move	a0,v0
40020294:	6d00      	li	a1,0
40020296:	6e00      	li	a2,0
40020298:	6f11      	li	a3,17
4002029a:	b20a      	lw	v0,400202c0 <__start+0x90>
4002029c:	eac0      	jalrc	v0
4002029e:	6c00      	li	a0,0
400202a0:	6d00      	li	a1,0
400202a2:	6e00      	li	a2,0
400202a4:	6f34      	li	a3,52
400202a6:	b209      	lw	v0,400202c8 <__start+0x98>
400202a8:	eac0      	jalrc	v0
400202aa:	6a01      	li	v0,1
400202ac:	ea4b      	neg	v0
400202ae:	d945      	sw	v0,20(s1)
400202b0:	1002      	b	400202b6 <__start+0x86>
400202b2:	6a00      	li	v0,0
400202b4:	d945      	sw	v0,20(s1)
400202b6:	9945      	lw	v0,20(s1)
400202b8:	65b9      	move	sp,s1
400202ba:	6454      	restore	32,ra,s1
400202bc:	e8a0      	jrc	ra
400202be:	0000      	addiu	s0,sp,0
400202c0:	e905      	break	8
400202c2:	bfc1      	lwu	a2,4(a3)
400202c4:	0201      	addiu	v0,sp,4
400202c6:	4002      	addiu	s0,s0,2
400202c8:	e901      	sdbbp	8
400202ca:	bfc1      	lwu	a2,4(a3)

400202cc <radio_modul_open>:
400202cc:	64c3      	save	24,ra

//FM初始化
//band_mode: 波段
bool radio_modul_open(uint8 band_mode)
{
400202ce:	677d      	move	v1,sp
400202d0:	b205      	lw	v0,400202e4 <radio_modul_open+0x18>
    return radio_send_msg(&band_mode, NULL, MSG_FM_MODE_OPEN);
400202d2:	c398      	sb	a0,24(v1)
400202d4:	6d00      	li	a1,0
400202d6:	f300 6e02 	li	a2,770
400202da:	ea40      	jalr	v0
400202dc:	0406      	addiu	a0,sp,24
400202de:	6443      	restore	24,ra
}
400202e0:	e8a0      	jrc	ra
400202e2:	0000      	addiu	s0,sp,0
400202e4:	eda5      	break	45
400202e6:	bfc1      	lwu	a2,4(a3)

400202e8 <radio_connect_ain>:
400202e8:	64c3      	save	24,ra

//打开主控的通路
bool radio_connect_ain(void)
{
400202ea:	6c00      	li	a0,0
    return radio_send_msg(NULL, NULL, MSG_FM_AIN_OPEN);
400202ec:	b204      	lw	v0,400202fc <radio_connect_ain+0x14>
400202ee:	f300 6e03 	li	a2,771
400202f2:	ea40      	jalr	v0
400202f4:	67a4      	move	a1,a0
400202f6:	6443      	restore	24,ra
}
400202f8:	e8a0      	jrc	ra
400202fa:	0000      	addiu	s0,sp,0
400202fc:	eda5      	break	45
400202fe:	bfc1      	lwu	a2,4(a3)

40020300 <radio_set_mute>:
40020300:	64c3      	save	24,ra


int8 s_mute_count = 0; //这里不考虑溢出的情况，因为调用方会保证
//freq单位kHz
bool radio_set_freq(uint32 freq)
{
    bool bret = TRUE;
    
    //解除静音(上一次的定时器没有到，需要取消定时器，且releasemute 计数)
    //radio_set_mute(releaseMUTE);
    if (g_mute_set_timer != -1)
    {
        kill_app_timer(g_mute_set_timer);
        g_mute_set_timer = -1;
        //这里做了一定的妥协:如果不调mute直接调release,也使之能出声音
        if (s_mute_count > 0) 
        {
            s_mute_count--;
        }
    }

    //静音, 避免频率切换过程中的杂音
    radio_set_mute(SetMUTE);
    //send message
    bret = radio_send_msg(&freq, NULL, MSG_FMENGINE_SETFREQ_SYNC);

    if (g_mute_set_timer == -1)
    {
        g_mute_set_timer = set_single_shot_app_timer(APP_TIMER_ATTRB_CONTROL | (APP_TIMER_TAG_SYS << 8),
                150, release_mute_timer);

        if (g_mute_set_timer == -1)
        {
            sys_os_time_dly(15);
            //解除静音
            radio_set_mute(releaseMUTE);
        }
    }

    //当FM处于暂停时，切换频点后要play下，否则不能播放
    if (g_playing_flag == FALSE)
    {
        radio_set_mute(releaseMUTE);
        radio_send_msg(NULL, NULL, MSG_FMENGINE_PLAY);
        g_playing_flag = TRUE;
    }

    //for RCP, 同步电台频点
    radio_get_freq();

    return bret;
}

//静音或解除静音
//  (这里用的是计数器)
bool radio_set_mute(FM_MUTE_e mode)
{
40020302:	ec11      	zeb	a0
40020304:	675d      	move	v0,sp
40020306:	7401      	cmpi	a0,1
    //调用mute的次数
    //static int8 s_mute_count = 0; //这里不考虑溢出的情况，因为调用方会保证

    if (mode == SetMUTE)
40020308:	c298      	sb	a0,24(v0)
4002030a:	6106      	btnez	40020318 <radio_set_mute+0x18>
4002030c:	b311      	lw	v1,40020350 <radio_set_mute+0x50>
    {
        if (s_mute_count == 0)
4002030e:	a340      	lbu	v0,0(v1)
40020310:	2a18      	bnez	v0,40020342 <radio_set_mute+0x42>
40020312:	4281      	addiu	a0,v0,1
        {
            s_mute_count++;
40020314:	c380      	sb	a0,0(v1)
40020316:	100b      	b	4002032e <radio_set_mute+0x2e>
40020318:	b40e      	lw	a0,40020350 <radio_set_mute+0x50>
        }
        else
        {
            s_mute_count++;
            return TRUE;
        }
    }
    else
    {
        if (s_mute_count > 0) //这里做了一定的妥协:如果不调mute直接调release,也使之能出声音
4002031a:	a460      	lbu	v1,0(a0)
4002031c:	6743      	move	v0,v1
4002031e:	ea91      	seb	v0
40020320:	5201      	slti	v0,1
40020322:	6103      	btnez	4002032a <radio_set_mute+0x2a>
40020324:	434f      	addiu	v0,v1,-1
        {
            s_mute_count--;
40020326:	c440      	sb	v0,0(a0)
40020328:	ea91      	seb	v0
4002032a:	6b01      	li	v1,1
        }
        if (s_mute_count == 0)
        {
        }
        else
        {
            return TRUE;
4002032c:	2a07      	bnez	v0,4002033c <radio_set_mute+0x3c>
4002032e:	b20a      	lw	v0,40020354 <radio_set_mute+0x54>
        }
    }

    return radio_send_msg(&mode, NULL, MSG_FMENGINE_SETMUTE);
40020330:	0406      	addiu	a0,sp,24
40020332:	f300 6e09 	li	a2,777
40020336:	ea40      	jalr	v0
40020338:	6d00      	li	a1,0
4002033a:	6762      	move	v1,v0
4002033c:	6743      	move	v0,v1
}
4002033e:	6443      	restore	24,ra
40020340:	e8a0      	jrc	ra
40020342:	42a1      	addiu	a1,v0,1
40020344:	c3a0      	sb	a1,0(v1)
40020346:	6b01      	li	v1,1
40020348:	6743      	move	v0,v1
4002034a:	6443      	restore	24,ra
4002034c:	e8a0      	jrc	ra
4002034e:	0000      	addiu	s0,sp,0
40020350:	9f28      	lw	s1,32(a3)
40020352:	9fc1      	lw	a2,4(a3)
40020354:	eda5      	break	45
40020356:	bfc1      	lwu	a2,4(a3)

40020358 <radio_set_freq>:
40020358:	64f5      	save	40,ra,s0-s1
4002035a:	b02d      	lw	s0,4002040c <radio_set_freq+0xb4>
4002035c:	d40a      	sw	a0,40(sp)
4002035e:	8080      	lb	a0,0(s0)
40020360:	ea8f      	not	v0,a0
40020362:	2a16      	bnez	v0,40020390 <radio_set_freq+0x38>
40020364:	b12d      	lw	s1,40020418 <radio_set_freq+0xc0>
40020366:	e940      	jalr	s1
40020368:	6c01      	li	a0,1
4002036a:	b02d      	lw	s0,4002041c <radio_set_freq+0xc4>
4002036c:	040a      	addiu	a0,sp,40
4002036e:	f300 6e08 	li	a2,776
40020372:	e840      	jalr	s0
40020374:	6d00      	li	a1,0
40020376:	b026      	lw	s0,4002040c <radio_set_freq+0xb4>
40020378:	d204      	sw	v0,16(sp)
4002037a:	8040      	lb	v0,0(s0)
4002037c:	ef4f      	not	a3,v0
4002037e:	2723      	beqz	a3,400203c6 <radio_set_freq+0x6e>
40020380:	b12b      	lw	s1,4002042c <radio_set_freq+0xd4>
40020382:	a100      	lbu	s0,0(s1)
40020384:	2032      	beqz	s0,400203ea <radio_set_freq+0x92>
40020386:	b22b      	lw	v0,40020430 <radio_set_freq+0xd8>
40020388:	eac0      	jalrc	v0
4002038a:	9204      	lw	v0,16(sp)
4002038c:	6475      	restore	40,ra,s0-s1
4002038e:	e8a0      	jrc	ra
40020390:	b120      	lw	s1,4002040c <radio_set_freq+0xb4>
40020392:	e9c0      	jalrc	s1
40020394:	6c01      	li	a0,1
40020396:	eb8b      	neg	v1,a0
40020398:	b41f      	lw	a0,40020414 <radio_set_freq+0xbc>
4002039a:	c060      	sb	v1,0(s0)
4002039c:	a460      	lbu	v1,0(a0)
4002039e:	67a3      	move	a1,v1
400203a0:	ed91      	seb	a1
400203a2:	5501      	slti	a1,1
400203a4:	61df      	btnez	40020364 <radio_set_freq+0xc>
400203a6:	43cf      	addiu	a2,v1,-1
400203a8:	b11c      	lw	s1,40020418 <radio_set_freq+0xc0>
400203aa:	c4c0      	sb	a2,0(a0)
400203ac:	e940      	jalr	s1
400203ae:	6c01      	li	a0,1
400203b0:	b01b      	lw	s0,4002041c <radio_set_freq+0xc4>
400203b2:	040a      	addiu	a0,sp,40
400203b4:	f300 6e08 	li	a2,776
400203b8:	e840      	jalr	s0
400203ba:	6d00      	li	a1,0
400203bc:	b014      	lw	s0,4002040c <radio_set_freq+0xb4>
400203be:	d204      	sw	v0,16(sp)
400203c0:	8040      	lb	v0,0(s0)
400203c2:	ef4f      	not	a3,v0
400203c4:	2fdd      	bnez	a3,40020380 <radio_set_freq+0x28>
400203c6:	b617      	lw	a2,40020420 <radio_set_freq+0xc8>
400203c8:	b217      	lw	v0,40020424 <radio_set_freq+0xcc>
400203ca:	f71f 6c01 	li	a0,65281
400203ce:	ea40      	jalr	v0
400203d0:	6d96      	li	a1,150
400203d2:	ed4f      	not	a1,v0
400203d4:	c040      	sb	v0,0(s0)
400203d6:	2dd4      	bnez	a1,40020380 <radio_set_freq+0x28>
400203d8:	6d00      	li	a1,0
400203da:	b014      	lw	s0,40020428 <radio_set_freq+0xd0>
400203dc:	6c0f      	li	a0,15
400203de:	67c5      	move	a2,a1
400203e0:	e840      	jalr	s0
400203e2:	6f31      	li	a3,49
400203e4:	e940      	jalr	s1
400203e6:	6c00      	li	a0,0
400203e8:	17cb      	b	40020380 <radio_set_freq+0x28>
400203ea:	b20c      	lw	v0,40020418 <radio_set_freq+0xc0>
400203ec:	ea40      	jalr	v0
400203ee:	6790      	move	a0,s0
400203f0:	b20b      	lw	v0,4002041c <radio_set_freq+0xc4>
400203f2:	6790      	move	a0,s0
400203f4:	f300 6e19 	li	a2,793
400203f8:	ea40      	jalr	v0
400203fa:	67b0      	move	a1,s0
400203fc:	6b01      	li	v1,1
400203fe:	b20d      	lw	v0,40020430 <radio_set_freq+0xd8>
40020400:	ea40      	jalr	v0
40020402:	c160      	sb	v1,0(s1)
40020404:	9204      	lw	v0,16(sp)
40020406:	6475      	restore	40,ra,s0-s1
40020408:	e8a0      	jrc	ra
4002040a:	0000      	addiu	s0,sp,0
4002040c:	9f29      	lw	s1,36(a3)
4002040e:	9fc1      	lw	a2,4(a3)
40020410:	5b01      	sltiu	v1,1
40020412:	488e      	addiu	s0,-114
40020414:	9f28      	lw	s1,32(a3)
40020416:	9fc1      	lw	a2,4(a3)
40020418:	0301      	addiu	v1,sp,4
4002041a:	4002      	addiu	s0,s0,2
4002041c:	eda5      	break	45
4002041e:	bfc1      	lwu	a2,4(a3)
40020420:	eded      	or	a1,a3
40020422:	bfc1      	lwu	a2,4(a3)
40020424:	5931      	sltiu	s1,49
40020426:	488e      	addiu	s0,-114
40020428:	e901      	sdbbp	8
4002042a:	bfc1      	lwu	a2,4(a3)
4002042c:	9f24      	lw	s1,16(a3)
4002042e:	9fc1      	lw	a2,4(a3)
40020430:	edd1      	sew	a1
40020432:	bfc1      	lwu	a2,4(a3)

40020434 <radio_set_band>:
40020434:	64c3      	save	24,ra

//设置电台波段
bool radio_set_band(radio_band_e mode)
{
40020436:	677d      	move	v1,sp
40020438:	b205      	lw	v0,4002044c <radio_set_band+0x18>
    return radio_send_msg(&mode, NULL, MSG_FMENGINE_SETBAND);
4002043a:	c398      	sb	a0,24(v1)
4002043c:	6d00      	li	a1,0
4002043e:	f300 6e0a 	li	a2,778
40020442:	ea40      	jalr	v0
40020444:	0406      	addiu	a0,sp,24
40020446:	6443      	restore	24,ra
}
40020448:	e8a0      	jrc	ra
4002044a:	0000      	addiu	s0,sp,0
4002044c:	eda5      	break	45
4002044e:	bfc1      	lwu	a2,4(a3)

40020450 <radio_set_throd>:
40020450:	64c3      	save	24,ra

//设置搜台门限
//val: 级别(对应到驱动中的门限数组)
bool radio_set_throd(uint8 val)
{
40020452:	677d      	move	v1,sp
40020454:	b205      	lw	v0,40020468 <radio_set_throd+0x18>
    return radio_send_msg(&val, NULL, MSG_FMENGINE_SETTHRED);
40020456:	c398      	sb	a0,24(v1)
40020458:	6d00      	li	a1,0
4002045a:	f300 6e0b 	li	a2,779
4002045e:	ea40      	jalr	v0
40020460:	0406      	addiu	a0,sp,24
40020462:	6443      	restore	24,ra
}
40020464:	e8a0      	jrc	ra
40020466:	0000      	addiu	s0,sp,0
40020468:	eda5      	break	45
4002046a:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_CONTROL_1_1:

40060200 <get_start_freq>:
40060200:	b207      	lw	v0,4006021c <get_start_freq+0x1c>
uint32 get_start_freq(FM_SeekDir_e dir)
{
    uint32 start_freq;

    start_freq = start_border_freq[g_radio_config.band_mode][dir];
40060202:	ec11      	zeb	a0
40060204:	f200 a2e4 	lbu	a3,516(v0)
40060208:	b304      	lw	v1,40060218 <get_start_freq+0x18>
4006020a:	36e4      	sll	a2,a3,1
4006020c:	e695      	addu	a1,a2,a0
4006020e:	34a8      	sll	a0,a1,2
40060210:	e469      	addu	v0,a0,v1
40060212:	e820      	jr	ra

    return start_freq;
}
40060214:	9a40      	lw	v0,0(v0)
40060216:	0000      	addiu	s0,sp,0
40060218:	0754      	addiu	a3,sp,336
4006021a:	4006      	addiu	s0,s0,6
4006021c:	9a9c      	lw	a0,112(v0)
4006021e:	9fc1      	lw	a2,4(a3)

40060220 <get_end_freq>:
40060220:	b207      	lw	v0,4006023c <get_end_freq+0x1c>

//结束频率
uint32 get_end_freq(FM_SeekDir_e dir)
{
    uint32 stop_freq;
    //uint8 i;
    //获取结束频率
    //i = (dir & DIR_UP) >> 4;

    stop_freq = end_border_freq[g_radio_config.band_mode][dir];
40060222:	ec11      	zeb	a0
40060224:	f200 a2e4 	lbu	a3,516(v0)
40060228:	b304      	lw	v1,40060238 <get_end_freq+0x18>
4006022a:	36e4      	sll	a2,a3,1
4006022c:	e695      	addu	a1,a2,a0
4006022e:	34a8      	sll	a0,a1,2
40060230:	e469      	addu	v0,a0,v1
40060232:	e820      	jr	ra

    return stop_freq;
}
40060234:	9a40      	lw	v0,0(v0)
40060236:	0000      	addiu	s0,sp,0
40060238:	0774      	addiu	a3,sp,464
4006023a:	4006      	addiu	s0,s0,6
4006023c:	9a9c      	lw	a0,112(v0)
4006023e:	9fc1      	lw	a2,4(a3)

40060240 <init_point_freq>:
40060240:	b30b      	lw	v1,4006026c <init_point_freq+0x2c>

//初始化指向播放频率表的指针
void init_point_freq(void)
{
    /* 当前播放频段*/
    if (g_radio_config.band_mode == Band_Japan)
40060242:	f200 a344 	lbu	v0,516(v1)
40060246:	7201      	cmpi	v0,1
40060248:	6105      	btnez	40060254 <init_point_freq+0x14>
4006024a:	4b7f      	addiu	v1,127
    {
        pfreq = &g_radio_config.fmstation_jp[0];
4006024c:	b209      	lw	v0,40060270 <init_point_freq+0x30>
    }
    else if (g_radio_config.band_mode == Band_Europe)
    {
        pfreq = &g_radio_config.fmstation_eu[0];
4006024e:	4b25      	addiu	v1,37
40060250:	e820      	jr	ra
40060252:	da60      	sw	v1,0(v0)
40060254:	7202      	cmpi	v0,2
40060256:	6105      	btnez	40060262 <init_point_freq+0x22>
40060258:	b206      	lw	v0,40060270 <init_point_freq+0x30>
4006025a:	f140 4b04 	addiu	v1,324
4006025e:	e820      	jr	ra
40060260:	da60      	sw	v1,0(v0)
40060262:	b204      	lw	v0,40060270 <init_point_freq+0x30>
40060264:	4364      	addiu	v1,v1,4
    }
    else
    {
        pfreq = &g_radio_config.fmstation_us[0];
40060266:	e820      	jr	ra
40060268:	da60      	sw	v1,0(v0)
4006026a:	0000      	addiu	s0,sp,0
4006026c:	9a9c      	lw	a0,112(v0)
4006026e:	9fc1      	lw	a2,4(a3)
40060270:	9ca8      	lw	a1,32(a0)
40060272:	9fc1      	lw	a2,4(a3)

40060274 <radio_load_cfg>:
40060274:	64f4      	save	32,ra,s0-s1
    }
}

void radio_load_cfg(void)
{
40060276:	b426      	lw	a0,4006030c <radio_load_cfg+0x98>
    uint8 default_band;

    //系统变量获取
    com_setting_comval_init(&g_comval);
40060278:	b326      	lw	v1,40060310 <radio_load_cfg+0x9c>
4006027a:	ebc0      	jalrc	v1
4006027c:	b126      	lw	s1,40060310 <radio_load_cfg+0x9c>

    //获取radio 配置信息
    sys_vm_read(&g_radio_config, VM_AP_RADIO, sizeof(radio_config_t));
4006027e:	b527      	lw	a1,40060318 <radio_load_cfg+0xa4>
40060280:	b027      	lw	s0,4006031c <radio_load_cfg+0xa8>
40060282:	6791      	move	a0,s1
40060284:	f200 6e0c 	li	a2,524
40060288:	e840      	jalr	s0
4006028a:	6f12      	li	a3,18
4006028c:	a940      	lhu	v0,0(s1)

    if (g_radio_config.magic != VRAM_MAGIC(VM_AP_RADIO))
4006028e:	f5aa 7211 	cmpi	v0,21937
40060292:	6104      	btnez	4006029c <radio_load_cfg+0x28>
40060294:	b328      	lw	v1,40060334 <radio_load_cfg+0xc0>
    {
        g_radio_config.magic = VRAM_MAGIC(VM_AP_RADIO);

        //三个波段预设电台列表清零
        libc_memset(g_radio_config.fmstation_us, 0, MAX_STATION_COUNT * 2 * 3);

        default_band = (uint8) com_get_config_default(RADIO_AP_ID_BAND);
        g_radio_config.FMStatus.freq = min_freq[default_band];
        g_radio_config.FMStatus.station = 0;
        g_radio_config.FMStatus.station_count = 0;
        g_radio_config.band_mode = (radio_band_e) default_band; // Band_China_US
        g_radio_config.FMStatus_eu.freq = MIN_EU;
        g_radio_config.FMStatus_jp.freq = MIN_JP;
        g_radio_config.FMStatus_us.freq = MIN_US;

        //默认未进入voice 进程
        g_radio_config.enter_voice = NO_ERTER_VOICE;
        //默认搜台方式
        g_radio_config.seek_mode = (FM_SeekMode_e) com_get_config_default(RADIO_AP_ID_SEEKMODE);
        g_radio_config.hint_mode_cfg = (uint8) com_get_config_default(RADIO_AP_ID_HINT_MODE);

        sys_vm_write(&g_radio_config, VM_AP_RADIO, sizeof(g_radio_config));
    }

    /* 指针指向当前播放的频率表首*/
    init_point_freq();
40060296:	ebc0      	jalrc	v1
40060298:	6474      	restore	32,ra,s0-s1
4006029a:	e8a0      	jrc	ra
4006029c:	f5aa 6e11 	li	a2,21937
400602a0:	b220      	lw	v0,40060320 <radio_load_cfg+0xac>
400602a2:	c9c0      	sh	a2,0(s1)
400602a4:	4184      	addiu	a0,s1,4
400602a6:	6d00      	li	a1,0
400602a8:	6ef0      	li	a2,240
400602aa:	ea40      	jalr	v0
400602ac:	6f01      	li	a3,1
400602ae:	b31e      	lw	v1,40060324 <radio_load_cfg+0xb0>
400602b0:	eb40      	jalr	v1
400602b2:	6cd2      	li	a0,210
400602b4:	ea11      	zeb	v0
400602b6:	b41d      	lw	a0,40060328 <radio_load_cfg+0xb4>
400602b8:	3548      	sll	a1,v0,2
400602ba:	e58d      	addu	v1,a1,a0
400602bc:	9be0      	lw	a3,0(v1)
400602be:	b41c      	lw	a0,4006032c <radio_load_cfg+0xb8>
400602c0:	b61c      	lw	a2,40060330 <radio_load_cfg+0xbc>
400602c2:	6d00      	li	a1,0
400602c4:	b318      	lw	v1,40060324 <radio_load_cfg+0xb0>
400602c6:	f1e0 d9fc 	sw	a3,508(s1)
400602ca:	f200 c1a0 	sb	a1,512(s1)
400602ce:	f200 c1a1 	sb	a1,513(s1)
400602d2:	f1e0 d9cc 	sw	a2,492(s1)
400602d6:	f200 c1a5 	sb	a1,517(s1)
400602da:	f1e0 d994 	sw	a0,500(s1)
400602de:	f1e0 d984 	sw	a0,484(s1)
400602e2:	f200 c144 	sb	v0,516(s1)
400602e6:	eb40      	jalr	v1
400602e8:	6cd3      	li	a0,211
400602ea:	b30f      	lw	v1,40060324 <radio_load_cfg+0xb0>
400602ec:	f200 c146 	sb	v0,518(s1)
400602f0:	eb40      	jalr	v1
400602f2:	6cd4      	li	a0,212
400602f4:	b509      	lw	a1,40060318 <radio_load_cfg+0xa4>
400602f6:	6791      	move	a0,s1
400602f8:	f200 6e0c 	li	a2,524
400602fc:	f200 c147 	sb	v0,519(s1)
40060300:	e840      	jalr	s0
40060302:	6f13      	li	a3,19
40060304:	b30c      	lw	v1,40060334 <radio_load_cfg+0xc0>
40060306:	ebc0      	jalrc	v1
40060308:	6474      	restore	32,ra,s0-s1
4006030a:	e8a0      	jrc	ra
4006030c:	9d58      	lw	v0,96(a1)
4006030e:	9fc1      	lw	a2,4(a3)
40060310:	5801      	sltiu	s0,1
40060312:	4846      	addiu	s0,70
40060314:	9a9c      	lw	a0,112(v0)
40060316:	9fc1      	lw	a2,4(a3)
40060318:	0000      	addiu	s0,sp,0
4006031a:	0007      	addiu	s0,sp,28
4006031c:	e901      	sdbbp	8
4006031e:	bfc1      	lwu	a2,4(a3)
40060320:	e905      	break	8
40060322:	bfc1      	lwu	a2,4(a3)
40060324:	5ac5      	sltiu	v0,197
40060326:	4846      	addiu	s0,70
40060328:	ee20      	0xee20
4006032a:	bfc1      	lwu	a2,4(a3)
4006032c:	55cc      	slti	a1,204
4006032e:	0001      	addiu	s0,sp,4
40060330:	28e0      	bnez	s0,400602f2 <radio_load_cfg+0x7e>
40060332:	0001      	addiu	s0,sp,4
40060334:	0241      	addiu	v0,sp,260
40060336:	4006      	addiu	s0,s0,6

40060338 <radio_save_cfg>:
40060338:	64e3      	save	24,ra,s0
}

//保存配置信息
void radio_save_cfg(void)
{
4006033a:	b00a      	lw	s0,40060360 <radio_save_cfg+0x28>
    /*保存VM变量*/
    sys_vm_write(&g_comval, VM_AP_SETTING, sizeof(comval_t));
4006033c:	b407      	lw	a0,40060358 <radio_save_cfg+0x20>
4006033e:	b508      	lw	a1,4006035c <radio_save_cfg+0x24>
40060340:	f1a0 6e0c 	li	a2,428
40060344:	e840      	jalr	s0
40060346:	6f13      	li	a3,19
40060348:	b407      	lw	a0,40060364 <radio_save_cfg+0x2c>

    sys_vm_write(&g_radio_config, VM_AP_RADIO, sizeof(g_radio_config));
4006034a:	b508      	lw	a1,40060368 <radio_save_cfg+0x30>
4006034c:	f200 6e0c 	li	a2,524
40060350:	e840      	jalr	s0
40060352:	6f13      	li	a3,19
40060354:	6463      	restore	24,ra,s0
40060356:	e8a0      	jrc	ra
40060358:	9d58      	lw	v0,96(a1)
4006035a:	9fc1      	lw	a2,4(a3)
4006035c:	0000      	addiu	s0,sp,0
4006035e:	0002      	addiu	s0,sp,8
40060360:	e901      	sdbbp	8
40060362:	bfc1      	lwu	a2,4(a3)
40060364:	9a9c      	lw	a0,112(v0)
40060366:	9fc1      	lw	a2,4(a3)
40060368:	0000      	addiu	s0,sp,0
4006036a:	0007      	addiu	s0,sp,28

4006036c <radio_app_init>:
4006036c:	64c3      	save	24,ra
}

//应用初始化
bool radio_app_init(void)
{
4006036e:	1820 809d 	jal	40060274 <radio_load_cfg>
    //读取配置信息 (包括vm信息)
    radio_load_cfg();
40060372:	6500      	nop
40060374:	b210      	lw	v0,400603b4 <radio_app_init+0x48>

    //初始化applib库，前台AP
    applib_init(APP_ID_RADIO, APP_TYPE_GUI);
40060376:	6c04      	li	a0,4
40060378:	ea40      	jalr	v0
4006037a:	6d01      	li	a1,1
4006037c:	b40f      	lw	a0,400603b8 <radio_app_init+0x4c>

    //初始化软定时器
    init_app_timers(radio_app_timer_vector, COMMON_TIMER_COUNT + APP_TIMER_COUNT);
4006037e:	b210      	lw	v0,400603bc <radio_app_init+0x50>
40060380:	ea40      	jalr	v0
40060382:	6d06      	li	a1,6
40060384:	b20f      	lw	v0,400603c0 <radio_app_init+0x54>

    applib_message_init();
40060386:	eac0      	jalrc	v0
40060388:	b30f      	lw	v1,400603c0 <radio_app_init+0x54>

    //初始化系统软定时器
    sys_timer_init();
4006038a:	ebc0      	jalrc	v1
4006038c:	b20f      	lw	v0,400603c4 <radio_app_init+0x58>

    com_rcp_init();//必须在xxx_rcp_var_init之前
4006038e:	eac0      	jalrc	v0
40060390:	b30f      	lw	v1,400603c8 <radio_app_init+0x5c>
    //加载RCP回调函数列表
    radio_rcp_var_init();
40060392:	ebc0      	jalrc	v1
40060394:	b20f      	lw	v0,400603cc <radio_app_init+0x60>

    com_view_manager_init();
40060396:	eac0      	jalrc	v0
40060398:	b40f      	lw	a0,400603d0 <radio_app_init+0x64>

#ifdef SUPPORT_ASET_TEST
    if ((g_app_info_state.stub_tools_type == STUB_PC_TOOL_WAVES_ASET_MODE) || (g_app_info_state.stub_tools_type == STUB_PC_TOOL_ASET_EQ_MODE))
4006039a:	6a7f      	li	v0,127
4006039c:	a46c      	lbu	v1,12(a0)
4006039e:	eb4c      	and	v1,v0
400603a0:	7307      	cmpi	v1,7
400603a2:	6002      	bteqz	400603a8 <radio_app_init+0x3c>
400603a4:	7303      	cmpi	v1,3
400603a6:	6102      	btnez	400603ac <radio_app_init+0x40>
400603a8:	b20c      	lw	v0,400603d8 <radio_app_init+0x6c>
    {
        aset_test_init();
400603aa:	eac0      	jalrc	v0
400603ac:	6a01      	li	v0,1
    }
#endif  

    return TRUE;
}
400603ae:	6443      	restore	24,ra
400603b0:	e8a0      	jrc	ra
400603b2:	0000      	addiu	s0,sp,0
400603b4:	5861      	sltiu	s0,97
400603b6:	482e      	addiu	s0,46
400603b8:	9a34      	lw	s1,80(v0)
400603ba:	9fc1      	lw	a2,4(a3)
400603bc:	5b4d      	sltiu	v1,77
400603be:	488e      	addiu	s0,-114
400603c0:	5a29      	sltiu	v0,41
400603c2:	482e      	addiu	s0,46
400603c4:	5be5      	sltiu	v1,229
400603c6:	488e      	addiu	s0,-114
400603c8:	5835      	sltiu	s0,53
400603ca:	48b2      	addiu	s0,-78
400603cc:	0201      	addiu	v0,sp,4
400603ce:	402a      	addiu	s1,s0,-6
400603d0:	5bc1      	sltiu	v1,193
400603d2:	485e      	addiu	s0,94
400603d4:	a0c0      	lbu	a2,0(s0)
400603d6:	9fc1      	lw	a2,4(a3)
400603d8:	5a71      	sltiu	v0,113
400603da:	4856      	addiu	s0,86

400603dc <radio_app_exit>:
400603dc:	64c3      	save	24,ra

//退出app的功能函数 保存配置信息
bool radio_app_exit(void)
{  
400603de:	b40d      	lw	a0,40060410 <radio_app_exit+0x34>
#ifdef SUPPORT_ASET_TEST
    if ((g_app_info_state.stub_tools_type == STUB_PC_TOOL_WAVES_ASET_MODE) || (g_app_info_state.stub_tools_type == STUB_PC_TOOL_ASET_EQ_MODE))
400603e0:	6a7f      	li	v0,127
400603e2:	a46c      	lbu	v1,12(a0)
400603e4:	eb4c      	and	v1,v0
400603e6:	7307      	cmpi	v1,7
400603e8:	6002      	bteqz	400603ee <radio_app_exit+0x12>
400603ea:	7303      	cmpi	v1,3
400603ec:	6102      	btnez	400603f2 <radio_app_exit+0x16>
400603ee:	b30a      	lw	v1,40060414 <radio_app_exit+0x38>
    {
        aset_test_exit();
400603f0:	ebc0      	jalrc	v1
400603f2:	b20a      	lw	v0,40060418 <radio_app_exit+0x3c>
    }
#endif 

    com_view_manager_exit();
400603f4:	eac0      	jalrc	v0
400603f6:	b20a      	lw	v0,4006041c <radio_app_exit+0x40>

    //销毁RCP回调函数列表
    radio_rcp_var_exit();
400603f8:	eac0      	jalrc	v0
400603fa:	b30a      	lw	v1,40060420 <radio_app_exit+0x44>
    //删除系统软定时器
    sys_timer_exit();
400603fc:	ebc0      	jalrc	v1
400603fe:	1820 80ce 	jal	40060338 <radio_save_cfg>

    //配置信息回写VRAM
    radio_save_cfg();
40060402:	6500      	nop
40060404:	b208      	lw	v0,40060424 <radio_app_exit+0x48>

    /*执行applib库的注销操作*/
    applib_quit();
40060406:	eac0      	jalrc	v0
40060408:	6a01      	li	v0,1

    return TRUE;
}
4006040a:	6443      	restore	24,ra
4006040c:	e8a0      	jrc	ra
4006040e:	0000      	addiu	s0,sp,0
40060410:	a0c0      	lbu	a2,0(s0)
40060412:	9fc1      	lw	a2,4(a3)
40060414:	5ad1      	sltiu	v0,209
40060416:	4856      	addiu	s0,86
40060418:	5e15      	sltiu	a2,21
4006041a:	485e      	addiu	s0,94
4006041c:	021d      	addiu	v0,sp,116
4006041e:	402a      	addiu	s1,s0,-6
40060420:	5c2d      	sltiu	a0,45
40060422:	488e      	addiu	s0,-114
40060424:	5951      	sltiu	s1,81
40060426:	482e      	addiu	s0,46

40060428 <radio_scene_dispatch>:
40060428:	64f5      	save	40,ra,s0-s1

//场景调度器
//enter_mode:进入模式
app_result_e radio_scene_dispatch(app_param_e enter_mode)
{
4006042a:	b631      	lw	a2,400604ec <radio_scene_dispatch+0xc4>
    uint32 SD_clk_val;
    app_result_e scene_result = RESULT_NULL;

    g_radio_scene = FM_SCENE_PLAYING;
    g_first_enter_play = TRUE;
4006042c:	6b01      	li	v1,1
4006042e:	c660      	sb	v1,0(a2)
40060430:	b330      	lw	v1,400604f0 <radio_scene_dispatch+0xc8>
    SD_clk_val = act_readl(CMU_SDCLK);
40060432:	6cff      	li	a0,255
    if ((SD_clk_val & (1 << 8)) != 0) //128分频--低频
40060434:	9ba0      	lw	a1,0(v1)
40060436:	4441      	addiu	v0,a0,1
40060438:	d504      	sw	a1,16(sp)
4006043a:	9404      	lw	a0,16(sp)
4006043c:	b02b      	lw	s0,400604e8 <radio_scene_dispatch+0xc0>
4006043e:	6900      	li	s1,0
40060440:	ea8c      	and	v0,a0
40060442:	c020      	sb	s1,0(s0)
40060444:	2203      	beqz	v0,4006044c <radio_scene_dispatch+0x24>
40060446:	6f0f      	li	a3,15
    {
        //设置SD_CLK，避免对FM的干扰
        act_writel(SD_clk_val | 0x0F, CMU_SDCLK);
40060448:	ef8d      	or	a3,a0
4006044a:	dbe0      	sw	a3,0(v1)
4006044c:	b22a      	lw	v0,400604f4 <radio_scene_dispatch+0xcc>
    }
    com_set_mute(FALSE); //解除静音
4006044e:	ea40      	jalr	v0
40060450:	6791      	move	a0,s1
40060452:	a060      	lbu	v1,0(s0)
    /* radioUI 场景循环*/
    while (g_radio_scene != FM_SCENE_EXIT)
    {
        switch (g_radio_scene)
        {
            /* 进入RADIO 播放场景*/
            case FM_SCENE_PLAYING:
            scene_result = radio_scene_playing();
            g_first_enter_play = FALSE;
            if (scene_result > RESULT_COMMON_RESERVE)
            {
                if ((scene_result == RESULT_AUTO_SEARCH)
                        || (scene_result == RESULT_MANUAL_SEARCH_UP)
                        || (scene_result == RESULT_MANUAL_SEARCH_DOWN))
                {
                    //进入搜台主视图
                    g_radio_scene = FM_SCENE_SEARCH;
                }
                else
                {
                    g_radio_scene = FM_SCENE_EXIT;
                }
            }
            break;

            case FM_SCENE_SEARCH:
            if (scene_result == RESULT_AUTO_SEARCH)
            {
                scene_result = radio_scene_auto_search(DIR_UP);
            }
            else if (scene_result == RESULT_MANUAL_SEARCH_UP)
            {
                scene_result = radio_scene_manual_search(DIR_UP);
            }
            else if (scene_result == RESULT_MANUAL_SEARCH_DOWN)
            {
                scene_result = radio_scene_manual_search(DIR_DOWN);
            }
            else
            {
                ; //QAC
            }

            if ((scene_result > RESULT_COMMON_RESERVE) && (scene_result != RESULT_STOP_SEARCH))
            {
                //退出 RADIO
                g_radio_scene = FM_SCENE_EXIT;
            }
            else
            {
                //回到播放主视图
                g_radio_scene = FM_SCENE_PLAYING;
            }
            break;

            default:
            //退出场景调度
            g_radio_scene = FM_SCENE_EXIT;
            break;
40060454:	6783      	move	a0,v1
40060456:	ec11      	zeb	a0
40060458:	7402      	cmpi	a0,2
4006045a:	600c      	bteqz	40060474 <radio_scene_dispatch+0x4c>
4006045c:	6703      	move	s0,v1
4006045e:	e811      	zeb	s0
40060460:	2027      	beqz	s0,400604b0 <radio_scene_dispatch+0x88>
40060462:	7001      	cmpi	s0,1
40060464:	600d      	bteqz	40060480 <radio_scene_dispatch+0x58>
40060466:	6b02      	li	v1,2
40060468:	6783      	move	a0,v1
4006046a:	b220      	lw	v0,400604e8 <radio_scene_dispatch+0xc0>
4006046c:	ec11      	zeb	a0
4006046e:	7402      	cmpi	a0,2
40060470:	c260      	sb	v1,0(v0)
40060472:	61f4      	btnez	4006045c <radio_scene_dispatch+0x34>
40060474:	b41f      	lw	a0,400604f0 <radio_scene_dispatch+0xc8>
        }
    }
    act_writel(SD_clk_val, CMU_SDCLK);
40060476:	9504      	lw	a1,16(sp)
40060478:	6751      	move	v0,s1
    return scene_result;
}
4006047a:	dca0      	sw	a1,0(a0)
4006047c:	6475      	restore	40,ra,s0-s1
4006047e:	e8a0      	jrc	ra
40060480:	f100 711d 	cmpi	s1,285
40060484:	602b      	bteqz	400604dc <radio_scene_dispatch+0xb4>
40060486:	f100 711e 	cmpi	s1,286
4006048a:	6c01      	li	a0,1
4006048c:	600d      	bteqz	400604a8 <radio_scene_dispatch+0x80>
4006048e:	f100 711f 	cmpi	s1,287
40060492:	6009      	bteqz	400604a6 <radio_scene_dispatch+0x7e>
40060494:	5921      	sltiu	s1,33
40060496:	6103      	btnez	4006049e <radio_scene_dispatch+0x76>
40060498:	f120 7100 	cmpi	s1,288
4006049c:	61e4      	btnez	40060466 <radio_scene_dispatch+0x3e>
4006049e:	b713      	lw	a3,400604e8 <radio_scene_dispatch+0xc0>
400604a0:	6b00      	li	v1,0
400604a2:	c760      	sb	v1,0(a3)
400604a4:	17d7      	b	40060454 <radio_scene_dispatch+0x2c>
400604a6:	6c00      	li	a0,0
400604a8:	b216      	lw	v0,40060500 <radio_scene_dispatch+0xd8>
400604aa:	eac0      	jalrc	v0
400604ac:	6722      	move	s1,v0
400604ae:	17f2      	b	40060494 <radio_scene_dispatch+0x6c>
400604b0:	b112      	lw	s1,400604f8 <radio_scene_dispatch+0xd0>
400604b2:	e9c0      	jalrc	s1
400604b4:	b50e      	lw	a1,400604e8 <radio_scene_dispatch+0xc0>
400604b6:	5a21      	sltiu	v0,33
400604b8:	6722      	move	s1,v0
400604ba:	c500      	sb	s0,0(a1)
400604bc:	610c      	btnez	400604d6 <radio_scene_dispatch+0xae>
400604be:	f6ef 42c3 	addiu	a2,v0,-285
400604c2:	ee31      	zeh	a2
400604c4:	5e03      	sltiu	a2,3
400604c6:	6a01      	li	v0,1
400604c8:	6101      	btnez	400604cc <radio_scene_dispatch+0xa4>
400604ca:	6a02      	li	v0,2
400604cc:	b307      	lw	v1,400604e8 <radio_scene_dispatch+0xc0>
400604ce:	c340      	sb	v0,0(v1)
400604d0:	6783      	move	a0,v1
400604d2:	a460      	lbu	v1,0(a0)
400604d4:	17bf      	b	40060454 <radio_scene_dispatch+0x2c>
400604d6:	b405      	lw	a0,400604e8 <radio_scene_dispatch+0xc0>
400604d8:	a460      	lbu	v1,0(a0)
400604da:	17bc      	b	40060454 <radio_scene_dispatch+0x2c>
400604dc:	b208      	lw	v0,400604fc <radio_scene_dispatch+0xd4>
400604de:	ea40      	jalr	v0
400604e0:	6c01      	li	a0,1
400604e2:	6722      	move	s1,v0
400604e4:	17d7      	b	40060494 <radio_scene_dispatch+0x6c>
400604e6:	0000      	addiu	s0,sp,0
400604e8:	9a98      	lw	a0,96(v0)
400604ea:	9fc1      	lw	a2,4(a3)
400604ec:	9f21      	lw	s1,4(a3)
400604ee:	9fc1      	lw	a2,4(a3)
400604f0:	1018      	b	40060522 <main+0x1e>
400604f2:	c000      	sb	s0,0(s0)
400604f4:	5bb9      	sltiu	v1,185
400604f6:	48be      	addiu	s0,-66
400604f8:	02dd      	addiu	v0,sp,884
400604fa:	4026      	addiu	s1,s0,6
400604fc:	05a1      	addiu	a1,sp,644
400604fe:	4026      	addiu	s1,s0,6
40060500:	079d      	addiu	a3,sp,628
40060502:	4026      	addiu	s1,s0,6

40060504 <main>:
40060504:	64f4      	save	32,ra,s0-s1

//入口函数
int main(int argc, const char *argv[])
{
40060506:	6a80      	li	v0,128
    app_result_e retval;
    bool result;
    app_param_e enter_mode;

    g_standby_exit_flag = (bool) ((argc & PARAM_S3_EXIT) != 0);
40060508:	ea8c      	and	v0,a0
4006050a:	6b00      	li	v1,0
4006050c:	2201      	beqz	v0,40060510 <main+0xc>
4006050e:	6b01      	li	v1,1
40060510:	b52b      	lw	a1,400605bc <main+0xb8>
40060512:	687f      	li	s0,127
    argc = argc & (~PARAM_S3_EXIT);
40060514:	e88c      	and	s0,a0

    enter_mode = (app_param_e) (argc);
40060516:	c560      	sb	v1,0(a1)
40060518:	b32a      	lw	v1,400605c0 <main+0xbc>

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_ON, NULL);
#endif

    g_enter_param = enter_mode;
4006051a:	7002      	cmpi	s0,2
    //如果是从闹钟启动
    if (enter_mode == PARAM_FROM_ALARM)
4006051c:	c300      	sb	s0,0(v1)
4006051e:	6103      	btnez	40060526 <main+0x22>
40060520:	b429      	lw	a0,400605c4 <main+0xc0>
    {
        g_radio_from_alarm = 1;
40060522:	6e01      	li	a2,1
40060524:	c4c0      	sb	a2,0(a0)
40060526:	b129      	lw	s1,400605c8 <main+0xc4>
    }

#if ((CASE_BOARD_TYPE == CASE_BOARD_DEMO) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2825) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2823))//使用AB模式功放
    SPEAKER_D_AB_SWITCH(SPEAKER_A_PA_TYPE_AB);
40060528:	e940      	jalr	s1
4006052a:	6c01      	li	a0,1
4006052c:	b728      	lw	a3,400605cc <main+0xc8>
    //改为LDO模式，以降低对FM的干扰
    act_writel((act_readl(VD15_DCDC_CTL) & (~VD15_DCDC_CTL_VD15_MODE_S1_MASK)), VD15_DCDC_CTL);
4006052e:	f003 6b01 	li	v1,6145
40060532:	9f20      	lw	s1,0(a3)
40060534:	ea6b      	neg	v0,v1
40060536:	e94c      	and	s1,v0
40060538:	df20      	sw	s1,0(a3)
4006053a:	1820 80db 	jal	4006036c <radio_app_init>
    // act_writel((act_readl(VD15_DCDC_CTL) | (0 << VD15_DCDC_CTL_VD15_MODE_S1_SHIFT)), VD15_DCDC_CTL);
#endif

    result = radio_app_init(); //初始化
4006053e:	69ff      	li	s1,255
40060540:	4919      	addiu	s1,25

    if (!result)
    {
        //初始化失败，返回主应用
        retval = RESULT_MAIN_APP;
40060542:	2a21      	bnez	v0,40060586 <main+0x82>
40060544:	b223      	lw	v0,400605d0 <main+0xcc>
    }
    else
    {
        retval = radio_scene_dispatch(enter_mode); //场景调度器
    }

    //AA通道时按键音可能被关掉，需要开启
    keytone_set_on_off(TRUE);
40060546:	ea40      	jalr	v0
40060548:	6c01      	li	a0,1
4006054a:	f120 7105 	cmpi	s1,293

    if (retval == RESULT_SYSTEM_ENTER_S3)
4006054e:	6025      	bteqz	4006059a <main+0x96>
40060550:	b222      	lw	v0,400605d8 <main+0xd4>
    {
        PRINT_INFO("ap enter s3bt");
    }

    com_ap_switch_deal(retval);
40060552:	ea40      	jalr	v0
40060554:	6791      	move	a0,s1
40060556:	1820 80f7 	jal	400603dc <radio_app_exit>
    radio_app_exit(); //退出
4006055a:	6500      	nop
4006055c:	b31b      	lw	v1,400605c8 <main+0xc4>

#if ((CASE_BOARD_TYPE == CASE_BOARD_DEMO) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2825) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2823))//还原为D模式功放
    SPEAKER_D_AB_SWITCH(SPEAKER_A_PA_TYPE_D);
4006055e:	eb40      	jalr	v1
40060560:	6c00      	li	a0,0
40060562:	b61b      	lw	a2,400605cc <main+0xc8>
    //切换DC-DC模式
    act_writel((act_readl(VD15_DCDC_CTL) & (~VD15_DCDC_CTL_VD15_MODE_S1_MASK)), VD15_DCDC_CTL);
40060564:	f003 6d01 	li	a1,6145
40060568:	9e40      	lw	v0,0(a2)
4006056a:	ebab      	neg	v1,a1
4006056c:	ea6c      	and	v0,v1
4006056e:	de40      	sw	v0,0(a2)
40060570:	9ee0      	lw	a3,0(a2)
    act_writel((act_readl(VD15_DCDC_CTL) | (1 << VD15_DCDC_CTL_VD15_MODE_S1_SHIFT)), VD15_DCDC_CTL);
40060572:	f004 4b01 	addiu	v1,8193
40060576:	b51a      	lw	a1,400605dc <main+0xd8>
#endif

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_OFF, NULL);
#endif
    g_ap_switch_var.switch_to_radio_by_apkapp = FALSE;
40060578:	ef6d      	or	a3,v1
4006057a:	6c00      	li	a0,0
4006057c:	6751      	move	v0,s1

    return retval;
}
4006057e:	dee0      	sw	a3,0(a2)
40060580:	c59f      	sb	a0,31(a1)
40060582:	6474      	restore	32,ra,s0-s1
40060584:	e8a0      	jrc	ra
40060586:	1820 810a 	jal	40060428 <radio_scene_dispatch>
4006058a:	6790      	move	a0,s0
4006058c:	6722      	move	s1,v0
4006058e:	b211      	lw	v0,400605d0 <main+0xcc>
40060590:	ea40      	jalr	v0
40060592:	6c01      	li	a0,1
40060594:	f120 7105 	cmpi	s1,293
40060598:	61db      	btnez	40060550 <main+0x4c>
4006059a:	6d00      	li	a1,0
4006059c:	b20e      	lw	v0,400605d4 <main+0xd0>
4006059e:	0c03      	la	a0,400605a8 <main+0xa4>
400605a0:	67c5      	move	a2,a1
400605a2:	ea40      	jalr	v0
400605a4:	6f4b      	li	a3,75
400605a6:	17d4      	b	40060550 <main+0x4c>
400605a8:	493c      	addiu	s1,60
400605aa:	203e      	beqz	s0,40060628 <radio_tts_fm_freq+0x48>
400605ac:	7061      	cmpi	s0,97
400605ae:	6520      	move	at,s0
400605b0:	746e      	cmpi	a0,110
400605b2:	7265      	cmpi	v0,101
400605b4:	7320      	cmpi	v1,32
400605b6:	6233      	sw	ra,204(sp)
400605b8:	0074      	addiu	s0,sp,464
400605ba:	0000      	addiu	s0,sp,0
400605bc:	9a24      	lw	s1,16(v0)
400605be:	9fc1      	lw	a2,4(a3)
400605c0:	9f0e      	lw	s0,56(a3)
400605c2:	9fc1      	lw	a2,4(a3)
400605c4:	9f27      	lw	s1,28(a3)
400605c6:	9fc1      	lw	a2,4(a3)
400605c8:	5b91      	sltiu	v1,145
400605ca:	485e      	addiu	s0,94
400605cc:	0008      	addiu	s0,sp,32
400605ce:	c002      	sb	s0,2(s0)
400605d0:	5bc5      	sltiu	v1,197
400605d2:	485a      	addiu	s0,90
400605d4:	e901      	sdbbp	8
400605d6:	bfc1      	lwu	a2,4(a3)
400605d8:	5af5      	sltiu	v0,245
400605da:	483e      	addiu	s0,62
400605dc:	a19c      	lbu	a0,28(s1)
400605de:	9fc1      	lw	a2,4(a3)

400605e0 <radio_tts_fm_freq>:
400605e0:	64b2      	save	16,s0-s1

uint8 radio_tts_fm_freq(uint16 value, bool europe_fm, uint8 *tts_sec_ids)
{
400605e2:	ed11      	zeb	a1
400605e4:	651d      	move	t8,a1
400605e6:	6d00      	li	a1,0
    uint8 section_cnt = 0;
    uint8 hundred, ten, one, dot, dot_euro;
    bool number_bitmap = 0x00; //bit 3 ~ 0 分别为千百十个
400605e8:	ec31      	zeh	a0
400605ea:	d501      	sw	a1,4(sp)
400605ec:	b23f      	lw	v0,400606e8 <radio_tts_fm_freq+0x108>

    dot_euro = (uint8) (value % 2) * 5; //50Khz为单位
    value = value / 2; //100Khz为单位
    hundred = (uint8) (value / 1000);
400605ee:	6d01      	li	a1,1
400605f0:	6764      	move	v1,a0
400605f2:	ed86      	srlv	a0,a1
400605f4:	ec59      	multu	a0,v0
400605f6:	ebac      	and	v1,a1
400605f8:	e810      	mfhi	s0
400605fa:	653e      	move	t9,a2
400605fc:	3668      	sll	a2,v1,2
400605fe:	e67d      	addu	a3,a2,v1
40060600:	331a      	srl	v1,s0,6
40060602:	3174      	sll	s1,v1,5
    ten = (uint8) ((value % 1000) / 100);
40060604:	e17b      	subu	a2,s1,v1
40060606:	d700      	sw	a3,0(sp)
40060608:	37c8      	sll	a3,a2,2
4006060a:	e769      	addu	v0,a3,v1
4006060c:	314c      	sll	s1,v0,3
4006060e:	e43b      	subu	a2,a0,s1
40060610:	6703      	move	s0,v1
40060612:	b337      	lw	v1,400606ec <radio_tts_fm_freq+0x10c>
40060614:	ee31      	zeh	a2
40060616:	ee79      	multu	a2,v1
40060618:	e811      	zeb	s0
4006061a:	ef10      	mfhi	a3
4006061c:	ec79      	multu	a0,v1
    one = (uint8) ((value % 100) / 10);
4006061e:	32f6      	srl	v0,a3,5
40060620:	e910      	mfhi	s1
40060622:	67e2      	move	a3,v0
40060624:	3636      	srl	a2,s1,5
40060626:	32c4      	sll	v0,a2,1
40060628:	e2cd      	addu	v1,v0,a2
4006062a:	316c      	sll	s1,v1,3
4006062c:	e1c9      	addu	v0,s1,a2
4006062e:	3348      	sll	v1,v0,2
40060630:	e47b      	subu	a2,a0,v1
40060632:	b330      	lw	v1,400606f0 <radio_tts_fm_freq+0x110>
40060634:	ee31      	zeh	a2
40060636:	ee79      	multu	a2,v1
40060638:	ef11      	zeb	a3
4006063a:	e910      	mfhi	s1
4006063c:	ec79      	multu	a0,v1
    dot = (uint8) (value % 10);
4006063e:	322e      	srl	v0,s1,3
40060640:	ee10      	mfhi	a2
40060642:	6722      	move	s1,v0
40060644:	33ce      	srl	v1,a2,3
40060646:	3268      	sll	v0,v1,2
40060648:	e279      	addu	a2,v0,v1
4006064a:	edc4      	sllv	a2,a1
4006064c:	e4d3      	subu	a0,a2
4006064e:	67c4      	move	a2,a0
40060650:	6a2d      	li	v0,45

    //FM
    tts_sec_ids[section_cnt] = TTS_SECTION_CHAR_FM;
40060652:	6779      	move	v1,t9
40060654:	e911      	zeb	s1
40060656:	ee11      	zeb	a2
40060658:	c340      	sb	v0,0(v1)
4006065a:	2007      	beqz	s0,4006066a <radio_tts_fm_freq+0x8a>
    section_cnt++;

    //百位数处理
    if (hundred > 0)
4006065c:	481e      	addiu	s0,30
    {
        tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0 + hundred;
4006065e:	6a29      	li	v0,41
        section_cnt++;
        tts_sec_ids[section_cnt] = TTS_SECTION_HUNDRED;
40060660:	6c04      	li	a0,4
        section_cnt++;
        number_bitmap |= 0x04;
40060662:	c301      	sb	s0,1(v1)
40060664:	c342      	sb	v0,2(v1)
40060666:	45a2      	addiu	a1,a1,2
40060668:	d401      	sw	a0,4(sp)
4006066a:	2733      	beqz	a3,400606d2 <radio_tts_fm_freq+0xf2>
    }

    //十位数处理
    if (ten > 0)
4006066c:	6799      	move	a0,t9
    {
        tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0 + ten;
4006066e:	e589      	addu	v0,a1,a0
40060670:	4f1e      	addiu	a3,30
40060672:	c2e0      	sb	a3,0(v0)
40060674:	45e1      	addiu	a3,a1,1
        section_cnt++;
40060676:	ef11      	zeb	a3
40060678:	e795      	addu	a1,a3,a0
        tts_sec_ids[section_cnt] = TTS_SECTION_TEN;
4006067a:	6b28      	li	v1,40
4006067c:	4741      	addiu	v0,a3,1
        section_cnt++;
4006067e:	c560      	sb	v1,0(a1)
40060680:	67a2      	move	a1,v0
        number_bitmap |= 0x02;
    }
    else if ((number_bitmap & 0x04) != 0) //百位数不为0
    {
        tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0;
        section_cnt++;
40060682:	ed11      	zeb	a1
40060684:	2107      	beqz	s1,40060694 <radio_tts_fm_freq+0xb4>
    }
    else
    {
        ; //for QAC
    }

    //个位数处理
    if (one > 0)
40060686:	6799      	move	a0,t9
    {
        tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0 + one;
40060688:	45e1      	addiu	a3,a1,1
        section_cnt++;
4006068a:	e58d      	addu	v1,a1,a0
4006068c:	491e      	addiu	s1,30
4006068e:	67a7      	move	a1,a3
40060690:	c320      	sb	s1,0(v1)
40060692:	ed11      	zeb	a1
40060694:	6759      	move	v0,t9
    }

    //点
    tts_sec_ids[section_cnt] = TTS_SECTION_DOT;
40060696:	e54d      	addu	v1,a1,v0
40060698:	6c2b      	li	a0,43
4006069a:	45e1      	addiu	a3,a1,1
    section_cnt++;
4006069c:	c380      	sb	a0,0(v1)
4006069e:	ef11      	zeb	a3
400606a0:	6799      	move	a0,t9

    //100Khz处理
    tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0 + dot;
400606a2:	e795      	addu	a1,a3,a0
400606a4:	4e1e      	addiu	a2,30
400606a6:	c5c0      	sb	a2,0(a1)
400606a8:	4741      	addiu	v0,a3,1
    section_cnt++;
400606aa:	67d8      	move	a2,t8
    if (europe_fm == TRUE)
400606ac:	67a2      	move	a1,v0
400606ae:	7601      	cmpi	a2,1
400606b0:	ed11      	zeb	a1
400606b2:	6107      	btnez	400606c2 <radio_tts_fm_freq+0xe2>
400606b4:	9300      	lw	v1,0(sp)
    {
        tts_sec_ids[section_cnt] = TTS_SECTION_NUM_0 + dot_euro;
400606b6:	45c1      	addiu	a2,a1,1
        section_cnt++;
400606b8:	e59d      	addu	a3,a1,a0
400606ba:	4b1e      	addiu	v1,30
400606bc:	67a6      	move	a1,a2
400606be:	c760      	sb	v1,0(a3)
400606c0:	ed11      	zeb	a1
400606c2:	67d9      	move	a2,t9
    }

    tts_sec_ids[section_cnt] = 0xff; //添加结束标志
400606c4:	e5d1      	addu	a0,a1,a2
400606c6:	6a01      	li	v0,1
400606c8:	ea4b      	neg	v0
400606ca:	c440      	sb	v0,0(a0)
400606cc:	6745      	move	v0,a1
    return section_cnt;
}
400606ce:	6432      	restore	16,s0-s1
400606d0:	e8a0      	jrc	ra
400606d2:	9701      	lw	a3,4(sp)
400606d4:	27d7      	beqz	a3,40060684 <radio_tts_fm_freq+0xa4>
400606d6:	6759      	move	v0,t9
400606d8:	e551      	addu	a0,a1,v0
400606da:	4541      	addiu	v0,a1,1
400606dc:	67a2      	move	a1,v0
400606de:	6b1e      	li	v1,30
400606e0:	ed11      	zeb	a1
400606e2:	c460      	sb	v1,0(a0)
400606e4:	17cf      	b	40060684 <radio_tts_fm_freq+0xa4>
400606e6:	0000      	addiu	s0,sp,0
400606e8:	4dd3      	addiu	a1,-45
400606ea:	1062      	b	400607b0 <end_border_freq+0x3c>
400606ec:	851f      	lb	s0,31(a1)
400606ee:	51eb      	slti	s1,235
400606f0:	cccd      	sh	a2,26(a0)
400606f2:	cccc      	sh	a2,24(a0)

400606f4 <radio_freq_tts_play>:
400606f4:	64f4      	save	32,ra,s0-s1

//频点 TTS 播报
void radio_freq_tts_play(uint32 freq)
{
400606f6:	b112      	lw	s1,4006073c <radio_freq_tts_play+0x48>
    uint16 tmp_freq = (uint16) (freq / 50);
400606f8:	b712      	lw	a3,40060740 <radio_freq_tts_play+0x4c>

    radio_tts_fm_freq(tmp_freq, (bool) (g_radio_config.band_mode == Band_Europe), g_freq_tts_sec_ids);
400606fa:	ec39      	multu	a0,s1
400606fc:	f200 a7a4 	lbu	a1,516(a3)
40060700:	e810      	mfhi	s0
40060702:	6e02      	li	a2,2
40060704:	edce      	xor	a1,a2
40060706:	b110      	lw	s1,40060744 <radio_freq_tts_play+0x50>
40060708:	5d01      	sltiu	a1,1
4006070a:	3412      	srl	a0,s0,4
4006070c:	ec31      	zeh	a0
4006070e:	67b8      	move	a1,t8
40060710:	1820 8178 	jal	400605e0 <radio_tts_fm_freq>
40060714:	67d1      	move	a2,s1
40060716:	b30d      	lw	v1,40060748 <radio_freq_tts_play+0x54>

    if ((g_neednot_freq_tts_play == FALSE)
40060718:	a340      	lbu	v0,0(v1)
4006071a:	2a0b      	bnez	v0,40060732 <radio_freq_tts_play+0x3e>
4006071c:	b00c      	lw	s0,4006074c <radio_freq_tts_play+0x58>
4006071e:	a080      	lbu	a0,0(s0)
40060720:	2c09      	bnez	a0,40060734 <radio_freq_tts_play+0x40>
40060722:	b20c      	lw	v0,40060750 <radio_freq_tts_play+0x5c>
            && (g_standby_exit_flag == FALSE))
    {
        com_tts_state_play(TTS_MODE_SECLIST, g_freq_tts_sec_ids);
40060724:	6c01      	li	a0,1
40060726:	ea40      	jalr	v0
40060728:	67b1      	move	a1,s1
4006072a:	6b00      	li	v1,0
    }

    g_standby_exit_flag = FALSE;
4006072c:	c060      	sb	v1,0(s0)
4006072e:	6474      	restore	32,ra,s0-s1
40060730:	e8a0      	jrc	ra
40060732:	b007      	lw	s0,4006074c <radio_freq_tts_play+0x58>
40060734:	6b00      	li	v1,0
40060736:	c060      	sb	v1,0(s0)
40060738:	6474      	restore	32,ra,s0-s1
4006073a:	e8a0      	jrc	ra
4006073c:	851f      	lb	s0,31(a1)
4006073e:	51eb      	slti	s1,235
40060740:	9a9c      	lw	a0,112(v0)
40060742:	9fc1      	lw	a2,4(a3)
40060744:	9f10      	lw	s0,64(a3)
40060746:	9fc1      	lw	a2,4(a3)
40060748:	9f22      	lw	s1,8(a3)
4006074a:	9fc1      	lw	a2,4(a3)
4006074c:	9a24      	lw	s1,16(v0)
4006074e:	9fc1      	lw	a2,4(a3)
40060750:	5c8d      	sltiu	a0,141
40060752:	483a      	addiu	s0,58

40060754 <start_border_freq>:
40060754:	a5e0 0001 55cc 0001 5f90 0001 28e0 0001     .....U..._...(..
40060764:	a5e0 0001 55cc 0001 a5e0 0001 55cc 0001     .....U.......U..

40060774 <end_border_freq>:
40060774:	55cc 0001 a5e0 0001 28e0 0001 5f90 0001     .U.......(..._..
40060784:	55cc 0001 a5e0 0001 55cc 0001 a5e0 0001     .U.......U......
	...
Disassembly of section BANK_CONTROL_1_2:

400a0200 <playing_loop_deal>:
400a0200:	64c3      	save	24,ra
#include "app_radio.h"

//播放场景循环处理
app_result_e playing_loop_deal(void)
{
400a0202:	1010      	b	400a0224 <playing_loop_deal+0x24>
400a0204:	b50e      	lw	a1,400a023c <playing_loop_deal+0x3c>
    app_result_e ret = RESULT_NULL;

    //radio 播放场景循环
    while (1)
    {
        ret = com_view_loop();
        //iOS APP只要点击菜单就会发一个停止搜台命令过来，不管我是不是正在搜台
        if ((ret > RESULT_COMMON_RESERVE) && (ret != RESULT_STOP_SEARCH))
        {
            break;
        }

#ifdef SUPPORT_ASET_TEST
        if ((g_app_info_state.stub_tools_type == STUB_PC_TOOL_WAVES_ASET_MODE) || (g_app_info_state.stub_tools_type == STUB_PC_TOOL_ASET_EQ_MODE))
400a0206:	6c7f      	li	a0,127
400a0208:	a56c      	lbu	v1,12(a1)
400a020a:	eb8c      	and	v1,a0
400a020c:	7307      	cmpi	v1,7
400a020e:	6002      	bteqz	400a0214 <playing_loop_deal+0x14>
400a0210:	7303      	cmpi	v1,3
400a0212:	6102      	btnez	400a0218 <playing_loop_deal+0x18>
400a0214:	b30b      	lw	v1,400a0240 <playing_loop_deal+0x40>
        {
            aset_test_loop_deal();
400a0216:	ebc0      	jalrc	v1
400a0218:	6d00      	li	a1,0
        }
#endif 
        //挂起10ms 多任务交互
        sys_os_time_dly(1);
400a021a:	b20b      	lw	v0,400a0244 <playing_loop_deal+0x44>
400a021c:	6c01      	li	a0,1
400a021e:	67c5      	move	a2,a1
400a0220:	ea40      	jalr	v0
400a0222:	6f31      	li	a3,49
400a0224:	b205      	lw	v0,400a0238 <playing_loop_deal+0x38>
400a0226:	eac0      	jalrc	v0
400a0228:	5a21      	sltiu	v0,33
400a022a:	61ec      	btnez	400a0204 <playing_loop_deal+0x4>
400a022c:	f120 7200 	cmpi	v0,288
400a0230:	60e9      	bteqz	400a0204 <playing_loop_deal+0x4>
400a0232:	6443      	restore	24,ra
    }

    return ret;
}
400a0234:	e8a0      	jrc	ra
400a0236:	0000      	addiu	s0,sp,0
400a0238:	eb7d      	dmultu	v1,v1
400a023a:	bfc1      	lwu	a2,4(a3)
400a023c:	a0c0      	lbu	a2,0(s0)
400a023e:	9fc1      	lw	a2,4(a3)
400a0240:	0b3d      	la	v1,400a0334 <radio_play_main_view+0xe8>
400a0242:	bfc1      	lwu	a2,4(a3)
400a0244:	e901      	sdbbp	8
400a0246:	bfc1      	lwu	a2,4(a3)

400a0248 <__radio_play_view_redraw>:
400a0248:	e8a0      	jrc	ra
	...

400a024c <radio_play_main_view>:
//搜台视图
#include "app_radio.h"

static void show_freq(uint32 freq)
{
400a024c:	e8a0      	jrc	ra
400a024e:	6500      	nop
	...
Disassembly of section BANK_CONTROL_1_3:

400e0200 <show_station_num>:
400e0200:	e8a0      	jrc	ra
	...

400e0204 <__radio_station_view_redraw>:
//显示FM频道号
#include "app_radio.h"

void show_station_num(void)
{
400e0204:	64c3      	save	24,ra
#if(SUPPORT_LED_DRIVER == 1)
    uint8 station;

    if (g_comval.support_led_display == 0)
    {
        return;
    }

    led_clear_screen();

    //CH
    led_display(NUMBER1, NUM_C, 1);
    led_display(NUMBER2, NUM_H, 1);
    //电台号
    station = g_radio_config.FMStatus.station / 10;
    led_display(NUMBER3, (uint32 )station, 1);
    station = g_radio_config.FMStatus.station % 10;
    led_display(NUMBER4, (uint32 )station, 1);
#endif
}

void __radio_station_view_redraw(void)
{
400e0206:	b304      	lw	v1,400e0214 <__radio_station_view_redraw+0x10>
    show_station_num();

    //radio 频点语音提示
    radio_freq_tts_play(g_radio_config.FMStatus.freq);
400e0208:	b204      	lw	v0,400e0218 <__radio_station_view_redraw+0x14>
400e020a:	f1e0 9b9c 	lw	a0,508(v1)
400e020e:	eac0      	jalrc	v0
400e0210:	6443      	restore	24,ra
400e0212:	e8a0      	jrc	ra
400e0214:	9a9c      	lw	a0,112(v0)
400e0216:	9fc1      	lw	a2,4(a3)
400e0218:	06f5      	addiu	a2,sp,980
400e021a:	4006      	addiu	s0,s0,6

400e021c <radio_station_msg_view>:
400e021c:	64c3      	save	24,ra
}

void radio_station_msg_view(view_update_e mode)
{
400e021e:	ec11      	zeb	a0
400e0220:	7402      	cmpi	a0,2
    switch (mode)
400e0222:	6007      	bteqz	400e0232 <radio_station_msg_view+0x16>
400e0224:	5403      	slti	a0,3
400e0226:	6003      	bteqz	400e022e <radio_station_msg_view+0x12>
400e0228:	2404      	beqz	a0,400e0232 <radio_station_msg_view+0x16>
400e022a:	6443      	restore	24,ra
    {
        case VIEW_UPDATE_CREATE:
        {
            __radio_station_view_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {

        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __radio_station_view_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __radio_station_view_redraw();
        }
        break;

        default:
        break;
    }
}
400e022c:	e8a0      	jrc	ra
400e022e:	7403      	cmpi	a0,3
400e0230:	61fc      	btnez	400e022a <radio_station_msg_view+0xe>
400e0232:	1860 8081 	jal	400e0204 <__radio_station_view_redraw>
400e0236:	6500      	nop
400e0238:	6443      	restore	24,ra
400e023a:	e8a0      	jrc	ra

400e023c <radio_station_create_msg_view>:
400e023c:	64c5      	save	40,ra

//创建消息视图--显示FM频道号
//播放主视图下超时时间为2s
//搜台主视图下超时时间为200ms
void radio_station_create_msg_view(uint16 overtime)
{
400e023e:	67bd      	move	a1,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_MSG;
400e0240:	b308      	lw	v1,400e0260 <radio_station_create_msg_view+0x24>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = overtime;
    create_view_param.ke_maplist = NULL;
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = radio_station_msg_view;
400e0242:	6f02      	li	a3,2
400e0244:	6e00      	li	a2,0
400e0246:	cd89      	sh	a0,18(a1)
400e0248:	b207      	lw	v0,400e0264 <radio_station_create_msg_view+0x28>
    com_view_add(RADIO_MSG_VIEW_STATION, &create_view_param);
400e024a:	6c00      	li	a0,0
400e024c:	c5f0      	sb	a3,16(a1)
400e024e:	c5d1      	sb	a2,17(a1)
400e0250:	d405      	sw	a0,20(sp)
400e0252:	d406      	sw	a0,24(sp)
400e0254:	d307      	sw	v1,28(sp)
400e0256:	6c04      	li	a0,4
400e0258:	ea40      	jalr	v0
400e025a:	0504      	addiu	a1,sp,16
400e025c:	6445      	restore	40,ra
400e025e:	e8a0      	jrc	ra
400e0260:	021d      	addiu	v0,sp,116
400e0262:	400e      	addiu	s0,s0,-2
400e0264:	5d69      	sltiu	a1,105
400e0266:	485e      	addiu	s0,94

400e0268 <radio_digit_key_deal_number_input>:
400e0268:	64c3      	save	24,ra
    { { KEY_NULL, 0, KEY_TYPE_NULL, KEY_DEAL_NULL }, NULL },
};

app_result_e radio_digit_key_deal_number_input(void)
{
400e026a:	b405      	lw	a0,400e027c <radio_digit_key_deal_number_input+0x14>
    app_result_e result;
    uint8 number = (uint8)(g_p_view_ke->val - KEY_NUM0);
400e026c:	b205      	lw	v0,400e0280 <radio_digit_key_deal_number_input+0x18>

    result = radio_play_key_digital_store(number);
400e026e:	9c60      	lw	v1,0(a0)
400e0270:	a380      	lbu	a0,0(v1)
400e0272:	4cf0      	addiu	a0,-16
400e0274:	ea40      	jalr	v0
400e0276:	ec11      	zeb	a0
400e0278:	6443      	restore	24,ra

    return result;
}
400e027a:	e8a0      	jrc	ra
400e027c:	99e4      	lw	a3,16(s1)
400e027e:	9fc1      	lw	a2,4(a3)
400e0280:	0335      	addiu	v1,sp,212
400e0282:	4016      	daddiu	s0,s0,6

400e0284 <radio_digit_key_deal_number_play>:
400e0284:	64c3      	save	24,ra

app_result_e radio_digit_key_deal_number_play(void)
{
400e0286:	b204      	lw	v0,400e0294 <radio_digit_key_deal_number_play+0x10>
    app_result_e result;

    result = radio_play_key_digital_sure();
400e0288:	eac0      	jalrc	v0
400e028a:	b304      	lw	v1,400e0298 <radio_digit_key_deal_number_play+0x14>
    g_digit_input_flag = TRUE;
400e028c:	6c01      	li	a0,1
400e028e:	c380      	sb	a0,0(v1)
400e0290:	6443      	restore	24,ra

    return result;
}
400e0292:	e8a0      	jrc	ra
400e0294:	0691      	addiu	a2,sp,580
400e0296:	4012      	daddiu	s0,s0,2
400e0298:	9f20      	lw	s1,0(a3)
400e029a:	9fc1      	lw	a2,4(a3)

400e029c <show_digital_set>:
400e029c:	e8a0      	jrc	ra
	...

400e02a0 <__radio_digit_view_redraw>:

void show_digital_set(void)
{
400e02a0:	e8a0      	jrc	ra
	...

400e02a4 <radio_digit_sub_view>:
#if(SUPPORT_LED_DRIVER == 1)
    uint8 i, dis_val;

    //数字转换
    uint16 input_num = 0;
    uint16 multis = 1;

    if (g_comval.support_led_display == 0)
    {
        return;
    }

    for (i = 1; i < g_digital_count; i++)
    {
        multis = multis * 10;
    }
    for (i = g_digital_count; i > 0; i--)
    {
        input_num = input_num + g_digital_buf[g_digital_count - i] * multis;
        multis = multis / 10;
    }

    led_clear_screen();

    //显示序号

    //最高位
    dis_val = (uint8) (input_num / 1000);

    led_display(NUMBER1, (uint32 )dis_val, 1);

    //第二位
    input_num = input_num % 1000;
    dis_val = (uint8) (input_num / 100);

    led_display(NUMBER2, (uint32 )dis_val, 1);

    //第三位
    input_num = input_num % 100;
    dis_val = (uint8) (input_num / 10);

    led_display(NUMBER3, (uint32 )dis_val, 1);

    //第四位
    dis_val = (uint8) (input_num % 10);
    led_display(NUMBER4, (uint32 )dis_val, 1);
#endif
}

void __radio_digit_view_redraw(void)
{
    show_digital_set();
}
400e02a4:	64c3      	save	24,ra

void radio_digit_sub_view(view_update_e mode)
{
400e02a6:	ec11      	zeb	a0
400e02a8:	7401      	cmpi	a0,1
    switch (mode)
400e02aa:	6002      	bteqz	400e02b0 <radio_digit_sub_view+0xc>
400e02ac:	6443      	restore	24,ra
    {
        case VIEW_UPDATE_CREATE:
        {
            __radio_digit_view_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
            radio_play_key_digital_sure();
            g_digit_input_flag = FALSE;
        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __radio_digit_view_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __radio_digit_view_redraw();
        }
        break;

        default:
        break;
    }
}
400e02ae:	e8a0      	jrc	ra
400e02b0:	b204      	lw	v0,400e02bc <radio_digit_sub_view+0x18>
400e02b2:	eac0      	jalrc	v0
400e02b4:	b204      	lw	v0,400e02c0 <radio_digit_sub_view+0x1c>
400e02b6:	6b00      	li	v1,0
400e02b8:	c260      	sb	v1,0(v0)
400e02ba:	6443      	restore	24,ra
400e02bc:	e8a0      	jrc	ra
400e02be:	0000      	addiu	s0,sp,0
400e02c0:	0691      	addiu	a2,sp,580
400e02c2:	4012      	daddiu	s0,s0,2
400e02c4:	9f20      	lw	s1,0(a3)
400e02c6:	9fc1      	lw	a2,4(a3)

400e02c8 <radio_digit_create_sub_view>:
400e02c8:	64c5      	save	40,ra

//创建视图
void radio_digit_create_sub_view(uint16 overtime)
{
400e02ca:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_SUB;
400e02cc:	b509      	lw	a1,400e02f0 <radio_digit_create_sub_view+0x28>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = overtime;
    create_view_param.ke_maplist = radio_digit_ke_maplist;
400e02ce:	b30a      	lw	v1,400e02f4 <radio_digit_create_sub_view+0x2c>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = radio_digit_sub_view;
400e02d0:	6a01      	li	v0,1
400e02d2:	c650      	sb	v0,16(a2)
400e02d4:	6f00      	li	a3,0
400e02d6:	ce89      	sh	a0,18(a2)
400e02d8:	b208      	lw	v0,400e02f8 <radio_digit_create_sub_view+0x30>
    com_view_add(RADIO_SUB_VIEW_DIGIT, &create_view_param);
400e02da:	6c00      	li	a0,0
400e02dc:	d505      	sw	a1,20(sp)
400e02de:	d406      	sw	a0,24(sp)
400e02e0:	c6f1      	sb	a3,17(a2)
400e02e2:	d307      	sw	v1,28(sp)
400e02e4:	6c03      	li	a0,3
400e02e6:	ea40      	jalr	v0
400e02e8:	0504      	addiu	a1,sp,16
400e02ea:	6445      	restore	40,ra
400e02ec:	e8a0      	jrc	ra
400e02ee:	0000      	addiu	s0,sp,0
400e02f0:	eef0      	0xeef0
400e02f2:	bfc1      	lwu	a2,4(a3)
400e02f4:	02a5      	addiu	v0,sp,660
400e02f6:	400e      	addiu	s0,s0,-2
400e02f8:	5d69      	sltiu	a1,105
400e02fa:	485e      	addiu	s0,94

400e02fc <radio_play_create_main_view>:
400e02fc:	64c5      	save	40,ra
#if(SUPPORT_LED_DRIVER == 1)
    uint8 dis_num;

    if (g_comval.support_led_display == 0)
    {
        return;
    }

    led_clear_screen();

    //定位到mhz
    freq = freq / 100;

    led_display(LCD_FM, 0xff, 1);

    //最高位
    dis_num = (uint8) (freq / 1000);
    if (dis_num != 0)
    {
        led_display(NUMBER1, (uint32 )dis_num, 1);
    }
    else
    {
        led_display(NUMBER1, 0, 0);
    }

    freq = freq % 1000;
    //第二位
    dis_num = (uint8) (freq / 100);

    led_display(NUMBER2, (uint32 )dis_num, 1);

    //第三位
    freq = freq % 100;
    dis_num = (uint8) (freq / 10);

    led_display(NUMBER3, (uint32 )dis_num, 1);

    //点
    led_display(LCD_NO1, 0xff, 1);

    //第四位
    dis_num = (uint8) (freq % 10);
    led_display(NUMBER4, (uint32 )dis_num, 1);
#endif
}

static void __radio_play_view_redraw(void)
{
    show_freq(g_radio_config.FMStatus.freq);
}

void radio_play_main_view(view_update_e mode)
{
    switch (mode)
    {
        case VIEW_UPDATE_CREATE:
        {
            __radio_play_view_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {

        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __radio_play_view_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __radio_play_view_redraw();
        }
        break;

        default:
        break;
    }
}

//创建主视图--收音播放
void __section__(".bank") radio_play_create_main_view(void)
{
400e02fe:	b409      	lw	a0,400e0320 <radio_play_create_main_view+0x24>
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_MAIN;
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 0;
    create_view_param.ke_maplist = radio_play_ke_maplist;
400e0300:	b309      	lw	v1,400e0324 <radio_play_create_main_view+0x28>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = radio_play_main_view;
400e0302:	67bd      	move	a1,sp
400e0304:	6f00      	li	a3,0
400e0306:	6e00      	li	a2,0
400e0308:	d405      	sw	a0,20(sp)
400e030a:	b208      	lw	v0,400e0328 <radio_play_create_main_view+0x2c>
    com_view_add(RADIO_MAIN_VIEW_PLAY, &create_view_param);
400e030c:	6c00      	li	a0,0
400e030e:	c5f0      	sb	a3,16(a1)
400e0310:	c5f1      	sb	a3,17(a1)
400e0312:	cdc9      	sh	a2,18(a1)
400e0314:	d406      	sw	a0,24(sp)
400e0316:	d307      	sw	v1,28(sp)
400e0318:	ea40      	jalr	v0
400e031a:	0504      	addiu	a1,sp,16
400e031c:	6445      	restore	40,ra
400e031e:	e8a0      	jrc	ra
400e0320:	ee90      	0xee90
400e0322:	bfc1      	lwu	a2,4(a3)
400e0324:	024d      	addiu	v0,sp,308
400e0326:	400a      	addiu	s0,s0,-6
400e0328:	5d69      	sltiu	a1,105
400e032a:	485e      	addiu	s0,94

400e032c <search_key_deal_cancel_search>:
400e032c:	6aff      	li	v0,255

app_result_e __section__(".bank") search_key_deal_cancel_search(void)
{
    return RESULT_STOP_SEARCH;
}
400e032e:	e820      	jr	ra
400e0330:	4a21      	addiu	v0,33
	...

400e0334 <radio_hard_search_create_main_view>:
400e0334:	64c5      	save	40,ra

const key_event_map_t __section__(".rodata.ke_maplist") radio_search_ke_maplist[] =
{
    /*! 取消搜台 */
    { { KEY_NEXT, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_PREV, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_NEXT_VOLADD, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_PREV_VOLSUB, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_PLAY, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_PHONEPLAY, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_VADD, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },
    { { KEY_VSUB, 0, KEY_TYPE_ALL, KEY_DEAL_FILTER }, search_key_deal_cancel_search },

    /*! 结束标志 */
    { { KEY_NULL, 0, KEY_TYPE_NULL, KEY_DEAL_NULL }, NULL },
};

static void show_freq(uint32 freq)
{
#if(SUPPORT_LED_DRIVER == 1)
    uint8 dis_num;

    if (g_comval.support_led_display == 0)
    {
        return;
    }

    led_clear_screen();

    //定位到mhz
    freq = freq / 100;

    led_display(LCD_FM, 0xff, 1);

    //最高位
    dis_num = (uint8) (freq / 1000);
    if (dis_num != 0)
    {
        led_display(NUMBER1, (uint32 )dis_num, 1);
    }
    else
    {
        led_display(NUMBER1, 0, 0);
    }

    freq = freq % 1000;
    //第二位
    dis_num = (uint8) (freq / 100);

    led_display(NUMBER2, (uint32 )dis_num, 1);

    //第三位
    freq = freq % 100;
    dis_num = (uint8) (freq / 10);

    led_display(NUMBER3, (uint32 )dis_num, 1);

    //点
    led_display(LCD_NO1, 0xff, 1);

    //第四位
    dis_num = (uint8) (freq % 10);
    led_display(NUMBER4, (uint32 )dis_num, 1);
#endif
}

static void __radio_search_view_redraw(void)
{
    show_freq(g_search_current_freq);
}

void radio_hard_search_main_view(view_update_e mode)
{
    switch (mode)
    {
        case VIEW_UPDATE_CREATE:
        {
            __radio_search_view_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {

        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __radio_search_view_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __radio_search_view_redraw();
        }
        break;

        default:
        break;
    }
}

//创建主视图--搜台视图
void __section__(".bank") radio_hard_search_create_main_view(void)
{
400e0336:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_MAIN;
400e0338:	6a00      	li	v0,0
400e033a:	b509      	lw	a1,400e035c <radio_hard_search_create_main_view+0x28>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 0;
    create_view_param.ke_maplist = radio_search_ke_maplist;
400e033c:	b309      	lw	v1,400e0360 <radio_hard_search_create_main_view+0x2c>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = radio_hard_search_main_view;
400e033e:	c650      	sb	v0,16(a2)
400e0340:	c651      	sb	v0,17(a2)
400e0342:	6f00      	li	a3,0
400e0344:	6c00      	li	a0,0
400e0346:	b208      	lw	v0,400e0364 <radio_hard_search_create_main_view+0x30>
    com_view_add(RADIO_MAIN_VIEW_HARD_SEARCH, &create_view_param);
400e0348:	d505      	sw	a1,20(sp)
400e034a:	d406      	sw	a0,24(sp)
400e034c:	cee9      	sh	a3,18(a2)
400e034e:	d307      	sw	v1,28(sp)
400e0350:	6c01      	li	a0,1
400e0352:	ea40      	jalr	v0
400e0354:	0504      	addiu	a1,sp,16
400e0356:	6445      	restore	40,ra
400e0358:	e8a0      	jrc	ra
400e035a:	0000      	addiu	s0,sp,0
400e035c:	ef08      	dsrl	s0,7
400e035e:	bfc1      	lwu	a2,4(a3)
400e0360:	06bd      	addiu	a2,sp,756
400e0362:	401e      	daddiu	s0,s0,-2
400e0364:	5d69      	sltiu	a1,105
400e0366:	485e      	addiu	s0,94

400e0368 <radio_soft_search_create_main_view>:
400e0368:	64c5      	save	40,ra
}

//创建主视图--搜台视图
void __section__(".bank") radio_soft_search_create_main_view(void)
{
400e036a:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_MAIN;
400e036c:	6a00      	li	v0,0
400e036e:	b509      	lw	a1,400e0390 <radio_soft_search_create_main_view+0x28>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 0;
    create_view_param.ke_maplist = radio_search_ke_maplist;
400e0370:	b309      	lw	v1,400e0394 <radio_soft_search_create_main_view+0x2c>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = radio_soft_search_main_view;
400e0372:	c650      	sb	v0,16(a2)
400e0374:	c651      	sb	v0,17(a2)
400e0376:	6f00      	li	a3,0
400e0378:	6c00      	li	a0,0
400e037a:	b208      	lw	v0,400e0398 <radio_soft_search_create_main_view+0x30>
    com_view_add(RADIO_MAIN_VIEW_SOFT_SEARCH, &create_view_param);
400e037c:	d505      	sw	a1,20(sp)
400e037e:	d406      	sw	a0,24(sp)
400e0380:	cee9      	sh	a3,18(a2)
400e0382:	d307      	sw	v1,28(sp)
400e0384:	6c02      	li	a0,2
400e0386:	ea40      	jalr	v0
400e0388:	0504      	addiu	a1,sp,16
400e038a:	6445      	restore	40,ra
400e038c:	e8a0      	jrc	ra
400e038e:	0000      	addiu	s0,sp,0
400e0390:	ef08      	dsrl	s0,7
400e0392:	bfc1      	lwu	a2,4(a3)
400e0394:	065d      	addiu	a2,sp,372
400e0396:	401a      	daddiu	s0,s0,-6
400e0398:	5d69      	sltiu	a1,105
400e039a:	485e      	addiu	s0,94
	...
Disassembly of section BANK_CONTROL_1_4:

40120200 <radio_play_key_deal_seek_next>:
40120200:	b304      	lw	v1,40120210 <radio_play_key_deal_seek_next+0x10>
app_result_e radio_play_key_deal_seek_next(void)
{
    app_result_e result;

    if (g_radio_init_flag == TRUE)
40120202:	a340      	lbu	v0,0(v1)
40120204:	7201      	cmpi	v0,1
40120206:	6a00      	li	v0,0
    {
        return RESULT_NULL;
40120208:	6002      	bteqz	4012020e <radio_play_key_deal_seek_next+0xe>
4012020a:	f100 4a1e 	addiu	v0,286
    }

    result = RESULT_MANUAL_SEARCH_UP;

    return result;
4012020e:	e8a0      	jrc	ra
}
40120210:	9f23      	lw	s1,12(a3)
40120212:	9fc1      	lw	a2,4(a3)

40120214 <radio_play_key_deal_seek_prev>:
40120214:	b304      	lw	v1,40120224 <radio_play_key_deal_seek_prev+0x10>

app_result_e radio_play_key_deal_seek_prev(void)
{
    app_result_e result;

    if (g_radio_init_flag == TRUE)
40120216:	a340      	lbu	v0,0(v1)
40120218:	7201      	cmpi	v0,1
4012021a:	6a00      	li	v0,0
    {
        return RESULT_NULL;
4012021c:	6002      	bteqz	40120222 <radio_play_key_deal_seek_prev+0xe>
4012021e:	f100 4a1f 	addiu	v0,287
    }

    result = RESULT_MANUAL_SEARCH_DOWN;

    return result;
40120222:	e8a0      	jrc	ra
}
40120224:	9f23      	lw	s1,12(a3)
40120226:	9fc1      	lw	a2,4(a3)

40120228 <radio_play_key_deal_auto_search>:
40120228:	b307      	lw	v1,40120244 <radio_play_key_deal_auto_search+0x1c>

app_result_e radio_play_key_deal_switch_next_preset(void)
{
    app_result_e result;

    if (g_radio_init_flag == TRUE)
    {
        return RESULT_NULL;
    }

    result = select_station(SELECT_NEXT_DIRECTION);

    return result;
}

app_result_e radio_play_key_deal_switch_prev_preset(void)
{
    app_result_e result;

    if (g_radio_init_flag == TRUE)
    {
        return RESULT_NULL;
    }

    result = select_station(SELECT_PREV_DIRECTION);

    return result;
}

app_result_e radio_play_key_deal_auto_search(void)
{
    if (g_radio_init_flag == TRUE)
4012022a:	a340      	lbu	v0,0(v1)
4012022c:	6b00      	li	v1,0
    {
        return RESULT_NULL;
4012022e:	7201      	cmpi	v0,1
40120230:	6006      	bteqz	4012023e <radio_play_key_deal_auto_search+0x16>
40120232:	b506      	lw	a1,40120248 <radio_play_key_deal_auto_search+0x20>
    }
    if(g_searching_flag == FALSE)
40120234:	f100 4b1d 	addiu	v1,285
    {
        return RESULT_AUTO_SEARCH;
40120238:	a580      	lbu	a0,0(a1)
4012023a:	2401      	beqz	a0,4012023e <radio_play_key_deal_auto_search+0x16>
4012023c:	6b00      	li	v1,0
    }
    return RESULT_NULL;
4012023e:	e820      	jr	ra
}
40120240:	6743      	move	v0,v1
40120242:	0000      	addiu	s0,sp,0
40120244:	9f23      	lw	s1,12(a3)
40120246:	9fc1      	lw	a2,4(a3)
40120248:	9f25      	lw	s1,20(a3)
4012024a:	9fc1      	lw	a2,4(a3)

4012024c <radio_play_key_deal_play_pause>:
4012024c:	64e3      	save	24,ra,s0

__section__(".text.bank2") app_result_e radio_play_key_deal_switch_band(void)
{
    app_result_e result;
    radio_band_e old_band;

    if (g_radio_init_flag == TRUE)
    {
        return RESULT_NULL;
    }

    old_band = g_radio_config.band_mode;
    //循环切换波段
    if (g_radio_config.band_mode < Band_Europe)
    {
        g_radio_config.band_mode++;
    }
    else
    {
        g_radio_config.band_mode = Band_China_US;
    }

    radio_do_switch_band(old_band, g_radio_config.band_mode);

    result = RESULT_NULL;

    return result;
}

app_result_e radio_play_key_deal_play_pause(void)
{
4012024e:	b317      	lw	v1,401202a8 <radio_play_key_deal_play_pause+0x5c>
    if (g_radio_init_flag == TRUE)
40120250:	a340      	lbu	v0,0(v1)
40120252:	7201      	cmpi	v0,1
40120254:	6013      	bteqz	4012027c <radio_play_key_deal_play_pause+0x30>
40120256:	b016      	lw	s0,401202ac <radio_play_key_deal_play_pause+0x60>
    {
        return RESULT_NULL;
    }
    if (g_playing_flag == TRUE)
40120258:	a080      	lbu	a0,0(s0)
4012025a:	7401      	cmpi	a0,1
4012025c:	6112      	btnez	40120282 <radio_play_key_deal_play_pause+0x36>
4012025e:	6c00      	li	a0,0
    {
        g_playing_flag = FALSE;
        radio_send_msg(NULL, NULL, MSG_FMENGINE_PAUSE);
40120260:	6d00      	li	a1,0
40120262:	b214      	lw	v0,401202b0 <radio_play_key_deal_play_pause+0x64>
40120264:	c0a0      	sb	a1,0(s0)
40120266:	f300 6e1a 	li	a2,794
4012026a:	ea40      	jalr	v0
4012026c:	67a4      	move	a1,a0
4012026e:	b212      	lw	v0,401202b4 <radio_play_key_deal_play_pause+0x68>
        radio_set_mute(SetMUTE);
40120270:	ea40      	jalr	v0
40120272:	6c01      	li	a0,1
40120274:	b211      	lw	v0,401202b8 <radio_play_key_deal_play_pause+0x6c>
        com_tts_state_play(TTS_MODE_ONLYONE, (void*)TTS_PAUSE_SONG);
40120276:	6c00      	li	a0,0
40120278:	ea40      	jalr	v0
4012027a:	6d06      	li	a1,6
4012027c:	6a00      	li	v0,0
        
    }
    else
    {
        com_tts_state_play(TTS_MODE_ONLYONE, (void*)TTS_PLAY_SONG);
        radio_set_mute(releaseMUTE);
        radio_send_msg(NULL, NULL, MSG_FMENGINE_PLAY);
        g_playing_flag = TRUE;
    }

    return RESULT_NULL;
}
4012027e:	6463      	restore	24,ra,s0
40120280:	e8a0      	jrc	ra
40120282:	b20e      	lw	v0,401202b8 <radio_play_key_deal_play_pause+0x6c>
40120284:	6d05      	li	a1,5
40120286:	ea40      	jalr	v0
40120288:	6c00      	li	a0,0
4012028a:	b20b      	lw	v0,401202b4 <radio_play_key_deal_play_pause+0x68>
4012028c:	ea40      	jalr	v0
4012028e:	6c00      	li	a0,0
40120290:	6c00      	li	a0,0
40120292:	b208      	lw	v0,401202b0 <radio_play_key_deal_play_pause+0x64>
40120294:	f300 6e19 	li	a2,793
40120298:	ea40      	jalr	v0
4012029a:	67a4      	move	a1,a0
4012029c:	6e01      	li	a2,1
4012029e:	6a00      	li	v0,0
401202a0:	c0c0      	sb	a2,0(s0)
401202a2:	6463      	restore	24,ra,s0
401202a4:	e8a0      	jrc	ra
401202a6:	0000      	addiu	s0,sp,0
401202a8:	9f23      	lw	s1,12(a3)
401202aa:	9fc1      	lw	a2,4(a3)
401202ac:	9f24      	lw	s1,16(a3)
401202ae:	9fc1      	lw	a2,4(a3)
401202b0:	eda5      	break	45
401202b2:	bfc1      	lwu	a2,4(a3)
401202b4:	0301      	addiu	v1,sp,4
401202b6:	4002      	addiu	s0,s0,2
401202b8:	5c8d      	sltiu	a0,141
401202ba:	483a      	addiu	s0,58

401202bc <radio_play_key_deal_play_mute>:
401202bc:	64e3      	save	24,ra,s0

app_result_e radio_play_key_deal_play_mute(void)
{
401202be:	b311      	lw	v1,40120300 <.LBE2+0x32>
    if (g_radio_init_flag == TRUE)
401202c0:	a340      	lbu	v0,0(v1)
401202c2:	7201      	cmpi	v0,1
401202c4:	6103      	btnez	401202cc <.LBB2>
401202c6:	6a00      	li	v0,0
    {
        return RESULT_NULL;
    }

    com_set_mute(!get_mute_enable());
    if (get_mute_enable() == FALSE)
    {
        radio_set_mute(SetMUTE);
        g_playing_flag = FALSE;
    }
    else
    {
        radio_set_mute(releaseMUTE);
        g_playing_flag = TRUE;
    }

    return RESULT_NULL;
}
401202c8:	6463      	restore	24,ra,s0
401202ca:	e8a0      	jrc	ra

401202cc <.LBB2>:
401202cc:	b00e      	lw	s0,40120300 <.LBE2+0x32>

401202ce <.LBE2>:

///获取静音与否，TRUE表示静音，FALSE表示非静音
static inline bool get_mute_enable(void)
{
    return g_app_info_state.mute_state;
401202ce:	b20f      	lw	v0,40120308 <.LBE2+0x3a>
401202d0:	a080      	lbu	a0,0(s0)
401202d2:	5c01      	sltiu	a0,1
401202d4:	ea40      	jalr	v0
401202d6:	6798      	move	a0,t8
401202d8:	a000      	lbu	s0,0(s0)
401202da:	2808      	bnez	s0,401202ec <.LBE2+0x1e>
401202dc:	b20c      	lw	v0,4012030c <.LBE2+0x3e>
401202de:	ea40      	jalr	v0
401202e0:	6c01      	li	a0,1
401202e2:	b50c      	lw	a1,40120310 <.LBE2+0x42>
401202e4:	6a00      	li	v0,0
401202e6:	c500      	sb	s0,0(a1)
401202e8:	6463      	restore	24,ra,s0
401202ea:	e8a0      	jrc	ra
401202ec:	b208      	lw	v0,40120308 <.LBE2+0x3a>
401202ee:	ea40      	jalr	v0
401202f0:	6c00      	li	a0,0
401202f2:	b608      	lw	a2,40120310 <.LBE2+0x42>
401202f4:	6f01      	li	a3,1
401202f6:	6a00      	li	v0,0
401202f8:	c6e0      	sb	a3,0(a2)
401202fa:	6463      	restore	24,ra,s0
401202fc:	e8a0      	jrc	ra
401202fe:	0000      	addiu	s0,sp,0
40120300:	9f23      	lw	s1,12(a3)
40120302:	9fc1      	lw	a2,4(a3)
40120304:	a0c0      	lbu	a2,0(s0)
40120306:	9fc1      	lw	a2,4(a3)
40120308:	5bb9      	sltiu	v1,185
4012030a:	48be      	addiu	s0,-66
4012030c:	0301      	addiu	v1,sp,4
4012030e:	4002      	addiu	s0,s0,2
40120310:	9f24      	lw	s1,16(a3)
40120312:	9fc1      	lw	a2,4(a3)

40120314 <change_freq>:
40120314:	64f4      	save	32,ra,s0-s1

__section__(".text.bank2") app_result_e radio_play_key_deal_number_input(void)
{
    app_result_e result;
    uint8 number = (uint8) (g_p_view_ke->val - KEY_NUM0);

    if (g_radio_init_flag == TRUE)
    {
        return RESULT_NULL;
    }

    result = radio_play_key_digital_store(number);

    return result;
}

//切换波段
//old_band: 当前频段
//new_band: 新频段
__section__(".text.bank2") void radio_do_switch_band(radio_band_e old_band, radio_band_e new_band)
{
    uint8 *pstatus_tmp;

    //play freq
    uint32 enter_preq;

    uint8 num;
    //save old band infomation
    if (old_band == Band_Japan)
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_jp;
    }
    else if (old_band == Band_Europe)
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_eu;
    }
    else
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_us;
    }
    //save info
    libc_memcpy(pstatus_tmp, &g_radio_config.FMStatus, sizeof(fm_play_status_t));

    //改变波段
    radio_set_band(new_band);

    //初始化频率指针
    init_point_freq();
    /* 当前播放频段*/
    if (new_band == Band_Japan)
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_jp;
    }
    else if (new_band == Band_Europe)
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_eu;
    }
    else
    {
        pstatus_tmp = (uint8 *) &g_radio_config.FMStatus_us;
    }
    //get new band play status
    libc_memcpy(&g_radio_config.FMStatus, pstatus_tmp, sizeof(fm_play_status_t));

    enter_preq = g_radio_config.FMStatus.freq;

    if ((enter_preq <= max_freq[g_radio_config.band_mode]) && (enter_preq >= min_freq[g_radio_config.band_mode]))
    {
        num = whether_in_list(enter_preq, pfreq);
        //切换后的频点是未保存频点
        if (num == 0xff)
        {
            g_radio_config.FMStatus.station = 0;
            com_view_update(RADIO_MAIN_VIEW_PLAY);
        }
        else
        {
            //切换后的频点是已保存频点
            g_radio_config.FMStatus.station = num;
            //电台号界面
            radio_station_create_msg_view(2000);
            //更新频点播放
            radio_set_freq(g_radio_config.FMStatus.freq);
            return;
        }
    }
    else
    {
        //如果预设电台表中不存在,则播放该波段最小频率
        g_radio_config.FMStatus.freq = min_freq[new_band];
    }

    //更新频点播放
    radio_set_freq(g_radio_config.FMStatus.freq);
}

//切换到上一个或下一个频率
//dir: 切换方向
app_result_e change_freq(FM_SeekDir_e dir)
{
40120316:	b12a      	lw	s1,401203bc <change_freq+0xa8>
    app_result_e ret = RESULT_NULL;
    uint8 space;
    uint8 num;
    //步长
    space = 100;

    if (g_radio_config.band_mode == Band_Europe)
40120318:	ec11      	zeb	a0
4012031a:	f200 a144 	lbu	v0,516(s1)
4012031e:	6d64      	li	a1,100
40120320:	7202      	cmpi	v0,2
40120322:	6101      	btnez	40120326 <change_freq+0x12>
40120324:	4dce      	addiu	a1,-50
    {
        //欧洲频段,  以50k为步进
        space = 50;
40120326:	7401      	cmpi	a0,1
    }

    if (dir == DIR_UP)
40120328:	6121      	btnez	4012036c <change_freq+0x58>
4012032a:	b726      	lw	a3,401203c0 <change_freq+0xac>
    {
        if (g_radio_config.FMStatus.freq < max_freq[g_radio_config.band_mode])
4012032c:	3448      	sll	a0,v0,2
4012032e:	e4f9      	addu	a2,a0,a3
40120330:	f1e0 997c 	lw	v1,508(s1)
40120334:	9e40      	lw	v0,0(a2)
40120336:	eb43      	sltu	v1,v0
40120338:	e3a9      	addu	v0,v1,a1
        {
            //向上切换频率
            g_radio_config.FMStatus.freq += space;
4012033a:	603c      	bteqz	401203b4 <change_freq+0xa0>
4012033c:	b723      	lw	a3,401203c8 <change_freq+0xb4>
        }
        else
        {
            //最大频点切换到最小
            g_radio_config.FMStatus.freq = min_freq[g_radio_config.band_mode];
        }
    }
    else
    {
        if (g_radio_config.FMStatus.freq > min_freq[g_radio_config.band_mode])
        {
            //向下切换
            g_radio_config.FMStatus.freq -= space;
        }
        else
        {
            //最小频点切换到最大
            g_radio_config.FMStatus.freq = max_freq[g_radio_config.band_mode];
        }
    }

    //判断切换后的频点是否在当前所播放的预设电台表中
    num = whether_in_list(g_radio_config.FMStatus.freq, pfreq);
4012033e:	f1e0 d95c 	sw	v0,508(s1)
40120342:	f1e0 999c 	lw	a0,508(s1)
40120346:	9fa0      	lw	a1,0(a3)
40120348:	b221      	lw	v0,401203cc <change_freq+0xb8>
4012034a:	ea40      	jalr	v0
4012034c:	6711      	move	s0,s1
4012034e:	72ff      	cmpi	v0,255

    //切换后的频点是未保存频点
    if (num == 0xff)
40120350:	6124      	btnez	4012039a <change_freq+0x86>
40120352:	6c00      	li	a0,0
    {
        //没有在预设电台表中
        g_radio_config.FMStatus.station = 0;
40120354:	b21f      	lw	v0,401203d0 <change_freq+0xbc>
        com_view_update(RADIO_MAIN_VIEW_PLAY);
40120356:	f200 c180 	sb	a0,512(s1)
4012035a:	ea40      	jalr	v0
4012035c:	6c00      	li	a0,0
4012035e:	f1e0 999c 	lw	a0,508(s1)
        //更新频点播放
        radio_set_freq(g_radio_config.FMStatus.freq);
40120362:	b21d      	lw	v0,401203d4 <change_freq+0xc0>
    }
    else
    {
        //切换后的频点是已保存频点
        g_radio_config.FMStatus.station = num;
        //电台号界面
        radio_station_create_msg_view(2000);

        //更新频点播放
        radio_set_freq(g_radio_config.FMStatus.freq);
40120364:	eac0      	jalrc	v0
40120366:	6a00      	li	v0,0
    }

    return ret;
}
40120368:	6474      	restore	32,ra,s0-s1
4012036a:	e8a0      	jrc	ra
4012036c:	b616      	lw	a2,401203c0 <change_freq+0xac>
4012036e:	3448      	sll	a0,v0,2
40120370:	e4c9      	addu	v0,a0,a2
40120372:	f1e0 991c 	lw	s0,508(s1)
40120376:	9a60      	lw	v1,0(v0)
40120378:	e0ab      	subu	v0,s0,a1
4012037a:	eb03      	sltu	v1,s0
4012037c:	61df      	btnez	4012033c <change_freq+0x28>
4012037e:	b211      	lw	v0,401203c0 <change_freq+0xac>
40120380:	e455      	addu	a1,a0,v0
40120382:	9d40      	lw	v0,0(a1)
40120384:	b711      	lw	a3,401203c8 <change_freq+0xb4>
40120386:	f1e0 d95c 	sw	v0,508(s1)
4012038a:	f1e0 999c 	lw	a0,508(s1)
4012038e:	9fa0      	lw	a1,0(a3)
40120390:	b20f      	lw	v0,401203cc <change_freq+0xb8>
40120392:	ea40      	jalr	v0
40120394:	6711      	move	s0,s1
40120396:	72ff      	cmpi	v0,255
40120398:	60dc      	bteqz	40120352 <change_freq+0x3e>
4012039a:	b310      	lw	v1,401203d8 <change_freq+0xc4>
4012039c:	f200 c140 	sb	v0,512(s1)
401203a0:	f7c0 6c10 	li	a0,2000
401203a4:	ebc0      	jalrc	v1
401203a6:	f1e0 999c 	lw	a0,508(s1)
401203aa:	b20b      	lw	v0,401203d4 <change_freq+0xc0>
401203ac:	eac0      	jalrc	v0
401203ae:	6a00      	li	v0,0
401203b0:	6474      	restore	32,ra,s0-s1
401203b2:	e8a0      	jrc	ra
401203b4:	b204      	lw	v0,401203c0 <change_freq+0xac>
401203b6:	e455      	addu	a1,a0,v0
401203b8:	9d40      	lw	v0,0(a1)
401203ba:	17e4      	b	40120384 <change_freq+0x70>
401203bc:	9a9c      	lw	a0,112(v0)
401203be:	9fc1      	lw	a2,4(a3)
401203c0:	ee2c      	and	a2,s1
401203c2:	bfc1      	lwu	a2,4(a3)
401203c4:	ee20      	0xee20
401203c6:	bfc1      	lwu	a2,4(a3)
401203c8:	9ca8      	lw	a1,32(a0)
401203ca:	9fc1      	lw	a2,4(a3)
401203cc:	ecbd      	dmultu	a0,a1
401203ce:	bfc1      	lwu	a2,4(a3)
401203d0:	ec5d      	dmultu	a0,v0
401203d2:	bfc1      	lwu	a2,4(a3)
401203d4:	0359      	addiu	v1,sp,356
401203d6:	4002      	addiu	s0,s0,2
401203d8:	023d      	addiu	v0,sp,244
401203da:	400e      	addiu	s0,s0,-2

401203dc <radio_play_key_deal_prev_freq>:
401203dc:	64c3      	save	24,ra
401203de:	b307      	lw	v1,401203f8 <radio_play_key_deal_prev_freq+0x1c>
401203e0:	a340      	lbu	v0,0(v1)
401203e2:	7201      	cmpi	v0,1
401203e4:	6a00      	li	v0,0
401203e6:	6102      	btnez	401203ec <radio_play_key_deal_prev_freq+0x10>
401203e8:	6443      	restore	24,ra
401203ea:	e8a0      	jrc	ra
401203ec:	6782      	move	a0,v0
401203ee:	b204      	lw	v0,401203fc <radio_play_key_deal_prev_freq+0x20>
401203f0:	eac0      	jalrc	v0
401203f2:	6443      	restore	24,ra
401203f4:	e8a0      	jrc	ra
401203f6:	0000      	addiu	s0,sp,0
401203f8:	9f23      	lw	s1,12(a3)
401203fa:	9fc1      	lw	a2,4(a3)
401203fc:	0315      	addiu	v1,sp,84
401203fe:	4012      	daddiu	s0,s0,2

40120400 <radio_play_key_deal_next_freq>:
40120400:	64c3      	save	24,ra
40120402:	b307      	lw	v1,4012041c <radio_play_key_deal_next_freq+0x1c>
40120404:	a340      	lbu	v0,0(v1)
40120406:	7201      	cmpi	v0,1
40120408:	6a00      	li	v0,0
4012040a:	6102      	btnez	40120410 <radio_play_key_deal_next_freq+0x10>
4012040c:	6443      	restore	24,ra
4012040e:	e8a0      	jrc	ra
40120410:	b204      	lw	v0,4012041c <radio_play_key_deal_next_freq+0x1c>
40120412:	ea40      	jalr	v0
40120414:	6c01      	li	a0,1
40120416:	6443      	restore	24,ra
40120418:	e8a0      	jrc	ra
4012041a:	0000      	addiu	s0,sp,0
4012041c:	9f23      	lw	s1,12(a3)
4012041e:	9fc1      	lw	a2,4(a3)
40120420:	0315      	addiu	v1,sp,84
40120422:	4012      	daddiu	s0,s0,2

40120424 <select_station>:
40120424:	64f4      	save	32,ra,s0-s1

//处理数字输入按键消息
//number: 0~9
/*******************************************************************************/
__section__(".text.bank2") app_result_e radio_play_key_digital_store(uint8 number)
{
    //buffer满则清空重新保存,并且离开数字点播界面也要清空
    if ((g_digital_count >= MAX_DIGITAL_COUNT) || (g_digit_input_flag == FALSE))
    {
        g_digital_count = 0;
        libc_memset(g_digital_buf, 0, MAX_DIGITAL_COUNT);
    }

    g_digital_buf[g_digital_count] = number;

    g_digital_count++;

    g_digit_input_flag = TRUE;

    //显示数字
    radio_digit_create_sub_view(2000);

    return RESULT_NULL;
}

//切换到下一个已保存电台
//direction: 切换电台方向，0表示切换到上一个电台，1表示切换到下一个电台
app_result_e select_station(uint8 direction)
{
40120426:	b244      	lw	v0,40120534 <select_station+0x110>
    app_result_e ret = RESULT_NULL;

    //循环查找
    uint8 i, cur_num;
    //电台频率值
    uint32 station_freq;

    radio_set_mute(SetMUTE);
40120428:	6704      	move	s0,a0
4012042a:	ea40      	jalr	v0
4012042c:	6c01      	li	a0,1
4012042e:	b543      	lw	a1,40120538 <select_station+0x114>

    //预设列表中有已保存电台
    if (g_radio_config.FMStatus.station_count > 0)
40120430:	e811      	zeb	s0
40120432:	f200 a5e1 	lbu	a3,513(a1)
40120436:	653d      	move	t9,a1
40120438:	6787      	move	a0,a3
4012043a:	ec11      	zeb	a0
4012043c:	245f      	beqz	a0,401204fc <select_station+0xd8>
4012043e:	f200 a540 	lbu	v0,512(a1)
    {
        if (g_radio_config.FMStatus.station == 0)
40120442:	6762      	move	v1,v0
40120444:	eb11      	zeb	v1
40120446:	2b4f      	bnez	v1,401204e6 <select_station+0xc2>
40120448:	6e01      	li	a2,1
        {
            //当前不在预设列表中的频点上，切换到第一个频点
            g_radio_config.FMStatus.station = 1;
4012044a:	eb83      	sltu	v1,a0
            for (i = 0; i < g_radio_config.FMStatus.station_count; i++)
4012044c:	f200 c5c0 	sb	a2,512(a1)
40120450:	6052      	bteqz	401204f6 <select_station+0xd2>
40120452:	b23b      	lw	v0,4012053c <select_station+0x118>
40120454:	f1e0 9dbc 	lw	a1,508(a1)
40120458:	9ac0      	lw	a2,0(v0)
4012045a:	3268      	sll	v0,v1,2
            {
                if (pfreq[i] >= g_radio_config.FMStatus.freq)
4012045c:	e2c9      	addu	v0,a2
4012045e:	9a40      	lw	v0,0(v0)
40120460:	eaa3      	sltu	v0,a1
40120462:	6063      	bteqz	4012052a <select_station+0x106>
40120464:	4341      	addiu	v0,v1,1
40120466:	6762      	move	v1,v0
40120468:	eb11      	zeb	v1
4012046a:	eb83      	sltu	v1,a0
4012046c:	61f6      	btnez	4012045a <select_station+0x36>
4012046e:	6759      	move	v0,t9
                {
                    g_radio_config.FMStatus.station = i + 1;
                    break;
                }
            }
        }
        else
        {
            if (direction == SELECT_NEXT_DIRECTION)
            {
                if (g_radio_config.FMStatus.station < g_radio_config.FMStatus.station_count)
                {
                    //切换电台号
                    g_radio_config.FMStatus.station++;
                }
                else
                {
                    //最后回第一项
                    g_radio_config.FMStatus.station = 1;
                }
            }
            else
            {
                if (g_radio_config.FMStatus.station > 1)
                {
                    //切换电台号
                    g_radio_config.FMStatus.station--;
                }
                else
                {
                    //最后回第一项
                    g_radio_config.FMStatus.station = g_radio_config.FMStatus.station_count;
                }
            }
        }
        cur_num = g_radio_config.FMStatus.station;
40120470:	f200 a280 	lbu	a0,512(v0)
40120474:	6d00      	li	a1,0
        for (i = 0; i < g_radio_config.FMStatus.station_count; i++)
40120476:	271f      	beqz	a3,401204b6 <select_station+0x92>
40120478:	6739      	move	s1,t9
4012047a:	f200 a164 	lbu	v1,516(s1)
4012047e:	b731      	lw	a3,40120540 <select_station+0x11c>
40120480:	3268      	sll	v0,v1,2
40120482:	b331      	lw	v1,40120544 <select_station+0x120>
40120484:	e2e1      	addu	s0,v0,a3
40120486:	98e0      	lw	a3,0(s0)
40120488:	e261      	addu	s0,v0,v1
4012048a:	3388      	sll	v1,a0,2
        {
            station_freq = *(pfreq + cur_num - 1);
4012048c:	e3c9      	addu	v0,v1,a2
4012048e:	f7ff 9a7c 	lw	v1,-4(v0)
40120492:	ebe3      	sltu	v1,a3
            if ((station_freq >= min_freq[g_radio_config.band_mode]) && (station_freq
40120494:	6103      	btnez	4012049c <select_station+0x78>
40120496:	9840      	lw	v0,0(s0)
40120498:	ea63      	sltu	v0,v1
4012049a:	600d      	bteqz	401204b6 <select_station+0x92>
4012049c:	4461      	addiu	v1,a0,1
                    <= max_freq[g_radio_config.band_mode]))
            {
                //找到有效台，退出
                break;
            }
            else
            {
                //向下查找
                cur_num++;
4012049e:	6783      	move	a0,v1
401204a0:	f200 a161 	lbu	v1,513(s1)
                if (cur_num > g_radio_config.FMStatus.station_count)
401204a4:	ec11      	zeb	a0
401204a6:	eb83      	sltu	v1,a0
401204a8:	6001      	bteqz	401204ac <select_station+0x88>
401204aa:	6c01      	li	a0,1
                {
                    cur_num = 1;
401204ac:	4541      	addiu	v0,a1,1
401204ae:	67a2      	move	a1,v0
401204b0:	ed11      	zeb	a1
401204b2:	ed63      	sltu	a1,v1
401204b4:	61ea      	btnez	4012048a <select_station+0x66>
401204b6:	3388      	sll	v1,a0,2
                }
            }
        }
        //找到有效电台
        g_radio_config.FMStatus.station = cur_num;
        //通过电台号获取频率值
        g_radio_config.FMStatus.freq = *(pfreq + g_radio_config.FMStatus.station - 1);
401204b8:	67b9      	move	a1,t9
401204ba:	e3dd      	addu	a3,v1,a2
401204bc:	f200 c580 	sb	a0,512(a1)
401204c0:	478c      	addiu	a0,a3,-4
401204c2:	9cc0      	lw	a2,0(a0)
401204c4:	b221      	lw	v0,40120548 <select_station+0x124>

        //刷新电台号
        radio_station_create_msg_view(2000);
401204c6:	f1e0 dddc 	sw	a2,508(a1)
401204ca:	f7c0 6c10 	li	a0,2000
401204ce:	eac0      	jalrc	v0
    }
    else
    {
        //没有电台也要播报频点
        radio_freq_tts_play(g_radio_config.FMStatus.freq);
401204d0:	b51a      	lw	a1,40120534 <select_station+0x110>
    }

    //更新频点播放(没有保存电台也需要重新设置频点)
    radio_set_freq(g_radio_config.FMStatus.freq);
401204d2:	b220      	lw	v0,40120550 <select_station+0x12c>
401204d4:	f1e0 9d9c 	lw	a0,508(a1)
401204d8:	eac0      	jalrc	v0
401204da:	b217      	lw	v0,40120534 <select_station+0x110>
    radio_set_mute(releaseMUTE);
401204dc:	ea40      	jalr	v0
401204de:	6c00      	li	a0,0
401204e0:	6a00      	li	v0,0
    return ret;
}
401204e2:	6474      	restore	32,ra,s0-s1
401204e4:	e8a0      	jrc	ra
401204e6:	7001      	cmpi	s0,1
401204e8:	6118      	btnez	4012051a <select_station+0xf6>
401204ea:	eb83      	sltu	v1,a0
401204ec:	4241      	addiu	v0,v0,1
401204ee:	6101      	btnez	401204f2 <select_station+0xce>
401204f0:	6a01      	li	v0,1
401204f2:	f200 c540 	sb	v0,512(a1)
401204f6:	b512      	lw	a1,4012053c <select_station+0x118>
401204f8:	9dc0      	lw	a2,0(a1)
401204fa:	17b9      	b	4012046e <select_station+0x4a>
401204fc:	f1e0 9d9c 	lw	a0,508(a1)
40120500:	b213      	lw	v0,4012054c <select_station+0x128>
40120502:	eac0      	jalrc	v0
40120504:	b50d      	lw	a1,40120534 <select_station+0x110>
40120506:	b213      	lw	v0,40120550 <select_station+0x12c>
40120508:	f1e0 9d9c 	lw	a0,508(a1)
4012050c:	eac0      	jalrc	v0
4012050e:	b20a      	lw	v0,40120534 <select_station+0x110>
40120510:	ea40      	jalr	v0
40120512:	6c00      	li	a0,0
40120514:	6a00      	li	v0,0
40120516:	6474      	restore	32,ra,s0-s1
40120518:	e8a0      	jrc	ra
4012051a:	5b02      	sltiu	v1,2
4012051c:	424f      	addiu	v0,v0,-1
4012051e:	60e9      	bteqz	401204f2 <select_station+0xce>
40120520:	f200 c5e0 	sb	a3,512(a1)
40120524:	b506      	lw	a1,4012053c <select_station+0x118>
40120526:	9dc0      	lw	a2,0(a1)
40120528:	17a2      	b	4012046e <select_station+0x4a>
4012052a:	4381      	addiu	a0,v1,1
4012052c:	6779      	move	v1,t9
4012052e:	f200 c380 	sb	a0,512(v1)
40120532:	179d      	b	4012046e <select_station+0x4a>
40120534:	0301      	addiu	v1,sp,4
40120536:	4002      	addiu	s0,s0,2
40120538:	9a9c      	lw	a0,112(v0)
4012053a:	9fc1      	lw	a2,4(a3)
4012053c:	9ca8      	lw	a1,32(a0)
4012053e:	9fc1      	lw	a2,4(a3)
40120540:	ee20      	0xee20
40120542:	bfc1      	lwu	a2,4(a3)
40120544:	ee2c      	and	a2,s1
40120546:	bfc1      	lwu	a2,4(a3)
40120548:	023d      	addiu	v0,sp,244
4012054a:	400e      	addiu	s0,s0,-2
4012054c:	06f5      	addiu	a2,sp,980
4012054e:	4006      	addiu	s0,s0,6
40120550:	0359      	addiu	v1,sp,356
40120552:	4002      	addiu	s0,s0,2

40120554 <radio_play_key_deal_switch_prev_preset>:
40120554:	64c3      	save	24,ra
40120556:	b307      	lw	v1,40120570 <radio_play_key_deal_switch_prev_preset+0x1c>
40120558:	a340      	lbu	v0,0(v1)
4012055a:	7201      	cmpi	v0,1
4012055c:	6a00      	li	v0,0
4012055e:	6102      	btnez	40120564 <radio_play_key_deal_switch_prev_preset+0x10>
40120560:	6443      	restore	24,ra
40120562:	e8a0      	jrc	ra
40120564:	6782      	move	a0,v0
40120566:	b204      	lw	v0,40120574 <radio_play_key_deal_switch_prev_preset+0x20>
40120568:	eac0      	jalrc	v0
4012056a:	6443      	restore	24,ra
4012056c:	e8a0      	jrc	ra
4012056e:	0000      	addiu	s0,sp,0
40120570:	9f23      	lw	s1,12(a3)
40120572:	9fc1      	lw	a2,4(a3)
40120574:	0425      	addiu	a0,sp,148
40120576:	4012      	daddiu	s0,s0,2

40120578 <radio_play_key_deal_switch_next_preset>:
40120578:	64c3      	save	24,ra
4012057a:	b307      	lw	v1,40120594 <radio_play_key_deal_switch_next_preset+0x1c>
4012057c:	a340      	lbu	v0,0(v1)
4012057e:	7201      	cmpi	v0,1
40120580:	6a00      	li	v0,0
40120582:	6102      	btnez	40120588 <radio_play_key_deal_switch_next_preset+0x10>
40120584:	6443      	restore	24,ra
40120586:	e8a0      	jrc	ra
40120588:	b204      	lw	v0,40120594 <radio_play_key_deal_switch_next_preset+0x1c>
4012058a:	ea40      	jalr	v0
4012058c:	6c01      	li	a0,1
4012058e:	6443      	restore	24,ra
40120590:	e8a0      	jrc	ra
40120592:	0000      	addiu	s0,sp,0
40120594:	9f23      	lw	s1,12(a3)
40120596:	9fc1      	lw	a2,4(a3)
40120598:	0425      	addiu	a0,sp,148
4012059a:	4012      	daddiu	s0,s0,2

4012059c <radio_digital_to_chanel>:
4012059c:	64f4      	save	32,ra,s0-s1

//digital如果小于g_radio_config.FMStatus.station_count
//  (预设电台总数(不超过MAX_STATION_COUNT))
//  那么，digital就表示预设电台的数组的下标。
//  否则digital表示的是频率(单位50kHz)
//  (此时digital的最小值是76M/50k=1520,
//  所以,g_digital_count肯定被设置为4了)
app_result_e radio_digital_to_chanel(uint16 digital)
{
4012059e:	b133      	lw	s1,40120668 <radio_digital_to_chanel+0xcc>
    //电台频率
    uint32 chanel_freq;
    uint8 chanel_num;

    radio_set_mute(SetMUTE);
401205a0:	6704      	move	s0,a0
401205a2:	e940      	jalr	s1
401205a4:	6c01      	li	a0,1
401205a6:	b132      	lw	s1,4012066c <radio_digital_to_chanel+0xd0>

    if (digital <= g_radio_config.FMStatus.station_count)
401205a8:	e831      	zeh	s0
401205aa:	f200 a141 	lbu	v0,513(s1)
401205ae:	ea03      	sltu	v0,s0
401205b0:	6119      	btnez	401205e4 <radio_digital_to_chanel+0x48>
401205b2:	b630      	lw	a2,40120670 <radio_digital_to_chanel+0xd4>
    {
        //选择电台号
        chanel_freq = *(pfreq + digital - 1);
401205b4:	f200 a144 	lbu	v0,516(s1)
        if ((chanel_freq >= min_freq[g_radio_config.band_mode]) && (chanel_freq <= max_freq[g_radio_config.band_mode]))
401205b8:	9e60      	lw	v1,0(a2)
401205ba:	3408      	sll	a0,s0,2
401205bc:	b72e      	lw	a3,40120674 <radio_digital_to_chanel+0xd8>
401205be:	e475      	addu	a1,a0,v1
401205c0:	3348      	sll	v1,v0,2
401205c2:	e3f9      	addu	a2,v1,a3
401205c4:	f7ff 9d9c 	lw	a0,-4(a1)
401205c8:	9ea0      	lw	a1,0(a2)
401205ca:	eca3      	sltu	a0,a1
401205cc:	6105      	btnez	401205d8 <radio_digital_to_chanel+0x3c>
401205ce:	b52b      	lw	a1,40120678 <radio_digital_to_chanel+0xdc>
401205d0:	e3a9      	addu	v0,v1,a1
401205d2:	9ae0      	lw	a3,0(v0)
401205d4:	ef83      	sltu	a3,a0
401205d6:	602e      	bteqz	40120634 <radio_digital_to_chanel+0x98>
401205d8:	b224      	lw	v0,40120668 <radio_digital_to_chanel+0xcc>
        {
            //是有效电台
            g_radio_config.FMStatus.station = (uint8) digital;
            //通过电台号获取频率值
            g_radio_config.FMStatus.freq = chanel_freq;
            //电台号界面
            radio_station_create_msg_view(2000);
            //更新频点播放
            radio_set_freq(g_radio_config.FMStatus.freq);
        }
    }
    else if (g_digital_count >= 3)
    {
        //频率数字
        chanel_freq = digital * 50;
        if ((chanel_freq >= min_freq[g_radio_config.band_mode]) && (chanel_freq <= max_freq[g_radio_config.band_mode]))
        {
            g_radio_config.FMStatus.freq = chanel_freq;
            //输入频点是未保存频点
            chanel_num = whether_in_list(chanel_freq, pfreq);
            if (chanel_num == 0xff)
            {
                //没有在预设电台表中
                g_radio_config.FMStatus.station = 0;
                com_view_update(RADIO_MAIN_VIEW_PLAY);
            }
            else
            {
                //切换后的频点是已保存频点
                g_radio_config.FMStatus.station = chanel_num;
                //电台号界面
                radio_station_create_msg_view(2000);
            }
            //更新频点播放
            radio_set_freq(g_radio_config.FMStatus.freq);
        }
    }
    else
    {
        ; //QAC
    }

    radio_set_mute(releaseMUTE);
401205da:	ea40      	jalr	v0
401205dc:	6c00      	li	a0,0
401205de:	6a00      	li	v0,0
    return RESULT_NULL;
}
401205e0:	6474      	restore	32,ra,s0-s1
401205e2:	e8a0      	jrc	ra
401205e4:	b628      	lw	a2,40120680 <radio_digital_to_chanel+0xe4>
401205e6:	a680      	lbu	a0,0(a2)
401205e8:	5c03      	sltiu	a0,3
401205ea:	61f6      	btnez	401205d8 <radio_digital_to_chanel+0x3c>
401205ec:	3204      	sll	v0,s0,1
401205ee:	e21d      	addu	a3,v0,s0
401205f0:	34ec      	sll	a0,a3,3
401205f2:	f200 a1c4 	lbu	a2,516(s1)
401205f6:	e40d      	addu	v1,a0,s0
401205f8:	b51f      	lw	a1,40120674 <radio_digital_to_chanel+0xd8>
401205fa:	3464      	sll	a0,v1,1
401205fc:	33c8      	sll	v1,a2,2
401205fe:	e3a9      	addu	v0,v1,a1
40120600:	9ae0      	lw	a3,0(v0)
40120602:	ece3      	sltu	a0,a3
40120604:	61e9      	btnez	401205d8 <radio_digital_to_chanel+0x3c>
40120606:	b71d      	lw	a3,40120678 <radio_digital_to_chanel+0xdc>
40120608:	e3f9      	addu	a2,v1,a3
4012060a:	9ea0      	lw	a1,0(a2)
4012060c:	ed83      	sltu	a1,a0
4012060e:	61e4      	btnez	401205d8 <radio_digital_to_chanel+0x3c>
40120610:	b318      	lw	v1,40120670 <radio_digital_to_chanel+0xd4>
40120612:	b21e      	lw	v0,40120688 <radio_digital_to_chanel+0xec>
40120614:	9ba0      	lw	a1,0(v1)
40120616:	f1e0 d99c 	sw	a0,508(s1)
4012061a:	eac0      	jalrc	v0
4012061c:	72ff      	cmpi	v0,255
4012061e:	611c      	btnez	40120658 <radio_digital_to_chanel+0xbc>
40120620:	6c00      	li	a0,0
40120622:	b21b      	lw	v0,4012068c <radio_digital_to_chanel+0xf0>
40120624:	f200 c180 	sb	a0,512(s1)
40120628:	ea40      	jalr	v0
4012062a:	6c00      	li	a0,0
4012062c:	b510      	lw	a1,4012066c <radio_digital_to_chanel+0xd0>
4012062e:	f1e0 9d9c 	lw	a0,508(a1)
40120632:	100a      	b	40120648 <radio_digital_to_chanel+0xac>
40120634:	b312      	lw	v1,4012067c <radio_digital_to_chanel+0xe0>
40120636:	f1e0 d99c 	sw	a0,508(s1)
4012063a:	f200 c100 	sb	s0,512(s1)
4012063e:	f7c0 6c10 	li	a0,2000
40120642:	ebc0      	jalrc	v1
40120644:	f1e0 999c 	lw	a0,508(s1)
40120648:	b20e      	lw	v0,40120680 <radio_digital_to_chanel+0xe4>
4012064a:	eac0      	jalrc	v0
4012064c:	b207      	lw	v0,40120664 <radio_digital_to_chanel+0xc8>
4012064e:	ea40      	jalr	v0
40120650:	6c00      	li	a0,0
40120652:	6a00      	li	v0,0
40120654:	6474      	restore	32,ra,s0-s1
40120656:	e8a0      	jrc	ra
40120658:	b309      	lw	v1,40120678 <radio_digital_to_chanel+0xdc>
4012065a:	f200 c140 	sb	v0,512(s1)
4012065e:	f7c0 6c10 	li	a0,2000
40120662:	ebc0      	jalrc	v1
40120664:	17e3      	b	4012062c <radio_digital_to_chanel+0x90>
40120666:	0000      	addiu	s0,sp,0
40120668:	0301      	addiu	v1,sp,4
4012066a:	4002      	addiu	s0,s0,2
4012066c:	9a9c      	lw	a0,112(v0)
4012066e:	9fc1      	lw	a2,4(a3)
40120670:	9ca8      	lw	a1,32(a0)
40120672:	9fc1      	lw	a2,4(a3)
40120674:	ee20      	0xee20
40120676:	bfc1      	lwu	a2,4(a3)
40120678:	ee2c      	and	a2,s1
4012067a:	bfc1      	lwu	a2,4(a3)
4012067c:	023d      	addiu	v0,sp,244
4012067e:	400e      	addiu	s0,s0,-2
40120680:	0359      	addiu	v1,sp,356
40120682:	4002      	addiu	s0,s0,2
40120684:	9f0c      	lw	s0,48(a3)
40120686:	9fc1      	lw	a2,4(a3)
40120688:	ecbd      	dmultu	a0,a1
4012068a:	bfc1      	lwu	a2,4(a3)
4012068c:	ec5d      	dmultu	a0,v0
4012068e:	bfc1      	lwu	a2,4(a3)

40120690 <radio_play_key_digital_sure>:
40120690:	64f4      	save	32,ra,s0-s1

//数字选台
app_result_e radio_play_key_digital_sure(void)
{
40120692:	b21a      	lw	v0,401206f8 <radio_play_key_digital_sure+0x68>
    app_result_e deal_ret;
    //选中电台
    uint16 digital_num = 0;
    uint16 curbit_multi = 1;
    uint8 i;
    for (i = 1; i < g_digital_count; i++)
40120694:	6d01      	li	a1,1
40120696:	a2e0      	lbu	a3,0(v0)
40120698:	6c00      	li	a0,0
4012069a:	67c7      	move	a2,a3
4012069c:	ee11      	zeb	a2
4012069e:	edc3      	sltu	a1,a2
401206a0:	6765      	move	v1,a1
401206a2:	600a      	bteqz	401206b8 <radio_play_key_digital_sure+0x28>
401206a4:	32a8      	sll	v0,a1,2
    {
        curbit_multi = curbit_multi * 10;
401206a6:	e2a9      	addu	v0,a1
401206a8:	3244      	sll	v0,1
401206aa:	67a2      	move	a1,v0
401206ac:	4341      	addiu	v0,v1,1
401206ae:	6762      	move	v1,v0
401206b0:	eb11      	zeb	v1
401206b2:	ed31      	zeh	a1
401206b4:	ebc3      	sltu	v1,a2
401206b6:	61f6      	btnez	401206a4 <radio_play_key_digital_sure+0x14>
401206b8:	6767      	move	v1,a3
    }
    for (i = g_digital_count; i > 0; i--)
401206ba:	eb11      	zeb	v1
401206bc:	2314      	beqz	v1,401206e6 <radio_play_key_digital_sure+0x56>
401206be:	b010      	lw	s0,401206fc <radio_play_key_digital_sure+0x6c>
401206c0:	b710      	lw	a3,40120700 <radio_play_key_digital_sure+0x70>
401206c2:	67c3      	move	a2,v1
401206c4:	e667      	subu	s1,a2,v1
    {
        digital_num = digital_num + g_digital_buf[g_digital_count - i] * curbit_multi;
401206c6:	e109      	addu	v0,s1,s0
401206c8:	a220      	lbu	s1,0(v0)
401206ca:	ed38      	mult	a1,s1
401206cc:	e912      	mflo	s1
401206ce:	edf9      	multu	a1,a3
        curbit_multi = curbit_multi / 10;
401206d0:	e189      	addu	v0,s1,a0
401206d2:	ed10      	mfhi	a1
401206d4:	6782      	move	a0,v0
401206d6:	32ae      	srl	v0,a1,3
401206d8:	67a2      	move	a1,v0
401206da:	434f      	addiu	v0,v1,-1
401206dc:	6762      	move	v1,v0
401206de:	eb11      	zeb	v1
401206e0:	ec31      	zeh	a0
401206e2:	ed31      	zeh	a1
401206e4:	2bef      	bnez	v1,401206c4 <radio_play_key_digital_sure+0x34>
401206e6:	3484      	sll	a0,1
    }
    //digital_num的单位是:100kHz

    deal_ret = radio_digital_to_chanel(digital_num * 2); //以50KHz为单位
401206e8:	b207      	lw	v0,40120704 <radio_play_key_digital_sure+0x74>
401206ea:	ea40      	jalr	v0
401206ec:	ec31      	zeh	a0
401206ee:	b303      	lw	v1,401206f8 <radio_play_key_digital_sure+0x68>
    //清空buffer
    g_digital_count = 0;
401206f0:	6c00      	li	a0,0
401206f2:	c380      	sb	a0,0(v1)
401206f4:	6474      	restore	32,ra,s0-s1
    return deal_ret;
}
401206f6:	e8a0      	jrc	ra
401206f8:	9f0c      	lw	s0,48(a3)
401206fa:	9fc1      	lw	a2,4(a3)
401206fc:	9f08      	lw	s0,32(a3)
401206fe:	9fc1      	lw	a2,4(a3)
40120700:	cccd      	sh	a2,26(a0)
40120702:	cccc      	sh	a2,24(a0)
40120704:	059d      	addiu	a1,sp,628
40120706:	4012      	daddiu	s0,s0,2
	...
Disassembly of section BANK_CONTROL_1_5:

40160200 <radio_do_switch_band>:
40160200:	64f4      	save	32,ra,s0-s1
40160202:	ec11      	zeb	a0
40160204:	6705      	move	s0,a1
40160206:	7401      	cmpi	a0,1
40160208:	e811      	zeb	s0
4016020a:	613d      	btnez	40160286 <radio_do_switch_band+0x86>
4016020c:	b12f      	lw	s1,401602c8 <radio_do_switch_band+0xc8>
4016020e:	f1e0 418c 	addiu	a0,s1,492
40160212:	b22f      	lw	v0,401602cc <radio_do_switch_band+0xcc>
40160214:	f1f0 41ac 	addiu	a1,s1,508
40160218:	6e08      	li	a2,8
4016021a:	ea40      	jalr	v0
4016021c:	6f00      	li	a3,0
4016021e:	b22d      	lw	v0,401602d0 <radio_do_switch_band+0xd0>
40160220:	ea40      	jalr	v0
40160222:	6790      	move	a0,s0
40160224:	b22c      	lw	v0,401602d4 <radio_do_switch_band+0xd4>
40160226:	eac0      	jalrc	v0
40160228:	7001      	cmpi	s0,1
4016022a:	f1e0 41ac 	addiu	a1,s1,492
4016022e:	6004      	bteqz	40160238 <radio_do_switch_band+0x38>
40160230:	7002      	cmpi	s0,2
40160232:	f1f0 41a4 	addiu	a1,s1,500
40160236:	6138      	btnez	401602a8 <radio_do_switch_band+0xa8>
40160238:	b124      	lw	s1,401602c8 <radio_do_switch_band+0xc8>
4016023a:	b42f      	lw	a0,401602f4 <radio_do_switch_band+0xf4>
4016023c:	b224      	lw	v0,401602cc <radio_do_switch_band+0xcc>
4016023e:	6e08      	li	a2,8
40160240:	ea40      	jalr	v0
40160242:	6f00      	li	a3,0
40160244:	b32c      	lw	v1,401602f4 <radio_do_switch_band+0xf4>
40160246:	f200 a144 	lbu	v0,516(s1)
4016024a:	b724      	lw	a3,401602d8 <radio_do_switch_band+0xd8>
4016024c:	9b80      	lw	a0,0(v1)
4016024e:	3348      	sll	v1,v0,2
40160250:	e3f9      	addu	a2,v1,a3
40160252:	9ea0      	lw	a1,0(a2)
40160254:	ed83      	sltu	a1,a0
40160256:	611d      	btnez	40160292 <radio_do_switch_band+0x92>
40160258:	b521      	lw	a1,401602dc <radio_do_switch_band+0xdc>
4016025a:	e3bd      	addu	a3,v1,a1
4016025c:	9fc0      	lw	a2,0(a3)
4016025e:	ecc3      	sltu	a0,a2
40160260:	6119      	btnez	40160294 <radio_do_switch_band+0x94>
40160262:	b320      	lw	v1,401602e0 <radio_do_switch_band+0xe0>
40160264:	b220      	lw	v0,401602e4 <radio_do_switch_band+0xe4>
40160266:	ea40      	jalr	v0
40160268:	9ba0      	lw	a1,0(v1)
4016026a:	72ff      	cmpi	v0,255
4016026c:	6124      	btnez	401602b6 <radio_do_switch_band+0xb6>
4016026e:	6c00      	li	a0,0
40160270:	b21e      	lw	v0,401602e8 <radio_do_switch_band+0xe8>
40160272:	f200 c180 	sb	a0,512(s1)
40160276:	ea40      	jalr	v0
40160278:	6c00      	li	a0,0
4016027a:	b51f      	lw	a1,401602f4 <radio_do_switch_band+0xf4>
4016027c:	9d80      	lw	a0,0(a1)
4016027e:	b21d      	lw	v0,401602f0 <radio_do_switch_band+0xf0>
40160280:	eac0      	jalrc	v0
40160282:	6474      	restore	32,ra,s0-s1
40160284:	e8a0      	jrc	ra
40160286:	7402      	cmpi	a0,2
40160288:	6112      	btnez	401602ae <radio_do_switch_band+0xae>
4016028a:	b110      	lw	s1,401602c8 <radio_do_switch_band+0xc8>
4016028c:	f1f0 4184 	addiu	a0,s1,500
40160290:	17c0      	b	40160212 <radio_do_switch_band+0x12>
40160292:	b513      	lw	a1,401602dc <radio_do_switch_band+0xdc>
40160294:	3208      	sll	v0,s0,2
40160296:	e2bd      	addu	a3,v0,a1
40160298:	9f80      	lw	a0,0(a3)
4016029a:	b60c      	lw	a2,401602c8 <radio_do_switch_band+0xc8>
4016029c:	b215      	lw	v0,401602f0 <radio_do_switch_band+0xf0>
4016029e:	f1e0 de9c 	sw	a0,508(a2)
401602a2:	eac0      	jalrc	v0
401602a4:	6474      	restore	32,ra,s0-s1
401602a6:	e8a0      	jrc	ra
401602a8:	f1e0 41a4 	addiu	a1,s1,484
401602ac:	17c5      	b	40160238 <radio_do_switch_band+0x38>
401602ae:	b107      	lw	s1,401602c8 <radio_do_switch_band+0xc8>
401602b0:	f1e0 4184 	addiu	a0,s1,484
401602b4:	17ae      	b	40160212 <radio_do_switch_band+0x12>
401602b6:	b30e      	lw	v1,401602ec <radio_do_switch_band+0xec>
401602b8:	f7c0 6c10 	li	a0,2000
401602bc:	f200 c140 	sb	v0,512(s1)
401602c0:	ebc0      	jalrc	v1
401602c2:	b50d      	lw	a1,401602f4 <radio_do_switch_band+0xf4>
401602c4:	9d80      	lw	a0,0(a1)
401602c6:	17db      	b	4016027e <radio_do_switch_band+0x7e>
401602c8:	9a9c      	lw	a0,112(v0)
401602ca:	9fc1      	lw	a2,4(a3)
401602cc:	e905      	break	8
401602ce:	bfc1      	lwu	a2,4(a3)
401602d0:	0435      	addiu	a0,sp,212
401602d2:	4002      	addiu	s0,s0,2
401602d4:	0241      	addiu	v0,sp,260
401602d6:	4006      	addiu	s0,s0,6
401602d8:	ee2c      	and	a2,s1
401602da:	bfc1      	lwu	a2,4(a3)
401602dc:	ee20      	0xee20
401602de:	bfc1      	lwu	a2,4(a3)
401602e0:	9ca8      	lw	a1,32(a0)
401602e2:	9fc1      	lw	a2,4(a3)
401602e4:	ecbd      	dmultu	a0,a1
401602e6:	bfc1      	lwu	a2,4(a3)
401602e8:	ec5d      	dmultu	a0,v0
401602ea:	bfc1      	lwu	a2,4(a3)
401602ec:	023d      	addiu	v0,sp,244
401602ee:	400e      	addiu	s0,s0,-2
401602f0:	0359      	addiu	v1,sp,356
401602f2:	4002      	addiu	s0,s0,2
401602f4:	9c98      	lw	a0,96(a0)
401602f6:	9fc1      	lw	a2,4(a3)

401602f8 <radio_play_key_deal_switch_band>:
401602f8:	64c3      	save	24,ra
401602fa:	b30c      	lw	v1,40160328 <radio_play_key_deal_switch_band+0x30>
401602fc:	a340      	lbu	v0,0(v1)
401602fe:	7201      	cmpi	v0,1
40160300:	600f      	bteqz	40160320 <radio_play_key_deal_switch_band+0x28>
40160302:	b30b      	lw	v1,4016032c <radio_play_key_deal_switch_band+0x34>
40160304:	f200 a3a4 	lbu	a1,516(v1)
40160308:	6785      	move	a0,a1
4016030a:	ec11      	zeb	a0
4016030c:	5c02      	sltiu	a0,2
4016030e:	4541      	addiu	v0,a1,1
40160310:	6101      	btnez	40160314 <radio_play_key_deal_switch_band+0x1c>
40160312:	6a00      	li	v0,0
40160314:	f200 c344 	sb	v0,516(v1)
40160318:	f200 a3a4 	lbu	a1,516(v1)
4016031c:	b205      	lw	v0,40160330 <radio_play_key_deal_switch_band+0x38>
4016031e:	eac0      	jalrc	v0
40160320:	6a00      	li	v0,0
40160322:	6443      	restore	24,ra
40160324:	e8a0      	jrc	ra
40160326:	0000      	addiu	s0,sp,0
40160328:	9f23      	lw	s1,12(a3)
4016032a:	9fc1      	lw	a2,4(a3)
4016032c:	9a9c      	lw	a0,112(v0)
4016032e:	9fc1      	lw	a2,4(a3)
40160330:	0201      	addiu	v0,sp,4
40160332:	4016      	daddiu	s0,s0,6

40160334 <radio_play_key_digital_store>:
40160334:	64f4      	save	32,ra,s0-s1
40160336:	b012      	lw	s0,4016037c <radio_play_key_digital_store+0x48>
40160338:	6724      	move	s1,a0
4016033a:	a080      	lbu	a0,0(s0)
4016033c:	e911      	zeb	s1
4016033e:	5c04      	sltiu	a0,4
40160340:	6003      	bteqz	40160348 <radio_play_key_digital_store+0x14>
40160342:	b510      	lw	a1,40160380 <radio_play_key_digital_store+0x4c>
40160344:	a540      	lbu	v0,0(a1)
40160346:	2a0a      	bnez	v0,4016035c <radio_play_key_digital_store+0x28>
40160348:	6b00      	li	v1,0
4016034a:	b40f      	lw	a0,40160384 <radio_play_key_digital_store+0x50>
4016034c:	b20f      	lw	v0,40160388 <radio_play_key_digital_store+0x54>
4016034e:	6d00      	li	a1,0
40160350:	c060      	sb	v1,0(s0)
40160352:	6e04      	li	a2,4
40160354:	ea40      	jalr	v0
40160356:	6f01      	li	a3,1
40160358:	b50a      	lw	a1,40160380 <radio_play_key_digital_store+0x4c>
4016035a:	a080      	lbu	a0,0(s0)
4016035c:	b30a      	lw	v1,40160384 <radio_play_key_digital_store+0x50>
4016035e:	6744      	move	v0,a0
40160360:	ea11      	zeb	v0
40160362:	e27d      	addu	a3,v0,v1
40160364:	44c1      	addiu	a2,a0,1
40160366:	b20a      	lw	v0,4016038c <radio_play_key_digital_store+0x58>
40160368:	6c01      	li	a0,1
4016036a:	c580      	sb	a0,0(a1)
4016036c:	c720      	sb	s1,0(a3)
4016036e:	f7c0 6c10 	li	a0,2000
40160372:	ea40      	jalr	v0
40160374:	c0c0      	sb	a2,0(s0)
40160376:	6a00      	li	v0,0
40160378:	6474      	restore	32,ra,s0-s1
4016037a:	e8a0      	jrc	ra
4016037c:	9f0c      	lw	s0,48(a3)
4016037e:	9fc1      	lw	a2,4(a3)
40160380:	9f20      	lw	s1,0(a3)
40160382:	9fc1      	lw	a2,4(a3)
40160384:	9f08      	lw	s0,32(a3)
40160386:	9fc1      	lw	a2,4(a3)
40160388:	e905      	break	8
4016038a:	bfc1      	lwu	a2,4(a3)
4016038c:	02c9      	addiu	v0,sp,804
4016038e:	400e      	addiu	s0,s0,-2

40160390 <radio_play_key_deal_number_input>:
40160390:	64c3      	save	24,ra
40160392:	b609      	lw	a2,401603b4 <radio_play_key_deal_number_input+0x24>
40160394:	b309      	lw	v1,401603b8 <radio_play_key_deal_number_input+0x28>
40160396:	9e80      	lw	a0,0(a2)
40160398:	a340      	lbu	v0,0(v1)
4016039a:	a4a0      	lbu	a1,0(a0)
4016039c:	7201      	cmpi	v0,1
4016039e:	4df0      	addiu	a1,-16
401603a0:	6785      	move	a0,a1
401603a2:	ec11      	zeb	a0
401603a4:	6a00      	li	v0,0
401603a6:	6102      	btnez	401603ac <radio_play_key_deal_number_input+0x1c>
401603a8:	6443      	restore	24,ra
401603aa:	e8a0      	jrc	ra
401603ac:	b204      	lw	v0,401603b8 <radio_play_key_deal_number_input+0x28>
401603ae:	eac0      	jalrc	v0
401603b0:	6443      	restore	24,ra
401603b2:	e8a0      	jrc	ra
401603b4:	99e4      	lw	a3,16(s1)
401603b6:	9fc1      	lw	a2,4(a3)
401603b8:	9f23      	lw	s1,12(a3)
401603ba:	9fc1      	lw	a2,4(a3)
401603bc:	0335      	addiu	v1,sp,212
401603be:	4016      	daddiu	s0,s0,6
	...
Disassembly of section BANK_CONTROL_1_6:

401a0200 <Dec2Hex>:
401a0200:	64a1      	save	8,s0
#include "app_radio.h"


uint32 Dec2Hex(uint32 h)
{
401a0202:	6f00      	li	a3,0
    uint32 d = 0;
401a0204:	67a4      	move	a1,a0
401a0206:	67c7      	move	a2,a3
    uint8 i = 0;
401a0208:	2411      	beqz	a0,401a022c <Dec2Hex+0x2c>
    while(h > 0)
    {
        d *= 10;
        d += h % 10;
        h /= 10;
        i++;
401a020a:	b014      	lw	s0,401a0258 <Dec2Hex+0x58>
401a020c:	ed19      	multu	a1,s0
401a020e:	33c8      	sll	v1,a2,2
401a0210:	ea10      	mfhi	v0
401a0212:	e3d1      	addu	a0,v1,a2
401a0214:	3384      	sll	v1,a0,1
401a0216:	344e      	srl	a0,v0,3
401a0218:	3688      	sll	a2,a0,2
401a021a:	e689      	addu	v0,a2,a0
401a021c:	3644      	sll	a2,v0,1
401a021e:	e5cb      	subu	v0,a1,a2
401a0220:	e359      	addu	a2,v1,v0
401a0222:	4741      	addiu	v0,a3,1
401a0224:	67e2      	move	a3,v0
401a0226:	67a4      	move	a1,a0
401a0228:	ef11      	zeb	a3
401a022a:	2cf0      	bnez	a0,401a020c <Dec2Hex+0xc>
401a022c:	67a6      	move	a1,a2
    }
    h = d;
401a022e:	6c00      	li	a0,0
    d = 0;
401a0230:	270f      	beqz	a3,401a0250 <Dec2Hex+0x50>
    while(i > 0)
    {
        d <<= 4;
        d += (h % 10);
        h /= 10;
        i--;
401a0232:	b60a      	lw	a2,401a0258 <Dec2Hex+0x58>
401a0234:	edd9      	multu	a1,a2
401a0236:	3490      	sll	a0,4
401a0238:	ea10      	mfhi	v0
401a023a:	334e      	srl	v1,v0,3
401a023c:	3268      	sll	v0,v1,2
401a023e:	e269      	addu	v0,v1
401a0240:	3244      	sll	v0,1
401a0242:	e54b      	subu	v0,a1,v0
401a0244:	e451      	addu	a0,v0
401a0246:	474f      	addiu	v0,a3,-1
401a0248:	67e2      	move	a3,v0
401a024a:	ef11      	zeb	a3
401a024c:	67a3      	move	a1,v1
401a024e:	2ff2      	bnez	a3,401a0234 <Dec2Hex+0x34>
401a0250:	6744      	move	v0,a0
    }
    return d;
}
401a0252:	6421      	restore	8,s0
401a0254:	e8a0      	jrc	ra
401a0256:	0000      	addiu	s0,sp,0
401a0258:	cccd      	sh	a2,26(a0)
401a025a:	cccc      	sh	a2,24(a0)

401a025c <radio_set_softseek>:
401a025c:	64e4      	save	32,ra,s0


//半自动搜台初始化
//dir: 搜台方向
//返回值: 步进
static uint8 init_start_freq(FM_SeekDir_e dir)
{
    uint8 space;
    //搜台步进
    space = 100;
    //欧洲频段,步长为50
    if (g_radio_config.band_mode == Band_Europe)
    {
        //欧洲波段或者在用户模式，步进调整为50K
        space = 50;
    }

    //设置初始判断频率
    if (dir == DIR_UP)
    {
        if (g_radio_config.FMStatus.freq < max_freq[g_radio_config.band_mode])
        {
            g_radio_config.FMStatus.freq += space;
        }
        else
        {
            //最大频点切换到最小
            g_radio_config.FMStatus.freq = min_freq[g_radio_config.band_mode];
        }
    }
    else
    {
        if (g_radio_config.FMStatus.freq > min_freq[g_radio_config.band_mode])
        {
            g_radio_config.FMStatus.freq -= space;
        }
        else
        {
            //最小频点切换到最大
            g_radio_config.FMStatus.freq = max_freq[g_radio_config.band_mode];
        }
    }
    return space;
}

//看一个频率是否在Auto_tab[0..cur_max - 1]中存在
//返回: Auto_tab的下标
static uint8 fliter_exist_freq(uint32 input_freq, uint8 cur_max)
{
    uint8 number;
    for (number = 0; number < cur_max; number++)
    {
        if (input_freq == Auto_tab[(number)])
        {
            break;
        }
    }
    return number;
}

//插入Auto_tab
//前提：Auto_tab是按照从小到大的顺序， 初始化时，它都是0
//返回值：如果插入成功，返回插入位置的Auto_tab的下标
//          如果已经在Auto_tab存在，返回-1
//          如果已满，返回-2
//          如果出错，返回-3
static int32 _insert_tab(uint32 freq)
{
    int8 n;
    int8 nLast;
    int8 n2;

    for (n = 0; n < ARR_COUNT(Auto_tab); n++)
    {
        if (Auto_tab[n] == 0)
        {
            Auto_tab[n] = freq;
            return (int32) n;
        }

        if (Auto_tab[n] == freq)
        {
            //这种情况应该不存在，因为在调用本函数之前，已经进行了检查
            return -1;
        }

        if (Auto_tab[n] < freq)
        {
            continue;
        }

        //Auto_tab[n] > freq
        //往后移动

        //最后一个非0数的下标
        for (nLast = ARR_COUNT(Auto_tab) - 1; nLast >= n; nLast--)
        {
            if (Auto_tab[nLast] != 0)
            {
                break;
            }
        }
        if (nLast == (ARR_COUNT(Auto_tab) - 1))
        {
            //已经插不进去了, 满了
            return -2;
        }

        for (n2 = nLast; n2 >= n; n2--)
        {
            Auto_tab[n2 + 1] = Auto_tab[n2];
        }
        Auto_tab[n] = freq;
        return (uint32) n;
    }

    //不会执行到这里
    return -3;
}

//软件全自动搜台处理
app_result_e deal_soft_auto_seek(FM_SeekDir_e dir)
{
    app_result_e ret = RESULT_NULL;
    uint8 space, tab_num;
    //起始、结束频点
    uint32 seek_freq, end_freq;
    bool new_freq = FALSE;
    uint8 seek_times = 0;
    uint32 last_timestamp, cur_timestamp;

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        led_duty_t fm_link_duty;
        fm_link_duty.cycle_count = -1;
        fm_link_duty.duty_on_time = 250;
        fm_link_duty.duty_off_time = 250;
        discrete_led_set(LED_ID_FM_PLAY, LED_TWINKLE, &fm_link_duty);
    }

#endif

    //搜台步进
    space = 100;
    if (g_radio_config.band_mode == Band_Europe)
    {
        //欧洲波段, 步进调整为50K
        space = 50;
    }
    tab_num = 0;


    Seek_again:
    //获取起始频点
    seek_freq = get_start_freq(dir);
    //获取结束频点
    end_freq = get_end_freq(dir);
    PRINT_DBG("自动搜台(软)");

    last_timestamp = sys_get_ab_timer();

    while (1)
    {
        new_freq = FALSE;
        //判断当前频率是否有效台
        if (radio_set_softseek(seek_freq, dir) == TRUE)
        {
            if (!should_be_passed(seek_freq))
            {
                //保存有效电台
                if (fliter_exist_freq(seek_freq, tab_num) == tab_num)
                {
                    if (_insert_tab(seek_freq) >= 0)
                    {
                        tab_num++;
                        new_freq = TRUE;
                    }
                }
            }
            if(new_freq == TRUE)
            {
                uint32 j = 0;

                libc_print("FM search ok=",Dec2Hex(seek_freq),2);
                //need_test_play
                radio_set_mute(releaseMUTE);
                while (1)
                {
                    ret = com_view_loop();
                    if (ret > RESULT_COMMON_RESERVE)
                    {
                        break;
                    }
                    sys_os_time_dly(1);
                    j++;
                    if (j >= 100)
                    {
                        break;
                    }
                }
                radio_set_mute(SetMUTE);
                sys_os_time_dly(1);
                last_timestamp = sys_get_ab_timer();
                if (ret > RESULT_COMMON_RESERVE)
                {
                    break;
                }
            }
        }

        //电台列表已满
        if (tab_num >= MAX_STATION_COUNT)
        {
            break;
        }

        if (dir == DIR_UP)
        {
            if ((seek_freq + space) > end_freq)
            {
                //结束扫描,回到播放场景
                break;
            }
            else
            {
                //更新频点
                seek_freq += space;
            }
        }
        else
        {
            if ((seek_freq - space) < end_freq)
            {
                //结束扫描,回到播放场景
                break;
            }
            else
            {
                //更新频点
                seek_freq -= space;
            }
        }

        //刷新频点
        g_search_current_freq = seek_freq;
        com_view_update(RADIO_MAIN_VIEW_SOFT_SEARCH);

        ret = com_view_loop();
        if (ret > RESULT_COMMON_RESERVE)
        {
            break;
        }
        if (g_radio_config.hint_mode_cfg == 0)
        {
            cur_timestamp = sys_get_ab_timer();
            if ((cur_timestamp - last_timestamp) >= 1500)
            {
                keytone_play(KEYTONE_WARNING, KEYTONE_BLOCK);

                last_timestamp = cur_timestamp;
            }
        }
        //挂起10ms 多任务交互
        sys_os_time_dly(1);
    }
    seek_times++;
    if((seek_times < 2)&&(ret <= RESULT_COMMON_RESERVE))
    {
       goto Seek_again;
    }
#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_ON, NULL);
    }
#endif

    //保存电台数
    g_radio_config.FMStatus.station_count = tab_num;
    return ret;
}

//软件半自动搜台处理
//  一次设置一个频点进行tune，并判断是否真台
//  找到一个真台就停止，边界回绕，搜索一轮。
//dir: 搜台方向
app_result_e deal_soft_manual_search(FM_SeekDir_e dir)
{
    app_result_e ret = RESULT_NULL;
    uint8 space;
    uint8 num;
    uint32 last_timestamp, cur_timestamp;

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        led_duty_t fm_link_duty;
        fm_link_duty.cycle_count = -1;
        fm_link_duty.duty_on_time = 250;
        fm_link_duty.duty_off_time = 250;
        discrete_led_set(LED_ID_FM_PLAY, LED_TWINKLE, &fm_link_duty);
    }
#endif
    space = init_start_freq(dir);

    last_timestamp = sys_get_ab_timer();

    while (1)
    {
        //判断当前频点是否是已保存频点
        //并更新电台号
        num = whether_in_list(g_radio_config.FMStatus.freq, pfreq);
        if (num == 0xff)
        {
            g_radio_config.FMStatus.station = 0;
        }
        else
        {
            g_radio_config.FMStatus.station = num;
        }

        //界面刷新,每个循环都刷
        g_search_current_freq = g_radio_config.FMStatus.freq;
        com_view_update(RADIO_MAIN_VIEW_SOFT_SEARCH);

        //判断当前频率是否有效台

        if (radio_set_softseek(g_radio_config.FMStatus.freq, dir) == TRUE)
        {
            if (!should_be_passed(g_radio_config.FMStatus.freq))
            {
                //是有效电台，完成退出
                break;
            }
        }

        //退出条件
        if (dir == DIR_UP)
        {
            //边界回绕
            if (g_radio_config.FMStatus.freq >= max_freq[g_radio_config.band_mode])
            {
                g_radio_config.FMStatus.freq = min_freq[g_radio_config.band_mode];
            }
            //搜完一轮，未找到有效电台，退出
            if (g_radio_config.FMStatus.freq == startfreq)
            {
                break;
            }
            else
            {
                //更新频点
                g_radio_config.FMStatus.freq += space;
            }
        }
        else //DIR_DOWN
        {
            //边界回绕
            if (g_radio_config.FMStatus.freq <= min_freq[g_radio_config.band_mode])
            {
                g_radio_config.FMStatus.freq = max_freq[g_radio_config.band_mode];
            }
            //搜完一轮，未找到有效电台，退出
            if (g_radio_config.FMStatus.freq == startfreq)
            {
                break;
            }
            else
            {
                //更新频点
                g_radio_config.FMStatus.freq -= space;
            }
        }

        ret = com_view_loop();
        if (ret > RESULT_COMMON_RESERVE)
        {
            break;
        }
        if (g_radio_config.hint_mode_cfg == 0)
        {
            cur_timestamp = sys_get_ab_timer();
            if ((cur_timestamp - last_timestamp) >= 1500)
            {
                keytone_play(KEYTONE_WARNING, KEYTONE_BLOCK);

                last_timestamp = cur_timestamp;
            }
        }
        //挂起10ms 多任务交互
        sys_os_time_dly(1);
    }

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_ON, NULL);
    }
#endif

    return ret;
}

//软件搜台(即设置到一个频率，看它有没有信号
//freq: 频率
//dir: 废弃
bool radio_set_softseek(uint32 freq, uint8 dir)
{
401a025e:	6704      	move	s0,a0
401a0260:	d404      	sw	a0,16(sp)
    bool bret = TRUE;
    //seek paramter
    seek_param_t search_parm;
    //frequncy
    search_parm.freq = freq;
401a0262:	b207      	lw	v0,401a027c <radio_set_softseek+0x20>
    //seek dir
    search_parm.dir = dir;

    bret = radio_send_msg(&search_parm, NULL, MSG_FMENGINE_SET_SOFTSEEK);
401a0264:	679d      	move	a0,sp
401a0266:	c4b4      	sb	a1,20(a0)
401a0268:	f300 6e0c 	li	a2,780
401a026c:	0404      	addiu	a0,sp,16
401a026e:	ea40      	jalr	v0
401a0270:	6d00      	li	a1,0
401a0272:	b304      	lw	v1,401a0280 <radio_set_softseek+0x24>

    //for RCP, 同步电台频点
    //radio_get_freq();
    g_engine_status.FM_CurrentFreq = freq;
401a0274:	db00      	sw	s0,0(v1)
401a0276:	6464      	restore	32,ra,s0
    return bret;
}
401a0278:	e8a0      	jrc	ra
401a027a:	0000      	addiu	s0,sp,0
401a027c:	eda5      	break	45
401a027e:	bfc1      	lwu	a2,4(a3)
401a0280:	9d4c      	lw	v0,48(a1)
401a0282:	9fc1      	lw	a2,4(a3)

401a0284 <deal_soft_manual_search>:
401a0284:	64f7      	save	56,ra,s0-s1
401a0286:	ec11      	zeb	a0
401a0288:	d404      	sw	a0,16(sp)

401a028a <.LBB2>:
401a028a:	b456      	lw	a0,401a03e0 <.LBE2+0x154>

401a028c <.LBE2>:
401a028c:	6a00      	li	v0,0
401a028e:	d205      	sw	v0,20(sp)
401a0290:	f200 a444 	lbu	v0,516(a0)
401a0294:	6e64      	li	a2,100
401a0296:	7202      	cmpi	v0,2
401a0298:	6101      	btnez	401a029c <.LBE2+0x10>
401a029a:	4ece      	addiu	a2,-50
401a029c:	9504      	lw	a1,16(sp)
401a029e:	6f01      	li	a3,1
401a02a0:	edee      	xor	a1,a3
401a02a2:	ede3      	sltu	a1,a3
401a02a4:	6778      	move	v1,t8
401a02a6:	d308      	sw	v1,32(sp)
401a02a8:	2357      	beqz	v1,401a0358 <.LBE2+0xcc>
401a02aa:	b34f      	lw	v1,401a03e4 <.LBE2+0x158>
401a02ac:	3548      	sll	a1,v0,2
401a02ae:	e569      	addu	v0,a1,v1
401a02b0:	f1e0 9c1c 	lw	s0,508(a0)
401a02b4:	9a20      	lw	s1,0(v0)
401a02b6:	e0c9      	addu	v0,s0,a2
401a02b8:	e823      	sltu	s0,s1
401a02ba:	6063      	bteqz	401a0382 <.LBE2+0xf6>
401a02bc:	f1e0 dc5c 	sw	v0,508(a0)
401a02c0:	ee11      	zeb	a2
401a02c2:	6c00      	li	a0,0
401a02c4:	b04a      	lw	s0,401a03ec <.LBE2+0x160>
401a02c6:	d606      	sw	a2,24(sp)
401a02c8:	67a4      	move	a1,a0
401a02ca:	67c4      	move	a2,a0
401a02cc:	e840      	jalr	s0
401a02ce:	6f1c      	li	a3,28
401a02d0:	b144      	lw	s1,401a03e0 <.LBE2+0x154>
401a02d2:	d207      	sw	v0,28(sp)
401a02d4:	b647      	lw	a2,401a03f0 <.LBE2+0x164>
401a02d6:	f1e0 999c 	lw	a0,508(s1)
401a02da:	b247      	lw	v0,401a03f4 <.LBE2+0x168>
401a02dc:	ea40      	jalr	v0
401a02de:	9ea0      	lw	a1,0(a2)
401a02e0:	72ff      	cmpi	v0,255
401a02e2:	6101      	btnez	401a02e6 <.LBE2+0x5a>
401a02e4:	6a00      	li	v0,0
401a02e6:	b03f      	lw	s0,401a03e0 <.LBE2+0x154>
401a02e8:	b444      	lw	a0,401a03f8 <.LBE2+0x16c>
401a02ea:	f1e0 98bc 	lw	a1,508(s0)
401a02ee:	f200 c140 	sb	v0,512(s1)
401a02f2:	b243      	lw	v0,401a03fc <.LBE2+0x170>
401a02f4:	dca0      	sw	a1,0(a0)
401a02f6:	ea40      	jalr	v0
401a02f8:	6c02      	li	a0,2
401a02fa:	f1e0 989c 	lw	a0,508(s0)
401a02fe:	b241      	lw	v0,401a0400 <.LBE2+0x174>
401a0300:	ea40      	jalr	v0
401a0302:	9504      	lw	a1,16(sp)
401a0304:	7201      	cmpi	v0,1
401a0306:	6035      	bteqz	401a0372 <.LBE2+0xe6>
401a0308:	9708      	lw	a3,32(sp)
401a030a:	273f      	beqz	a3,401a038a <.LBE2+0xfe>
401a030c:	f200 a044 	lbu	v0,516(s0)
401a0310:	b335      	lw	v1,401a03e4 <.LBE2+0x158>
401a0312:	3448      	sll	a0,v0,2
401a0314:	e475      	addu	a1,a0,v1
401a0316:	9dc0      	lw	a2,0(a1)
401a0318:	f1e0 987c 	lw	v1,508(s0)
401a031c:	ebc3      	sltu	v1,a2
401a031e:	6105      	btnez	401a032a <.LBE2+0x9e>
401a0320:	b632      	lw	a2,401a03e8 <.LBE2+0x15c>
401a0322:	e4dd      	addu	a3,a0,a2
401a0324:	9f60      	lw	v1,0(a3)
401a0326:	f1e0 d87c 	sw	v1,508(s0)
401a032a:	b538      	lw	a1,401a0408 <.LBE2+0x17c>
401a032c:	9d80      	lw	a0,0(a1)
401a032e:	ec6e      	xor	a0,v1
401a0330:	2425      	beqz	a0,401a037c <.LBE2+0xf0>
401a0332:	9706      	lw	a3,24(sp)
401a0334:	e3e9      	addu	v0,v1,a3
401a0336:	f1e0 d85c 	sw	v0,508(s0)
401a033a:	b235      	lw	v0,401a040c <.LBE2+0x180>
401a033c:	eac0      	jalrc	v0
401a033e:	5a21      	sltiu	v0,33
401a0340:	d205      	sw	v0,20(sp)
401a0342:	601c      	bteqz	401a037c <.LBE2+0xf0>
401a0344:	f200 a1c7 	lbu	a2,519(s1)
401a0348:	2639      	beqz	a2,401a03bc <.LBE2+0x130>
401a034a:	6d00      	li	a1,0
401a034c:	b028      	lw	s0,401a03ec <.LBE2+0x160>
401a034e:	6c01      	li	a0,1
401a0350:	67c5      	move	a2,a1
401a0352:	e840      	jalr	s0
401a0354:	6f31      	li	a3,49
401a0356:	17be      	b	401a02d4 <.LBE2+0x48>
401a0358:	3548      	sll	a1,v0,2
401a035a:	b224      	lw	v0,401a03e8 <.LBE2+0x15c>
401a035c:	f1e0 9cfc 	lw	a3,508(a0)
401a0360:	e545      	addu	s1,a1,v0
401a0362:	9900      	lw	s0,0(s1)
401a0364:	e7cb      	subu	v0,a3,a2
401a0366:	e8e3      	sltu	s0,a3
401a0368:	61a9      	btnez	401a02bc <.LBE2+0x30>
401a036a:	b21f      	lw	v0,401a03e4 <.LBE2+0x158>
401a036c:	e54d      	addu	v1,a1,v0
401a036e:	9b40      	lw	v0,0(v1)
401a0370:	17a5      	b	401a02bc <.LBE2+0x30>
401a0372:	f1e0 989c 	lw	a0,508(s0)
401a0376:	b224      	lw	v0,401a0404 <.LBE2+0x178>
401a0378:	eac0      	jalrc	v0
401a037a:	2ac6      	bnez	v0,401a0308 <.LBE2+0x7c>
401a037c:	9205      	lw	v0,20(sp)
401a037e:	6477      	restore	56,ra,s0-s1
401a0380:	e8a0      	jrc	ra
401a0382:	b21a      	lw	v0,401a03e8 <.LBE2+0x15c>
401a0384:	e54d      	addu	v1,a1,v0
401a0386:	9b40      	lw	v0,0(v1)
401a0388:	1799      	b	401a02bc <.LBE2+0x30>
401a038a:	f200 a044 	lbu	v0,516(s0)
401a038e:	b317      	lw	v1,401a03e8 <.LBE2+0x15c>
401a0390:	3448      	sll	a0,v0,2
401a0392:	e475      	addu	a1,a0,v1
401a0394:	9dc0      	lw	a2,0(a1)
401a0396:	f1e0 987c 	lw	v1,508(s0)
401a039a:	ee63      	sltu	a2,v1
401a039c:	6105      	btnez	401a03a8 <.LBE2+0x11c>
401a039e:	b612      	lw	a2,401a03e4 <.LBE2+0x158>
401a03a0:	e4dd      	addu	a3,a0,a2
401a03a2:	9f60      	lw	v1,0(a3)
401a03a4:	f1e0 d87c 	sw	v1,508(s0)
401a03a8:	b518      	lw	a1,401a0408 <.LBE2+0x17c>
401a03aa:	9d80      	lw	a0,0(a1)
401a03ac:	ec6e      	xor	a0,v1
401a03ae:	24e6      	beqz	a0,401a037c <.LBE2+0xf0>
401a03b0:	9706      	lw	a3,24(sp)
401a03b2:	e3eb      	subu	v0,v1,a3
401a03b4:	b30b      	lw	v1,401a03e0 <.LBE2+0x154>
401a03b6:	f1e0 db5c 	sw	v0,508(v1)
401a03ba:	17bf      	b	401a033a <.LBE2+0xae>
401a03bc:	b00c      	lw	s0,401a03ec <.LBE2+0x160>
401a03be:	6786      	move	a0,a2
401a03c0:	67a6      	move	a1,a2
401a03c2:	e840      	jalr	s0
401a03c4:	6f1c      	li	a3,28
401a03c6:	9407      	lw	a0,28(sp)
401a03c8:	6702      	move	s0,v0
401a03ca:	e29b      	subu	a2,v0,a0
401a03cc:	f5c0 5e1c 	sltiu	a2,1500
401a03d0:	61bc      	btnez	401a034a <.LBE2+0xbe>
401a03d2:	6c01      	li	a0,1
401a03d4:	b20f      	lw	v0,401a0410 <.LBE2+0x184>
401a03d6:	ea40      	jalr	v0
401a03d8:	67a4      	move	a1,a0
401a03da:	d007      	sw	s0,28(sp)
401a03dc:	17b6      	b	401a034a <.LBE2+0xbe>
401a03de:	0000      	addiu	s0,sp,0
401a03e0:	9a9c      	lw	a0,112(v0)
401a03e2:	9fc1      	lw	a2,4(a3)
401a03e4:	ee2c      	and	a2,s1
401a03e6:	bfc1      	lwu	a2,4(a3)
401a03e8:	ee20      	0xee20
401a03ea:	bfc1      	lwu	a2,4(a3)
401a03ec:	e901      	sdbbp	8
401a03ee:	bfc1      	lwu	a2,4(a3)
401a03f0:	9ca8      	lw	a1,32(a0)
401a03f2:	9fc1      	lw	a2,4(a3)
401a03f4:	ecbd      	dmultu	a0,a1
401a03f6:	bfc1      	lwu	a2,4(a3)
401a03f8:	9f1c      	lw	s0,112(a3)
401a03fa:	9fc1      	lw	a2,4(a3)
401a03fc:	ec5d      	dmultu	a0,v0
401a03fe:	bfc1      	lwu	a2,4(a3)
401a0400:	025d      	addiu	v0,sp,372
401a0402:	401a      	daddiu	s0,s0,-6
401a0404:	ec99      	multu	a0,a0
401a0406:	bfc1      	lwu	a2,4(a3)
401a0408:	9f04      	lw	s0,16(a3)
401a040a:	9fc1      	lw	a2,4(a3)
401a040c:	eb7d      	dmultu	v1,v1
401a040e:	bfc1      	lwu	a2,4(a3)
401a0410:	5cad      	sltiu	a0,173
401a0412:	485a      	addiu	s0,90

401a0414 <deal_soft_auto_seek>:
401a0414:	64f8      	save	64,ra,s0-s1
401a0416:	b385      	lw	v1,401a0628 <.LBE14+0xb8>
401a0418:	ec11      	zeb	a0
401a041a:	f200 a344 	lbu	v0,516(v1)
401a041e:	6d00      	li	a1,0
401a0420:	d404      	sw	a0,16(sp)
401a0422:	7202      	cmpi	v0,2
401a0424:	6c64      	li	a0,100
401a0426:	d505      	sw	a1,20(sp)
401a0428:	d50a      	sw	a1,40(sp)
401a042a:	d406      	sw	a0,24(sp)
401a042c:	6102      	btnez	401a0432 <deal_soft_auto_seek+0x1e>
401a042e:	6e32      	li	a2,50
401a0430:	d606      	sw	a2,24(sp)
401a0432:	9705      	lw	a3,20(sp)
401a0434:	d707      	sw	a3,28(sp)

401a0436 <.L47>:
401a0436:	b17e      	lw	s1,401a062c <.LBE14+0xbc>
401a0438:	e940      	jalr	s1
401a043a:	9404      	lw	a0,16(sp)
401a043c:	9404      	lw	a0,16(sp)
401a043e:	b07d      	lw	s0,401a0630 <.LBE14+0xc0>
401a0440:	e840      	jalr	s0
401a0442:	d208      	sw	v0,32(sp)
401a0444:	6c00      	li	a0,0
401a0446:	b07c      	lw	s0,401a0634 <.LBE14+0xc4>
401a0448:	d209      	sw	v0,36(sp)
401a044a:	67a4      	move	a1,a0
401a044c:	67c4      	move	a2,a0
401a044e:	e840      	jalr	s0
401a0450:	6f1c      	li	a3,28
401a0452:	d20b      	sw	v0,44(sp)
401a0454:	6900      	li	s1,0
401a0456:	9408      	lw	a0,32(sp)
401a0458:	b278      	lw	v0,401a0638 <.LBE14+0xc8>
401a045a:	ea40      	jalr	v0
401a045c:	9504      	lw	a1,16(sp)
401a045e:	7201      	cmpi	v0,1
401a0460:	602c      	bteqz	401a04ba <.L47+0x84>
401a0462:	9407      	lw	a0,28(sp)
401a0464:	5c28      	sltiu	a0,40
401a0466:	f080 6003 	bteqz	401a0570 <.LBE14>
401a046a:	9704      	lw	a3,16(sp)
401a046c:	7701      	cmpi	a3,1
401a046e:	f080 6111 	btnez	401a0594 <.LBE14+0x24>
401a0472:	9306      	lw	v1,24(sp)
401a0474:	9508      	lw	a1,32(sp)
401a0476:	9609      	lw	a2,36(sp)
401a0478:	e3a9      	addu	v0,v1,a1
401a047a:	ee43      	sltu	a2,v0
401a047c:	6179      	btnez	401a0570 <.LBE14>
401a047e:	d208      	sw	v0,32(sp)
401a0480:	b573      	lw	a1,401a064c <.LBE14+0xdc>
401a0482:	9308      	lw	v1,32(sp)
401a0484:	b273      	lw	v0,401a0650 <.LBE14+0xe0>
401a0486:	dd60      	sw	v1,0(a1)
401a0488:	ea40      	jalr	v0
401a048a:	6c02      	li	a0,2
401a048c:	b26f      	lw	v0,401a0648 <.LBE14+0xd8>
401a048e:	eac0      	jalrc	v0
401a0490:	5a21      	sltiu	v0,33
401a0492:	d205      	sw	v0,20(sp)
401a0494:	606d      	bteqz	401a0570 <.LBE14>
401a0496:	b165      	lw	s1,401a0628 <.LBE14+0xb8>
401a0498:	f200 a1c7 	lbu	a2,519(s1)
401a049c:	f080 2600 	beqz	a2,401a05a0 <.LBE14+0x30>
401a04a0:	6d00      	li	a1,0
401a04a2:	b165      	lw	s1,401a0634 <.LBE14+0xc4>
401a04a4:	6c01      	li	a0,1
401a04a6:	67c5      	move	a2,a1
401a04a8:	e940      	jalr	s1
401a04aa:	6f31      	li	a3,49
401a04ac:	6900      	li	s1,0
401a04ae:	9408      	lw	a0,32(sp)
401a04b0:	b262      	lw	v0,401a0638 <.LBE14+0xc8>
401a04b2:	ea40      	jalr	v0
401a04b4:	9504      	lw	a1,16(sp)
401a04b6:	7201      	cmpi	v0,1
401a04b8:	61d4      	btnez	401a0462 <.L47+0x2c>
401a04ba:	b261      	lw	v0,401a063c <.LBE14+0xcc>
401a04bc:	ea40      	jalr	v0
401a04be:	9408      	lw	a0,32(sp)
401a04c0:	2a27      	bnez	v0,401a0510 <.LBE12>

401a04c2 <.LBB10>:
401a04c2:	9407      	lw	a0,28(sp)
401a04c4:	6771      	move	v1,s1
401a04c6:	e983      	sltu	s1,a0
401a04c8:	600d      	bteqz	401a04e4 <.LBE10>
401a04ca:	b45e      	lw	a0,401a0640 <.LBE14+0xd0>
401a04cc:	3268      	sll	v0,v1,2
401a04ce:	e29d      	addu	a3,v0,a0
401a04d0:	9fc0      	lw	a2,0(a3)
401a04d2:	9508      	lw	a1,32(sp)
401a04d4:	eeae      	xor	a2,a1
401a04d6:	2606      	beqz	a2,401a04e4 <.LBE10>
401a04d8:	43a1      	addiu	a1,v1,1
401a04da:	6765      	move	v1,a1
401a04dc:	9607      	lw	a2,28(sp)
401a04de:	eb11      	zeb	v1
401a04e0:	ebc3      	sltu	v1,a2
401a04e2:	61f4      	btnez	401a04cc <.LBB10+0xa>

401a04e4 <.LBE10>:
401a04e4:	9407      	lw	a0,28(sp)
401a04e6:	ec6e      	xor	a0,v1
401a04e8:	2c13      	bnez	a0,401a0510 <.LBE12>
401a04ea:	b756      	lw	a3,401a0640 <.LBE14+0xd0>

401a04ec <.LBB12>:
401a04ec:	6e00      	li	a2,0
401a04ee:	6707      	move	s0,a3
401a04f0:	9f40      	lw	v0,0(a3)
401a04f2:	f080 2206 	beqz	v0,401a0602 <.LBE14+0x92>
401a04f6:	9308      	lw	v1,32(sp)
401a04f8:	ea6a      	cmp	v0,v1
401a04fa:	600a      	bteqz	401a0510 <.LBE12>
401a04fc:	ea63      	sltu	v0,v1
401a04fe:	6062      	bteqz	401a05c4 <.LBE14+0x54>
401a0500:	4681      	addiu	a0,a2,1
401a0502:	67c4      	move	a2,a0
401a0504:	ee91      	seb	a2
401a0506:	6766      	move	v1,a2
401a0508:	eb11      	zeb	v1
401a050a:	5b28      	sltiu	v1,40
401a050c:	47e4      	addiu	a3,a3,4
401a050e:	61f0      	btnez	401a04f0 <.LBB12+0x4>

401a0510 <.LBE12>:
401a0510:	21a8      	beqz	s1,401a0462 <.L47+0x2c>

401a0512 <.LBB14>:
401a0512:	9408      	lw	a0,32(sp)
401a0514:	18c0 8080 	jal	401a0200 <Dec2Hex>
401a0518:	6800      	li	s0,0
401a051a:	b347      	lw	v1,401a0634 <.LBE14+0xc4>
401a051c:	0c3f      	la	a0,401a0618 <.LBE14+0xa8>
401a051e:	67a2      	move	a1,v0
401a0520:	6e02      	li	a2,2
401a0522:	eb40      	jalr	v1
401a0524:	6f4b      	li	a3,75
401a0526:	b248      	lw	v0,401a0644 <.LBE14+0xd4>
401a0528:	ea40      	jalr	v0
401a052a:	6790      	move	a0,s0
401a052c:	1009      	b	401a0540 <.LBB14+0x2e>
401a052e:	6d00      	li	a1,0
401a0530:	b341      	lw	v1,401a0634 <.LBE14+0xc4>
401a0532:	6c01      	li	a0,1
401a0534:	67c5      	move	a2,a1
401a0536:	6f31      	li	a3,49
401a0538:	eb40      	jalr	v1
401a053a:	4001      	addiu	s0,s0,1
401a053c:	5864      	sltiu	s0,100
401a053e:	6006      	bteqz	401a054c <.LBB14+0x3a>
401a0540:	b142      	lw	s1,401a0648 <.LBE14+0xd8>
401a0542:	e9c0      	jalrc	s1
401a0544:	5a21      	sltiu	v0,33
401a0546:	6738      	move	s1,t8
401a0548:	d205      	sw	v0,20(sp)
401a054a:	29f1      	bnez	s1,401a052e <.LBB14+0x1c>
401a054c:	b23e      	lw	v0,401a0644 <.LBE14+0xd4>
401a054e:	ea40      	jalr	v0
401a0550:	6c01      	li	a0,1
401a0552:	6d00      	li	a1,0
401a0554:	b338      	lw	v1,401a0634 <.LBE14+0xc4>
401a0556:	67c5      	move	a2,a1
401a0558:	6c01      	li	a0,1
401a055a:	eb40      	jalr	v1
401a055c:	6f31      	li	a3,49
401a055e:	6c00      	li	a0,0
401a0560:	b335      	lw	v1,401a0634 <.LBE14+0xc4>
401a0562:	67a4      	move	a1,a0
401a0564:	67c4      	move	a2,a0
401a0566:	eb40      	jalr	v1
401a0568:	6f1c      	li	a3,28
401a056a:	d20b      	sw	v0,44(sp)
401a056c:	f77f 2919 	bnez	s1,401a0462 <.L47+0x2c>

401a0570 <.LBE14>:
401a0570:	950a      	lw	a1,40(sp)
401a0572:	45c1      	addiu	a2,a1,1
401a0574:	ee11      	zeb	a2
401a0576:	5e02      	sltiu	a2,2
401a0578:	d60a      	sw	a2,40(sp)
401a057a:	6004      	bteqz	401a0584 <.LBE14+0x14>
401a057c:	9705      	lw	a3,20(sp)
401a057e:	5f21      	sltiu	a3,33
401a0580:	f75f 6119 	btnez	401a0436 <.L47>
401a0584:	675d      	move	v0,sp
401a0586:	a27c      	lbu	v1,28(v0)
401a0588:	b428      	lw	a0,401a0628 <.LBE14+0xb8>
401a058a:	9205      	lw	v0,20(sp)
401a058c:	f200 c461 	sb	v1,513(a0)
401a0590:	6478      	restore	64,ra,s0-s1
401a0592:	e8a0      	jrc	ra
401a0594:	9608      	lw	a2,32(sp)
401a0596:	9706      	lw	a3,24(sp)
401a0598:	9409      	lw	a0,36(sp)
401a059a:	e6eb      	subu	v0,a2,a3
401a059c:	ea83      	sltu	v0,a0
401a059e:	176e      	b	401a047c <.L47+0x46>
401a05a0:	b325      	lw	v1,401a0634 <.LBE14+0xc4>
401a05a2:	6786      	move	a0,a2
401a05a4:	6f1c      	li	a3,28
401a05a6:	eb40      	jalr	v1
401a05a8:	67a6      	move	a1,a2
401a05aa:	940b      	lw	a0,44(sp)
401a05ac:	6722      	move	s1,v0
401a05ae:	e29f      	subu	a3,v0,a0
401a05b0:	f5c0 5f1c 	sltiu	a3,1500
401a05b4:	f77f 6114 	btnez	401a04a0 <.L47+0x6a>
401a05b8:	6c01      	li	a0,1
401a05ba:	b227      	lw	v0,401a0654 <.LBE14+0xe4>
401a05bc:	ea40      	jalr	v0
401a05be:	67a4      	move	a1,a0
401a05c0:	d10b      	sw	s1,44(sp)
401a05c2:	176e      	b	401a04a0 <.L47+0x6a>
401a05c4:	6d27      	li	a1,39
401a05c6:	edc2      	slt	a1,a2
401a05c8:	6778      	move	v1,t8
401a05ca:	2b0b      	bnez	v1,401a05e2 <.LBE14+0x72>
401a05cc:	f090 408c 	addiu	a0,s0,156
401a05d0:	9c40      	lw	v0,0(a0)
401a05d2:	2a07      	bnez	v0,401a05e2 <.LBE14+0x72>
401a05d4:	456f      	addiu	v1,a1,-1
401a05d6:	67a3      	move	a1,v1
401a05d8:	ed91      	seb	a1
401a05da:	edc2      	slt	a1,a2
401a05dc:	6778      	move	v1,t8
401a05de:	448c      	addiu	a0,a0,-4
401a05e0:	23f7      	beqz	v1,401a05d0 <.LBE14+0x60>
401a05e2:	6785      	move	a0,a1
401a05e4:	ec11      	zeb	a0
401a05e6:	7427      	cmpi	a0,39
401a05e8:	6093      	bteqz	401a0510 <.LBE12>
401a05ea:	6785      	move	a0,a1
401a05ec:	2b0a      	bnez	v1,401a0602 <.LBE14+0x92>
401a05ee:	3588      	sll	a1,a0,2
401a05f0:	e50d      	addu	v1,a1,s0
401a05f2:	444f      	addiu	v0,a0,-1
401a05f4:	6782      	move	a0,v0
401a05f6:	9ba0      	lw	a1,0(v1)
401a05f8:	ec91      	seb	a0
401a05fa:	ecc2      	slt	a0,a2
401a05fc:	dba1      	sw	a1,4(v1)
401a05fe:	436c      	addiu	v1,v1,-4
401a0600:	60f8      	bteqz	401a05f2 <.LBE14+0x82>
401a0602:	9208      	lw	v0,32(sp)
401a0604:	5600      	slti	a2,0
401a0606:	df40      	sw	v0,0(a3)
401a0608:	6183      	btnez	401a0510 <.LBE12>
401a060a:	9607      	lw	a2,28(sp)
401a060c:	4621      	addiu	s1,a2,1
401a060e:	e911      	zeb	s1
401a0610:	d107      	sw	s1,28(sp)
401a0612:	6901      	li	s1,1
401a0614:	177d      	b	401a0510 <.LBE12>
401a0616:	0000      	addiu	s0,sp,0
401a0618:	4d46      	addiu	a1,70
401a061a:	7320      	cmpi	v1,32
401a061c:	6165      	btnez	401a06e8 <radio_soft_search_main_view+0x8c>
401a061e:	6372      	addiu	sp,912
401a0620:	2068      	beqz	s0,401a06f2 <radio_soft_search_main_view+0x96>
401a0622:	6b6f      	li	v1,111
401a0624:	003d      	addiu	s0,sp,244
401a0626:	0000      	addiu	s0,sp,0
401a0628:	9a9c      	lw	a0,112(v0)
401a062a:	9fc1      	lw	a2,4(a3)
401a062c:	0201      	addiu	v0,sp,4
401a062e:	4006      	addiu	s0,s0,6
401a0630:	0221      	addiu	v0,sp,132
401a0632:	4006      	addiu	s0,s0,6
401a0634:	e901      	sdbbp	8
401a0636:	bfc1      	lwu	a2,4(a3)
401a0638:	025d      	addiu	v0,sp,372
401a063a:	401a      	daddiu	s0,s0,-6
401a063c:	ec99      	multu	a0,a0
401a063e:	bfc1      	lwu	a2,4(a3)
401a0640:	9cac      	lw	a1,48(a0)
401a0642:	9fc1      	lw	a2,4(a3)
401a0644:	0301      	addiu	v1,sp,4
401a0646:	4002      	addiu	s0,s0,2
401a0648:	eb7d      	dmultu	v1,v1
401a064a:	bfc1      	lwu	a2,4(a3)
401a064c:	9f1c      	lw	s0,112(a3)
401a064e:	9fc1      	lw	a2,4(a3)
401a0650:	ec5d      	dmultu	a0,v0
401a0652:	bfc1      	lwu	a2,4(a3)
401a0654:	5cad      	sltiu	a0,173
401a0656:	485a      	addiu	s0,90

401a0658 <__radio_search_view_redraw>:
401a0658:	e8a0      	jrc	ra
	...

401a065c <radio_soft_search_main_view>:
401a065c:	e8a0      	jrc	ra
401a065e:	6500      	nop
	...
Disassembly of section BANK_CONTROL_1_7:

401e0200 <_is_search_over>:
401e0200:	eca3      	sltu	a0,a1
}

static bool _is_search_over(uint32 freq, uint32 end, FM_SeekDir_e dir)
{
    if (((freq >= end) && (dir == DIR_UP)) || ((freq <= end) && (dir == DIR_DOWN)))
401e0202:	ee11      	zeb	a2
401e0204:	6102      	btnez	401e020a <_is_search_over+0xa>
401e0206:	7601      	cmpi	a2,1
401e0208:	6003      	bteqz	401e0210 <_is_search_over+0x10>
401e020a:	ed83      	sltu	a1,a0
401e020c:	6103      	btnez	401e0214 <_is_search_over+0x14>
401e020e:	2e02      	bnez	a2,401e0214 <_is_search_over+0x14>
401e0210:	e820      	jr	ra
    {
        return TRUE;
401e0212:	6a01      	li	v0,1
401e0214:	e820      	jr	ra
    }

    return FALSE;
}
401e0216:	6a00      	li	v0,0

401e0218 <radio_break_hardseek>:
401e0218:	64c3      	save	24,ra

//硬件全自动搜台处理
app_result_e deal_hard_auto_seek(FM_SeekDir_e dir)
{
    app_result_e ret = RESULT_NULL;
    uint8 tab_num, i;
    bool result, need_restart = TRUE;
    uint32 current_freq, end_freq;
    uint8 space;
    uint32 last_timestamp, cur_timestamp;

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        led_duty_t fm_link_duty;
        fm_link_duty.cycle_count = -1;
        fm_link_duty.duty_on_time = 250;
        fm_link_duty.duty_off_time = 250;
        discrete_led_set(LED_ID_FM_PLAY, LED_TWINKLE, &fm_link_duty);
    }

#endif

    //设置当前波段, 主要是确定space
    radio_set_band(g_radio_config.band_mode);
    //起始频率
    current_freq = get_start_freq(dir);
    //结束频率
    end_freq = get_end_freq(dir);
    //电台个数
    tab_num = 0;

    //搜台步进
    if (g_radio_config.band_mode == Band_Europe)
    {
        //欧洲波段, 步进调整为50K
        space = 50;
    }
    else
    {
        space = 100;
    }

    PRINT_DBG("自动搜台(硬)");

    //显示当前频点
    g_search_current_freq = current_freq;
    com_view_update(RADIO_MAIN_VIEW_HARD_SEARCH);

    last_timestamp = sys_get_ab_timer();

    while (1)
    {
        if (need_restart == TRUE)
        {
            result = radio_set_hardseek(current_freq, dir);
            need_restart = FALSE;
            if (!result)
            {
                //硬件搜台启动失败
                break;
            }
        }

        //硬件搜台启动成功,  取是否完成标志
        result = radio_get_seekflag();

        if (result == TRUE)
        {
            //获取当前频率
            radio_get_freq();
            current_freq = g_engine_status.FM_CurrentFreq;

            if ((g_engine_status.STC_flag == HARDSEEK_NOT_START) || (_is_search_over(current_freq, end_freq, dir)
                    == TRUE))
            {
                //此轮搜台完成
                radio_break_hardseek();
                break;
            }

            if ((g_engine_status.STC_flag == HARDSEEK_COMPLETE) || (g_engine_status.STC_flag
                    == HARDSEEK_COMPLETE_NOT_VALID))
            {
                if ((g_engine_status.STC_flag == HARDSEEK_COMPLETE) && (!should_be_passed(current_freq)))
                {
                    //保存有效电台
                    i = fliter_exist_freq(current_freq, tab_num);
                    if ((i == tab_num) && (_insert_tab(current_freq) >= 0))
                    {
                        tab_num++;
                    }
                }

                //显示当前频点
                g_search_current_freq = current_freq;
                com_view_update(RADIO_MAIN_VIEW_HARD_SEARCH);

                if (dir == DIR_UP)
                {
                    current_freq += space;
                }
                else
                {
                    current_freq -= space;
                }

                if ((_is_search_over(current_freq, end_freq, dir) == TRUE))
                {
                    //此轮搜台完成
                    radio_break_hardseek();
                    break;
                }
                else if (g_engine_status.STC_flag == HARDSEEK_COMPLETE)
                {
                    uint32 j = 0;
                    radio_break_hardseek();
                    //for play
                    radio_set_mute(releaseMUTE);
                    while (1)
                    {
                        ret = com_view_loop();
                        if (ret > RESULT_COMMON_RESERVE)
                        {
                            goto hard_serach_over;
                        }
                        sys_os_time_dly(1);
                        j++;
                        if (j >= 100)
                        {
                            break;
                        }
                    }

                    radio_set_mute(SetMUTE);
                    need_restart = TRUE;
                    last_timestamp = sys_get_ab_timer();
                    continue;
                }
                else
                {
                    ;//
                }
            }

            //未到截至频点, 需启动新一轮搜台
            need_restart = TRUE;
        }

        //电台列表已满
        if (tab_num >= MAX_STATION_COUNT)
        {
            radio_break_hardseek();
            break;
        }

        ret = com_view_loop();
        if (ret > RESULT_COMMON_RESERVE)
        {
            radio_break_hardseek();
            break;
        }
        if (g_radio_config.hint_mode_cfg == 0)
        {
            cur_timestamp = sys_get_ab_timer();
            if ((cur_timestamp - last_timestamp) >= 1500)
            {
                //暂时中断搜台，以保证播放提示音时切换BANK不会影响到搜台效果
                radio_break_hardseek();
                radio_get_freq();
                current_freq = g_engine_status.FM_CurrentFreq;
                need_restart = TRUE;
                keytone_play(KEYTONE_WARNING, KEYTONE_BLOCK);

                last_timestamp = cur_timestamp;
            }
        }
        //挂起10ms 多任务交互
        sys_os_time_dly(1);
    }

    hard_serach_over:

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_ON, NULL);
    }
#endif
    //保存电台数
    g_radio_config.FMStatus.station_count = tab_num;
    return ret;
}

//硬件半自动搜台处理
//dir: 搜台方向
app_result_e deal_hard_manual_search(FM_SeekDir_e dir)
{
    app_result_e ret = RESULT_NULL;
    bool result, need_restart = TRUE;
    uint32 current_freq, end_freq;
    uint8 num;
    uint8 space;
    uint32 last_timestamp, cur_timestamp;

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        led_duty_t fm_link_duty;
        fm_link_duty.cycle_count = -1;
        fm_link_duty.duty_on_time = 250;
        fm_link_duty.duty_off_time = 250;
        discrete_led_set(LED_ID_FM_PLAY, LED_TWINKLE, &fm_link_duty);
    }
#endif

    //设置当前波段, 主要是确定space
    radio_set_band(g_radio_config.band_mode);

    init_start_freq(dir);
    //起始频率
    current_freq = g_radio_config.FMStatus.freq;
    //结束频率
    end_freq = get_end_freq(dir);

    //搜台步进
    if (g_radio_config.band_mode == Band_Europe)
    {
        //欧洲波段, 步进调整为50K
        space = 50;
    }
    else
    {
        space = 100;
    }

    last_timestamp = sys_get_ab_timer();

    while (1)
    {
        if (need_restart == TRUE)
        {
            //判断当前频点是否是已保存频点
            //并更新电台号
            num = whether_in_list(g_radio_config.FMStatus.freq, pfreq);
            if (num == 0xff)
            {
                g_radio_config.FMStatus.station = 0;
            }
            else
            {
                g_radio_config.FMStatus.station = num;
            }
            //不显示开始搜索的频点
            //g_search_current_freq = g_radio_config.FMStatus.freq;
            //com_view_update(RADIO_MAIN_VIEW_HARD_SEARCH);

            //启动新一轮硬件seek
            result = radio_set_hardseek(current_freq, dir);
            need_restart = FALSE;
            if (!result)
            {
                //硬件搜台启动失败,返回到播放场景
                break;
            }
        }

        //硬件搜台启动成功,  取是否完成标志
        result = radio_get_seekflag();

        if (result == TRUE)
        {
            radio_get_freq();
            current_freq = g_engine_status.FM_CurrentFreq;

            if ((g_engine_status.STC_flag == HARDSEEK_NOT_START) || (_is_search_over(current_freq, end_freq, dir)
                    == TRUE))
            {
                //此轮搜台完成或seek fail, 退出
                radio_break_hardseek();
                break;
            }

            if ((g_engine_status.STC_flag == HARDSEEK_COMPLETE) || (g_engine_status.STC_flag
                    == HARDSEEK_COMPLETE_NOT_VALID))
            {
                //搜到台了
                if ((g_engine_status.STC_flag == HARDSEEK_COMPLETE) && (!should_be_passed(current_freq)))
                {
                    //真正的台
                    radio_break_hardseek();
                    break;
                }

                //是本身的干扰
                if (dir == DIR_UP)
                {
                    current_freq += space;
                }
                else
                {
                    current_freq -= space;
                }
                if (_is_search_over(current_freq, end_freq, dir) == TRUE)
                {
                    //此轮搜台完成
                    radio_break_hardseek();
                    break;
                }
            }

            //未到截至频点, 需启动新一轮搜台
            need_restart = TRUE;
        }
        else
        {
            //显示现在搜索到哪个频点了
            //但这样，会有I2C通讯、也可能有SPI通讯。
            //在有些方案上，这些通讯会干扰搜台，导致锁不住。
            //所以，请慎重选择。
#if 0
            radio_get_freq();
            g_search_current_freq = g_engine_status.FM_CurrentFreq;
            com_view_update(RADIO_MAIN_VIEW_HARD_SEARCH);
#endif
        }

        ret = com_view_loop();
        if (ret > RESULT_COMMON_RESERVE)
        {
            break;
        }
        if (g_radio_config.hint_mode_cfg == 0)
        {
            cur_timestamp = sys_get_ab_timer();
            if ((cur_timestamp - last_timestamp) >= 1500)
            {
                //暂时中断搜台，以保证播放提示音时切换BANK不会影响到搜台效果
                radio_break_hardseek();
                radio_get_freq();
                current_freq = g_engine_status.FM_CurrentFreq;
                need_restart = TRUE;
                keytone_play(KEYTONE_WARNING, KEYTONE_BLOCK);

                last_timestamp = cur_timestamp;
            }
        }
        //挂起10ms 多任务交互
        sys_os_time_dly(1);
    }

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    if (g_radio_config.hint_mode_cfg == 1)
    {
        discrete_led_set(LED_ID_FM_PLAY, LED_ALWAYS_ON, NULL);
    }
#endif

    return ret;
}

//硬件搜台
//freq: 硬件搜台起始频率
//dir: 搜台方向
bool radio_set_hardseek(uint32 freq, uint8 dir)
{
    //seek paramter
    seek_param_t search_parm;
    //frequncy
    search_parm.freq = freq;
    //seek dir
    search_parm.dir = dir;

    return radio_send_msg(&search_parm, NULL, MSG_FMENGINE_SET_HARDSEEK);

}

//获取硬件搜台是否完成标志
bool radio_get_seekflag(void)
{
    bool bret = TRUE;

    bret = radio_send_msg(NULL, &g_engine_status.STC_flag, MSG_FMENGINE_AUTO_SEEK_OVER);

    if (g_engine_status.STC_flag == HARDSEEK_DOING)
    {
        bret = FALSE;
    }
    return bret;
}

//中断硬件搜台过程
bool radio_break_hardseek(void)
{
401e021a:	6c00      	li	a0,0
    return radio_send_msg(NULL, NULL, MSG_FMENGINE_SET_SEEKBREAK);
401e021c:	b204      	lw	v0,401e022c <radio_break_hardseek+0x14>
401e021e:	f300 6e0e 	li	a2,782
401e0222:	ea40      	jalr	v0
401e0224:	67a4      	move	a1,a0
401e0226:	6443      	restore	24,ra
}
401e0228:	e8a0      	jrc	ra
401e022a:	0000      	addiu	s0,sp,0
401e022c:	eda5      	break	45
401e022e:	bfc1      	lwu	a2,4(a3)

401e0230 <radio_get_seekflag>:
401e0230:	64e3      	save	24,ra,s0
401e0232:	b009      	lw	s0,401e0254 <radio_get_seekflag+0x24>
401e0234:	b209      	lw	v0,401e0258 <radio_get_seekflag+0x28>
401e0236:	4809      	addiu	s0,9
401e0238:	6c00      	li	a0,0
401e023a:	f300 6e0f 	li	a2,783
401e023e:	ea40      	jalr	v0
401e0240:	67b0      	move	a1,s0
401e0242:	6762      	move	v1,v0
401e0244:	a040      	lbu	v0,0(s0)
401e0246:	7201      	cmpi	v0,1
401e0248:	6101      	btnez	401e024c <radio_get_seekflag+0x1c>
401e024a:	6b00      	li	v1,0
401e024c:	6743      	move	v0,v1
401e024e:	6463      	restore	24,ra,s0
401e0250:	e8a0      	jrc	ra
401e0252:	0000      	addiu	s0,sp,0
401e0254:	9d4c      	lw	v0,48(a1)
401e0256:	9fc1      	lw	a2,4(a3)
401e0258:	eda5      	break	45
401e025a:	bfc1      	lwu	a2,4(a3)

401e025c <radio_set_hardseek>:
401e025c:	64c4      	save	32,ra
401e025e:	677d      	move	v1,sp
401e0260:	b205      	lw	v0,401e0274 <radio_set_hardseek+0x18>
401e0262:	d404      	sw	a0,16(sp)
401e0264:	c3b4      	sb	a1,20(v1)
401e0266:	0404      	addiu	a0,sp,16
401e0268:	f300 6e0d 	li	a2,781
401e026c:	ea40      	jalr	v0
401e026e:	6d00      	li	a1,0
401e0270:	6444      	restore	32,ra
401e0272:	e8a0      	jrc	ra
401e0274:	eda5      	break	45
401e0276:	bfc1      	lwu	a2,4(a3)

401e0278 <deal_hard_manual_search>:
401e0278:	64f8      	save	64,ra,s0-s1
401e027a:	b060      	lw	s0,401e03f8 <.LBE2+0x168>
401e027c:	ec11      	zeb	a0
401e027e:	d404      	sw	a0,16(sp)
401e0280:	6b00      	li	v1,0
401e0282:	f200 a084 	lbu	a0,516(s0)
401e0286:	b25e      	lw	v0,401e03fc <.LBE2+0x16c>
401e0288:	ea40      	jalr	v0
401e028a:	d305      	sw	v1,20(sp)

401e028c <.LBB2>:
401e028c:	f200 a044 	lbu	v0,516(s0)

401e0290 <.LBE2>:
401e0290:	6901      	li	s1,1
401e0292:	7202      	cmpi	v0,2
401e0294:	6d64      	li	a1,100
401e0296:	6101      	btnez	401e029a <.LBE2+0xa>
401e0298:	4dce      	addiu	a1,-50
401e029a:	9704      	lw	a3,16(sp)
401e029c:	6e01      	li	a2,1
401e029e:	efce      	xor	a3,a2
401e02a0:	efc3      	sltu	a3,a2
401e02a2:	6798      	move	a0,t8
401e02a4:	d40a      	sw	a0,40(sp)
401e02a6:	246d      	beqz	a0,401e0382 <.LBE2+0xf2>
401e02a8:	b756      	lw	a3,401e0400 <.LBE2+0x170>
401e02aa:	3448      	sll	a0,v0,2
401e02ac:	e4f9      	addu	a2,a0,a3
401e02ae:	f1e0 987c 	lw	v1,508(s0)
401e02b2:	9e40      	lw	v0,0(a2)
401e02b4:	eb43      	sltu	v1,v0
401e02b6:	e3a9      	addu	v0,v1,a1
401e02b8:	607a      	bteqz	401e03ae <.LBE2+0x11e>
401e02ba:	f1e0 d85c 	sw	v0,508(s0)
401e02be:	b04f      	lw	s0,401e03f8 <.LBE2+0x168>
401e02c0:	9404      	lw	a0,16(sp)
401e02c2:	f1e0 98dc 	lw	a2,508(s0)
401e02c6:	b251      	lw	v0,401e0408 <.LBE2+0x178>
401e02c8:	ea40      	jalr	v0
401e02ca:	d606      	sw	a2,24(sp)
401e02cc:	f200 a064 	lbu	v1,516(s0)
401e02d0:	6c32      	li	a0,50
401e02d2:	7302      	cmpi	v1,2
401e02d4:	d207      	sw	v0,28(sp)
401e02d6:	d408      	sw	a0,32(sp)
401e02d8:	6002      	bteqz	401e02de <.LBE2+0x4e>
401e02da:	6f64      	li	a3,100
401e02dc:	d708      	sw	a3,32(sp)
401e02de:	6c00      	li	a0,0
401e02e0:	b24b      	lw	v0,401e040c <.LBE2+0x17c>
401e02e2:	67a4      	move	a1,a0
401e02e4:	67c4      	move	a2,a0
401e02e6:	ea40      	jalr	v0
401e02e8:	6f1c      	li	a3,28
401e02ea:	d209      	sw	v0,36(sp)
401e02ec:	2112      	beqz	s1,401e0312 <.LBE2+0x82>
401e02ee:	b043      	lw	s0,401e03f8 <.LBE2+0x168>
401e02f0:	b348      	lw	v1,401e0410 <.LBE2+0x180>
401e02f2:	f1e0 989c 	lw	a0,508(s0)
401e02f6:	b148      	lw	s1,401e0414 <.LBE2+0x184>
401e02f8:	e940      	jalr	s1
401e02fa:	9ba0      	lw	a1,0(v1)
401e02fc:	72ff      	cmpi	v0,255
401e02fe:	6174      	btnez	401e03e8 <.LBE2+0x158>
401e0300:	6c00      	li	a0,0
401e0302:	f200 c080 	sb	a0,512(s0)
401e0306:	9406      	lw	a0,24(sp)
401e0308:	9504      	lw	a1,16(sp)
401e030a:	b244      	lw	v0,401e0418 <.LBE2+0x188>
401e030c:	ea40      	jalr	v0
401e030e:	6900      	li	s1,0
401e0310:	224b      	beqz	v0,401e03a8 <.LBE2+0x118>
401e0312:	b243      	lw	v0,401e041c <.LBE2+0x18c>
401e0314:	eac0      	jalrc	v0
401e0316:	7201      	cmpi	v0,1
401e0318:	6124      	btnez	401e0362 <.LBE2+0xd2>
401e031a:	b042      	lw	s0,401e0420 <.LBE2+0x190>
401e031c:	e8c0      	jalrc	s0
401e031e:	b742      	lw	a3,401e0424 <.LBE2+0x194>
401e0320:	a709      	lbu	s0,9(a3)
401e0322:	9f60      	lw	v1,0(a3)
401e0324:	6730      	move	s1,s0
401e0326:	e911      	zeb	s1
401e0328:	d306      	sw	v1,24(sp)
401e032a:	213c      	beqz	s1,401e03a4 <.LBE2+0x114>
401e032c:	9507      	lw	a1,28(sp)
401e032e:	9604      	lw	a2,16(sp)
401e0330:	18e0 8080 	jal	401e0200 <_is_search_over>
401e0334:	6783      	move	a0,v1
401e0336:	7201      	cmpi	v0,1
401e0338:	6035      	bteqz	401e03a4 <.LBE2+0x114>
401e033a:	40ae      	addiu	a1,s0,-2
401e033c:	ed11      	zeb	a1
401e033e:	5d02      	sltiu	a1,2
401e0340:	600f      	bteqz	401e0360 <.LBE2+0xd0>
401e0342:	7102      	cmpi	s1,2
401e0344:	602b      	bteqz	401e039c <.LBE2+0x10c>
401e0346:	930a      	lw	v1,40(sp)
401e0348:	2353      	beqz	v1,401e03f0 <.LBE2+0x160>
401e034a:	9406      	lw	a0,24(sp)
401e034c:	9608      	lw	a2,32(sp)
401e034e:	e4cd      	addu	v1,a0,a2
401e0350:	d306      	sw	v1,24(sp)
401e0352:	9406      	lw	a0,24(sp)
401e0354:	9507      	lw	a1,28(sp)
401e0356:	18e0 8080 	jal	401e0200 <_is_search_over>
401e035a:	9604      	lw	a2,16(sp)
401e035c:	7201      	cmpi	v0,1
401e035e:	6022      	bteqz	401e03a4 <.LBE2+0x114>
401e0360:	6901      	li	s1,1
401e0362:	b234      	lw	v0,401e0430 <.LBE2+0x1a0>
401e0364:	eac0      	jalrc	v0
401e0366:	5a21      	sltiu	v0,33
401e0368:	d205      	sw	v0,20(sp)
401e036a:	601e      	bteqz	401e03a8 <.LBE2+0x118>
401e036c:	b323      	lw	v1,401e03f8 <.LBE2+0x168>
401e036e:	f200 a3c7 	lbu	a2,519(v1)
401e0372:	2621      	beqz	a2,401e03b6 <.LBE2+0x126>
401e0374:	6d00      	li	a1,0
401e0376:	b226      	lw	v0,401e040c <.LBE2+0x17c>
401e0378:	6c01      	li	a0,1
401e037a:	67c5      	move	a2,a1
401e037c:	ea40      	jalr	v0
401e037e:	6f31      	li	a3,49
401e0380:	17b5      	b	401e02ec <.LBE2+0x5c>
401e0382:	b721      	lw	a3,401e0404 <.LBE2+0x174>
401e0384:	3448      	sll	a0,v0,2
401e0386:	e4f9      	addu	a2,a0,a3
401e0388:	f1e0 987c 	lw	v1,508(s0)
401e038c:	9e40      	lw	v0,0(a2)
401e038e:	ea63      	sltu	v0,v1
401e0390:	e3ab      	subu	v0,v1,a1
401e0392:	6193      	btnez	401e02ba <.LBE2+0x2a>
401e0394:	b21b      	lw	v0,401e0400 <.LBE2+0x170>
401e0396:	e455      	addu	a1,a0,v0
401e0398:	9d40      	lw	v0,0(a1)
401e039a:	178f      	b	401e02ba <.LBE2+0x2a>
401e039c:	b224      	lw	v0,401e042c <.LBE2+0x19c>
401e039e:	ea40      	jalr	v0
401e03a0:	9406      	lw	a0,24(sp)
401e03a2:	2ad1      	bnez	v0,401e0346 <.LBE2+0xb6>
401e03a4:	b221      	lw	v0,401e0428 <.LBE2+0x198>
401e03a6:	eac0      	jalrc	v0
401e03a8:	9205      	lw	v0,20(sp)
401e03aa:	6478      	restore	64,ra,s0-s1
401e03ac:	e8a0      	jrc	ra
401e03ae:	b216      	lw	v0,401e0404 <.LBE2+0x174>
401e03b0:	e455      	addu	a1,a0,v0
401e03b2:	9d40      	lw	v0,0(a1)
401e03b4:	1782      	b	401e02ba <.LBE2+0x2a>
401e03b6:	b016      	lw	s0,401e040c <.LBE2+0x17c>
401e03b8:	6786      	move	a0,a2
401e03ba:	67a6      	move	a1,a2
401e03bc:	e840      	jalr	s0
401e03be:	6f1c      	li	a3,28
401e03c0:	9609      	lw	a2,36(sp)
401e03c2:	6702      	move	s0,v0
401e03c4:	e2d3      	subu	a0,v0,a2
401e03c6:	f5c0 5c1c 	sltiu	a0,1500
401e03ca:	61d4      	btnez	401e0374 <.LBE2+0xe4>
401e03cc:	b117      	lw	s1,401e0428 <.LBE2+0x198>
401e03ce:	e9c0      	jalrc	s1
401e03d0:	b214      	lw	v0,401e041c <.LBE2+0x18c>
401e03d2:	eac0      	jalrc	v0
401e03d4:	b714      	lw	a3,401e0420 <.LBE2+0x190>
401e03d6:	b218      	lw	v0,401e0434 <.LBE2+0x1a4>
401e03d8:	9f20      	lw	s1,0(a3)
401e03da:	d106      	sw	s1,24(sp)
401e03dc:	6901      	li	s1,1
401e03de:	6791      	move	a0,s1
401e03e0:	ea40      	jalr	v0
401e03e2:	67b1      	move	a1,s1
401e03e4:	d009      	sw	s0,36(sp)
401e03e6:	17c6      	b	401e0374 <.LBE2+0xe4>
401e03e8:	b604      	lw	a2,401e03f8 <.LBE2+0x168>
401e03ea:	f200 c640 	sb	v0,512(a2)
401e03ee:	178b      	b	401e0306 <.LBE2+0x76>
401e03f0:	9706      	lw	a3,24(sp)
401e03f2:	9508      	lw	a1,32(sp)
401e03f4:	e7af      	subu	v1,a3,a1
401e03f6:	17ac      	b	401e0350 <.LBE2+0xc0>
401e03f8:	9a9c      	lw	a0,112(v0)
401e03fa:	9fc1      	lw	a2,4(a3)
401e03fc:	0435      	addiu	a0,sp,212
401e03fe:	4002      	addiu	s0,s0,2
401e0400:	ee2c      	and	a2,s1
401e0402:	bfc1      	lwu	a2,4(a3)
401e0404:	ee20      	0xee20
401e0406:	bfc1      	lwu	a2,4(a3)
401e0408:	0221      	addiu	v0,sp,132
401e040a:	4006      	addiu	s0,s0,6
401e040c:	e901      	sdbbp	8
401e040e:	bfc1      	lwu	a2,4(a3)
401e0410:	9ca8      	lw	a1,32(a0)
401e0412:	9fc1      	lw	a2,4(a3)
401e0414:	ecbd      	dmultu	a0,a1
401e0416:	bfc1      	lwu	a2,4(a3)
401e0418:	025d      	addiu	v0,sp,372
401e041a:	401e      	daddiu	s0,s0,-2
401e041c:	0231      	addiu	v0,sp,196
401e041e:	401e      	daddiu	s0,s0,-2
401e0420:	edd1      	sew	a1
401e0422:	bfc1      	lwu	a2,4(a3)
401e0424:	9d4c      	lw	v0,48(a1)
401e0426:	9fc1      	lw	a2,4(a3)
401e0428:	0219      	addiu	v0,sp,100
401e042a:	401e      	daddiu	s0,s0,-2
401e042c:	ec99      	multu	a0,a0
401e042e:	bfc1      	lwu	a2,4(a3)
401e0430:	eb7d      	dmultu	v1,v1
401e0432:	bfc1      	lwu	a2,4(a3)
401e0434:	5cad      	sltiu	a0,173
401e0436:	485a      	addiu	s0,90

401e0438 <deal_hard_auto_seek>:
401e0438:	64f8      	save	64,ra,s0-s1
401e043a:	ec11      	zeb	a0
401e043c:	b08e      	lw	s0,401e0674 <.LBE13+0x2c>
401e043e:	d404      	sw	a0,16(sp)
401e0440:	6c00      	li	a0,0
401e0442:	d405      	sw	a0,20(sp)
401e0444:	b28d      	lw	v0,401e0678 <.LBE13+0x30>
401e0446:	f200 a084 	lbu	a0,516(s0)
401e044a:	ea40      	jalr	v0
401e044c:	6901      	li	s1,1
401e044e:	b28c      	lw	v0,401e067c <.LBE13+0x34>
401e0450:	ea40      	jalr	v0
401e0452:	9404      	lw	a0,16(sp)
401e0454:	d207      	sw	v0,28(sp)
401e0456:	b28b      	lw	v0,401e0680 <.LBE13+0x38>
401e0458:	ea40      	jalr	v0
401e045a:	9404      	lw	a0,16(sp)
401e045c:	d208      	sw	v0,32(sp)
401e045e:	f200 a044 	lbu	v0,516(s0)
401e0462:	9305      	lw	v1,20(sp)
401e0464:	6d32      	li	a1,50
401e0466:	7202      	cmpi	v0,2
401e0468:	d306      	sw	v1,24(sp)
401e046a:	d509      	sw	a1,36(sp)
401e046c:	6002      	bteqz	401e0472 <deal_hard_auto_seek+0x3a>
401e046e:	6e64      	li	a2,100
401e0470:	d609      	sw	a2,36(sp)
401e0472:	b785      	lw	a3,401e0684 <.LBE13+0x3c>
401e0474:	9507      	lw	a1,28(sp)
401e0476:	b285      	lw	v0,401e0688 <.LBE13+0x40>
401e0478:	dfa0      	sw	a1,0(a3)
401e047a:	ea40      	jalr	v0
401e047c:	6c01      	li	a0,1
401e047e:	6c00      	li	a0,0
401e0480:	b283      	lw	v0,401e068c <.LBE13+0x44>
401e0482:	67a4      	move	a1,a0
401e0484:	67c4      	move	a2,a0
401e0486:	ea40      	jalr	v0
401e0488:	6f1c      	li	a3,28
401e048a:	d20a      	sw	v0,40(sp)
401e048c:	2106      	beqz	s1,401e049a <deal_hard_auto_seek+0x62>
401e048e:	b181      	lw	s1,401e0690 <.LBE13+0x48>
401e0490:	9407      	lw	a0,28(sp)
401e0492:	e940      	jalr	s1
401e0494:	9504      	lw	a1,16(sp)
401e0496:	6900      	li	s1,0
401e0498:	224b      	beqz	v0,401e0530 <.L92>
401e049a:	b27f      	lw	v0,401e0694 <.LBE13+0x4c>
401e049c:	eac0      	jalrc	v0
401e049e:	7201      	cmpi	v0,1
401e04a0:	6013      	bteqz	401e04c8 <deal_hard_auto_seek+0x90>
401e04a2:	9506      	lw	a1,24(sp)
401e04a4:	5d28      	sltiu	a1,40
401e04a6:	6042      	bteqz	401e052c <deal_hard_auto_seek+0xf4>
401e04a8:	b282      	lw	v0,401e06b0 <.LBE13+0x68>
401e04aa:	eac0      	jalrc	v0
401e04ac:	5a21      	sltiu	v0,33
401e04ae:	d205      	sw	v0,20(sp)
401e04b0:	603d      	bteqz	401e052c <deal_hard_auto_seek+0xf4>
401e04b2:	b771      	lw	a3,401e0674 <.LBE13+0x2c>
401e04b4:	f200 a7c7 	lbu	a2,519(a3)
401e04b8:	2660      	beqz	a2,401e057a <.L92+0x4a>
401e04ba:	6d00      	li	a1,0
401e04bc:	b274      	lw	v0,401e068c <.LBE13+0x44>
401e04be:	6c01      	li	a0,1
401e04c0:	67c5      	move	a2,a1
401e04c2:	ea40      	jalr	v0
401e04c4:	6f31      	li	a3,49
401e04c6:	17e2      	b	401e048c <deal_hard_auto_seek+0x54>
401e04c8:	b074      	lw	s0,401e0698 <.LBE13+0x50>
401e04ca:	e8c0      	jalrc	s0
401e04cc:	b474      	lw	a0,401e0698 <.LBE13+0x50>
401e04ce:	a409      	lbu	s0,9(a0)
401e04d0:	9ca0      	lw	a1,0(a0)
401e04d2:	6730      	move	s1,s0
401e04d4:	e911      	zeb	s1
401e04d6:	d507      	sw	a1,28(sp)
401e04d8:	2129      	beqz	s1,401e052c <deal_hard_auto_seek+0xf4>
401e04da:	6785      	move	a0,a1
401e04dc:	9604      	lw	a2,16(sp)
401e04de:	18e0 8080 	jal	401e0200 <_is_search_over>
401e04e2:	9508      	lw	a1,32(sp)
401e04e4:	7201      	cmpi	v0,1
401e04e6:	6022      	bteqz	401e052c <deal_hard_auto_seek+0xf4>
401e04e8:	40ce      	addiu	a2,s0,-2
401e04ea:	ee11      	zeb	a2
401e04ec:	5e02      	sltiu	a2,2
401e04ee:	601a      	bteqz	401e0524 <deal_hard_auto_seek+0xec>
401e04f0:	7102      	cmpi	s1,2
401e04f2:	6061      	bteqz	401e05b6 <.L92+0x86>
401e04f4:	9407      	lw	a0,28(sp)
401e04f6:	b764      	lw	a3,401e0684 <.LBE13+0x3c>
401e04f8:	b264      	lw	v0,401e0688 <.LBE13+0x40>
401e04fa:	df80      	sw	a0,0(a3)
401e04fc:	ea40      	jalr	v0
401e04fe:	6c01      	li	a0,1
401e0500:	9304      	lw	v1,16(sp)
401e0502:	7301      	cmpi	v1,1
401e0504:	6153      	btnez	401e05ac <.L92+0x7c>
401e0506:	9307      	lw	v1,28(sp)
401e0508:	9509      	lw	a1,36(sp)
401e050a:	e3b9      	addu	a2,v1,a1
401e050c:	d607      	sw	a2,28(sp)
401e050e:	9407      	lw	a0,28(sp)
401e0510:	9508      	lw	a1,32(sp)
401e0512:	18e0 8080 	jal	401e0200 <_is_search_over>
401e0516:	9604      	lw	a2,16(sp)
401e0518:	7201      	cmpi	v0,1
401e051a:	6008      	bteqz	401e052c <deal_hard_auto_seek+0xf4>
401e051c:	b660      	lw	a2,401e069c <.LBE13+0x54>
401e051e:	a629      	lbu	s1,9(a2)
401e0520:	7102      	cmpi	s1,2
401e0522:	600e      	bteqz	401e0540 <.L92+0x10>
401e0524:	9506      	lw	a1,24(sp)
401e0526:	6901      	li	s1,1
401e0528:	5d28      	sltiu	a1,40
401e052a:	61be      	btnez	401e04a8 <deal_hard_auto_seek+0x70>
401e052c:	b25d      	lw	v0,401e06a0 <.LBE13+0x58>
401e052e:	eac0      	jalrc	v0

401e0530 <.L92>:
401e0530:	679d      	move	a0,sp
401e0532:	b751      	lw	a3,401e0674 <.LBE13+0x2c>
401e0534:	a4b8      	lbu	a1,24(a0)
401e0536:	9205      	lw	v0,20(sp)
401e0538:	f200 c7a1 	sb	a1,513(a3)
401e053c:	6478      	restore	64,ra,s0-s1
401e053e:	e8a0      	jrc	ra
401e0540:	b158      	lw	s1,401e069c <.LBE13+0x54>
401e0542:	e940      	jalr	s1
401e0544:	6800      	li	s0,0
401e0546:	b25a      	lw	v0,401e06ac <.LBE13+0x64>
401e0548:	ea40      	jalr	v0
401e054a:	6790      	move	a0,s0
401e054c:	b159      	lw	s1,401e06b0 <.LBE13+0x68>
401e054e:	1009      	b	401e0562 <.L92+0x32>
401e0550:	6d00      	li	a1,0
401e0552:	b34f      	lw	v1,401e068c <.LBE13+0x44>
401e0554:	6c01      	li	a0,1
401e0556:	67c5      	move	a2,a1
401e0558:	6f31      	li	a3,49
401e055a:	eb40      	jalr	v1
401e055c:	4001      	addiu	s0,s0,1
401e055e:	5864      	sltiu	s0,100
401e0560:	607c      	bteqz	401e065a <.LBE13+0x12>
401e0562:	e9c0      	jalrc	s1
401e0564:	5a21      	sltiu	v0,33
401e0566:	d205      	sw	v0,20(sp)
401e0568:	61f3      	btnez	401e0550 <.L92+0x20>
401e056a:	679d      	move	a0,sp
401e056c:	b742      	lw	a3,401e0674 <.LBE13+0x2c>
401e056e:	a4b8      	lbu	a1,24(a0)
401e0570:	9205      	lw	v0,20(sp)
401e0572:	f200 c7a1 	sb	a1,513(a3)
401e0576:	6478      	restore	64,ra,s0-s1
401e0578:	e8a0      	jrc	ra
401e057a:	b045      	lw	s0,401e068c <.LBE13+0x44>
401e057c:	6786      	move	a0,a2
401e057e:	67a6      	move	a1,a2
401e0580:	e840      	jalr	s0
401e0582:	6f1c      	li	a3,28
401e0584:	960a      	lw	a2,40(sp)
401e0586:	6702      	move	s0,v0
401e0588:	e2d3      	subu	a0,v0,a2
401e058a:	f5c0 5c1c 	sltiu	a0,1500
401e058e:	6195      	btnez	401e04ba <deal_hard_auto_seek+0x82>
401e0590:	b144      	lw	s1,401e06a0 <.LBE13+0x58>
401e0592:	e9c0      	jalrc	s1
401e0594:	b241      	lw	v0,401e0694 <.LBE13+0x4c>
401e0596:	eac0      	jalrc	v0
401e0598:	b341      	lw	v1,401e0698 <.LBE13+0x50>
401e059a:	b247      	lw	v0,401e06b4 <.LBE13+0x6c>
401e059c:	9b20      	lw	s1,0(v1)
401e059e:	d107      	sw	s1,28(sp)
401e05a0:	6901      	li	s1,1
401e05a2:	6791      	move	a0,s1
401e05a4:	ea40      	jalr	v0
401e05a6:	67b1      	move	a1,s1
401e05a8:	d00a      	sw	s0,40(sp)
401e05aa:	1787      	b	401e04ba <deal_hard_auto_seek+0x82>
401e05ac:	9707      	lw	a3,28(sp)
401e05ae:	9409      	lw	a0,36(sp)
401e05b0:	e78b      	subu	v0,a3,a0
401e05b2:	d207      	sw	v0,28(sp)
401e05b4:	17ac      	b	401e050e <deal_hard_auto_seek+0xd6>
401e05b6:	b23c      	lw	v0,401e06a4 <.LBE13+0x5c>
401e05b8:	ea40      	jalr	v0
401e05ba:	9407      	lw	a0,28(sp)
401e05bc:	2a9b      	bnez	v0,401e04f4 <deal_hard_auto_seek+0xbc>

401e05be <.LBB11>:
401e05be:	9706      	lw	a3,24(sp)
401e05c0:	6762      	move	v1,v0
401e05c2:	eae3      	sltu	v0,a3
401e05c4:	600d      	bteqz	401e05e0 <.LBE11>
401e05c6:	b439      	lw	a0,401e06a8 <.LBE13+0x60>
401e05c8:	3768      	sll	a3,v1,2
401e05ca:	e789      	addu	v0,a3,a0
401e05cc:	9ac0      	lw	a2,0(v0)
401e05ce:	9507      	lw	a1,28(sp)
401e05d0:	eeae      	xor	a2,a1
401e05d2:	2606      	beqz	a2,401e05e0 <.LBE11>
401e05d4:	43a1      	addiu	a1,v1,1
401e05d6:	6765      	move	v1,a1
401e05d8:	9606      	lw	a2,24(sp)
401e05da:	eb11      	zeb	v1
401e05dc:	ebc3      	sltu	v1,a2
401e05de:	61f4      	btnez	401e05c8 <.LBB11+0xa>

401e05e0 <.LBE11>:
401e05e0:	6783      	move	a0,v1
401e05e2:	9306      	lw	v1,24(sp)
401e05e4:	ec11      	zeb	a0
401e05e6:	ec6e      	xor	a0,v1
401e05e8:	2c85      	bnez	a0,401e04f4 <deal_hard_auto_seek+0xbc>
401e05ea:	b030      	lw	s0,401e06a8 <.LBE13+0x60>

401e05ec <.LBB13>:
401e05ec:	6e00      	li	a2,0
401e05ee:	32c8      	sll	v0,a2,2
401e05f0:	e21d      	addu	a3,v0,s0
401e05f2:	9f40      	lw	v0,0(a3)
401e05f4:	2228      	beqz	v0,401e0646 <.LBB13+0x5a>
401e05f6:	9507      	lw	a1,28(sp)
401e05f8:	eaaa      	cmp	v0,a1
401e05fa:	f77f 601b 	bteqz	401e04f4 <deal_hard_auto_seek+0xbc>
401e05fe:	eaa3      	sltu	v0,a1
401e0600:	6006      	bteqz	401e060e <.LBB13+0x22>
401e0602:	46e1      	addiu	a3,a2,1
401e0604:	67c7      	move	a2,a3
401e0606:	ee11      	zeb	a2
401e0608:	5e28      	sltiu	a2,40
401e060a:	61f1      	btnez	401e05ee <.LBB13+0x2>
401e060c:	1773      	b	401e04f4 <deal_hard_auto_seek+0xbc>
401e060e:	6b27      	li	v1,39
401e0610:	ebc3      	sltu	v1,a2
401e0612:	67b8      	move	a1,t8
401e0614:	2d0a      	bnez	a1,401e062a <.LBB13+0x3e>
401e0616:	3468      	sll	a0,v1,2
401e0618:	e409      	addu	v0,a0,s0
401e061a:	9a80      	lw	a0,0(v0)
401e061c:	2c06      	bnez	a0,401e062a <.LBB13+0x3e>
401e061e:	43af      	addiu	a1,v1,-1
401e0620:	6765      	move	v1,a1
401e0622:	eb11      	zeb	v1
401e0624:	ebc3      	sltu	v1,a2
401e0626:	67b8      	move	a1,t8
401e0628:	25f6      	beqz	a1,401e0616 <.LBB13+0x2a>
401e062a:	7327      	cmpi	v1,39
401e062c:	f77f 6002 	bteqz	401e04f4 <deal_hard_auto_seek+0xbc>
401e0630:	6783      	move	a0,v1
401e0632:	2d09      	bnez	a1,401e0646 <.LBB13+0x5a>
401e0634:	3388      	sll	v1,a0,2
401e0636:	e309      	addu	v0,v1,s0
401e0638:	446f      	addiu	v1,a0,-1
401e063a:	6783      	move	a0,v1
401e063c:	9aa0      	lw	a1,0(v0)
401e063e:	ec11      	zeb	a0
401e0640:	ecc3      	sltu	a0,a2
401e0642:	daa1      	sw	a1,4(v0)
401e0644:	60f7      	bteqz	401e0634 <.LBB13+0x48>
401e0646:	9207      	lw	v0,28(sp)

401e0648 <.LBE13>:
401e0648:	5600      	slti	a2,0
401e064a:	df40      	sw	v0,0(a3)
401e064c:	f75f 6112 	btnez	401e04f4 <deal_hard_auto_seek+0xbc>
401e0650:	9506      	lw	a1,24(sp)
401e0652:	45c1      	addiu	a2,a1,1
401e0654:	ee11      	zeb	a2
401e0656:	d606      	sw	a2,24(sp)
401e0658:	174d      	b	401e04f4 <deal_hard_auto_seek+0xbc>
401e065a:	b215      	lw	v0,401e06ac <.LBE13+0x64>
401e065c:	ea40      	jalr	v0
401e065e:	6c01      	li	a0,1
401e0660:	6c00      	li	a0,0
401e0662:	b30b      	lw	v1,401e068c <.LBE13+0x44>
401e0664:	67a4      	move	a1,a0
401e0666:	67c4      	move	a2,a0
401e0668:	eb40      	jalr	v1
401e066a:	6f1c      	li	a3,28
401e066c:	6901      	li	s1,1
401e066e:	d20a      	sw	v0,40(sp)
401e0670:	170d      	b	401e048c <deal_hard_auto_seek+0x54>
401e0672:	0000      	addiu	s0,sp,0
401e0674:	9a9c      	lw	a0,112(v0)
401e0676:	9fc1      	lw	a2,4(a3)
401e0678:	0435      	addiu	a0,sp,212
401e067a:	4002      	addiu	s0,s0,2
401e067c:	0201      	addiu	v0,sp,4
401e067e:	4006      	addiu	s0,s0,6
401e0680:	0221      	addiu	v0,sp,132
401e0682:	4006      	addiu	s0,s0,6
401e0684:	9f1c      	lw	s0,112(a3)
401e0686:	9fc1      	lw	a2,4(a3)
401e0688:	ec5d      	dmultu	a0,v0
401e068a:	bfc1      	lwu	a2,4(a3)
401e068c:	e901      	sdbbp	8
401e068e:	bfc1      	lwu	a2,4(a3)
401e0690:	025d      	addiu	v0,sp,372
401e0692:	401e      	daddiu	s0,s0,-2
401e0694:	0231      	addiu	v0,sp,196
401e0696:	401e      	daddiu	s0,s0,-2
401e0698:	edd1      	sew	a1
401e069a:	bfc1      	lwu	a2,4(a3)
401e069c:	9d4c      	lw	v0,48(a1)
401e069e:	9fc1      	lw	a2,4(a3)
401e06a0:	0219      	addiu	v0,sp,100
401e06a2:	401e      	daddiu	s0,s0,-2
401e06a4:	ec99      	multu	a0,a0
401e06a6:	bfc1      	lwu	a2,4(a3)
401e06a8:	9cac      	lw	a1,48(a0)
401e06aa:	9fc1      	lw	a2,4(a3)
401e06ac:	0301      	addiu	v1,sp,4
401e06ae:	4002      	addiu	s0,s0,2
401e06b0:	eb7d      	dmultu	v1,v1
401e06b2:	bfc1      	lwu	a2,4(a3)
401e06b4:	5cad      	sltiu	a0,173
401e06b6:	485a      	addiu	s0,90

401e06b8 <__radio_search_view_redraw>:
401e06b8:	e8a0      	jrc	ra
	...

401e06bc <radio_hard_search_main_view>:
401e06bc:	e8a0      	jrc	ra
401e06be:	6500      	nop
	...
Disassembly of section BANK_CONTROL_1_9:

40260200 <radio_engine_kill>:
40260200:	64c4      	save	32,ra
#include "app_radio.h"

void radio_engine_kill(uint8 eg_id)
{
40260202:	677d      	move	v1,sp
    msg_apps_t msg;
    //注销music engine
    msg.type = MSG_KILL_APP_SYNC;
    msg.content.data[0] = eg_id;
40260204:	6e00      	li	a2,0
    //发送同步消息
    send_sync_msg(APP_ID_MANAGER, &msg, NULL, 0);
40260206:	f180 6d05 	li	a1,389
4026020a:	b205      	lw	v0,4026021c <radio_engine_kill+0x1c>
4026020c:	d504      	sw	a1,16(sp)
4026020e:	c394      	sb	a0,20(v1)
40260210:	0504      	addiu	a1,sp,16
40260212:	6c0b      	li	a0,11
40260214:	ea40      	jalr	v0
40260216:	67e6      	move	a3,a2
40260218:	6444      	restore	32,ra
4026021a:	e8a0      	jrc	ra
4026021c:	5a65      	sltiu	v0,101
4026021e:	482e      	addiu	s0,46

40260220 <radio_engine_create>:
40260220:	64c5      	save	40,ra
}

bool radio_engine_create(uint8 eg_id)
{
40260222:	677d      	move	v1,sp
    //消息返回
    msg_reply_t msg_reply;
    msg_apps_t msg;
    //创建radio 后台引擎进程
    msg.type = MSG_CREAT_APP_SYNC;
    msg.content.data[0] = eg_id;
40260224:	f180 6d02 	li	a1,386
40260228:	b206      	lw	v0,40260240 <radio_engine_create+0x20>
    //发送同步消息
    return (send_sync_msg(APP_ID_MANAGER, &msg, &msg_reply, 0) == ERR_NO_ERR);
4026022a:	d506      	sw	a1,24(sp)
4026022c:	c39c      	sb	a0,28(v1)
4026022e:	0506      	addiu	a1,sp,24
40260230:	6c0b      	li	a0,11
40260232:	0604      	addiu	a2,sp,16
40260234:	ea40      	jalr	v0
40260236:	6f00      	li	a3,0
40260238:	5a01      	sltiu	v0,1

}
4026023a:	6758      	move	v0,t8
4026023c:	6445      	restore	40,ra
4026023e:	e8a0      	jrc	ra
40260240:	5a65      	sltiu	v0,101
40260242:	482e      	addiu	s0,46

40260244 <radio_engine_init>:
40260244:	64f4      	save	32,ra,s0-s1

40260246 <.LBB2>:

//引擎初始化
bool radio_engine_init(void)
{
40260246:	b215      	lw	v0,40260298 <.LBE2+0x50>

40260248 <.LBE2>:

///获取后台引擎类型
static inline engine_type_e get_engine_type(void)
{
    return g_app_info_state_all.engine_type;
40260248:	6801      	li	s0,1
    engine_type_e engine_type;
    bool result = TRUE;
4026024a:	a240      	lbu	v0,0(v0)
extern uint32 g_customer_state;

///获取后台引擎类型
static inline engine_type_e get_engine_type(void)
{
4026024c:	6900      	li	s1,0
    bool need_init = FALSE;
4026024e:	7202      	cmpi	v0,2

    //获取当前后台引擎类型
    engine_type = get_engine_type();

    //当前未安装引擎，需安装
    if (engine_type != ENGINE_RADIO)
40260250:	6008      	bteqz	40260262 <.LBE2+0x1a>
40260252:	2a1d      	bnez	v0,4026028e <.LBE2+0x46>
    {
        if (engine_type != ENGINE_NULL)
40260254:	1920 8088 	jal	40260220 <radio_engine_create>
        {
            radio_engine_kill(APP_ID_THEENGINE);
        }

        //创建radio 后台引擎进程
        //实际只执行了fmdrv_init(即提供了FM模块的时钟)
        result = radio_engine_create(APP_ID_FMENGINE);
40260258:	6c12      	li	a0,18
4026025a:	7201      	cmpi	v0,1
        if (result == TRUE)
4026025c:	6702      	move	s0,v0
4026025e:	6101      	btnez	40260262 <.LBE2+0x1a>
40260260:	6901      	li	s1,1
        {
            //需初始化模组
            need_init = TRUE;
40260262:	2905      	bnez	s1,4026026e <.LBE2+0x26>
        }
    }

    if (need_init == TRUE)
40260264:	7001      	cmpi	s0,1
    {
        radio_set_mute(SetMUTE);
        result = radio_modul_open((uint8) g_radio_config.band_mode);
    }

    if (result == TRUE)
40260266:	600e      	bteqz	40260284 <.LBE2+0x3c>
40260268:	6750      	move	v0,s0
    {
        //获取当前频点
        radio_get_freq();
    }

    return result;
}
4026026a:	6474      	restore	32,ra,s0-s1
4026026c:	e8a0      	jrc	ra
4026026e:	b20c      	lw	v0,4026029c <.LBE2+0x54>
40260270:	ea40      	jalr	v0
40260272:	6c01      	li	a0,1
40260274:	b50b      	lw	a1,402602a0 <.LBE2+0x58>
40260276:	b00c      	lw	s0,402602a4 <.LBE2+0x5c>
40260278:	f200 a584 	lbu	a0,516(a1)
4026027c:	e8c0      	jalrc	s0
4026027e:	6702      	move	s0,v0
40260280:	7001      	cmpi	s0,1
40260282:	61f2      	btnez	40260268 <.LBE2+0x20>
40260284:	b209      	lw	v0,402602a8 <.LBE2+0x60>
40260286:	eac0      	jalrc	v0
40260288:	6750      	move	v0,s0
4026028a:	6474      	restore	32,ra,s0-s1
4026028c:	e8a0      	jrc	ra
4026028e:	1920 8080 	jal	40260200 <radio_engine_kill>
40260292:	6c80      	li	a0,128
40260294:	17df      	b	40260254 <.LBE2+0xc>
40260296:	0000      	addiu	s0,sp,0
40260298:	a094      	lbu	a0,20(s0)
4026029a:	9fc1      	lw	a2,4(a3)
4026029c:	0301      	addiu	v1,sp,4
4026029e:	4002      	addiu	s0,s0,2
402602a0:	9a9c      	lw	a0,112(v0)
402602a2:	9fc1      	lw	a2,4(a3)
402602a4:	02cd      	addiu	v0,sp,820
402602a6:	4002      	addiu	s0,s0,2
402602a8:	edd1      	sew	a1
402602aa:	bfc1      	lwu	a2,4(a3)

402602ac <scene_play_init>:
402602ac:	64c3      	save	24,ra

//播放场景初始化
bool scene_play_init(void)
{
402602ae:	b209      	lw	v0,402602d0 <scene_play_init+0x24>
    bool bret;

    //安装引擎,初始化fm模组
    bret = radio_engine_init();
402602b0:	eac0      	jalrc	v0
402602b2:	6762      	move	v1,v0
    if (bret == FALSE)
    {
        return FALSE;
402602b4:	2a03      	bnez	v0,402602bc <scene_play_init+0x10>
402602b6:	6743      	move	v0,v1
    }

    //radio_set_mute(SetMUTE);
    //sys_os_time_dly(10);
    //com_set_mute(FALSE);//解除静音

    //设置音量
    com_reset_sound_volume(0);

    //进入播放场景，初始化频率表指针
    init_point_freq();

    return TRUE;
}
402602b8:	6443      	restore	24,ra
402602ba:	e8a0      	jrc	ra
402602bc:	b206      	lw	v0,402602d0 <scene_play_init+0x24>
402602be:	ea40      	jalr	v0
402602c0:	6c00      	li	a0,0
402602c2:	b306      	lw	v1,402602d8 <scene_play_init+0x2c>
402602c4:	ebc0      	jalrc	v1
402602c6:	6b01      	li	v1,1
402602c8:	6743      	move	v0,v1
402602ca:	6443      	restore	24,ra
402602cc:	e8a0      	jrc	ra
402602ce:	0000      	addiu	s0,sp,0
402602d0:	0245      	addiu	v0,sp,276
402602d2:	4026      	addiu	s1,s0,6
402602d4:	5af9      	sltiu	v0,249
402602d6:	48be      	addiu	s0,-66
402602d8:	0241      	addiu	v0,sp,260
402602da:	4006      	addiu	s0,s0,6

402602dc <radio_scene_playing>:
402602dc:	64f5      	save	40,ra,s0-s1


uint8 fm_eg_channel_sel = 0xff;

//播放场景
app_result_e radio_scene_playing(void)
{
402602de:	b157      	lw	s1,40260438 <.L32+0xba>
    app_result_e loop_deal_ret = RESULT_NULL;
    bool bret;
    bool need_reset_freq = FALSE;
    if(fm_eg_channel_sel == 0xFF)
402602e0:	6800      	li	s0,0
402602e2:	a140      	lbu	v0,0(s1)
402602e4:	d004      	sw	s0,16(sp)
402602e6:	72ff      	cmpi	v0,255
402602e8:	f080 601c 	bteqz	40260424 <.L32+0xa6>
402602ec:	b155      	lw	s1,40260440 <.L32+0xc2>
    {
       fm_eg_channel_sel = (uint8) com_get_config_default(FMENGINE_CHANNEL_SEL);
    }
    bool no_need_play;

    no_need_play = g_standby_exit_flag;
402602ee:	a160      	lbu	v1,0(s1)
402602f0:	d305      	sw	v1,20(sp)
402602f2:	f080 2213 	beqz	v0,4026041c <.L32+0x9e>

    //AA通道时要关掉按键音
    if (fm_eg_channel_sel == 0)
402602f6:	1920 80ab 	jal	402602ac <scene_play_init>
    {
        keytone_set_on_off(FALSE);
    }

    bret = scene_play_init();
402602fa:	6500      	nop
402602fc:	b454      	lw	a0,4026044c <.L32+0xce>
    if (bret == FALSE)
    {
#if(SUPPORT_LED_DRIVER == 1)
        if (g_comval.support_led_display == 1)
        {
            //显示Error，等待2秒钟，期间有按键就提前退出到下一个应用，且可以继续响应按键
            show_error(); //仅显示，没有其他任何副作用；这种方法要慎用，它会破坏由视图管理器刷新的UI
            com_app_sleep(2000); //延时，显示错误，任意按键返回
        }

        return RESULT_NEXT_FUNCTION;
#endif
    }

    //for RCP, 同步电台频点，必须在第一次com_tts_state_play之前做，否则APK会获取到错误的频点
    if (g_radio_config.FMStatus.freq != g_engine_status.FM_CurrentFreq)
402602fe:	b653      	lw	a2,40260448 <.L32+0xca>
40260300:	9ca0      	lw	a1,0(a0)
40260302:	f1e0 9e7c 	lw	v1,508(a2)
40260306:	ed6e      	xor	a1,v1
40260308:	2502      	beqz	a1,4026030e <radio_scene_playing+0x32>
4026030a:	6f01      	li	a3,1
    {
        need_reset_freq = TRUE;
4026030c:	d704      	sw	a3,16(sp)
4026030e:	b251      	lw	v0,40260450 <.L32+0xd2>
    }
    //使用radio_get_freq会获取到错误的频点
    g_engine_status.FM_CurrentFreq = g_radio_config.FMStatus.freq;

    //创建主视图
    radio_play_create_main_view();
40260310:	ea40      	jalr	v0
40260312:	dc60      	sw	v1,0(a0)
40260314:	b350      	lw	v1,40260454 <.L32+0xd6>

    //tts
    if (g_first_enter_play == TRUE)
40260316:	a380      	lbu	a0,0(v1)
40260318:	7401      	cmpi	a0,1
4026031a:	6112      	btnez	40260340 <radio_scene_playing+0x64>
4026031c:	b650      	lw	a2,4026045c <.L32+0xde>
    {
        g_radio_init_flag = TRUE;

        if ((g_ap_switch_var.call_background_status != CALL_BACK_STATUS_BACK) && (g_standby_exit_flag == FALSE))
4026031e:	b74f      	lw	a3,40260458 <.L32+0xda>
40260320:	a6ac      	lbu	a1,12(a2)
40260322:	6c01      	li	a0,1
40260324:	7502      	cmpi	a1,2
40260326:	c780      	sb	a0,0(a3)
40260328:	6159      	btnez	402603dc <.L32+0x5e>
4026032a:	b154      	lw	s1,40260478 <.L32+0xfa>
4026032c:	1002      	b	40260332 <radio_scene_playing+0x56>
4026032e:	5a21      	sltiu	v0,33
        {
            com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_NOBLOCK, (void *) TTS_ENTER_RADIO);

            if (g_comval.support_bt_inback == 1)
            {
                //创建蓝牙后台
                com_btmanager_init(FALSE);
            }
            else
            {
                //杀死蓝牙后台
                com_btmanager_exit(FALSE, TRUE);
            }

            //等待TTS结束
            if (com_tts_state_play_wait() == TTS_PLAY_RET_BY_KEY)
            {
                sys_os_time_dly(10); //等待100ms，以便短按抬起能够完成
            }
        }

        while (1)
        {
            loop_deal_ret = com_view_loop();
            if (loop_deal_ret == RESULT_NONE_EVENT)
            {
                loop_deal_ret = RESULT_NULL;
                break;
            }
            else if (loop_deal_ret > RESULT_COMMON_RESERVE)
40260330:	6026      	bteqz	4026037e <.L32>
40260332:	e9c0      	jalrc	s1
40260334:	7202      	cmpi	v0,2
40260336:	6702      	move	s0,v0
40260338:	61fa      	btnez	4026032e <radio_scene_playing+0x52>
4026033a:	b548      	lw	a1,40260458 <.L32+0xda>
            {
                goto radio_playing_exit;
            }
            else
            {
                ; //nothing
            }
        }

        g_radio_init_flag = FALSE;
4026033c:	6e00      	li	a2,0
4026033e:	c5c0      	sb	a2,0(a1)
40260340:	b447      	lw	a0,4026045c <.L32+0xde>
    }

    if (g_ap_switch_var.switch_to_radio_by_apkapp == TRUE)
40260342:	a4ff      	lbu	a3,31(a0)
40260344:	7701      	cmpi	a3,1
40260346:	6023      	bteqz	4026038e <.L32+0x10>
40260348:	b340      	lw	v1,40260448 <.L32+0xca>
    {
        g_neednot_freq_tts_play = TRUE;
        g_ap_switch_var.switch_to_radio_by_apkapp = FALSE;
    }

    if (g_radio_config.FMStatus.station > 0)
4026034a:	f200 a380 	lbu	a0,512(v1)
4026034e:	2428      	beqz	a0,402603a0 <.L32+0x22>
40260350:	b24c      	lw	v0,40260480 <.L32+0x102>
    {
        //刷新电台号
        radio_station_create_msg_view(2000);
40260352:	f7c0 6c10 	li	a0,2000
40260356:	ea40      	jalr	v0
    }
    else
    {
        radio_freq_tts_play(g_radio_config.FMStatus.freq);
40260358:	6800      	li	s0,0
4026035a:	b649      	lw	a2,4026047c <.L32+0xfe>
    }

    g_neednot_freq_tts_play = FALSE;
4026035c:	9504      	lw	a1,16(sp)

    //当前获取的频点和要设置的频点不一致时，都需要强制设置频点
    if (need_reset_freq == TRUE)
4026035e:	c600      	sb	s0,0(a2)
40260360:	2d28      	bnez	a1,402603b2 <.L32+0x34>
40260362:	b24c      	lw	v0,40260490 <.L32+0x112>
    {
        //更新FM的播放状态
        g_playing_flag = TRUE;
        
        //选择正在播放进入, 不重设频点, 避免出现一下短暂杂音
        radio_set_freq(g_radio_config.FMStatus.freq);

        need_reset_freq = FALSE;
    }
    //for RCP, 同步电台频点
    radio_get_freq();
40260364:	eac0      	jalrc	v0
40260366:	b24c      	lw	v0,40260494 <.L32+0x116>

    radio_connect_ain();
40260368:	eac0      	jalrc	v0
4026036a:	9305      	lw	v1,20(sp)

    if (no_need_play == 0)
4026036c:	2330      	beqz	v1,402603ce <.L32+0x50>
4026036e:	b647      	lw	a2,40260488 <.L32+0x10a>
    {
        radio_set_mute(releaseMUTE);
        g_playing_flag = TRUE;
    }
    else 
    {
    	  g_playing_flag = FALSE;
40260370:	c600      	sb	s0,0(a2)
40260372:	b74b      	lw	a3,4026049c <.L32+0x11e>
    }

    g_searching_flag = FALSE;
40260374:	6c00      	li	a0,0
40260376:	b04b      	lw	s0,402604a0 <.L32+0x122>
    loop_deal_ret = playing_loop_deal();
40260378:	e840      	jalr	s0
4026037a:	c780      	sb	a0,0(a3)
4026037c:	6702      	move	s0,v0

4026037e <.L32>:
4026037e:	f70f 4060 	addiu	v1,s0,-256
    radio_playing_exit: 
    if((loop_deal_ret >= RESULT_APP_QUIT) && (loop_deal_ret < RESULT_AUTO_SEARCH))
40260382:	eb31      	zeh	v1
40260384:	5b1d      	sltiu	v1,29
40260386:	6144      	btnez	40260410 <.L32+0x92>
40260388:	6750      	move	v0,s0
    {
        com_set_mute(TRUE); //静音
    }
    return loop_deal_ret;
}
4026038a:	6475      	restore	40,ra,s0-s1
4026038c:	e8a0      	jrc	ra
4026038e:	b33c      	lw	v1,4026047c <.L32+0xfe>
40260390:	6a01      	li	v0,1
40260392:	c340      	sb	v0,0(v1)
40260394:	b32d      	lw	v1,40260448 <.L32+0xca>
40260396:	6800      	li	s0,0
40260398:	c41f      	sb	s0,31(a0)
4026039a:	f200 a380 	lbu	a0,512(v1)
4026039e:	2cd8      	bnez	a0,40260350 <radio_scene_playing+0x74>
402603a0:	f1e0 9b9c 	lw	a0,508(v1)
402603a4:	b238      	lw	v0,40260484 <.L32+0x106>
402603a6:	ea40      	jalr	v0
402603a8:	6800      	li	s0,0
402603aa:	b635      	lw	a2,4026047c <.L32+0xfe>
402603ac:	9504      	lw	a1,16(sp)
402603ae:	c600      	sb	s0,0(a2)
402603b0:	25d8      	beqz	a1,40260362 <radio_scene_playing+0x86>
402603b2:	b726      	lw	a3,40260448 <.L32+0xca>
402603b4:	b435      	lw	a0,40260488 <.L32+0x10a>
402603b6:	6b01      	li	v1,1
402603b8:	c460      	sb	v1,0(a0)
402603ba:	b235      	lw	v0,4026048c <.L32+0x10e>
402603bc:	f1e0 9f9c 	lw	a0,508(a3)
402603c0:	eac0      	jalrc	v0
402603c2:	b234      	lw	v0,40260490 <.L32+0x112>
402603c4:	eac0      	jalrc	v0
402603c6:	b234      	lw	v0,40260494 <.L32+0x116>
402603c8:	eac0      	jalrc	v0
402603ca:	9305      	lw	v1,20(sp)
402603cc:	2bd0      	bnez	v1,4026036e <radio_scene_playing+0x92>
402603ce:	b233      	lw	v0,40260498 <.L32+0x11a>
402603d0:	ea40      	jalr	v0
402603d2:	6783      	move	a0,v1
402603d4:	b02d      	lw	s0,40260488 <.L32+0x10a>
402603d6:	6d01      	li	a1,1
402603d8:	c0a0      	sb	a1,0(s0)
402603da:	17cb      	b	40260372 <radio_scene_playing+0x96>
402603dc:	a160      	lbu	v1,0(s1)
402603de:	2ba5      	bnez	v1,4026032a <radio_scene_playing+0x4e>
402603e0:	b120      	lw	s1,40260460 <.L32+0xe2>
402603e2:	f002 6c00 	li	a0,4096
402603e6:	e940      	jalr	s1
402603e8:	6d15      	li	a1,21
402603ea:	b21f      	lw	v0,40260464 <.L32+0xe6>
402603ec:	a226      	lbu	s1,6(v0)
402603ee:	7101      	cmpi	s1,1
402603f0:	601f      	bteqz	40260430 <.L32+0xb2>
402603f2:	b31f      	lw	v1,4026046c <.L32+0xee>
402603f4:	6790      	move	a0,s0
402603f6:	eb40      	jalr	v1
402603f8:	6d01      	li	a1,1
402603fa:	b21e      	lw	v0,40260470 <.L32+0xf2>
402603fc:	eac0      	jalrc	v0
402603fe:	7201      	cmpi	v0,1
40260400:	6194      	btnez	4026032a <radio_scene_playing+0x4e>
40260402:	6d00      	li	a1,0
40260404:	b11c      	lw	s1,40260474 <.L32+0xf6>
40260406:	6c0a      	li	a0,10
40260408:	67c5      	move	a2,a1
4026040a:	e940      	jalr	s1
4026040c:	6f31      	li	a3,49
4026040e:	178d      	b	4026032a <radio_scene_playing+0x4e>
40260410:	b225      	lw	v0,402604a4 <.L32+0x126>
40260412:	ea40      	jalr	v0
40260414:	6c01      	li	a0,1
40260416:	6750      	move	v0,s0
40260418:	6475      	restore	40,ra,s0-s1
4026041a:	e8a0      	jrc	ra
4026041c:	b20a      	lw	v0,40260440 <.L32+0xc2>
4026041e:	ea40      	jalr	v0
40260420:	6790      	move	a0,s0
40260422:	1769      	b	402602f6 <radio_scene_playing+0x1a>
40260424:	b206      	lw	v0,4026043c <.L32+0xbe>
40260426:	ea40      	jalr	v0
40260428:	6cdd      	li	a0,221
4026042a:	c140      	sb	v0,0(s1)
4026042c:	ea11      	zeb	v0
4026042e:	175e      	b	402602ec <radio_scene_playing+0x10>
40260430:	6790      	move	a0,s0
40260432:	b00e      	lw	s0,40260468 <.L32+0xea>
40260434:	e8c0      	jalrc	s0
40260436:	17e1      	b	402603fa <.L32+0x7c>
40260438:	9f2a      	lw	s1,40(a3)
4026043a:	9fc1      	lw	a2,4(a3)
4026043c:	5ac5      	sltiu	v0,197
4026043e:	4846      	addiu	s0,70
40260440:	9a24      	lw	s1,16(v0)
40260442:	9fc1      	lw	a2,4(a3)
40260444:	5bc5      	sltiu	v1,197
40260446:	485a      	addiu	s0,90
40260448:	9a9c      	lw	a0,112(v0)
4026044a:	9fc1      	lw	a2,4(a3)
4026044c:	9d4c      	lw	v0,48(a1)
4026044e:	9fc1      	lw	a2,4(a3)
40260450:	02fd      	addiu	v0,sp,1012
40260452:	400e      	addiu	s0,s0,-2
40260454:	9f21      	lw	s1,4(a3)
40260456:	9fc1      	lw	a2,4(a3)
40260458:	9f23      	lw	s1,12(a3)
4026045a:	9fc1      	lw	a2,4(a3)
4026045c:	a19c      	lbu	a0,28(s1)
4026045e:	9fc1      	lw	a2,4(a3)
40260460:	5c8d      	sltiu	a0,141
40260462:	483a      	addiu	s0,58
40260464:	9d58      	lw	v0,96(a1)
40260466:	9fc1      	lw	a2,4(a3)
40260468:	5801      	sltiu	s0,1
4026046a:	48c6      	addiu	s0,-58
4026046c:	5969      	sltiu	s1,105
4026046e:	48b6      	addiu	s0,-74
40260470:	5bd9      	sltiu	v1,217
40260472:	483a      	addiu	s0,58
40260474:	e901      	sdbbp	8
40260476:	bfc1      	lwu	a2,4(a3)
40260478:	eb7d      	dmultu	v1,v1
4026047a:	bfc1      	lwu	a2,4(a3)
4026047c:	9f22      	lw	s1,8(a3)
4026047e:	9fc1      	lw	a2,4(a3)
40260480:	023d      	addiu	v0,sp,244
40260482:	400e      	addiu	s0,s0,-2
40260484:	06f5      	addiu	a2,sp,980
40260486:	4006      	addiu	s0,s0,6
40260488:	9f24      	lw	s1,16(a3)
4026048a:	9fc1      	lw	a2,4(a3)
4026048c:	0359      	addiu	v1,sp,356
4026048e:	4002      	addiu	s0,s0,2
40260490:	edd1      	sew	a1
40260492:	bfc1      	lwu	a2,4(a3)
40260494:	02e9      	addiu	v0,sp,932
40260496:	4002      	addiu	s0,s0,2
40260498:	0301      	addiu	v1,sp,4
4026049a:	4002      	addiu	s0,s0,2
4026049c:	9f25      	lw	s1,20(a3)
4026049e:	9fc1      	lw	a2,4(a3)
402604a0:	0201      	addiu	v0,sp,4
402604a2:	400a      	addiu	s0,s0,-6
402604a4:	5bb9      	sltiu	v1,185
402604a6:	48be      	addiu	s0,-66

402604a8 <radio_auto_search_init>:
402604a8:	64e3      	save	24,ra,s0
#include "app_radio.h"

//全自动搜台场景参数初始化
bool radio_auto_search_init(FM_SeekDir_e dir)
{
402604aa:	b312      	lw	v1,402604f0 <radio_auto_search_init+0x48>
    uint8* freq_tab;

    if (g_radio_config.band_mode == Band_China_US)
402604ac:	f200 a344 	lbu	v0,516(v1)
402604b0:	4384      	addiu	a0,v1,4
    {
        //普通波段
        //libc_memset(g_radio_config.fmstation_us, 0, MAX_STATION_COUNT * 4);
        freq_tab = (uint8*) g_radio_config.fmstation_us;
402604b2:	2204      	beqz	v0,402604bc <radio_auto_search_init+0x14>
402604b4:	7201      	cmpi	v0,1
        g_radio_config.FMStatus.freq = MIN_US;
    }
    else if (g_radio_config.band_mode == Band_Japan)
402604b6:	f140 4384 	addiu	a0,v1,324
    {
        //日本波段
        //libc_memset(g_radio_config.fmstation_jp, 0, MAX_STATION_COUNT * 4);
        freq_tab = (uint8*) g_radio_config.fmstation_jp;
        g_radio_config.FMStatus.freq = MIN_JP;
    }
    else
    {
        //欧洲波段
        //libc_memset(g_radio_config.fmstation_eu, 0, MAX_STATION_COUNT * 4);
        freq_tab = (uint8*) g_radio_config.fmstation_eu;
402604ba:	6015      	bteqz	402604e6 <radio_auto_search_init+0x3e>
402604bc:	b20e      	lw	v0,402604f4 <radio_auto_search_init+0x4c>
        g_radio_config.FMStatus.freq = MIN_EU;
402604be:	f1e0 db5c 	sw	v0,508(v1)
402604c2:	b00f      	lw	s0,402604fc <radio_auto_search_init+0x54>
    }
    //清除电台个数、当前电台号
    g_radio_config.FMStatus.station = 0;
    g_radio_config.FMStatus.station_count = 0;

    libc_memset(freq_tab, 0, MAX_STATION_COUNT * 4);
402604c4:	6a00      	li	v0,0
402604c6:	f200 c340 	sb	v0,512(v1)
402604ca:	f200 c341 	sb	v0,513(v1)
402604ce:	6d00      	li	a1,0
402604d0:	6ea0      	li	a2,160
402604d2:	e840      	jalr	s0
402604d4:	6f01      	li	a3,1
402604d6:	b40b      	lw	a0,40260500 <radio_auto_search_init+0x58>
    //清空缓存电台列表
    libc_memset(&Auto_tab[0], 0, MAX_STATION_COUNT * 4);
402604d8:	6d00      	li	a1,0
402604da:	6ea0      	li	a2,160
402604dc:	e840      	jalr	s0
402604de:	6f01      	li	a3,1
402604e0:	6a01      	li	v0,1

    return TRUE;
}
402604e2:	6463      	restore	24,ra,s0
402604e4:	e8a0      	jrc	ra
402604e6:	b205      	lw	v0,402604f8 <radio_auto_search_init+0x50>
402604e8:	f0a0 4384 	addiu	a0,v1,164
402604ec:	17e8      	b	402604be <radio_auto_search_init+0x16>
402604ee:	0000      	addiu	s0,sp,0
402604f0:	9a9c      	lw	a0,112(v0)
402604f2:	9fc1      	lw	a2,4(a3)
402604f4:	55cc      	slti	a1,204
402604f6:	0001      	addiu	s0,sp,4
402604f8:	28e0      	bnez	s0,402604ba <radio_auto_search_init+0x12>
402604fa:	0001      	addiu	s0,sp,4
402604fc:	e905      	break	8
402604fe:	bfc1      	lwu	a2,4(a3)
40260500:	9cac      	lw	a1,48(a0)
40260502:	9fc1      	lw	a2,4(a3)

40260504 <radio_auto_search_exit>:
40260504:	64f5      	save	40,ra,s0-s1

//全自动搜台场景退出
bool radio_auto_search_exit(void)
{
40260506:	b321      	lw	v1,40260588 <radio_auto_search_exit+0x84>
    uint32 play_freq;

    uint8* ret_freq;

    uint8* ret_status;

    if (g_radio_config.FMStatus.station_count != 0)
40260508:	f200 a341 	lbu	v0,513(v1)
4026050c:	2229      	beqz	v0,40260560 <radio_auto_search_exit+0x5c>
4026050e:	b520      	lw	a1,4026058c <radio_auto_search_exit+0x88>
    {
        //有搜索到的电台，选择第一个播放
        g_radio_config.FMStatus.station = 1;
        g_radio_config.FMStatus.freq = Auto_tab[0];
40260510:	6c01      	li	a0,1
40260512:	9d40      	lw	v0,0(a1)
40260514:	f200 c380 	sb	a0,512(v1)
40260518:	f1e0 db5c 	sw	v0,508(v1)
4026051c:	f200 a344 	lbu	v0,516(v1)
    }
    else
    {
        //一个电台也未搜索到，选择默认频点播放
        g_radio_config.FMStatus.station = 0;
        if (g_radio_config.band_mode == Band_Japan)
        {
            play_freq = MIN_JP;
        }
        else
        {
            play_freq = MIN_US;
        }
        g_radio_config.FMStatus.freq = play_freq;
    }

    if (g_radio_config.band_mode == Band_China_US)
40260520:	6783      	move	a0,v1
40260522:	2a17      	bnez	v0,40260552 <radio_auto_search_exit+0x4e>
40260524:	4344      	addiu	v0,v1,4
    {
        //普通频段
        //libc_memcpy(&g_radio_config.fmstation_us[0], &Auto_tab[0], MAX_STATION_COUNT * 4);
        //libc_memcpy(&g_radio_config.FMStatus_us, &g_radio_config.FMStatus, sizeof(fm_play_status_t));
        ret_freq = (uint8*) &g_radio_config.fmstation_us[0];
40260526:	f1e0 4c04 	addiu	a0,484
        ret_status = (uint8*) &g_radio_config.FMStatus_us;
4026052a:	d404      	sw	a0,16(sp)

    }
    else if (g_radio_config.band_mode == Band_Japan)
    {
        //日本频段
        //libc_memcpy(&g_radio_config.fmstation_jp[0], &Auto_tab[0], MAX_STATION_COUNT * 4);
        //libc_memcpy(&g_radio_config.FMStatus_jp, &g_radio_config.FMStatus, sizeof(fm_play_status_t));
        ret_freq = (uint8*) &g_radio_config.fmstation_jp[0];
        ret_status = (uint8*) &g_radio_config.FMStatus_jp;
4026052c:	b11b      	lw	s1,40260598 <radio_auto_search_exit+0x94>
    }
    else
    {
        //欧洲频段
        //libc_memcpy(&g_radio_config.fmstation_eu[0], &Auto_tab[0], MAX_STATION_COUNT * 4);
        //libc_memcpy(&g_radio_config.FMStatus_eu, &g_radio_config.FMStatus, sizeof(fm_play_status_t));
        ret_freq = (uint8*) &g_radio_config.fmstation_eu[0];
        ret_status = (uint8*) &g_radio_config.FMStatus_eu;
    }
    libc_memcpy(ret_freq, &Auto_tab[0], MAX_STATION_COUNT * 4);
4026052e:	6782      	move	a0,v0
40260530:	6ea0      	li	a2,160
40260532:	e940      	jalr	s1
40260534:	6f00      	li	a3,0
40260536:	b015      	lw	s0,40260588 <radio_auto_search_exit+0x84>
    libc_memcpy(ret_status, &g_radio_config.FMStatus, sizeof(fm_play_status_t));
40260538:	9404      	lw	a0,16(sp)
4026053a:	f1e0 481c 	addiu	s0,508
4026053e:	67b0      	move	a1,s0
40260540:	6e08      	li	a2,8
40260542:	e940      	jalr	s1
40260544:	6f00      	li	a3,0
40260546:	b216      	lw	v0,4026059c <radio_auto_search_exit+0x98>
    //设置频点播放
    radio_set_freq(g_radio_config.FMStatus.freq);
40260548:	ea40      	jalr	v0
4026054a:	9880      	lw	a0,0(s0)
4026054c:	6a01      	li	v0,1

    return TRUE;
}
4026054e:	6475      	restore	40,ra,s0-s1
40260550:	e8a0      	jrc	ra
40260552:	7201      	cmpi	v0,1
40260554:	6112      	btnez	4026057a <radio_auto_search_exit+0x76>
40260556:	f0a0 4344 	addiu	v0,v1,164
4026055a:	f1e0 4c0c 	addiu	a0,492
4026055e:	17e5      	b	4026052a <radio_auto_search_exit+0x26>
40260560:	f200 a3a4 	lbu	a1,516(v1)
40260564:	f200 c340 	sb	v0,512(v1)
40260568:	7501      	cmpi	a1,1
4026056a:	6005      	bteqz	40260576 <radio_auto_search_exit+0x72>
4026056c:	b20a      	lw	v0,40260594 <radio_auto_search_exit+0x90>
4026056e:	b508      	lw	a1,4026058c <radio_auto_search_exit+0x88>
40260570:	f1e0 db5c 	sw	v0,508(v1)
40260574:	17d3      	b	4026051c <radio_auto_search_exit+0x18>
40260576:	b207      	lw	v0,40260590 <radio_auto_search_exit+0x8c>
40260578:	17fa      	b	4026056e <radio_auto_search_exit+0x6a>
4026057a:	f140 4344 	addiu	v0,v1,324
4026057e:	f1e0 4b14 	addiu	v1,500
40260582:	d304      	sw	v1,16(sp)
40260584:	17d3      	b	4026052c <radio_auto_search_exit+0x28>
40260586:	0000      	addiu	s0,sp,0
40260588:	9a9c      	lw	a0,112(v0)
4026058a:	9fc1      	lw	a2,4(a3)
4026058c:	9cac      	lw	a1,48(a0)
4026058e:	9fc1      	lw	a2,4(a3)
40260590:	28e0      	bnez	s0,40260552 <radio_auto_search_exit+0x4e>
40260592:	0001      	addiu	s0,sp,4
40260594:	55cc      	slti	a1,204
40260596:	0001      	addiu	s0,sp,4
40260598:	e905      	break	8
4026059a:	bfc1      	lwu	a2,4(a3)
4026059c:	0359      	addiu	v1,sp,356
4026059e:	4002      	addiu	s0,s0,2

402605a0 <radio_scene_auto_search>:
402605a0:	64f5      	save	40,ra,s0-s1

//全自动搜台场景
//dir: 搜台方向( 向上或向下)
app_result_e radio_scene_auto_search(FM_SeekDir_e dir)
{
402605a2:	b037      	lw	s0,4026067c <radio_scene_auto_search+0xdc>
    app_result_e result;
    bool bret;
    FM_SeekMode_e mode;

    mode = g_radio_config.seek_mode;
    g_searching_flag = TRUE;
402605a4:	ec11      	zeb	a0
402605a6:	b335      	lw	v1,40260678 <radio_scene_auto_search+0xd8>
402605a8:	6a01      	li	v0,1
402605aa:	c040      	sb	v0,0(s0)
402605ac:	d404      	sw	a0,16(sp)
    /* 初始化*/
    bret = radio_auto_search_init(dir);
402605ae:	f200 a326 	lbu	s1,518(v1)
402605b2:	1920 812a 	jal	402604a8 <radio_auto_search_init>
402605b6:	6500      	nop
402605b8:	223c      	beqz	v0,40260632 <radio_scene_auto_search+0x92>
    if (!bret)
402605ba:	b232      	lw	v0,40260680 <radio_scene_auto_search+0xe0>
    {
        g_searching_flag = FALSE;
        //初始化失败返回
        return RESULT_ERROR;
    }


    //开始全自动搜台前，先mute
    radio_set_mute(SetMUTE);
402605bc:	ea40      	jalr	v0
402605be:	6c01      	li	a0,1
402605c0:	b031      	lw	s0,40260684 <radio_scene_auto_search+0xe4>

    //创建搜台主视图
    g_search_current_freq = get_start_freq(dir);
402605c2:	e840      	jalr	s0
402605c4:	9404      	lw	a0,16(sp)
402605c6:	b431      	lw	a0,40260688 <radio_scene_auto_search+0xe8>
402605c8:	dc40      	sw	v0,0(a0)
402605ca:	212e      	beqz	s1,40260628 <radio_scene_auto_search+0x88>
    if (mode == HARDSEEK)
402605cc:	b231      	lw	v0,40260690 <radio_scene_auto_search+0xf0>
    {
        radio_hard_search_create_main_view();
    }
    else
    {
        radio_soft_search_create_main_view();
402605ce:	eac0      	jalrc	v0
402605d0:	b031      	lw	s0,40260690 <radio_scene_auto_search+0xf0>
    }

    //语音播报
    com_tts_state_play(TTS_MODE_ONLYONE, (void *) TTS_SEARCHING);
402605d2:	6d16      	li	a1,22
402605d4:	e840      	jalr	s0
402605d6:	6c00      	li	a0,0
402605d8:	b231      	lw	v0,4026069c <radio_scene_auto_search+0xfc>

    //获取门限值
    g_search_throd = (uint8) com_get_config_default(FMENGINE_AP_ID_SEEKTH);
402605da:	b030      	lw	s0,40260698 <radio_scene_auto_search+0xf8>
402605dc:	ea40      	jalr	v0
402605de:	6cdc      	li	a0,220
402605e0:	c040      	sb	v0,0(s0)
402605e2:	6782      	move	a0,v0
402605e4:	b22f      	lw	v0,402606a0 <radio_scene_auto_search+0x100>
    //设置搜台门限
    radio_set_throd(g_search_throd);
402605e6:	ea40      	jalr	v0
402605e8:	ec11      	zeb	a0
402605ea:	a0e0      	lbu	a3,0(s0)
    PRINT_INFO_INT("start FM seek.throd&mode=", (g_search_throd << 16) + mode);
402605ec:	b02e      	lw	s0,402606a4 <radio_scene_auto_search+0x104>
402605ee:	36e0      	sll	a2,a3,8
402605f0:	35c0      	sll	a1,a2,8
402605f2:	0c13      	la	a0,4026063c <radio_scene_auto_search+0x9c>
402605f4:	e535      	addu	a1,s1
402605f6:	6e02      	li	a2,2
402605f8:	e840      	jalr	s0
402605fa:	6f4b      	li	a3,75
402605fc:	2917      	bnez	s1,4026062c <radio_scene_auto_search+0x8c>
    if (mode == HARDSEEK)
402605fe:	9404      	lw	a0,16(sp)
    {
        
        //处理硬件全自动搜台
        result = deal_hard_auto_seek(dir);
40260600:	b22a      	lw	v0,402606a8 <radio_scene_auto_search+0x108>
40260602:	eac0      	jalrc	v0
    }
    else
    {
        //处理软件全自动搜台
        result = deal_soft_auto_seek(dir);
40260604:	b61d      	lw	a2,40260674 <radio_scene_auto_search+0xd4>
    }
    PRINT_INFO_INT("FM seek end.total-ch=",g_radio_config.FMStatus.station_count);
40260606:	6702      	move	s0,v0
40260608:	f200 a6a1 	lbu	a1,513(a2)
4026060c:	b226      	lw	v0,402606a4 <radio_scene_auto_search+0x104>
4026060e:	0c14      	la	a0,4026065c <radio_scene_auto_search+0xbc>
40260610:	6e02      	li	a2,2
40260612:	ea40      	jalr	v0
40260614:	6f4b      	li	a3,75
40260616:	1920 8141 	jal	40260504 <radio_auto_search_exit>
    radio_auto_search_exit();
4026061a:	6500      	nop
4026061c:	b418      	lw	a0,4026067c <radio_scene_auto_search+0xdc>
    g_searching_flag = FALSE;
4026061e:	6b00      	li	v1,0
40260620:	6750      	move	v0,s0
    //等到播报频率的时候才解除静音
    //radio_set_mute(releaseMUTE);

    return result;
40260622:	c460      	sb	v1,0(a0)
40260624:	6475      	restore	40,ra,s0-s1
}
40260626:	e8a0      	jrc	ra
40260628:	b219      	lw	v0,40260688 <radio_scene_auto_search+0xe8>
4026062a:	17d1      	b	402605ce <radio_scene_auto_search+0x2e>
4026062c:	9404      	lw	a0,16(sp)
4026062e:	b220      	lw	v0,402606ac <radio_scene_auto_search+0x10c>
40260630:	17e8      	b	40260602 <radio_scene_auto_search+0x62>
40260632:	c040      	sb	v0,0(s0)
40260634:	6a80      	li	v0,128
40260636:	6475      	restore	40,ra,s0-s1
40260638:	e8a0      	jrc	ra
4026063a:	0000      	addiu	s0,sp,0
4026063c:	493c      	addiu	s1,60
4026063e:	203e      	beqz	s0,402606bc <scene_manual_search_init+0xc>
40260640:	7473      	cmpi	a0,115
40260642:	7261      	cmpi	v0,97
40260644:	2074      	beqz	s0,4026072e <scene_manual_search_exit+0x46>
40260646:	4d46      	addiu	a1,70
40260648:	7320      	cmpi	v1,32
4026064a:	6565      	move	v1,a1
4026064c:	2e6b      	bnez	a2,40260724 <scene_manual_search_exit+0x3c>
4026064e:	6874      	li	s0,116
40260650:	6f72      	li	a3,114
40260652:	2664      	beqz	a2,4026071c <scene_manual_search_exit+0x34>
40260654:	6f6d      	li	a3,109
40260656:	6564      	move	v1,a0
40260658:	003d      	addiu	s0,sp,244
4026065a:	0000      	addiu	s0,sp,0
4026065c:	493c      	addiu	s1,60
4026065e:	203e      	beqz	s0,402606dc <scene_manual_search_init+0x2c>
40260660:	4d46      	addiu	a1,70
40260662:	7320      	cmpi	v1,32
40260664:	6565      	move	v1,a1
40260666:	206b      	beqz	s0,4026073e <scene_manual_search_exit+0x56>
40260668:	6e65      	li	a2,101
4026066a:	2e64      	bnez	a2,40260734 <scene_manual_search_exit+0x4c>
4026066c:	6f74      	li	a3,116
4026066e:	6174      	btnez	40260758 <scene_manual_search_exit+0x70>
40260670:	2d6c      	bnez	a1,4026074a <scene_manual_search_exit+0x62>
40260672:	6863      	li	s0,99
40260674:	003d      	addiu	s0,sp,244
40260676:	0000      	addiu	s0,sp,0
40260678:	9a9c      	lw	a0,112(v0)
4026067a:	9fc1      	lw	a2,4(a3)
4026067c:	9f25      	lw	s1,20(a3)
4026067e:	9fc1      	lw	a2,4(a3)
40260680:	0301      	addiu	v1,sp,4
40260682:	4002      	addiu	s0,s0,2
40260684:	0201      	addiu	v0,sp,4
40260686:	4006      	addiu	s0,s0,6
40260688:	9f1c      	lw	s0,112(a3)
4026068a:	9fc1      	lw	a2,4(a3)
4026068c:	0335      	addiu	v1,sp,212
4026068e:	400e      	addiu	s0,s0,-2
40260690:	0369      	addiu	v1,sp,420
40260692:	400e      	addiu	s0,s0,-2
40260694:	5c8d      	sltiu	a0,141
40260696:	483a      	addiu	s0,58
40260698:	9f0d      	lw	s0,52(a3)
4026069a:	9fc1      	lw	a2,4(a3)
4026069c:	5ac5      	sltiu	v0,197
4026069e:	4846      	addiu	s0,70
402606a0:	0451      	addiu	a0,sp,324
402606a2:	4002      	addiu	s0,s0,2
402606a4:	e901      	sdbbp	8
402606a6:	bfc1      	lwu	a2,4(a3)
402606a8:	0439      	addiu	a0,sp,228
402606aa:	401e      	daddiu	s0,s0,-2
402606ac:	0415      	addiu	a0,sp,84
402606ae:	401a      	daddiu	s0,s0,-6

402606b0 <scene_manual_search_init>:
402606b0:	64e3      	save	24,ra,s0
#include "app_radio.h"

//半自动搜台场景初始化
bool scene_manual_search_init(void)
{
402606b2:	b209      	lw	v0,402606d4 <scene_manual_search_init+0x24>
    bool ret = TRUE;

    //取得当前播放频率
    radio_get_freq();
402606b4:	ea40      	jalr	v0
402606b6:	6801      	li	s0,1
402606b8:	b609      	lw	a2,402606dc <scene_manual_search_init+0x2c>

    //保存搜索起始频率
    startfreq = g_engine_status.FM_CurrentFreq;
402606ba:	b508      	lw	a1,402606d8 <scene_manual_search_init+0x28>
402606bc:	9e60      	lw	v1,0(a2)
402606be:	b409      	lw	a0,402606e0 <scene_manual_search_init+0x30>

    g_radio_config.FMStatus.freq = startfreq;
402606c0:	b209      	lw	v0,402606e4 <scene_manual_search_init+0x34>

    //开始半自动搜台前，先mute
    radio_set_mute(SetMUTE);
402606c2:	f1e0 dc7c 	sw	v1,508(a0)
402606c6:	dd60      	sw	v1,0(a1)
402606c8:	ea40      	jalr	v0
402606ca:	6790      	move	a0,s0
402606cc:	6750      	move	v0,s0
    return ret;
}
402606ce:	6463      	restore	24,ra,s0
402606d0:	e8a0      	jrc	ra
402606d2:	0000      	addiu	s0,sp,0
402606d4:	edd1      	sew	a1
402606d6:	bfc1      	lwu	a2,4(a3)
402606d8:	9f04      	lw	s0,16(a3)
402606da:	9fc1      	lw	a2,4(a3)
402606dc:	9d4c      	lw	v0,48(a1)
402606de:	9fc1      	lw	a2,4(a3)
402606e0:	9a9c      	lw	a0,112(v0)
402606e2:	9fc1      	lw	a2,4(a3)
402606e4:	0301      	addiu	v1,sp,4
402606e6:	4002      	addiu	s0,s0,2

402606e8 <scene_manual_search_exit>:
402606e8:	64f4      	save	32,ra,s0-s1

//半自动搜台场景退出
bool scene_manual_search_exit(void)
{
402606ea:	b224      	lw	v0,40260778 <scene_manual_search_exit+0x90>
    uint8 num;
    bool result;

    //获取当前频率值
    result = radio_get_freq();
402606ec:	eac0      	jalrc	v0
402606ee:	7201      	cmpi	v0,1
    if (result == TRUE)
402606f0:	6129      	btnez	40260744 <scene_manual_search_exit+0x5c>
402606f2:	b023      	lw	s0,4026077c <scene_manual_search_exit+0x94>
    {
        //正常获取，播放当前频点
        g_radio_config.FMStatus.freq = g_engine_status.FM_CurrentFreq;
402606f4:	b523      	lw	a1,40260780 <scene_manual_search_exit+0x98>
402606f6:	b224      	lw	v0,40260784 <scene_manual_search_exit+0x9c>

        if (g_radio_config.FMStatus.freq > max_freq[g_radio_config.band_mode])
402606f8:	9d80      	lw	a0,0(a1)
402606fa:	f200 a0a4 	lbu	a1,516(s0)
402606fe:	67d0      	move	a2,s0
40260700:	31a8      	sll	s1,a1,2
40260702:	e15d      	addu	a3,s1,v0
40260704:	9f60      	lw	v1,0(a3)
40260706:	eb83      	sltu	v1,a0
40260708:	6134      	btnez	40260772 <scene_manual_search_exit+0x8a>
4026070a:	b221      	lw	v0,4026078c <scene_manual_search_exit+0xa4>
        {
            //大于最大频点
            g_radio_config.FMStatus.freq = startfreq;
        }

        if (g_radio_config.FMStatus.freq < min_freq[g_radio_config.band_mode])
4026070c:	31a8      	sll	s1,a1,2
4026070e:	e15d      	addu	a3,s1,v0
40260710:	9f40      	lw	v0,0(a3)
40260712:	f1e0 d89c 	sw	a0,508(s0)
40260716:	ec43      	sltu	a0,v0
40260718:	601a      	bteqz	4026074e <scene_manual_search_exit+0x66>
4026071a:	b31e      	lw	v1,40260790 <scene_manual_search_exit+0xa8>
        {
            //小于最小频点(87-87.5之间的值)
            g_radio_config.FMStatus.freq = min_freq[g_radio_config.band_mode];
        }
    }
    else
    {
        //获取失败，播放半自动搜台前频点
        g_radio_config.FMStatus.freq = startfreq;
    }

    //判断当前频点是否是已保存频点
    num = whether_in_list(g_radio_config.FMStatus.freq, pfreq);
4026071c:	f1e0 de5c 	sw	v0,508(a2)
40260720:	f1e0 989c 	lw	a0,508(s0)
40260724:	9ba0      	lw	a1,0(v1)
40260726:	b21c      	lw	v0,40260794 <scene_manual_search_exit+0xac>
40260728:	ea40      	jalr	v0
4026072a:	6730      	move	s1,s0
4026072c:	72ff      	cmpi	v0,255

    //切换后的频点是未保存频点
    if (num == 0xff)
4026072e:	6016      	bteqz	4026075c <scene_manual_search_exit+0x74>
40260730:	b513      	lw	a1,4026077c <scene_manual_search_exit+0x94>
    {
        g_radio_config.FMStatus.station = 0;
    }
    else
    {
        //切换后的频点是已保存频点
        g_radio_config.FMStatus.station = num;
    }

    //设置频点播放
    radio_set_freq(g_radio_config.FMStatus.freq);
40260732:	f200 c040 	sb	v0,512(s0)
40260736:	f1e0 9d9c 	lw	a0,508(a1)
4026073a:	b218      	lw	v0,40260798 <scene_manual_search_exit+0xb0>
4026073c:	eac0      	jalrc	v0
4026073e:	6a01      	li	v0,1

    //等到播报频率的时候才解除静音
    //radio_set_mute(releaseMUTE);

    return TRUE;
}
40260740:	6474      	restore	32,ra,s0-s1
40260742:	e8a0      	jrc	ra
40260744:	b611      	lw	a2,40260784 <scene_manual_search_exit+0x9c>
40260746:	b00e      	lw	s0,4026077c <scene_manual_search_exit+0x94>
40260748:	9e80      	lw	a0,0(a2)
4026074a:	f1e0 d89c 	sw	a0,508(s0)
4026074e:	b311      	lw	v1,40260790 <scene_manual_search_exit+0xa8>
40260750:	b211      	lw	v0,40260794 <scene_manual_search_exit+0xac>
40260752:	9ba0      	lw	a1,0(v1)
40260754:	ea40      	jalr	v0
40260756:	6730      	move	s1,s0
40260758:	72ff      	cmpi	v0,255
4026075a:	61ea      	btnez	40260730 <scene_manual_search_exit+0x48>
4026075c:	b508      	lw	a1,4026077c <scene_manual_search_exit+0x94>
4026075e:	6c00      	li	a0,0
40260760:	f200 c080 	sb	a0,512(s0)
40260764:	b20d      	lw	v0,40260798 <scene_manual_search_exit+0xb0>
40260766:	f1e0 9d9c 	lw	a0,508(a1)
4026076a:	eac0      	jalrc	v0
4026076c:	6a01      	li	v0,1
4026076e:	6474      	restore	32,ra,s0-s1
40260770:	e8a0      	jrc	ra
40260772:	b306      	lw	v1,40260788 <scene_manual_search_exit+0xa0>
40260774:	9b80      	lw	a0,0(v1)
40260776:	17c9      	b	4026070a <scene_manual_search_exit+0x22>
40260778:	edd1      	sew	a1
4026077a:	bfc1      	lwu	a2,4(a3)
4026077c:	9a9c      	lw	a0,112(v0)
4026077e:	9fc1      	lw	a2,4(a3)
40260780:	9d4c      	lw	v0,48(a1)
40260782:	9fc1      	lw	a2,4(a3)
40260784:	ee2c      	and	a2,s1
40260786:	bfc1      	lwu	a2,4(a3)
40260788:	9f04      	lw	s0,16(a3)
4026078a:	9fc1      	lw	a2,4(a3)
4026078c:	ee20      	0xee20
4026078e:	bfc1      	lwu	a2,4(a3)
40260790:	9ca8      	lw	a1,32(a0)
40260792:	9fc1      	lw	a2,4(a3)
40260794:	ecbd      	dmultu	a0,a1
40260796:	bfc1      	lwu	a2,4(a3)
40260798:	0359      	addiu	v1,sp,356
4026079a:	4002      	addiu	s0,s0,2

4026079c <radio_scene_manual_search>:
4026079c:	64f4      	save	32,ra,s0-s1

//半自动搜台场景
//dir: 半自动搜台方向
app_result_e radio_scene_manual_search(FM_SeekDir_e dir)
{
4026079e:	b01e      	lw	s0,40260814 <radio_scene_manual_search+0x78>
    bool result;
    //返回值
    app_result_e ret = RESULT_NULL;
    //for RCP, 进入搜索状态
    g_searching_flag = TRUE;
402607a0:	6a01      	li	v0,1
402607a2:	6724      	move	s1,a0
402607a4:	c040      	sb	v0,0(s0)
402607a6:	1920 81ac 	jal	402606b0 <scene_manual_search_init>
    result = scene_manual_search_init();
402607aa:	e911      	zeb	s1
402607ac:	2a05      	bnez	v0,402607b8 <radio_scene_manual_search+0x1c>
    if (result == RESULT_NULL)
402607ae:	651a      	move	t8,v0
    {
        g_searching_flag = FALSE;
        //返回正常播放场景
        return ret;
402607b0:	c040      	sb	v0,0(s0)
402607b2:	6758      	move	v0,t8
    }

    //创建搜台主视图
    g_search_current_freq = g_radio_config.FMStatus.freq;
    if (g_radio_config.seek_mode == HARDSEEK)
    {
        radio_hard_search_create_main_view();
    }
    else
    {
        radio_soft_search_create_main_view();
    }

    com_tts_state_play(TTS_MODE_ONLYONE, (void *) TTS_SEARCHING);
    //获取门限值
    g_search_throd = (uint8) com_get_config_default(FMENGINE_AP_ID_SEEKTH);
    //设置搜台门限
    radio_set_throd(g_search_throd);

    if (g_radio_config.seek_mode == HARDSEEK)
    {
        //处理硬件半自动搜台
        ret = deal_hard_manual_search(dir);
    }
    else
    {
        //处理软件半自动搜台
        ret = deal_soft_manual_search(dir);
    }

    //for RCP, 退出搜索状态
    g_searching_flag = FALSE;

    scene_manual_search_exit();

    return ret;
}
402607b4:	6474      	restore	32,ra,s0-s1
402607b6:	e8a0      	jrc	ra
402607b8:	b419      	lw	a0,40260818 <radio_scene_manual_search+0x7c>
402607ba:	b518      	lw	a1,40260818 <radio_scene_manual_search+0x7c>
402607bc:	f1e0 9cdc 	lw	a2,508(a0)
402607c0:	f200 a466 	lbu	v1,518(a0)
402607c4:	ddc0      	sw	a2,0(a1)
402607c6:	2320      	beqz	v1,40260808 <radio_scene_manual_search+0x6c>
402607c8:	b217      	lw	v0,40260824 <radio_scene_manual_search+0x88>
402607ca:	eac0      	jalrc	v0
402607cc:	b217      	lw	v0,40260824 <radio_scene_manual_search+0x88>
402607ce:	6d16      	li	a1,22
402607d0:	ea40      	jalr	v0
402607d2:	6c00      	li	a0,0
402607d4:	b017      	lw	s0,40260830 <radio_scene_manual_search+0x94>
402607d6:	e840      	jalr	s0
402607d8:	6cdc      	li	a0,220
402607da:	b315      	lw	v1,4026082c <radio_scene_manual_search+0x90>
402607dc:	6782      	move	a0,v0
402607de:	c340      	sb	v0,0(v1)
402607e0:	b215      	lw	v0,40260834 <radio_scene_manual_search+0x98>
402607e2:	ea40      	jalr	v0
402607e4:	ec11      	zeb	a0
402607e6:	b00e      	lw	s0,4026081c <radio_scene_manual_search+0x80>
402607e8:	f200 a0e6 	lbu	a3,518(s0)
402607ec:	2f0f      	bnez	a3,4026080c <radio_scene_manual_search+0x70>
402607ee:	b213      	lw	v0,40260838 <radio_scene_manual_search+0x9c>
402607f0:	6791      	move	a0,s1
402607f2:	eac0      	jalrc	v0
402607f4:	b408      	lw	a0,40260810 <radio_scene_manual_search+0x74>
402607f6:	6d00      	li	a1,0
402607f8:	6702      	move	s0,v0
402607fa:	1920 81ba 	jal	402606e8 <scene_manual_search_exit>
402607fe:	c4a0      	sb	a1,0(a0)
40260800:	6518      	move	t8,s0
40260802:	6758      	move	v0,t8
40260804:	6474      	restore	32,ra,s0-s1
40260806:	e8a0      	jrc	ra
40260808:	b206      	lw	v0,4026081c <radio_scene_manual_search+0x80>
4026080a:	17df      	b	402607ca <radio_scene_manual_search+0x2e>
4026080c:	b20c      	lw	v0,4026083c <radio_scene_manual_search+0xa0>
4026080e:	6791      	move	a0,s1
40260810:	17f0      	b	402607f2 <radio_scene_manual_search+0x56>
40260812:	0000      	addiu	s0,sp,0
40260814:	9f25      	lw	s1,20(a3)
40260816:	9fc1      	lw	a2,4(a3)
40260818:	9f1c      	lw	s0,112(a3)
4026081a:	9fc1      	lw	a2,4(a3)
4026081c:	9a9c      	lw	a0,112(v0)
4026081e:	9fc1      	lw	a2,4(a3)
40260820:	0335      	addiu	v1,sp,212
40260822:	400e      	addiu	s0,s0,-2
40260824:	0369      	addiu	v1,sp,420
40260826:	400e      	addiu	s0,s0,-2
40260828:	5c8d      	sltiu	a0,141
4026082a:	483a      	addiu	s0,58
4026082c:	9f0d      	lw	s0,52(a3)
4026082e:	9fc1      	lw	a2,4(a3)
40260830:	5ac5      	sltiu	v0,197
40260832:	4846      	addiu	s0,70
40260834:	0451      	addiu	a0,sp,324
40260836:	4002      	addiu	s0,s0,2
40260838:	0279      	addiu	v0,sp,484
4026083a:	401e      	daddiu	s0,s0,-2
4026083c:	0285      	addiu	v0,sp,532
4026083e:	401a      	daddiu	s0,s0,-6
	...
Disassembly of section BANK_CONTROL_1_10:

402a0200 <radio_rcp_var_init>:
402a0200:	64c3      	save	24,ra
402a0202:	b404      	lw	a0,402a0210 <radio_rcp_var_init+0x10>
402a0204:	b504      	lw	a1,402a0214 <radio_rcp_var_init+0x14>
402a0206:	b205      	lw	v0,402a0218 <radio_rcp_var_init+0x18>
402a0208:	eac0      	jalrc	v0
402a020a:	6443      	restore	24,ra
402a020c:	e8a0      	jrc	ra
402a020e:	0000      	addiu	s0,sp,0
402a0210:	ee38      	mult	a2,s1
402a0212:	bfc1      	lwu	a2,4(a3)
402a0214:	ef51      	zew	a3
402a0216:	bfc1      	lwu	a2,4(a3)
402a0218:	58a9      	sltiu	s0,169
402a021a:	48b2      	addiu	s0,-78

402a021c <radio_rcp_var_exit>:
402a021c:	64c3      	save	24,ra
402a021e:	6c00      	li	a0,0
402a0220:	b203      	lw	v0,402a022c <radio_rcp_var_exit+0x10>
402a0222:	ea40      	jalr	v0
402a0224:	67a4      	move	a1,a0
402a0226:	6443      	restore	24,ra
402a0228:	e8a0      	jrc	ra
402a022a:	0000      	addiu	s0,sp,0
402a022c:	58a9      	sltiu	s0,169
402a022e:	48b2      	addiu	s0,-78

402a0230 <radio_get_station_list>:
402a0230:	64f5      	save	40,ra,s0-s1

/*获取有效电台列表*/
app_result_e radio_get_station_list(uint32 data1, uint32 data2)
{ //仅返回当前频段的有效电台列表
402a0232:	b21c      	lw	v0,402a02a0 <radio_get_station_list+0x70>
    uint32* p_station_list = (uint32*) (radio_rcp_buffer + RCP_COMMAND_HEAD_SIZE);
    uint32 tmp_max_freq, tmp_min_freq, tmp_freq;
    uint8 freq_count;

    tmp_max_freq = max_freq[g_radio_config.band_mode];
402a0234:	b71a      	lw	a3,402a029c <radio_get_station_list+0x6c>
402a0236:	f200 a204 	lbu	s0,516(v0)
402a023a:	b51b      	lw	a1,402a02a4 <radio_get_station_list+0x74>
    tmp_min_freq = min_freq[g_radio_config.band_mode];
402a023c:	3408      	sll	a0,s0,2
402a023e:	b21b      	lw	v0,402a02a8 <radio_get_station_list+0x78>
402a0240:	e4f9      	addu	a2,a0,a3
402a0242:	e4ad      	addu	v1,a0,a1
402a0244:	b115      	lw	s1,402a0298 <radio_get_station_list+0x68>
402a0246:	9e00      	lw	s0,0(a2)
402a0248:	9bc0      	lw	a2,0(v1)
402a024a:	9a60      	lw	v1,0(v0)
402a024c:	6539      	move	t9,s1
402a024e:	6c00      	li	a0,0

    for (freq_count = 0; freq_count < MAX_STATION_COUNT; freq_count++)
402a0250:	4910      	addiu	s1,16
402a0252:	1009      	b	402a0266 <radio_get_station_list+0x36>
402a0254:	e8a3      	sltu	s0,a1
    {
        tmp_freq = *(pfreq + freq_count);
        if ((tmp_freq >= tmp_min_freq) && (tmp_freq <= tmp_max_freq))
402a0256:	610c      	btnez	402a0270 <radio_get_station_list+0x40>
402a0258:	e729      	addu	v0,a3,s1
        {
            *(p_station_list + freq_count) = tmp_freq;
402a025a:	daa0      	sw	a1,0(v0)
402a025c:	44a1      	addiu	a1,a0,1
402a025e:	6785      	move	a0,a1
402a0260:	ec11      	zeb	a0
402a0262:	5c28      	sltiu	a0,40
402a0264:	600e      	bteqz	402a0282 <radio_get_station_list+0x52>
402a0266:	3788      	sll	a3,a0,2
402a0268:	e769      	addu	v0,a3,v1
402a026a:	9aa0      	lw	a1,0(v0)
402a026c:	edc3      	sltu	a1,a2
402a026e:	60f2      	bteqz	402a0254 <radio_get_station_list+0x24>
402a0270:	ef31      	zeh	a3
        }
        else
        {
            //遇到非法频点则忽略后面频点
            break;
        }
    }

    com_rcp_send_pkg(freq_count, 0, radio_rcp_buffer, sizeof(uint32) * freq_count, sizeof(uint32) * freq_count);
402a0272:	b30f      	lw	v1,402a02ac <radio_get_station_list+0x7c>
402a0274:	d704      	sw	a3,16(sp)
402a0276:	6d00      	li	a1,0
402a0278:	eb40      	jalr	v1
402a027a:	67d9      	move	a2,t9
402a027c:	6a00      	li	v0,0

    return RESULT_NULL;
}
402a027e:	6475      	restore	40,ra,s0-s1
402a0280:	e8a0      	jrc	ra
402a0282:	3788      	sll	a3,a0,2
402a0284:	ef31      	zeh	a3
402a0286:	b30a      	lw	v1,402a02ac <radio_get_station_list+0x7c>
402a0288:	d704      	sw	a3,16(sp)
402a028a:	6d00      	li	a1,0
402a028c:	eb40      	jalr	v1
402a028e:	67d9      	move	a2,t9
402a0290:	6a00      	li	v0,0
402a0292:	6475      	restore	40,ra,s0-s1
402a0294:	e8a0      	jrc	ra
402a0296:	0000      	addiu	s0,sp,0
402a0298:	04b4      	addiu	a0,sp,720
402a029a:	402a      	addiu	s1,s0,-6
402a029c:	ee2c      	and	a2,s1
402a029e:	bfc1      	lwu	a2,4(a3)
402a02a0:	9a9c      	lw	a0,112(v0)
402a02a2:	9fc1      	lw	a2,4(a3)
402a02a4:	ee20      	0xee20
402a02a6:	bfc1      	lwu	a2,4(a3)
402a02a8:	9ca8      	lw	a1,32(a0)
402a02aa:	9fc1      	lw	a2,4(a3)
402a02ac:	5f29      	sltiu	a3,41
402a02ae:	482a      	addiu	s0,42

402a02b0 <radio_get_station_name>:
402a02b0:	e820      	jr	ra

/*获取当前电台名字*/
app_result_e radio_get_station_name(uint32 data1, uint32 data2)
{
    return RESULT_NULL;
}
402a02b2:	6a00      	li	v0,0

402a02b4 <radio_set_station_band>:
402a02b4:	64e3      	save	24,ra,s0

/*切换电台频段*/
app_result_e radio_set_station_band(uint32 data1, uint32 data2)
{
402a02b6:	b30d      	lw	v1,402a02e8 <radio_set_station_band+0x34>
    radio_band_e old_band;
    radio_band_e new_band;

    if (g_radio_init_flag == TRUE)
402a02b8:	67a4      	move	a1,a0
402a02ba:	a340      	lbu	v0,0(v1)
402a02bc:	7201      	cmpi	v0,1
402a02be:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a02c0:	6102      	btnez	402a02c6 <radio_set_station_band+0x12>
402a02c2:	6463      	restore	24,ra,s0
    }

    old_band = g_radio_config.band_mode;
    new_band = g_radio_config.band_mode = (radio_band_e) data1;

    g_neednot_freq_tts_play = TRUE;
    radio_do_switch_band(old_band, new_band);
    g_neednot_freq_tts_play = FALSE;

    return RESULT_STOP_SEARCH;//切换时停止自动搜台
}
402a02c4:	e8a0      	jrc	ra
402a02c6:	b70a      	lw	a3,402a02ec <radio_set_station_band+0x38>
402a02c8:	b00a      	lw	s0,402a02f0 <radio_set_station_band+0x3c>
402a02ca:	f200 a784 	lbu	a0,516(a3)
402a02ce:	6e01      	li	a2,1
402a02d0:	b209      	lw	v0,402a02f4 <radio_set_station_band+0x40>
402a02d2:	f200 c7a4 	sb	a1,516(a3)
402a02d6:	c0c0      	sb	a2,0(s0)
402a02d8:	ea40      	jalr	v0
402a02da:	ed11      	zeb	a1
402a02dc:	6aff      	li	v0,255
402a02de:	6c00      	li	a0,0
402a02e0:	4a21      	addiu	v0,33
402a02e2:	c080      	sb	a0,0(s0)
402a02e4:	6463      	restore	24,ra,s0
402a02e6:	e8a0      	jrc	ra
402a02e8:	9f23      	lw	s1,12(a3)
402a02ea:	9fc1      	lw	a2,4(a3)
402a02ec:	9a9c      	lw	a0,112(v0)
402a02ee:	9fc1      	lw	a2,4(a3)
402a02f0:	9f22      	lw	s1,8(a3)
402a02f2:	9fc1      	lw	a2,4(a3)
402a02f4:	0201      	addiu	v0,sp,4
402a02f6:	4016      	daddiu	s0,s0,6

402a02f8 <radio_set_station_freq>:
402a02f8:	64e3      	save	24,ra,s0

/*设置电台频点*/
//data1:单位:kHz
app_result_e radio_set_station_freq(uint32 data1, uint32 data2)
{
402a02fa:	6764      	move	v1,a0
402a02fc:	b41c      	lw	a0,402a036c <radio_set_station_freq+0x74>
    uint32 set_freq = data1;
    uint16 digital_num;//单位:50kHz, 或者预设电台的序号

    if (g_radio_init_flag == TRUE)
402a02fe:	a440      	lbu	v0,0(a0)
402a0300:	7201      	cmpi	v0,1
402a0302:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a0304:	6102      	btnez	402a030a <radio_set_station_freq+0x12>
402a0306:	6463      	restore	24,ra,s0
    }

    if(set_freq <= g_radio_config.FMStatus.station_count)
    {
        digital_num = set_freq;//预设电台的序号
    }
    else if (g_radio_config.band_mode == Band_Europe)
    {
        //欧洲波段, 步进为50K
        digital_num = (uint16) ((set_freq + 25) / 50);
    }
    else
    {
        digital_num = (uint16) ((set_freq + 50) / 100 * 100 / 50);
    }

    //g_digital_count为radio_digital_to_chanel必要条件
    if (digital_num > 999)
    {
        g_digital_count = 4;
    }
    else
    {
        g_digital_count = 3;
    }

    g_neednot_freq_tts_play = TRUE;
    radio_digital_to_chanel(digital_num);
    g_neednot_freq_tts_play = FALSE;

    return RESULT_STOP_SEARCH;//切换时停止自动搜台
}
402a0308:	e8a0      	jrc	ra
402a030a:	b51a      	lw	a1,402a0370 <radio_set_station_freq+0x78>
402a030c:	6783      	move	a0,v1
402a030e:	f200 a5c1 	lbu	a2,513(a1)
402a0312:	ec31      	zeh	a0
402a0314:	ee63      	sltu	a2,v1
402a0316:	600b      	bteqz	402a032e <radio_set_station_freq+0x36>
402a0318:	f200 a5e4 	lbu	a3,516(a1)
402a031c:	7702      	cmpi	a3,2
402a031e:	6119      	btnez	402a0352 <radio_set_station_freq+0x5a>
402a0320:	b515      	lw	a1,402a0374 <radio_set_station_freq+0x7c>
402a0322:	4b19      	addiu	v1,25
402a0324:	ebb9      	multu	v1,a1
402a0326:	ea10      	mfhi	v0
402a0328:	3052      	srl	s0,v0,4
402a032a:	6790      	move	a0,s0
402a032c:	ec31      	zeh	a0
402a032e:	f3e0 5c08 	sltiu	a0,1000
402a0332:	6b04      	li	v1,4
402a0334:	6001      	bteqz	402a0338 <radio_set_station_freq+0x40>
402a0336:	6b03      	li	v1,3
402a0338:	b011      	lw	s0,402a037c <radio_set_station_freq+0x84>
402a033a:	b710      	lw	a3,402a0378 <radio_set_station_freq+0x80>
402a033c:	6e01      	li	a2,1
402a033e:	b211      	lw	v0,402a0380 <radio_set_station_freq+0x88>
402a0340:	c760      	sb	v1,0(a3)
402a0342:	ea40      	jalr	v0
402a0344:	c0c0      	sb	a2,0(s0)
402a0346:	6aff      	li	v0,255
402a0348:	6c00      	li	a0,0
402a034a:	4a21      	addiu	v0,33
402a034c:	c080      	sb	a0,0(s0)
402a034e:	6463      	restore	24,ra,s0
402a0350:	e8a0      	jrc	ra
402a0352:	b009      	lw	s0,402a0374 <radio_set_station_freq+0x7c>
402a0354:	4b32      	addiu	v1,50
402a0356:	eb19      	multu	v1,s0
402a0358:	eb10      	mfhi	v1
402a035a:	3676      	srl	a2,v1,5
402a035c:	35c4      	sll	a1,a2,1
402a035e:	e5dd      	addu	a3,a1,a2
402a0360:	34ec      	sll	a0,a3,3
402a0362:	e4c9      	addu	v0,a0,a2
402a0364:	3348      	sll	v1,v0,2
402a0366:	eb19      	multu	v1,s0
402a0368:	17de      	b	402a0326 <radio_set_station_freq+0x2e>
402a036a:	0000      	addiu	s0,sp,0
402a036c:	9f23      	lw	s1,12(a3)
402a036e:	9fc1      	lw	a2,4(a3)
402a0370:	9a9c      	lw	a0,112(v0)
402a0372:	9fc1      	lw	a2,4(a3)
402a0374:	851f      	lb	s0,31(a1)
402a0376:	51eb      	slti	s1,235
402a0378:	9f0c      	lw	s0,48(a3)
402a037a:	9fc1      	lw	a2,4(a3)
402a037c:	9f22      	lw	s1,8(a3)
402a037e:	9fc1      	lw	a2,4(a3)
402a0380:	059d      	addiu	a1,sp,628
402a0382:	4012      	daddiu	s0,s0,2

402a0384 <radio_apk_key_search>:
402a0384:	b307      	lw	v1,402a03a0 <radio_apk_key_search+0x1c>

app_result_e radio_apk_key_search(uint32 data1, uint32 data2)
{
    if (g_radio_init_flag == TRUE)
402a0386:	a340      	lbu	v0,0(v1)
402a0388:	6b00      	li	v1,0
    {
        return RESULT_NULL;
402a038a:	7201      	cmpi	v0,1
402a038c:	6006      	bteqz	402a039a <radio_apk_key_search+0x16>
402a038e:	b506      	lw	a1,402a03a4 <radio_apk_key_search+0x20>
    }
    if(g_searching_flag == FALSE)
402a0390:	f100 4b1d 	addiu	v1,285
    {
        return RESULT_AUTO_SEARCH;
402a0394:	a580      	lbu	a0,0(a1)
402a0396:	2401      	beqz	a0,402a039a <radio_apk_key_search+0x16>
402a0398:	6b00      	li	v1,0
    }
    return RESULT_NULL;
402a039a:	e820      	jr	ra
}
402a039c:	6743      	move	v0,v1
402a039e:	0000      	addiu	s0,sp,0
402a03a0:	9f23      	lw	s1,12(a3)
402a03a2:	9fc1      	lw	a2,4(a3)
402a03a4:	9f25      	lw	s1,20(a3)
402a03a6:	9fc1      	lw	a2,4(a3)

402a03a8 <radio_apk_key_stop_search>:
402a03a8:	b307      	lw	v1,402a03c4 <radio_apk_key_stop_search+0x1c>

app_result_e radio_apk_key_stop_search(uint32 data1, uint32 data2)
{
    if (g_radio_init_flag == TRUE)
402a03aa:	a340      	lbu	v0,0(v1)
402a03ac:	7201      	cmpi	v0,1
402a03ae:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a03b0:	6007      	bteqz	402a03c0 <radio_apk_key_stop_search+0x18>
402a03b2:	b506      	lw	a1,402a03c8 <radio_apk_key_stop_search+0x20>
    }
    if(g_searching_flag == TRUE)
402a03b4:	6aff      	li	v0,255
    {
        return RESULT_STOP_SEARCH;
402a03b6:	a580      	lbu	a0,0(a1)
402a03b8:	4a21      	addiu	v0,33
402a03ba:	7401      	cmpi	a0,1
402a03bc:	6001      	bteqz	402a03c0 <radio_apk_key_stop_search+0x18>
402a03be:	6a00      	li	v0,0
    }
    return RESULT_NULL;
402a03c0:	e8a0      	jrc	ra
}
402a03c2:	0000      	addiu	s0,sp,0
402a03c4:	9f23      	lw	s1,12(a3)
402a03c6:	9fc1      	lw	a2,4(a3)
402a03c8:	9f25      	lw	s1,20(a3)
402a03ca:	9fc1      	lw	a2,4(a3)

402a03cc <radio_apk_key_chadd>:
402a03cc:	64e3      	save	24,ra,s0

app_result_e radio_apk_key_chadd(uint32 data1, uint32 data2)
{
402a03ce:	b309      	lw	v1,402a03f0 <radio_apk_key_chadd+0x24>
    app_result_e result;

    if (g_radio_init_flag == TRUE)
402a03d0:	a340      	lbu	v0,0(v1)
402a03d2:	7201      	cmpi	v0,1
402a03d4:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a03d6:	6102      	btnez	402a03dc <radio_apk_key_chadd+0x10>
402a03d8:	6463      	restore	24,ra,s0
    }

    g_neednot_freq_tts_play = TRUE;
    result = select_station(SELECT_NEXT_DIRECTION);
    g_neednot_freq_tts_play = FALSE;

    return result;
}
402a03da:	e8a0      	jrc	ra
402a03dc:	b006      	lw	s0,402a03f0 <radio_apk_key_chadd+0x24>
402a03de:	6d01      	li	a1,1
402a03e0:	b206      	lw	v0,402a03f8 <radio_apk_key_chadd+0x2c>
402a03e2:	c0a0      	sb	a1,0(s0)
402a03e4:	ea40      	jalr	v0
402a03e6:	6c01      	li	a0,1
402a03e8:	6c00      	li	a0,0
402a03ea:	c080      	sb	a0,0(s0)
402a03ec:	6463      	restore	24,ra,s0
402a03ee:	e8a0      	jrc	ra
402a03f0:	9f23      	lw	s1,12(a3)
402a03f2:	9fc1      	lw	a2,4(a3)
402a03f4:	9f22      	lw	s1,8(a3)
402a03f6:	9fc1      	lw	a2,4(a3)
402a03f8:	0425      	addiu	a0,sp,148
402a03fa:	4012      	daddiu	s0,s0,2

402a03fc <radio_apk_key_chsub>:
402a03fc:	64e3      	save	24,ra,s0

app_result_e radio_apk_key_chsub(uint32 data1, uint32 data2)
{
402a03fe:	b309      	lw	v1,402a0420 <radio_apk_key_chsub+0x24>
    app_result_e result;

    if (g_radio_init_flag == TRUE)
402a0400:	a340      	lbu	v0,0(v1)
402a0402:	7201      	cmpi	v0,1
402a0404:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a0406:	6102      	btnez	402a040c <radio_apk_key_chsub+0x10>
402a0408:	6463      	restore	24,ra,s0
    }

    g_neednot_freq_tts_play = TRUE;
    result = select_station(SELECT_PREV_DIRECTION);
    g_neednot_freq_tts_play = FALSE;

    return result;
}
402a040a:	e8a0      	jrc	ra
402a040c:	b006      	lw	s0,402a0420 <radio_apk_key_chsub+0x24>
402a040e:	6d01      	li	a1,1
402a0410:	b206      	lw	v0,402a0428 <radio_apk_key_chsub+0x2c>
402a0412:	c0a0      	sb	a1,0(s0)
402a0414:	ea40      	jalr	v0
402a0416:	6c00      	li	a0,0
402a0418:	6c00      	li	a0,0
402a041a:	c080      	sb	a0,0(s0)
402a041c:	6463      	restore	24,ra,s0
402a041e:	e8a0      	jrc	ra
402a0420:	9f23      	lw	s1,12(a3)
402a0422:	9fc1      	lw	a2,4(a3)
402a0424:	9f22      	lw	s1,8(a3)
402a0426:	9fc1      	lw	a2,4(a3)
402a0428:	0425      	addiu	a0,sp,148
402a042a:	4012      	daddiu	s0,s0,2

402a042c <radio_apk_key_mute>:
402a042c:	64c3      	save	24,ra

//520-->mute处理改为play/stop处理
app_result_e radio_apk_key_mute(uint32 data1, uint32 data2)
{
402a042e:	b31c      	lw	v1,402a049c <radio_apk_key_mute+0x70>

    if (g_radio_init_flag == TRUE)
402a0430:	a340      	lbu	v0,0(v1)
402a0432:	7201      	cmpi	v0,1
402a0434:	6a00      	li	v0,0
    {
        return RESULT_NULL;
402a0436:	6102      	btnez	402a043c <radio_apk_key_mute+0x10>
402a0438:	6443      	restore	24,ra
    }
    if (g_playing_flag == TRUE)
    {
        g_playing_flag = FALSE;
        sys_os_time_dly(2);//20ms避免按键音跟淡出重叠
        radio_send_msg(NULL, NULL, MSG_FMENGINE_PAUSE);
        radio_set_mute(SetMUTE);
        com_tts_state_play(TTS_MODE_ONLYONE, (void*)TTS_PAUSE_SONG);
    }
    else
    {
        g_playing_flag = TRUE;
        radio_set_mute(releaseMUTE);
        com_tts_state_play(TTS_MODE_ONLYONE, (void*)TTS_PLAY_SONG);
        radio_send_msg(NULL, NULL, MSG_FMENGINE_PLAY);
        
    }

    return RESULT_STOP_SEARCH;//切换时停止自动搜台;
}
402a043a:	e8a0      	jrc	ra
402a043c:	b319      	lw	v1,402a049c <radio_apk_key_mute+0x70>
402a043e:	a380      	lbu	a0,0(v1)
402a0440:	7401      	cmpi	a0,1
402a0442:	6119      	btnez	402a0476 <radio_apk_key_mute+0x4a>
402a0444:	6d00      	li	a1,0
402a0446:	c3a0      	sb	a1,0(v1)
402a0448:	b217      	lw	v0,402a04a4 <radio_apk_key_mute+0x78>
402a044a:	6d00      	li	a1,0
402a044c:	6f31      	li	a3,49
402a044e:	67c5      	move	a2,a1
402a0450:	ea40      	jalr	v0
402a0452:	6c02      	li	a0,2
402a0454:	6c00      	li	a0,0
402a0456:	b215      	lw	v0,402a04a8 <radio_apk_key_mute+0x7c>
402a0458:	f300 6e1a 	li	a2,794
402a045c:	ea40      	jalr	v0
402a045e:	67a4      	move	a1,a0
402a0460:	b213      	lw	v0,402a04ac <radio_apk_key_mute+0x80>
402a0462:	ea40      	jalr	v0
402a0464:	6c01      	li	a0,1
402a0466:	b213      	lw	v0,402a04b0 <radio_apk_key_mute+0x84>
402a0468:	6c00      	li	a0,0
402a046a:	ea40      	jalr	v0
402a046c:	6d06      	li	a1,6
402a046e:	6aff      	li	v0,255
402a0470:	4a21      	addiu	v0,33
402a0472:	6443      	restore	24,ra
402a0474:	e8a0      	jrc	ra
402a0476:	6e01      	li	a2,1
402a0478:	b20d      	lw	v0,402a04ac <radio_apk_key_mute+0x80>
402a047a:	c3c0      	sb	a2,0(v1)
402a047c:	ea40      	jalr	v0
402a047e:	6c00      	li	a0,0
402a0480:	b20c      	lw	v0,402a04b0 <radio_apk_key_mute+0x84>
402a0482:	6c00      	li	a0,0
402a0484:	ea40      	jalr	v0
402a0486:	6d05      	li	a1,5
402a0488:	6c00      	li	a0,0
402a048a:	b208      	lw	v0,402a04a8 <radio_apk_key_mute+0x7c>
402a048c:	f300 6e19 	li	a2,793
402a0490:	ea40      	jalr	v0
402a0492:	67a4      	move	a1,a0
402a0494:	6aff      	li	v0,255
402a0496:	4a21      	addiu	v0,33
402a0498:	17ec      	b	402a0472 <radio_apk_key_mute+0x46>
402a049a:	0000      	addiu	s0,sp,0
402a049c:	9f23      	lw	s1,12(a3)
402a049e:	9fc1      	lw	a2,4(a3)
402a04a0:	9f24      	lw	s1,16(a3)
402a04a2:	9fc1      	lw	a2,4(a3)
402a04a4:	e901      	sdbbp	8
402a04a6:	bfc1      	lwu	a2,4(a3)
402a04a8:	eda5      	break	45
402a04aa:	bfc1      	lwu	a2,4(a3)
402a04ac:	0301      	addiu	v1,sp,4
402a04ae:	4002      	addiu	s0,s0,2
402a04b0:	5c8d      	sltiu	a0,141
402a04b2:	483a      	addiu	s0,58

402a04b4 <radio_rcp_buffer>:
	...
Disassembly of section .text1:

bfc10500 <get_bt_stack_info>:
bfc10500:	64e3      	save	24,ra,s0
#endif
void __section__(".call_auto_conn1") com_hfp_old_sco_change(uint8 id)__FAR__;

void __section__(".rcode") get_bt_stack_info(void)
{
bfc10502:	b50d      	lw	a1,bfc10534 <RCODE_TEXT1_ADDR+0x34>
    if (sys_share_query_read(APP_ID_BTSTACK, &g_bt_stack_cur_info) == -1)
bfc10504:	b00d      	lw	s0,bfc10538 <RCODE_TEXT1_ADDR+0x38>
bfc10506:	6c0d      	li	a0,13
bfc10508:	6e00      	li	a2,0
bfc1050a:	e840      	jalr	s0
bfc1050c:	6f45      	li	a3,69
bfc1050e:	ea4f      	not	v0
bfc10510:	2a06      	bnez	v0,bfc1051e <RCODE_TEXT1_ADDR+0x1e>
bfc10512:	6d00      	li	a1,0
    {
        PRINT_ERR("shqry err");
bfc10514:	0c04      	la	a0,bfc10524 <RCODE_TEXT1_ADDR+0x24>
bfc10516:	67c5      	move	a2,a1
bfc10518:	e840      	jalr	s0
bfc1051a:	6f4b      	li	a3,75
bfc1051c:	17ff      	b	bfc1051c <RCODE_TEXT1_ADDR+0x1c>
        while (1)
bfc1051e:	6463      	restore	24,ra,s0
bfc10520:	e8a0      	jrc	ra
bfc10522:	0000      	addiu	s0,sp,0
bfc10524:	453c      	daddiu	s1,a1,-4
bfc10526:	203e      	beqz	s0,bfc105a4 <com_btmanager_discoverable_handle+0x4>
bfc10528:	6873      	li	s0,115
bfc1052a:	7271      	cmpi	v0,113
bfc1052c:	2079      	beqz	s0,bfc10620 <com_btmanager_mod_change+0x4>
bfc1052e:	7265      	cmpi	v0,101
bfc10530:	0072      	addiu	s0,sp,456
bfc10532:	0000      	addiu	s0,sp,0
bfc10534:	a2fc      	lbu	a3,28(v0)
bfc10536:	9fc1      	lw	a2,4(a3)
bfc10538:	e901      	sdbbp	8
bfc1053a:	bfc1      	lwu	a2,4(a3)

bfc1053c <check_a2dp_status>:
bfc1053c:	64c3      	save	24,ra
        {
            ; //nothing
        }
    }
}

void APP_AVRCP_Volume_Timer_Proc(void)
{
    uint8 volume,temp_vol;

    volume = sys_comval->volume_current;
    PRINT_INFO_INT("update vol:", volume);


    if (volume <= 8)
    {
        temp_vol = volume + 1;
    }
    else
    {
        temp_vol = volume - 1;
    }

    if (volume != VOLUME_VALUE_MAX)
    {
        com_btmanager_avrcp_update_volume_to_phone(temp_vol);
    }

    com_btmanager_avrcp_update_volume_to_phone(volume);
    g_btmanager_gl_var.avrcp_timer_id = -1;
}

void check_a2dp_status_ok(uint8 dev_index)
{
    com_set_active_dev(MSG_BTSTACK_SET_A2DP_ACTIVE_DEV_SYNC, dev_index);
    PRINT_DBG_INT("set a2dp id:", dev_index);
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if ((g_btmanager_gl_var.avrcp_timer_id == -1)
            && (g_btmanager_gl_var.enable_avrcp_volume_sync == 1)
            && (g_bt_stack_cur_info.dev_role != TWS_SLAVE))
#else
    if ((g_btmanager_gl_var.avrcp_timer_id == -1)
            && (g_btmanager_gl_var.enable_avrcp_volume_sync == 1))
#endif
    {
        g_btmanager_gl_var.avrcp_timer_id = set_single_shot_app_timer_btmamager(APP_TIMER_ATTRB_COM_CONTROL \
        | (APP_TIMER_TAG_SYS << 8),Volume_Delay_Update_Time, APP_AVRCP_Volume_Timer_Proc);
    }
}

void check_a2dp_status_ok(uint8 dev_index) __FAR__;

void __section__(".rcode") check_a2dp_status(void)
{
bfc1053e:	b316      	lw	v1,bfc10594 <check_a2dp_status+0x58>
    uint8 i;

    PRINT_DBG("check_a2dp_status");
    g_btmanager_gl_var.a2dp_timer_id = -1;
bfc10540:	6a01      	li	v0,1
bfc10542:	ea4b      	neg	v0
bfc10544:	a3cb      	lbu	a2,11(v1)

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc10546:	c347      	sb	v0,7(v1)
bfc10548:	6c00      	li	a0,0
bfc1054a:	2622      	beqz	a2,bfc10590 <check_a2dp_status+0x54>
bfc1054c:	6d12      	li	a1,18
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
/*
 1.主箱;NO_TWS_DEV;A2DP_STATUS_PLAY
 2.从箱;TWS_DEV;A2DP_STATUS_PLAY
 3.单箱;NO_TWS_DEV;A2DP_STATUS_PLAY
*/
        if ((g_bt_stack_cur_info.rmt_dev[i].a2dp_status == A2DP_STATUS_PLAY)
bfc1054e:	ecb8      	mult	a0,a1
bfc10550:	b312      	lw	v1,bfc10598 <check_a2dp_status+0x5c>
bfc10552:	ea12      	mflo	v0
bfc10554:	e275      	addu	a1,v0,v1
bfc10556:	a5f2      	lbu	a3,18(a1)
bfc10558:	7702      	cmpi	a3,2
bfc1055a:	6113      	btnez	bfc10582 <check_a2dp_status+0x46>
bfc1055c:	f020 a36e 	lbu	v1,46(v1)
bfc10560:	7301      	cmpi	v1,1
bfc10562:	6103      	btnez	bfc1056a <check_a2dp_status+0x2e>
bfc10564:	a5f5      	lbu	a3,21(a1)
bfc10566:	7701      	cmpi	a3,1
bfc10568:	6009      	bteqz	bfc1057c <check_a2dp_status+0x40>
bfc1056a:	7302      	cmpi	v1,2
bfc1056c:	6103      	btnez	bfc10574 <check_a2dp_status+0x38>
bfc1056e:	a555      	lbu	v0,21(a1)
bfc10570:	7202      	cmpi	v0,2
bfc10572:	6004      	bteqz	bfc1057c <check_a2dp_status+0x40>
bfc10574:	2b06      	bnez	v1,bfc10582 <check_a2dp_status+0x46>
bfc10576:	a575      	lbu	v1,21(a1)
bfc10578:	7301      	cmpi	v1,1
bfc1057a:	6103      	btnez	bfc10582 <check_a2dp_status+0x46>
bfc1057c:	b208      	lw	v0,bfc1059c <check_a2dp_status+0x60>
        	   &&(((g_bt_stack_cur_info.dev_role == TWS_MASTER)&&(g_bt_stack_cur_info.rmt_dev[i].dev_type == NO_TWS_DEV))
        	      || ((g_bt_stack_cur_info.dev_role == TWS_SLAVE)&&(g_bt_stack_cur_info.rmt_dev[i].dev_type == TWS_DEV))
        	      || ((g_bt_stack_cur_info.dev_role == NORMAL_DEV)&&(g_bt_stack_cur_info.rmt_dev[i].dev_type == NO_TWS_DEV))))       	 
#else
        if (g_bt_stack_cur_info.rmt_dev[i].a2dp_status == A2DP_STATUS_PLAY)
#endif
        {
            check_a2dp_status_ok(i);
bfc1057e:	eac0      	jalrc	v0
bfc10580:	1007      	b	bfc10590 <check_a2dp_status+0x54>
            break;
bfc10582:	44e1      	addiu	a3,a0,1
bfc10584:	6787      	move	a0,a3
bfc10586:	67a6      	move	a1,a2
bfc10588:	ec11      	zeb	a0
bfc1058a:	ed11      	zeb	a1
bfc1058c:	eca3      	sltu	a0,a1
bfc1058e:	61de      	btnez	bfc1054c <check_a2dp_status+0x10>
bfc10590:	6443      	restore	24,ra
bfc10592:	e8a0      	jrc	ra
bfc10594:	a33c      	lbu	s1,28(v1)
bfc10596:	9fc1      	lw	a2,4(a3)
bfc10598:	a2fc      	lbu	a3,28(v0)
bfc1059a:	9fc1      	lw	a2,4(a3)
bfc1059c:	5bad      	sltiu	v1,173
bfc1059e:	4882      	addiu	s0,-126

bfc105a0 <com_btmanager_discoverable_handle>:
bfc105a0:	64e3      	save	24,ra,s0
        }
    }
}

/*
 0.关闭可见性
 1.打开可见性
 2.关闭可见性,可连接性
*/
void com_set_discoverable(uint8 mode)
{
    msg_apps_t msg;

    g_btmanager_gl_var.discoverable_flag = mode;

    msg.type = MSG_BTSTACK_SET_DISCOVERABLE_SYNC;
    msg.content.data[0] = mode;

    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
}

void com_set_ble_discoverable(bool mode)
{
    msg_apps_t msg;

    msg.type = MSG_BTSTACK_SET_BLE_DISCOVERABLE_SYNC;
    msg.content.data[0] = mode;

    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
}

void com_bt_sniff_control(uint8 *bd, uint8 mode)
{
    msg_apps_t msg;

    msg.type = MSG_BTSTACK_SNIFF_CONTROL_SYNC;
    msg.content.data[0] = mode;

    send_sync_msg_btmanager(bd, &msg, NULL, 0);
}

void com_set_active_dev(msg_apps_type_e msg_type, uint8 id)
{
    msg_apps_t msg;

    msg.type = msg_type;
    msg.content.data[0] = id;
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
    //马上更新active device
    get_bt_stack_info();
}

void com_call_handle(void)
{
    msg_apps_t msg;

    msg.type = MSG_BT_HFP_CALL;
    sys_mq_send(MQ_ID_SYS, &msg);

    if (g_btmanager_gl_var.a2dp_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.a2dp_timer_id);
        g_btmanager_gl_var.a2dp_timer_id = -1;
    }
}

void __section__(".rcode") com_btmanager_discoverable_handle(void)
{
bfc105a2:	b61c      	lw	a2,bfc10610 <com_btmanager_discoverable_handle+0x70>
#ifndef ENABLE_TRUE_WIRELESS_STEREO
    if (g_bt_stack_cur_info.num_connected == g_btmanager_gl_var.support_dev_num)
    {
        if (g_btmanager_gl_var.discoverable_flag == 1)
        {
            com_set_discoverable(0);
        }
    }
    else
    {
        if (g_btmanager_gl_var.discoverable_flag == 0)
        {
            com_set_discoverable(1);
        }
    }
#else
    uint8 i;
    //手机连接上即关闭可见性
    if (g_bt_stack_cur_info.num_connected != 0)
bfc105a4:	b51c      	lw	a1,bfc10614 <com_btmanager_discoverable_handle+0x74>
bfc105a6:	a643      	lbu	v0,3(a2)
bfc105a8:	2229      	beqz	v0,bfc105fc <com_btmanager_discoverable_handle+0x5c>
bfc105aa:	a56b      	lbu	v1,11(a1)
    {        
      if (g_bt_stack_cur_info.num_connected == g_btmanager_gl_var.support_dev_num)
bfc105ac:	ea6e      	xor	v0,v1
bfc105ae:	2a05      	bnez	v0,bfc105ba <com_btmanager_discoverable_handle+0x1a>
bfc105b0:	a54e      	lbu	v0,14(a1)
      {
      	 //设备均连接上,关闭可连接性
      	 if (g_btmanager_gl_var.discoverable_flag != 2)
bfc105b2:	6c02      	li	a0,2
         {
            com_set_discoverable(2);
bfc105b4:	7202      	cmpi	v0,2
bfc105b6:	6127      	btnez	bfc10606 <com_btmanager_discoverable_handle+0x66>
bfc105b8:	1028      	b	bfc1060a <com_btmanager_discoverable_handle+0x6a>
bfc105ba:	6c00      	li	a0,0
         }
      }
      else
      {
      	 for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc105bc:	2326      	beqz	v1,bfc1060a <com_btmanager_discoverable_handle+0x6a>
bfc105be:	a56e      	lbu	v1,14(a1)
         {      	
         	if (g_btmanager_gl_var.discoverable_flag == 1)
bfc105c0:	67e5      	move	a3,a1
bfc105c2:	7301      	cmpi	v1,1
bfc105c4:	610d      	btnez	bfc105e0 <com_btmanager_discoverable_handle+0x40>
bfc105c6:	6812      	li	s0,18
         	{
         		//手机连接上即关闭可见性
         	  if ((g_bt_stack_cur_info.rmt_dev[i].dev_type == NO_TWS_DEV)
bfc105c8:	ec18      	mult	a0,s0
bfc105ca:	e812      	mflo	s0
bfc105cc:	e0c9      	addu	v0,s0,a2
bfc105ce:	a255      	lbu	v0,21(v0)
bfc105d0:	7201      	cmpi	v0,1
bfc105d2:	6004      	bteqz	bfc105dc <com_btmanager_discoverable_handle+0x3c>
bfc105d4:	f020 a64e 	lbu	v0,46(a2)
bfc105d8:	7202      	cmpi	v0,2
bfc105da:	6109      	btnez	bfc105ee <com_btmanager_discoverable_handle+0x4e>
bfc105dc:	6c00      	li	a0,0
         	  	   || (g_bt_stack_cur_info.dev_role == TWS_SLAVE))
         	  {
         	  	com_set_discoverable(0);
bfc105de:	1013      	b	bfc10606 <com_btmanager_discoverable_handle+0x66>
bfc105e0:	f020 a66e 	lbu	v1,46(a2)
         	  	break;
         	  }
          }
         	else
         	{
         		if ((g_bt_stack_cur_info.dev_role == TWS_MASTER)
bfc105e4:	7301      	cmpi	v1,1
bfc105e6:	6103      	btnez	bfc105ee <com_btmanager_discoverable_handle+0x4e>
bfc105e8:	a643      	lbu	v0,3(a2)
bfc105ea:	7201      	cmpi	v0,1
bfc105ec:	600b      	bteqz	bfc10604 <com_btmanager_discoverable_handle+0x64>
bfc105ee:	4441      	addiu	v0,a0,1
bfc105f0:	6782      	move	a0,v0
bfc105f2:	a76b      	lbu	v1,11(a3)
bfc105f4:	ec11      	zeb	a0
bfc105f6:	ec63      	sltu	a0,v1
bfc105f8:	61e2      	btnez	bfc105be <com_btmanager_discoverable_handle+0x1e>
bfc105fa:	1007      	b	bfc1060a <com_btmanager_discoverable_handle+0x6a>
bfc105fc:	a54e      	lbu	v0,14(a1)
         			  && (g_bt_stack_cur_info.num_connected == 1))
         		{
         			com_set_discoverable(1);
         			break;
         		}	        		
         	}		
         }          
      }		            	      
    }   
    else
    {
        if ((g_btmanager_gl_var.discoverable_flag == 0)
bfc105fe:	2202      	beqz	v0,bfc10604 <com_btmanager_discoverable_handle+0x64>
bfc10600:	7202      	cmpi	v0,2
bfc10602:	6103      	btnez	bfc1060a <com_btmanager_discoverable_handle+0x6a>
bfc10604:	6c01      	li	a0,1
        	  || (g_btmanager_gl_var.discoverable_flag == 2))
        {
            com_set_discoverable(1);
bfc10606:	b305      	lw	v1,bfc10618 <com_btmanager_discoverable_handle+0x78>
bfc10608:	ebc0      	jalrc	v1
bfc1060a:	6463      	restore	24,ra,s0
        }
    }
#endif     
}
bfc1060c:	e8a0      	jrc	ra
bfc1060e:	0000      	addiu	s0,sp,0
bfc10610:	a2fc      	lbu	a3,28(v0)
bfc10612:	9fc1      	lw	a2,4(a3)
bfc10614:	a33c      	lbu	s1,28(v1)
bfc10616:	9fc1      	lw	a2,4(a3)
bfc10618:	5bfd      	sltiu	v1,253
bfc1061a:	4882      	addiu	s0,-126

bfc1061c <com_btmanager_mod_change>:
bfc1061c:	64c3      	save	24,ra

void start_avrcp_volume_update_timer(void)
{
    PRINT_INFO("#status change");
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if ((g_btmanager_gl_var.avrcp_timer_id == -1)
            && (g_btmanager_gl_var.enable_avrcp_volume_sync == 1)
            && (g_bt_stack_cur_info.dev_role != TWS_SLAVE))
#else
    if ((g_btmanager_gl_var.avrcp_timer_id == -1)
            && (g_btmanager_gl_var.enable_avrcp_volume_sync == 1))
#endif   
    {
        //PRINT_DBG("= -1");
        g_btmanager_gl_var.avrcp_timer_id = set_single_shot_app_timer_btmamager(APP_TIMER_ATTRB_COM_CONTROL \
        | (APP_TIMER_TAG_SYS << 8),Volume_Delay_Update_Time, APP_AVRCP_Volume_Timer_Proc);
    }
}

void check_a2dp_status(void) __FAR__;
void com_btmanager_a2dp_handle_kill_a2dp_timer(void)
{
    kill_app_timer(g_btmanager_gl_var.a2dp_timer_id);
    check_a2dp_status();
    g_btmanager_gl_var.a2dp_timer_id = -1;
}

void com_btmanager_a2dp_handle_kill_avrcp_timer(void)
{
    kill_app_timer(g_btmanager_gl_var.avrcp_timer_id);
    g_btmanager_gl_var.avrcp_timer_id = -1;
}

void start_avrcp_volume_update_timer(void) __FAR__;
void com_btmanager_a2dp_handle_kill_a2dp_timer(void) __FAR__;
void com_btmanager_a2dp_handle_kill_avrcp_timer(void) __FAR__;

#ifdef ENABLE_TRUE_WIRELESS_STEREO
void __section__(".call_auto_conn") send_mod_flag_to_other()
{
            libc_print("#b1",0,0);
           //tws_send_cmd(SUB_SYNC_QUIT_BL);
         send_cmd_to_other(1);
         send_once_flag++;
  }

void __section__(".rcode") com_btmanager_mod_change()
{
bfc1061e:	b40b      	lw	a0,bfc10648 <com_btmanager_mod_change+0x2c>
    if(g_this_app_info->app_id!=APP_ID_BTPLAY)
bfc10620:	9c60      	lw	v1,0(a0)
bfc10622:	a341      	lbu	v0,1(v1)
bfc10624:	7202      	cmpi	v0,2
bfc10626:	600d      	bteqz	bfc10642 <com_btmanager_mod_change+0x26>
bfc10628:	b609      	lw	a2,bfc1064c <com_btmanager_mod_change+0x30>
    {
         if(g_bt_stack_cur_info.dev_role==TWS_SLAVE)
bfc1062a:	b30a      	lw	v1,bfc10650 <com_btmanager_mod_change+0x34>
bfc1062c:	f020 a6ae 	lbu	a1,46(a2)
bfc10630:	7502      	cmpi	a1,2
bfc10632:	6105      	btnez	bfc1063e <com_btmanager_mod_change+0x22>
bfc10634:	a3e0      	lbu	a3,0(v1)
         {
             //告诉主箱不能打开丢数标志
              if(send_once_flag==0)
bfc10636:	2f05      	bnez	a3,bfc10642 <com_btmanager_mod_change+0x26>
bfc10638:	b207      	lw	v0,bfc10654 <com_btmanager_mod_change+0x38>
              {
                send_mod_flag_to_other();
bfc1063a:	eac0      	jalrc	v0
bfc1063c:	1002      	b	bfc10642 <com_btmanager_mod_change+0x26>
bfc1063e:	6c00      	li	a0,0
              }
          }
          else
          {
               send_once_flag=0;
bfc10640:	c380      	sb	a0,0(v1)
bfc10642:	6443      	restore	24,ra
          }
    
    }
}
bfc10644:	e8a0      	jrc	ra
bfc10646:	0000      	addiu	s0,sp,0
bfc10648:	9990      	lw	a0,64(s1)
bfc1064a:	9fc1      	lw	a2,4(a3)
bfc1064c:	a2fc      	lbu	a3,28(v0)
bfc1064e:	9fc1      	lw	a2,4(a3)
bfc10650:	a35e      	lbu	v0,30(v1)
bfc10652:	9fc1      	lw	a2,4(a3)
bfc10654:	5fcd      	sltiu	a3,205
bfc10656:	483e      	addiu	s0,62

bfc10658 <com_btmanager_a2dp_handle>:
bfc10658:	64e4      	save	32,ra,s0
#endif

void __section__(".rcode") com_btmanager_a2dp_handle(void)
{
bfc1065a:	b42c      	lw	a0,bfc10708 <com_btmanager_a2dp_handle+0xb0>
    if (g_this_app_info->app_id == APP_ID_BTPLAY)
bfc1065c:	b52d      	lw	a1,bfc10710 <com_btmanager_a2dp_handle+0xb8>
bfc1065e:	9c60      	lw	v1,0(a0)
bfc10660:	b42b      	lw	a0,bfc1070c <com_btmanager_a2dp_handle+0xb4>
bfc10662:	a341      	lbu	v0,1(v1)
bfc10664:	7202      	cmpi	v0,2
bfc10666:	613c      	btnez	bfc106e0 <com_btmanager_a2dp_handle+0x88>
bfc10668:	a4e2      	lbu	a3,2(a0)
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        if((g_btmanager_gl_var.last_a2dp_status==A2DP_STATUS_NONE)&&(g_bt_stack_cur_info.dev_role==TWS_SLAVE))
bfc1066a:	2f0e      	bnez	a3,bfc10688 <com_btmanager_a2dp_handle+0x30>
bfc1066c:	f020 a5ce 	lbu	a2,46(a1)
bfc10670:	7602      	cmpi	a2,2
bfc10672:	610a      	btnez	bfc10688 <com_btmanager_a2dp_handle+0x30>
bfc10674:	b528      	lw	a1,bfc10714 <com_btmanager_a2dp_handle+0xbc>
        {
            //libc_print("updat stack vol ",0,0);
            com_btmanager_tws_send(VOLUME_VALUE_FLAG,sys_comval->volume_current,NULL,NULL,MSG_BTSTACK_TWS_VOLUME_SYNC);
bfc10676:	f0a1 6a09 	li	v0,2217
bfc1067a:	9d60      	lw	v1,0(a1)
bfc1067c:	b027      	lw	s0,bfc10718 <com_btmanager_a2dp_handle+0xc0>
bfc1067e:	a3bb      	lbu	a1,27(v1)
bfc10680:	6787      	move	a0,a3
bfc10682:	d204      	sw	v0,16(sp)
bfc10684:	e840      	jalr	s0
bfc10686:	67c7      	move	a2,a3
bfc10688:	b622      	lw	a2,bfc10710 <com_btmanager_a2dp_handle+0xb8>
        }
#endif    
        if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].a2dp_status != A2DP_STATUS_PLAY)
bfc1068a:	6a12      	li	v0,18
bfc1068c:	f020 a668 	lbu	v1,40(a2)
bfc10690:	eb58      	mult	v1,v0
bfc10692:	e812      	mflo	s0
bfc10694:	e0d1      	addu	a0,s0,a2
bfc10696:	a4f2      	lbu	a3,18(a0)
bfc10698:	b01d      	lw	s0,bfc1070c <com_btmanager_a2dp_handle+0xb4>
bfc1069a:	7702      	cmpi	a3,2
bfc1069c:	a047      	lbu	v0,7(s0)
bfc1069e:	600d      	bteqz	bfc106ba <com_btmanager_a2dp_handle+0x62>
bfc106a0:	ea91      	seb	v0
        {
            /*延迟检测是否需要切换音频，如果当前设备在推歌，然后来电，播放状态会变成暂停，马上
             判断的话，挂断电话后可能会播放另一个设备的歌曲*/
            if (g_btmanager_gl_var.a2dp_timer_id == -1)
bfc106a2:	ed4f      	not	a1,v0
bfc106a4:	2d08      	bnez	a1,bfc106b6 <com_btmanager_a2dp_handle+0x5e>
bfc106a6:	b61e      	lw	a2,bfc1071c <com_btmanager_a2dp_handle+0xc4>
            {
                g_btmanager_gl_var.a2dp_timer_id = set_single_shot_app_timer_btmamager(APP_TIMER_ATTRB_COM_CONTROL \
bfc106a8:	b21e      	lw	v0,bfc10720 <com_btmanager_a2dp_handle+0xc8>
bfc106aa:	f71f 6c03 	li	a0,65283
bfc106ae:	f3e0 6d08 	li	a1,1000
bfc106b2:	eac0      	jalrc	v0
bfc106b4:	c047      	sb	v0,7(s0)
bfc106b6:	8048      	lb	v0,8(s0)
                | (APP_TIMER_TAG_SYS << 8),1000, check_a2dp_status);
            }

            if (g_btmanager_gl_var.avrcp_timer_id != -1)
bfc106b8:	1020      	b	bfc106fa <com_btmanager_a2dp_handle+0xa2>
bfc106ba:	ea91      	seb	v0
            {
                com_btmanager_a2dp_handle_kill_avrcp_timer();
            }
        }
        else
        {
            if (g_btmanager_gl_var.a2dp_timer_id != -1)
bfc106bc:	ef4f      	not	a3,v0
bfc106be:	2702      	beqz	a3,bfc106c4 <com_btmanager_a2dp_handle+0x6c>
bfc106c0:	b31a      	lw	v1,bfc10728 <com_btmanager_a2dp_handle+0xd0>
            {
                com_btmanager_a2dp_handle_kill_a2dp_timer();
bfc106c2:	ebc0      	jalrc	v1
bfc106c4:	a042      	lbu	v0,2(s0)
            }

            if ((g_btmanager_gl_var.last_a2dp_status == A2DP_STATUS_PAUSE) ||
bfc106c6:	7203      	cmpi	v0,3
bfc106c8:	6005      	bteqz	bfc106d4 <com_btmanager_a2dp_handle+0x7c>
bfc106ca:	7201      	cmpi	v0,1
bfc106cc:	6003      	bteqz	bfc106d4 <com_btmanager_a2dp_handle+0x7c>
bfc106ce:	a08d      	lbu	a0,13(s0)
bfc106d0:	7401      	cmpi	a0,1
bfc106d2:	6117      	btnez	bfc10702 <com_btmanager_a2dp_handle+0xaa>
bfc106d4:	b216      	lw	v0,bfc1072c <com_btmanager_a2dp_handle+0xd4>
                    (g_btmanager_gl_var.last_a2dp_status == A2DP_STATUS_LINKED) ||
                    (g_btmanager_gl_var.send_vol_syn == 1))
            {
                start_avrcp_volume_update_timer();
bfc106d6:	eac0      	jalrc	v0
bfc106d8:	b60d      	lw	a2,bfc10708 <com_btmanager_a2dp_handle+0xb0>
                g_btmanager_gl_var.send_vol_syn = 0;
bfc106da:	6d00      	li	a1,0
bfc106dc:	c6ad      	sb	a1,13(a2)
bfc106de:	1011      	b	bfc10702 <com_btmanager_a2dp_handle+0xaa>
bfc106e0:	f020 a5e8 	lbu	a3,40(a1)
            }
        }
    }
    else
    {
        if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].a2dp_status == A2DP_STATUS_PLAY)
bfc106e4:	6a12      	li	v0,18
bfc106e6:	ef58      	mult	a3,v0
bfc106e8:	6a01      	li	v0,1
        {
            g_btmanager_gl_var.send_vol_syn = 1;
bfc106ea:	eb12      	mflo	v1
bfc106ec:	e3b9      	addu	a2,v1,a1
bfc106ee:	a6f2      	lbu	a3,18(a2)
bfc106f0:	7702      	cmpi	a3,2
bfc106f2:	6001      	bteqz	bfc106f6 <com_btmanager_a2dp_handle+0x9e>
bfc106f4:	6a00      	li	v0,0
        }
        else
        {
            g_btmanager_gl_var.send_vol_syn = 0;
bfc106f6:	c44d      	sb	v0,13(a0)
bfc106f8:	8448      	lb	v0,8(a0)
        }
        if (g_btmanager_gl_var.avrcp_timer_id != -1)
bfc106fa:	ec4f      	not	a0,v0
bfc106fc:	2402      	beqz	a0,bfc10702 <com_btmanager_a2dp_handle+0xaa>
bfc106fe:	b30a      	lw	v1,bfc10724 <com_btmanager_a2dp_handle+0xcc>
        {
            com_btmanager_a2dp_handle_kill_avrcp_timer();
bfc10700:	ebc0      	jalrc	v1
bfc10702:	6464      	restore	32,ra,s0
        }
    }
}
bfc10704:	e8a0      	jrc	ra
bfc10706:	0000      	addiu	s0,sp,0
bfc10708:	9990      	lw	a0,64(s1)
bfc1070a:	9fc1      	lw	a2,4(a3)
bfc1070c:	a33c      	lbu	s1,28(v1)
bfc1070e:	9fc1      	lw	a2,4(a3)
bfc10710:	a2fc      	lbu	a3,28(v0)
bfc10712:	9fc1      	lw	a2,4(a3)
bfc10714:	999c      	lw	a0,112(s1)
bfc10716:	9fc1      	lw	a2,4(a3)
bfc10718:	5921      	sltiu	s1,33
bfc1071a:	4886      	addiu	s0,-122
bfc1071c:	053d      	addiu	a1,sp,244
bfc1071e:	bfc1      	lwu	a2,4(a3)
bfc10720:	5c4d      	sltiu	a0,77
bfc10722:	488e      	addiu	s0,-114
bfc10724:	5d29      	sltiu	a1,41
bfc10726:	4882      	addiu	s0,-126
bfc10728:	5d05      	sltiu	a1,5
bfc1072a:	4882      	addiu	s0,-126
bfc1072c:	5ca1      	sltiu	a0,161
bfc1072e:	4882      	addiu	s0,-126

bfc10730 <com_btmanager_hfp_handle>:
bfc10730:	64e3      	save	24,ra,s0

void __section__(".call_auto_conn1") com_hfp_old_sco_change(uint8 id)
{
    msg_apps_t msg;
    msg.type = MSG_BTSTACK_HFP_SCO_CHANGE_SYNC;
    //发送同步消息
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[id].addr.bytes, &msg, NULL, 0);
}

void __section__(".rcode") com_btmanager_hfp_handle(void)
{
bfc10732:	b41b      	lw	a0,bfc1079c <com_btmanager_hfp_handle+0x6c>
    uint8 i;

    //不在通话中，需要检测是否有在免提通话
    if (g_this_app_info->app_id != APP_ID_BTCALL)
bfc10734:	9c60      	lw	v1,0(a0)
bfc10736:	a341      	lbu	v0,1(v1)
bfc10738:	7203      	cmpi	v0,3
bfc1073a:	b21a      	lw	v0,bfc107a0 <com_btmanager_hfp_handle+0x70>
bfc1073c:	6024      	bteqz	bfc10786 <com_btmanager_hfp_handle+0x56>
bfc1073e:	a2cb      	lbu	a2,11(v0)
    {
        for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc10740:	67a2      	move	a1,v0
bfc10742:	6800      	li	s0,0
bfc10744:	2629      	beqz	a2,bfc10798 <com_btmanager_hfp_handle+0x68>
bfc10746:	6b12      	li	v1,18
        {
            if ((g_bt_stack_cur_info.rmt_dev[i].hfp_status > HFP_STATUS_LINKED)
bfc10748:	e878      	mult	s0,v1
bfc1074a:	b217      	lw	v0,bfc107a4 <com_btmanager_hfp_handle+0x74>
bfc1074c:	ec12      	mflo	a0
bfc1074e:	e44d      	addu	v1,a0,v0
bfc10750:	a3f3      	lbu	a3,19(v1)
bfc10752:	5f02      	sltiu	a3,2
bfc10754:	6008      	bteqz	bfc10766 <com_btmanager_hfp_handle+0x36>
bfc10756:	a36e      	lbu	v1,14(v1)
bfc10758:	6c01      	li	a0,1
bfc1075a:	367a      	srl	a2,v1,6
bfc1075c:	ee8c      	and	a2,a0
bfc1075e:	2e0c      	bnez	a2,bfc10778 <com_btmanager_hfp_handle+0x48>
bfc10760:	67e4      	move	a3,a0
bfc10762:	ef6c      	and	a3,v1
bfc10764:	2709      	beqz	a3,bfc10778 <com_btmanager_hfp_handle+0x48>
bfc10766:	b311      	lw	v1,bfc107a8 <com_btmanager_hfp_handle+0x78>
                || ((g_bt_stack_cur_info.rmt_dev[i].hfp_attr.old_sco_link == 0)
                    && (g_bt_stack_cur_info.rmt_dev[i].hfp_attr.sco_link == 1)))
            {
                com_hfp_old_sco_change(i);
bfc10768:	eb40      	jalr	v1
bfc1076a:	6790      	move	a0,s0
bfc1076c:	b210      	lw	v0,bfc107ac <com_btmanager_hfp_handle+0x7c>
                com_set_active_dev(MSG_BTSTACK_SET_HFP_ACTIVE_DEV_SYNC, i);
bfc1076e:	f001 6c09 	li	a0,2057
bfc10772:	ea40      	jalr	v0
bfc10774:	67b0      	move	a1,s0
bfc10776:	100e      	b	bfc10794 <com_btmanager_hfp_handle+0x64>
bfc10778:	40c1      	addiu	a2,s0,1
bfc1077a:	6706      	move	s0,a2
bfc1077c:	a58b      	lbu	a0,11(a1)
bfc1077e:	e811      	zeb	s0
bfc10780:	e883      	sltu	s0,a0
bfc10782:	61e1      	btnez	bfc10746 <com_btmanager_hfp_handle+0x16>
bfc10784:	1009      	b	bfc10798 <com_btmanager_hfp_handle+0x68>
bfc10786:	a2a0      	lbu	a1,0(v0)
                com_call_handle();
                //PRINT_DBG_INT("call handle:", i);
                break;
            }
        }
    }
    else
    {
        if ((g_btmanager_gl_var.last_hfp_status[0] == HFP_STATUS_INCOMING)
bfc10788:	7502      	cmpi	a1,2
bfc1078a:	6106      	btnez	bfc10798 <com_btmanager_hfp_handle+0x68>
bfc1078c:	b206      	lw	v0,bfc107a4 <com_btmanager_hfp_handle+0x74>
bfc1078e:	a2f3      	lbu	a3,19(v0)
bfc10790:	7702      	cmpi	a3,2
bfc10792:	6002      	bteqz	bfc10798 <com_btmanager_hfp_handle+0x68>
bfc10794:	b307      	lw	v1,bfc107b0 <com_btmanager_hfp_handle+0x80>
                && (g_bt_stack_cur_info.rmt_dev[0].hfp_status != HFP_STATUS_INCOMING))
        {
            //来电已切换为状态，通知到前台，以便COMMON能够处理到位
            com_call_handle();
bfc10796:	ebc0      	jalrc	v1
bfc10798:	6463      	restore	24,ra,s0
        }
    }
    //在通话中，但是没有使用免提，需要检测其他手机的来电状态
//    else
//    {
//        if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].hfp_status == HFP_STATUS_PHONE)
//        {
//            for(i=0; i<g_btmanager_gl_var.support_dev_num; i++)
//            {
////                if (i == active)
////                {
////                    continue;
////                }
//                if (g_bt_stack_cur_info.rmt_dev[i].hfp_status > HFP_STATUS_LINKED)
//                {
//                    com_set_active_dev(MSG_BTSTACK_SET_HFP_ACTIVE_DEV_SYNC, i);
//                    PRINT_DBG_INT("switch active:", i);
//                    break;
//                }
//            }
//        }
//    }
}
bfc1079a:	e8a0      	jrc	ra
bfc1079c:	9990      	lw	a0,64(s1)
bfc1079e:	9fc1      	lw	a2,4(a3)
bfc107a0:	a33c      	lbu	s1,28(v1)
bfc107a2:	9fc1      	lw	a2,4(a3)
bfc107a4:	a2fc      	lbu	a3,28(v0)
bfc107a6:	9fc1      	lw	a2,4(a3)
bfc107a8:	5c8d      	sltiu	a0,141
bfc107aa:	4886      	addiu	s0,-122
bfc107ac:	5b85      	sltiu	v1,133
bfc107ae:	4882      	addiu	s0,-126
bfc107b0:	5c69      	sltiu	a0,105
bfc107b2:	4882      	addiu	s0,-126

bfc107b4 <com_btmanager_battery_handle>:
bfc107b4:	64f6      	save	48,ra,s0-s1

void start_battery_report_update_timer(void)
{
    if (g_btmanager_gl_var.bat_rpt_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.bat_rpt_timer_id);
        g_btmanager_gl_var.bat_rpt_timer_id = -1;
    }
    g_btmanager_gl_var.bat_rpt_timer_id = set_single_shot_app_timer_btmamager(APP_TIMER_ATTRB_COM_CONTROL \
    | (APP_TIMER_TAG_SYS << 8),1000, com_btmanager_hfp_battery_report_update_handle);
}

void start_battery_report_update_timer(void) __FAR__;

void __section__(".rcode") com_btmanager_battery_handle(void)
{
bfc107b6:	b723      	lw	a3,bfc10840 <com_btmanager_battery_handle+0x8c>
    uint8 i;
    uint8 update_flag = 0;

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc107b8:	6e00      	li	a2,0
bfc107ba:	a76b      	lbu	v1,11(a3)
bfc107bc:	6726      	move	s1,a2
bfc107be:	6743      	move	v0,v1
bfc107c0:	ea11      	zeb	v0
bfc107c2:	ee43      	sltu	a2,v0
bfc107c4:	6034      	bteqz	bfc1082e <com_btmanager_battery_handle+0x7a>
bfc107c6:	b420      	lw	a0,bfc10844 <com_btmanager_battery_handle+0x90>
    {
        if (g_bt_stack_cur_info.hfp_established != 0)
bfc107c8:	4141      	addiu	v0,s1,1
bfc107ca:	f020 a4aa 	lbu	a1,42(a0)
bfc107ce:	b01f      	lw	s0,bfc10848 <com_btmanager_battery_handle+0x94>
bfc107d0:	d204      	sw	v0,16(sp)
bfc107d2:	2518      	beqz	a1,bfc10804 <com_btmanager_battery_handle+0x50>
bfc107d4:	a0a9      	lbu	a1,9(s0)
        {
            if (g_app_info_state_all.battery_report_enable < g_btmanager_gl_var.support_dev_num)
bfc107d6:	eb11      	zeb	v1
bfc107d8:	ed63      	sltu	a1,v1
bfc107da:	600d      	bteqz	bfc107f6 <com_btmanager_battery_handle+0x42>
bfc107dc:	6b12      	li	v1,18
            {
                com_btmanager_hfp_battery_report_enable(g_bt_stack_cur_info.rmt_dev[i].addr.bytes);
bfc107de:	e978      	mult	s1,v1
bfc107e0:	44c5      	addiu	a2,a0,5
bfc107e2:	ed12      	mflo	a1
bfc107e4:	b21a      	lw	v0,bfc1084c <com_btmanager_battery_handle+0x98>
bfc107e6:	e5d1      	addu	a0,a1,a2
bfc107e8:	ea40      	jalr	v0
bfc107ea:	d706      	sw	a3,24(sp)
bfc107ec:	a089      	lbu	a0,9(s0)
                update_flag = 1;
                g_app_info_state_all.battery_report_enable ++;
bfc107ee:	6e01      	li	a2,1
bfc107f0:	4461      	addiu	v1,a0,1
bfc107f2:	c069      	sb	v1,9(s0)
bfc107f4:	9706      	lw	a3,24(sp)
bfc107f6:	b217      	lw	v0,bfc10850 <com_btmanager_battery_handle+0x9c>
            }

            if (g_app_info_state.bat_value != g_btmanager_gl_var.last_battery_value)
bfc107f8:	a7a5      	lbu	a1,5(a3)
bfc107fa:	a28a      	lbu	a0,10(v0)
bfc107fc:	ecae      	xor	a0,a1
bfc107fe:	2405      	beqz	a0,bfc1080a <com_btmanager_battery_handle+0x56>
bfc10800:	6e01      	li	a2,1
            {
                update_flag = 1;
bfc10802:	1003      	b	bfc1080a <com_btmanager_battery_handle+0x56>
bfc10804:	a0e9      	lbu	a3,9(s0)
            }
        }
        else if(g_app_info_state_all.battery_report_enable != 0)
bfc10806:	2701      	beqz	a3,bfc1080a <com_btmanager_battery_handle+0x56>
bfc10808:	c0a9      	sb	a1,9(s0)
        {
            g_app_info_state_all.battery_report_enable = 0;
bfc1080a:	6a12      	li	v0,18
        }
        else
        {
            ;//for QAC
        }
        g_btmanager_gl_var.last_hfp_status[i] = g_bt_stack_cur_info.rmt_dev[i].hfp_status;
bfc1080c:	e958      	mult	s1,v0
bfc1080e:	b40e      	lw	a0,bfc10844 <com_btmanager_battery_handle+0x90>
bfc10810:	ed12      	mflo	a1
bfc10812:	b30c      	lw	v1,bfc10840 <com_btmanager_battery_handle+0x8c>
bfc10814:	e589      	addu	v0,a1,a0
bfc10816:	e17d      	addu	a3,s1,v1
bfc10818:	a233      	lbu	s1,19(v0)
bfc1081a:	67bd      	move	a1,sp
bfc1081c:	c720      	sb	s1,0(a3)
bfc1081e:	67e3      	move	a3,v1
bfc10820:	a36b      	lbu	v1,11(v1)
bfc10822:	a530      	lbu	s1,16(a1)
bfc10824:	6783      	move	a0,v1
bfc10826:	e911      	zeb	s1
bfc10828:	ec11      	zeb	a0
bfc1082a:	e983      	sltu	s1,a0
bfc1082c:	17cb      	b	bfc107c4 <com_btmanager_battery_handle+0x10>
bfc1082e:	2602      	beqz	a2,bfc10834 <com_btmanager_battery_handle+0x80>
    }

    if (update_flag == 1)
bfc10830:	b209      	lw	v0,bfc10854 <com_btmanager_battery_handle+0xa0>
    {
        start_battery_report_update_timer();
bfc10832:	eac0      	jalrc	v0
bfc10834:	b407      	lw	a0,bfc1084c <com_btmanager_battery_handle+0x98>
    }

    g_btmanager_gl_var.last_battery_value = g_app_info_state.bat_value;
bfc10836:	b603      	lw	a2,bfc10840 <com_btmanager_battery_handle+0x8c>
bfc10838:	a4ea      	lbu	a3,10(a0)
bfc1083a:	c6e5      	sb	a3,5(a2)
bfc1083c:	6476      	restore	48,ra,s0-s1
bfc1083e:	e8a0      	jrc	ra
bfc10840:	a33c      	lbu	s1,28(v1)
bfc10842:	9fc1      	lw	a2,4(a3)
bfc10844:	a2fc      	lbu	a3,28(v0)
bfc10846:	9fc1      	lw	a2,4(a3)
bfc10848:	a094      	lbu	a0,20(s0)
bfc1084a:	9fc1      	lw	a2,4(a3)
bfc1084c:	5c65      	sltiu	a0,101
bfc1084e:	4886      	addiu	s0,-122
bfc10850:	a0c0      	lbu	a2,0(s0)
bfc10852:	9fc1      	lw	a2,4(a3)
bfc10854:	5d45      	sltiu	a1,69
bfc10856:	4882      	addiu	s0,-126

bfc10858 <check_sniff_status>:
bfc10858:	64e3      	save	24,ra,s0
}

void check_sniff_status_send_cmd(uint8 idx)
{
    PRINT_INFO_INT("check sniff:", idx);
    com_bt_sniff_control(g_bt_stack_cur_info.rmt_dev[idx].addr.bytes, 1);
}

void check_sniff_status_send_cmd(uint8 i) __FAR__;

void __section__(".rcode") check_sniff_status(void)
{
bfc1085a:	b319      	lw	v1,bfc108bc <check_sniff_status+0x64>
    uint8 i;

//#ifdef ENABLE_TRUE_WIRELESS_STEREO
//    if (g_bt_stack_cur_info.controller_status == BT_CONTROLLER_STATUS_IDLE)
//#else
    if ((g_bt_stack_cur_info.controller_status == BT_CONTROLLER_STATUS_IDLE)
bfc1085c:	a342      	lbu	v0,2(v1)
bfc1085e:	7201      	cmpi	v0,1
bfc10860:	6126      	btnez	bfc108ae <check_sniff_status+0x56>
bfc10862:	b618      	lw	a2,bfc108c0 <check_sniff_status+0x68>
bfc10864:	9ea0      	lw	a1,0(a2)
bfc10866:	a581      	lbu	a0,1(a1)
bfc10868:	7403      	cmpi	a0,3
bfc1086a:	6021      	bteqz	bfc108ae <check_sniff_status+0x56>
bfc1086c:	b016      	lw	s0,bfc108c4 <check_sniff_status+0x6c>
            && (g_this_app_info->app_id != APP_ID_BTCALL))
//#endif
    {
        for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc1086e:	a0eb      	lbu	a3,11(s0)
bfc10870:	6800      	li	s0,0
bfc10872:	271d      	beqz	a3,bfc108ae <check_sniff_status+0x56>
bfc10874:	6b12      	li	v1,18
        {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
            if ((g_bt_stack_cur_info.rmt_dev[i].sniff_status == 0)
bfc10876:	e878      	mult	s0,v1
bfc10878:	b411      	lw	a0,bfc108bc <check_sniff_status+0x64>
bfc1087a:	ed12      	mflo	a1
bfc1087c:	e58d      	addu	v1,a1,a0
bfc1087e:	a354      	lbu	v0,20(v1)
bfc10880:	2a0f      	bnez	v0,bfc108a0 <check_sniff_status+0x48>
bfc10882:	a3d2      	lbu	a2,18(v1)
bfc10884:	2e03      	bnez	a2,bfc1088c <check_sniff_status+0x34>
bfc10886:	a3f3      	lbu	a3,19(v1)
bfc10888:	7701      	cmpi	a3,1
bfc1088a:	610a      	btnez	bfc108a0 <check_sniff_status+0x48>
bfc1088c:	f020 a44e 	lbu	v0,46(a0)
bfc10890:	7202      	cmpi	v0,2
bfc10892:	6003      	bteqz	bfc1089a <check_sniff_status+0x42>
bfc10894:	a395      	lbu	a0,21(v1)
bfc10896:	7401      	cmpi	a0,1
bfc10898:	6103      	btnez	bfc108a0 <check_sniff_status+0x48>
bfc1089a:	b30c      	lw	v1,bfc108c8 <check_sniff_status+0x70>
                    && ((g_bt_stack_cur_info.rmt_dev[i].a2dp_status != A2DP_STATUS_NONE)
                            || (g_bt_stack_cur_info.rmt_dev[i].hfp_status == HFP_STATUS_LINKED))
                    && ((g_bt_stack_cur_info.dev_role == 2)
                          || (g_bt_stack_cur_info.rmt_dev[i].dev_type == NO_TWS_DEV)))
#else
            if ((g_bt_stack_cur_info.rmt_dev[i].sniff_status == 0)
                    && ((g_bt_stack_cur_info.rmt_dev[i].a2dp_status != A2DP_STATUS_NONE)
                            || (g_bt_stack_cur_info.rmt_dev[i].hfp_status == HFP_STATUS_LINKED)))
#endif
            {
//#ifdef ENABLE_TRUE_WIRELESS_STEREO
              //do no    
//#else
              check_sniff_status_send_cmd(i);
bfc1089c:	eb40      	jalr	v1
bfc1089e:	6790      	move	a0,s0
bfc108a0:	b609      	lw	a2,bfc108c4 <check_sniff_status+0x6c>
bfc108a2:	40e1      	addiu	a3,s0,1
bfc108a4:	6707      	move	s0,a3
bfc108a6:	a6ab      	lbu	a1,11(a2)
bfc108a8:	e811      	zeb	s0
bfc108aa:	e8a3      	sltu	s0,a1
bfc108ac:	61e3      	btnez	bfc10874 <check_sniff_status+0x1c>
bfc108ae:	b206      	lw	v0,bfc108c4 <check_sniff_status+0x6c>
//#endif
            }
        }
    }
    g_btmanager_gl_var.sniff_timer_id = -1;
bfc108b0:	6c01      	li	a0,1
bfc108b2:	ec8b      	neg	a0
bfc108b4:	c289      	sb	a0,9(v0)
bfc108b6:	6463      	restore	24,ra,s0
bfc108b8:	e8a0      	jrc	ra
bfc108ba:	0000      	addiu	s0,sp,0
bfc108bc:	a2fc      	lbu	a3,28(v0)
bfc108be:	9fc1      	lw	a2,4(a3)
bfc108c0:	9990      	lw	a0,64(s1)
bfc108c2:	9fc1      	lw	a2,4(a3)
bfc108c4:	a33c      	lbu	s1,28(v1)
bfc108c6:	9fc1      	lw	a2,4(a3)
bfc108c8:	5d7d      	sltiu	a1,125
bfc108ca:	4882      	addiu	s0,-126

bfc108cc <com_btmanager_sniff_handle>:
bfc108cc:	64e3      	save	24,ra,s0
}

void __section__(".rcode") com_btmanager_sniff_handle(void)
{
bfc108ce:	b30b      	lw	v1,bfc108f8 <com_btmanager_sniff_handle+0x2c>
    //5s
    if ((g_bt_stack_cur_info.conn_status == CONN_STATUS_LINKED)
bfc108d0:	a340      	lbu	v0,0(v1)
bfc108d2:	7203      	cmpi	v0,3
bfc108d4:	610f      	btnez	bfc108f4 <com_btmanager_sniff_handle+0x28>
bfc108d6:	a382      	lbu	a0,2(v1)
bfc108d8:	7401      	cmpi	a0,1
bfc108da:	610c      	btnez	bfc108f4 <com_btmanager_sniff_handle+0x28>
bfc108dc:	b008      	lw	s0,bfc108fc <com_btmanager_sniff_handle+0x30>
            && (g_bt_stack_cur_info.controller_status == BT_CONTROLLER_STATUS_IDLE))
    {
        if (g_btmanager_gl_var.sniff_timer_id == -1)
bfc108de:	80a9      	lb	a1,9(s0)
bfc108e0:	ebaf      	not	v1,a1
bfc108e2:	2b08      	bnez	v1,bfc108f4 <com_btmanager_sniff_handle+0x28>
bfc108e4:	b607      	lw	a2,bfc10900 <com_btmanager_sniff_handle+0x34>
        {
            g_btmanager_gl_var.sniff_timer_id = set_single_shot_app_timer_btmamager(APP_TIMER_ATTRB_COM_CONTROL \
bfc108e6:	b208      	lw	v0,bfc10904 <com_btmanager_sniff_handle+0x38>
bfc108e8:	f71f 6c03 	li	a0,65283
bfc108ec:	f7c0 6d10 	li	a1,2000
bfc108f0:	eac0      	jalrc	v0
bfc108f2:	c049      	sb	v0,9(s0)
bfc108f4:	6463      	restore	24,ra,s0
            | (APP_TIMER_TAG_SYS << 8),2000, check_sniff_status);
        }
    }
}
bfc108f6:	e8a0      	jrc	ra
bfc108f8:	a2fc      	lbu	a3,28(v0)
bfc108fa:	9fc1      	lw	a2,4(a3)
bfc108fc:	a33c      	lbu	s1,28(v1)
bfc108fe:	9fc1      	lw	a2,4(a3)
bfc10900:	0859      	la	s0,bfc10a64 <com_rcp_dispatch+0x4>
bfc10902:	bfc1      	lwu	a2,4(a3)
bfc10904:	5c4d      	sltiu	a0,77
bfc10906:	488e      	addiu	s0,-114

bfc10908 <com_btmanager_loop>:
bfc10908:	64f7      	save	56,ra,s0-s1

void change_btmanager_status(btmanager_status_e status)
{
    if (status == BTMANAGER_STATUS_IDLE)
    {
        adjust_freq_set_level(AP_BT_HIGH_PRIO, FREQ_LEVEL1, FREQ_NULL);
        g_btmanager_gl_var.btmanager_status = BTMANAGER_STATUS_IDLE;
        PRINT_INFO("BT MANAGER IDLE");
    }
    else if (status == BTMANAGER_STATUS_WORKING)
    {
        adjust_freq_set_level(AP_BT_HIGH_PRIO, FREQ_LEVEL6, FREQ_NULL);
        g_btmanager_gl_var.btmanager_status = BTMANAGER_STATUS_WORKING;
        PRINT_INFO("BT MANAGER WORKING");
    }
    else if (status == BTMANAGER_STATUS_LINKING)
    {
        if (g_btmanager_gl_var.btmanager_status != BTMANAGER_STATUS_LINKING)
        {
            adjust_freq_set_level(AP_BT_HIGH_PRIO, FREQ_LEVEL10, FREQ_NULL);
            g_btmanager_gl_var.btmanager_status = BTMANAGER_STATUS_LINKING;
            PRINT_INFO("BT MANAGER LINKING");
            g_btmanager_gl_var.linking_timer = 0;
        }
    }
    else
    {
        adjust_freq_set_level(AP_BT_HIGH_PRIO, FREQ_LEVEL11, FREQ_NULL);
        g_btmanager_gl_var.btmanager_status = BTMANAGER_STATUS_POWERON;
        PRINT_INFO("BT MANAGER POWERON");
    }
}

#ifdef ENABLE_TRUE_WIRELESS_STEREO

void __section__(".bank") com_btmanager_ble_deal(void)
{
	 if(g_bt_stack_cur_info.dev_role==TWS_SLAVE)
	 {
	     if(g_bt_stack_cur_info.ble_con_flag==0)
	     {
	     	   //disable advertise
	     	   com_set_ble_discoverable(0);
	     	   g_btmanager_gl_var.last_role = g_bt_stack_cur_info.dev_role;
	     }
	     else 
	     {
	     	  //disconect ble
	     	  com_btmanager_unlink_spp_ble_profile(1);
	     }
	 }
	 else 
	 {
	     if(g_btmanager_gl_var.last_role == TWS_SLAVE)
	     {
	         //disable advertise
	         com_set_ble_discoverable(1);
	     }
	     g_btmanager_gl_var.last_role = g_bt_stack_cur_info.dev_role;
	 }
	 
}

void com_btmanager_ble_deal(void) __FAR__;

#endif //#ifdef ENABLE_TRUE_WIRELESS_STEREO

app_result_e __section__(".rcode") com_btmanager_loop(bool tts_flag)
{
bfc1090a:	ec11      	zeb	a0
bfc1090c:	d408      	sw	a0,32(sp)
bfc1090e:	6d02      	li	a1,2
    btstack_event_t btstack_ev;
    app_result_e result = RESULT_NONE_EVENT;
bfc10910:	b448      	lw	a0,bfc10a30 <.L188+0x1e>
    uint8 i;

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
bfc10912:	d509      	sw	a1,36(sp)
bfc10914:	9309      	lw	v1,36(sp)
    {
        return RESULT_NONE_EVENT;
bfc10916:	a44c      	lbu	v0,12(a0)
bfc10918:	651b      	move	t8,v1
bfc1091a:	f080 2206 	beqz	v0,bfc10a2a <.L188+0x18>
bfc1091e:	b246      	lw	v0,bfc10a34 <.L188+0x22>
    }

    get_bt_stack_info();
bfc10920:	eac0      	jalrc	v0
bfc10922:	b346      	lw	v1,bfc10a38 <.L188+0x26>

    if (g_bt_stack_cur_info.conn_status == CONN_STATUS_NONE)
bfc10924:	9709      	lw	a3,36(sp)
    {
        return RESULT_NONE_EVENT;
bfc10926:	a3c0      	lbu	a2,0(v1)
bfc10928:	651f      	move	t8,a3
bfc1092a:	267f      	beqz	a2,bfc10a2a <.L188+0x18>
bfc1092c:	a302      	lbu	s0,2(v1)
    }

    if (g_bt_stack_cur_info.controller_status == BT_CONTROLLER_STATUS_IDLE)
bfc1092e:	b244      	lw	v0,bfc10a3c <.L188+0x2a>
bfc10930:	7001      	cmpi	s0,1
bfc10932:	6121      	btnez	bfc10976 <.LBE7>

bfc10934 <.LBB7>:
bfc10934:	6800      	li	s0,0
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
		uint8 k = 0;
bfc10936:	6730      	move	s1,s0
		for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
bfc10938:	a26b      	lbu	v1,11(v0)
bfc1093a:	e863      	sltu	s0,v1
bfc1093c:	6021      	bteqz	bfc10980 <.LBE7+0xa>
bfc1093e:	6f12      	li	a3,18
		{
		         if (g_bt_stack_cur_info.rmt_dev[i].sniff_status == 1)
bfc10940:	e8f8      	mult	s0,a3
bfc10942:	b33e      	lw	v1,bfc10a38 <.L188+0x26>
bfc10944:	ee12      	mflo	a2
bfc10946:	e675      	addu	a1,a2,v1
bfc10948:	a594      	lbu	a0,20(a1)
bfc1094a:	7401      	cmpi	a0,1
bfc1094c:	6103      	btnez	bfc10954 <.LBB7+0x20>
bfc1094e:	4141      	addiu	v0,s1,1
		         {
		           k++;	
bfc10950:	6722      	move	s1,v0
bfc10952:	e911      	zeb	s1
bfc10954:	a380      	lbu	a0,0(v1)
		         }	
		         
		         if ((g_bt_stack_cur_info.conn_status != CONN_STATUS_LINKED)
bfc10956:	7403      	cmpi	a0,3
bfc10958:	6103      	btnez	bfc10960 <.LBB7+0x2c>
bfc1095a:	a3a3      	lbu	a1,3(v1)
bfc1095c:	ed2e      	xor	a1,s1
bfc1095e:	2d06      	bnez	a1,bfc1096c <.LBB7+0x38>
bfc10960:	b637      	lw	a2,bfc10a3c <.L188+0x2a>
		         	   ||(k == g_bt_stack_cur_info.num_connected))
	            //    || (g_bt_stack_cur_info.rmt_dev[i].sniff_status == 1)||(g_bt_stack_cur_info.dev_role==2)
	            //    || (g_bt_stack_cur_info.rmt_dev[i].sniff_status == 1)||(g_bt_stack_cur_info.dev_role!=0)
	            //    ||(g_bt_stack_cur_info.tws_master_phonecon==1)) //TODO 多手机还不支持
		        {
		            //设置BT MANAGER状态为“空闲”
		            if (g_btmanager_gl_var.btmanager_status != BTMANAGER_STATUS_IDLE)
bfc10962:	a66f      	lbu	v1,15(a2)
bfc10964:	2303      	beqz	v1,bfc1096c <.LBB7+0x38>
bfc10966:	b237      	lw	v0,bfc10a40 <.L188+0x2e>
		            {
		                change_btmanager_status(BTMANAGER_STATUS_IDLE);
bfc10968:	ea40      	jalr	v0
bfc1096a:	6c00      	li	a0,0
bfc1096c:	40e1      	addiu	a3,s0,1
bfc1096e:	6707      	move	s0,a3
bfc10970:	b233      	lw	v0,bfc10a3c <.L188+0x2a>
bfc10972:	e811      	zeb	s0
bfc10974:	17e1      	b	bfc10938 <.LBB7+0x4>

bfc10976 <.LBE7>:
bfc10976:	a22f      	lbu	s1,15(v0)
		            }
		        }
		}
#else
        if ((g_bt_stack_cur_info.conn_status != CONN_STATUS_LINKED)
            || (g_bt_stack_cur_info.rmt_dev[0].sniff_status == 1)) //TODO 多手机还不支持
        {
            //设置BT MANAGER状态为“空闲”
            if (g_btmanager_gl_var.btmanager_status != BTMANAGER_STATUS_IDLE)
            {
                change_btmanager_status(BTMANAGER_STATUS_IDLE);
            }
        }

#endif
	
    }
    else
    {
        //设置BT MANAGER状态为“工作”
        if (g_btmanager_gl_var.btmanager_status == BTMANAGER_STATUS_IDLE)
bfc10978:	2903      	bnez	s1,bfc10980 <.LBE7+0xa>
bfc1097a:	b032      	lw	s0,bfc10a40 <.L188+0x2e>
        {
            change_btmanager_status(BTMANAGER_STATUS_WORKING);
bfc1097c:	e840      	jalr	s0
bfc1097e:	6c01      	li	a0,1
bfc10980:	b12e      	lw	s1,bfc10a38 <.L188+0x26>
        }
    }

    if (g_bt_stack_cur_info.num_connected > g_btmanager_gl_var.last_num_connected)
bfc10982:	b02f      	lw	s0,bfc10a3c <.L188+0x2a>
bfc10984:	a183      	lbu	a0,3(s1)
bfc10986:	a0a6      	lbu	a1,6(s0)
bfc10988:	ed83      	sltu	a1,a0
bfc1098a:	6003      	bteqz	bfc10992 <.LBE7+0x1c>
bfc1098c:	b32d      	lw	v1,bfc10a40 <.L188+0x2e>
    {
        //设置BT MANAGER状态为“连接”
        change_btmanager_status(BTMANAGER_STATUS_LINKING);
bfc1098e:	eb40      	jalr	v1
bfc10990:	6c02      	li	a0,2
bfc10992:	a1c0      	lbu	a2,0(s1)
    }
    g_btmanager_gl_var.last_num_connected = g_bt_stack_cur_info.num_connected;

    if (g_bt_stack_cur_info.conn_status != g_btmanager_gl_var.last_conn_status)
bfc10994:	a043      	lbu	v0,3(s0)
bfc10996:	a1e3      	lbu	a3,3(s1)
bfc10998:	ee4e      	xor	a2,v0
bfc1099a:	c0e6      	sb	a3,6(s0)
bfc1099c:	2605      	beqz	a2,bfc109a8 <.LBE7+0x32>
bfc1099e:	b32a      	lw	v1,bfc10a44 <.L188+0x32>
    {
      //  libc_print("--Last_con--", g_btmanager_gl_var.last_conn_status,2);
        com_btmanager_conn_status_change_handle(FALSE);
bfc109a0:	eb40      	jalr	v1
bfc109a2:	6c00      	li	a0,0
bfc109a4:	6c00      	li	a0,0
        result = RESULT_NULL; //表示有事件发生，但是不需要处理；后续还有其他监控模块也应该采用类似方式表示有事件发生
bfc109a6:	d409      	sw	a0,36(sp)
bfc109a8:	a1e0      	lbu	a3,0(s1)
    }
    g_btmanager_gl_var.last_conn_status = g_bt_stack_cur_info.conn_status;
bfc109aa:	1a1f 4168 	jal	bfc105a0 <com_btmanager_discoverable_handle>

    com_btmanager_discoverable_handle();
bfc109ae:	c0e3      	sb	a3,3(s0)
bfc109b0:	1a1f 4196 	jal	bfc10658 <com_btmanager_a2dp_handle>
    com_btmanager_a2dp_handle();
bfc109b4:	6500      	nop
bfc109b6:	1a1f 41cc 	jal	bfc10730 <com_btmanager_hfp_handle>
    com_btmanager_hfp_handle();
bfc109ba:	6500      	nop
bfc109bc:	b323      	lw	v1,bfc10a48 <.L188+0x36>
    com_btmanager_battery_handle();
bfc109be:	ebc0      	jalrc	v1
bfc109c0:	b223      	lw	v0,bfc10a48 <.L188+0x36>
    com_btmanager_sniff_handle();
bfc109c2:	eac0      	jalrc	v0
bfc109c4:	1a1f 4187 	jal	bfc1061c <com_btmanager_mod_change>

#ifdef ENABLE_TRUE_WIRELESS_STEREO
    com_btmanager_mod_change();
bfc109c8:	6500      	nop
bfc109ca:	a0b4      	lbu	a1,20(s0)
    if(g_btmanager_gl_var.last_role != g_bt_stack_cur_info.dev_role)
bfc109cc:	f020 a1ce 	lbu	a2,46(s1)
bfc109d0:	edce      	xor	a1,a2
bfc109d2:	2502      	beqz	a1,bfc109d8 <.LBE7+0x62>
bfc109d4:	b21f      	lw	v0,bfc10a50 <.L188+0x3e>
    {
        com_btmanager_ble_deal();
bfc109d6:	eac0      	jalrc	v0
bfc109d8:	9408      	lw	a0,32(sp)
    }    
#endif

    //接收蓝牙协议栈事件，包括RCP事件
    if (tts_flag == TRUE)
bfc109da:	7401      	cmpi	a0,1
bfc109dc:	610e      	btnez	bfc109fa <.LBE7+0x84>
bfc109de:	b21e      	lw	v0,bfc10a54 <.L188+0x42>
    {
        if (sys_mq_traverse(MQ_ID_RES, (void *) &btstack_ev, 0) > 0)
bfc109e0:	6c04      	li	a0,4
bfc109e2:	0504      	addiu	a1,sp,16
bfc109e4:	6e00      	li	a2,0
bfc109e6:	ea40      	jalr	v0
bfc109e8:	6f3f      	li	a3,63
bfc109ea:	5201      	slti	v0,1
bfc109ec:	6106      	btnez	bfc109fa <.LBE7+0x84>
bfc109ee:	b21b      	lw	v0,bfc10a58 <.L188+0x46>
        {
            result = com_btmanager_event_check_for_tts(&btstack_ev);
bfc109f0:	ea40      	jalr	v0
bfc109f2:	0404      	addiu	a0,sp,16
bfc109f4:	7285      	cmpi	v0,133
            if (result == RESULT_FORCE_TTS_STOP)
bfc109f6:	d209      	sw	v0,36(sp)
bfc109f8:	600c      	bteqz	bfc10a12 <.L188>
bfc109fa:	b217      	lw	v0,bfc10a54 <.L188+0x42>
            {
                goto bt_manager_loop_exit;
            }
        }
    }

    if (sys_mq_receive((uint32) (MQ_ID_RES), (void *) &btstack_ev) == 0)
bfc109fc:	6c04      	li	a0,4
bfc109fe:	0504      	addiu	a1,sp,16
bfc10a00:	6e00      	li	a2,0
bfc10a02:	ea40      	jalr	v0
bfc10a04:	6f19      	li	a3,25
bfc10a06:	2a05      	bnez	v0,bfc10a12 <.L188>
bfc10a08:	9508      	lw	a1,32(sp)
    {
        result = com_btmanager_event_dispatch(&btstack_ev, tts_flag);
bfc10a0a:	b215      	lw	v0,bfc10a5c <.L188+0x4a>
bfc10a0c:	ea40      	jalr	v0
bfc10a0e:	0404      	addiu	a0,sp,16
bfc10a10:	d209      	sw	v0,36(sp)

bfc10a12 <.L188>:
bfc10a12:	b20a      	lw	v0,bfc10a38 <.L188+0x26>
    }

    bt_manager_loop_exit:
    g_btmanager_gl_var.last_a2dp_status = g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].a2dp_status;
bfc10a14:	6d12      	li	a1,18
bfc10a16:	f020 a2c8 	lbu	a2,40(v0)
bfc10a1a:	eeb8      	mult	a2,a1
bfc10a1c:	b608      	lw	a2,bfc10a3c <.L188+0x2a>
bfc10a1e:	ec12      	mflo	a0
bfc10a20:	9509      	lw	a1,36(sp)

    return result;
bfc10a22:	e45d      	addu	a3,a0,v0
bfc10a24:	a772      	lbu	v1,18(a3)
bfc10a26:	651d      	move	t8,a1
bfc10a28:	c662      	sb	v1,2(a2)
bfc10a2a:	6758      	move	v0,t8
}
bfc10a2c:	6477      	restore	56,ra,s0-s1
bfc10a2e:	e8a0      	jrc	ra
bfc10a30:	a080      	lbu	a0,0(s0)
bfc10a32:	9fc1      	lw	a2,4(a3)
bfc10a34:	0501      	addiu	a1,sp,4
bfc10a36:	bfc1      	lwu	a2,4(a3)
bfc10a38:	a2fc      	lbu	a3,28(v0)
bfc10a3a:	9fc1      	lw	a2,4(a3)
bfc10a3c:	a33c      	lbu	s1,28(v1)
bfc10a3e:	9fc1      	lw	a2,4(a3)
bfc10a40:	5dc5      	sltiu	a1,197
bfc10a42:	4882      	addiu	s0,-126
bfc10a44:	5edd      	sltiu	a2,221
bfc10a46:	4882      	addiu	s0,-126
bfc10a48:	07b5      	addiu	a3,sp,724
bfc10a4a:	bfc1      	lwu	a2,4(a3)
bfc10a4c:	08cd      	la	s0,bfc10d80 <send_sync_msg_btmanager+0x6c>
bfc10a4e:	bfc1      	lwu	a2,4(a3)
bfc10a50:	5cb9      	sltiu	a0,185
bfc10a52:	4886      	addiu	s0,-122
bfc10a54:	e901      	sdbbp	8
bfc10a56:	bfc1      	lwu	a2,4(a3)
bfc10a58:	5801      	sltiu	s0,1
bfc10a5a:	48ae      	addiu	s0,-82
bfc10a5c:	5ed9      	sltiu	a2,217
bfc10a5e:	482a      	addiu	s0,42

bfc10a60 <com_rcp_dispatch>:
bfc10a60:	64f6      	save	48,ra,s0-s1
void com_rcp_dispatch_invalid(uint8 *rcp_data, uint16 rcp_len, uint8 rcp_serv) __FAR__;

/*RCP 远程控制数据包解析处理*/
app_result_e __section__(".rcode") com_rcp_dispatch(rmt_ctrl_pkg_t *p_rcp)
{
bfc10a62:	b32d      	lw	v1,bfc10b14 <.L53+0x6>
#if (SUPPORT_RCP_FUNC == 1)

    rmt_ctrl_pkg_t dispatch_rcp;
    rcp_state_e cur_rcp_state;
    bool dispatch_rcp_flag = FALSE;
    app_result_e result = RESULT_NULL;

#if 0
    PRINT_INFO("com recv:");
    PRINT_DATA(p_rcp->rcp_data, p_rcp->rcp_len);
#endif

    //if((uint8) com_get_config_default(BTSTACK_ENABLE_WEIXIN) == 1)
    //{
        //音箱端验证APK/APP
        //g_app_info_state.verification_status = VERIFICATION_PASS;
    //}
    //libc_print("ver",g_app_info_state.verification_status,2);
#if 0    
    if((uint8)com_get_config_default(BTSTACK_ENABLE_WEIXIN)!=0)
    {
        g_app_info_state.verification_status = VERIFICATION_PASS; 
    } 
#endif
       
    if (g_app_info_state.verification_status == VERIFICATION_PASS)
bfc10a64:	6724      	move	s1,a0
bfc10a66:	a355      	lbu	v0,21(v1)
bfc10a68:	6c00      	li	a0,0
bfc10a6a:	7202      	cmpi	v0,2
bfc10a6c:	d407      	sw	a0,28(sp)
bfc10a6e:	d406      	sw	a0,24(sp)
bfc10a70:	614a      	btnez	bfc10b06 <com_rcp_dispatch+0xa6>
bfc10a72:	b52a      	lw	a1,bfc10b18 <.L53+0xa>
    {
        if ((g_rcp_long_buffer_flag == FALSE) && (p_rcp->rcp_len < 4))
bfc10a74:	a540      	lbu	v0,0(a1)
bfc10a76:	2a0d      	bnez	v0,bfc10a92 <com_rcp_dispatch+0x32>
bfc10a78:	a9a2      	lhu	a1,4(s1)
bfc10a7a:	5d04      	sltiu	a1,4
bfc10a7c:	600a      	bteqz	bfc10a92 <com_rcp_dispatch+0x32>
bfc10a7e:	b028      	lw	s0,bfc10b1c <.L53+0xe>
        {
            com_btmanager_sppble_read(g_rcp_long_buffer, p_rcp->rcp_len);
bfc10a80:	b228      	lw	v0,bfc10b20 <.L53+0x12>
bfc10a82:	ea40      	jalr	v0
bfc10a84:	9880      	lw	a0,0(s0)
bfc10a86:	9880      	lw	a0,0(s0)
            //非法包，直接丢弃；直通模式需要在这里处理
            
            com_rcp_dispatch_invalid(g_rcp_long_buffer, p_rcp->rcp_len, p_rcp->rcp_flag);
bfc10a88:	a9a2      	lhu	a1,4(s1)
bfc10a8a:	b227      	lw	v0,bfc10b24 <.L53+0x16>
bfc10a8c:	ea40      	jalr	v0
bfc10a8e:	a1c6      	lbu	a2,6(s1)
bfc10a90:	103e      	b	bfc10b0e <.L53>
            goto rcp_deal_ok;
bfc10a92:	2a39      	bnez	v0,bfc10b06 <com_rcp_dispatch+0xa6>
        }
    }
    else
    {
        result = com_rcp_dispatch_bank(p_rcp);
        goto rcp_deal_ok;
    }

    if ((g_rcp_long_buffer_flag == FALSE) && (p_rcp->rcp_len == RCP_COMMAND_HEAD_SIZE)) //有可能是获取全局状态命令
bfc10a94:	a9c2      	lhu	a2,4(s1)
bfc10a96:	7610      	cmpi	a2,16
bfc10a98:	6136      	btnez	bfc10b06 <com_rcp_dispatch+0xa6>
bfc10a9a:	b021      	lw	s0,bfc10b1c <.L53+0xe>
    {
        //检验是否合法 RCP
        com_btmanager_sppble_read(g_rcp_long_buffer, RCP_COMMAND_HEAD_SIZE);
bfc10a9c:	b221      	lw	v0,bfc10b20 <.L53+0x12>
bfc10a9e:	9880      	lw	a0,0(s0)
bfc10aa0:	ea40      	jalr	v0
bfc10aa2:	6d10      	li	a1,16
bfc10aa4:	9880      	lw	a0,0(s0)

        cur_rcp_state = com_check_valid_rcp(g_rcp_long_buffer, RCP_COMMAND_HEAD_SIZE);
bfc10aa6:	b222      	lw	v0,bfc10b2c <.L53+0x1e>
bfc10aa8:	ea40      	jalr	v0
bfc10aaa:	6d10      	li	a1,16
bfc10aac:	7201      	cmpi	v0,1
        if (cur_rcp_state == RCP_STATE_OK)
bfc10aae:	6106      	btnez	bfc10abc <com_rcp_dispatch+0x5c>
bfc10ab0:	b420      	lw	a0,bfc10b30 <.L53+0x22>
        {
            g_rcp_long_length = RCP_COMMAND_HEAD_SIZE;
bfc10ab2:	6b10      	li	v1,16
bfc10ab4:	6f01      	li	a3,1
            dispatch_rcp_flag = TRUE;
bfc10ab6:	cc60      	sh	v1,0(a0)
bfc10ab8:	d706      	sw	a3,24(sp)
bfc10aba:	1014      	b	bfc10ae4 <com_rcp_dispatch+0x84>
bfc10abc:	7202      	cmpi	v0,2
        }
        else
        {
            if (cur_rcp_state == RCP_STATE_HEAD)
bfc10abe:	9880      	lw	a0,0(s0)
bfc10ac0:	610d      	btnez	bfc10adc <com_rcp_dispatch+0x7c>
bfc10ac2:	a447      	lbu	v0,7(a0)
            { //分段传输段首
                g_rcp_long_length = COMMAND_LENGTH(g_rcp_long_buffer);
bfc10ac4:	a466      	lbu	v1,6(a0)
bfc10ac6:	3640      	sll	a2,v0,8
bfc10ac8:	b41a      	lw	a0,bfc10b30 <.L53+0x22>
bfc10aca:	e675      	addu	a1,a2,v1
bfc10acc:	cca0      	sh	a1,0(a0)
bfc10ace:	b21a      	lw	v0,bfc10b34 <.L53+0x26>
                g_rcp_long_index = RCP_COMMAND_HEAD_SIZE;
bfc10ad0:	b512      	lw	a1,bfc10b18 <.L53+0xa>
                g_rcp_long_buffer_flag = TRUE;
bfc10ad2:	6f10      	li	a3,16
bfc10ad4:	6e01      	li	a2,1
bfc10ad6:	cae0      	sh	a3,0(v0)
bfc10ad8:	c5c0      	sb	a2,0(a1)
bfc10ada:	1004      	b	bfc10ae4 <com_rcp_dispatch+0x84>
bfc10adc:	a1c6      	lbu	a2,6(s1)
            }
            else
            { //非法包，直接丢弃；直通模式需要在这里处理
                com_rcp_dispatch_invalid(g_rcp_long_buffer, RCP_COMMAND_HEAD_SIZE, p_rcp->rcp_flag);
bfc10ade:	b312      	lw	v1,bfc10b24 <.L53+0x16>
bfc10ae0:	eb40      	jalr	v1
bfc10ae2:	6d10      	li	a1,16
bfc10ae4:	9706      	lw	a3,24(sp)
            }
        }

        if (dispatch_rcp_flag == TRUE)
bfc10ae6:	2713      	beqz	a3,bfc10b0e <.L53>
bfc10ae8:	b50d      	lw	a1,bfc10b1c <.L53+0xe>
        {
            dispatch_rcp.rcp_data = g_rcp_long_buffer;
bfc10aea:	b712      	lw	a3,bfc10b30 <.L53+0x22>
            dispatch_rcp.rcp_len = g_rcp_long_length;
bfc10aec:	9d80      	lw	a0,0(a1)
bfc10aee:	af60      	lhu	v1,0(a3)
bfc10af0:	67dd      	move	a2,sp
bfc10af2:	b212      	lw	v0,bfc10b38 <.L53+0x2a>

            //分发给RCP命令解析
            result = com_rcp_cmd_dispatch(&dispatch_rcp);
bfc10af4:	d404      	sw	a0,16(sp)
bfc10af6:	ce6a      	sh	v1,20(a2)
bfc10af8:	ea40      	jalr	v0
bfc10afa:	0404      	addiu	a0,sp,16
bfc10afc:	b407      	lw	a0,bfc10b18 <.L53+0xa>

            g_rcp_long_buffer_flag = FALSE;
bfc10afe:	6d00      	li	a1,0
bfc10b00:	d207      	sw	v0,28(sp)
bfc10b02:	c4a0      	sb	a1,0(a0)
bfc10b04:	1004      	b	bfc10b0e <.L53>
            dispatch_rcp_flag = FALSE;
bfc10b06:	b209      	lw	v0,bfc10b28 <.L53+0x1a>
        }
    }
    else
    {
        result = com_rcp_dispatch_bank(p_rcp);
bfc10b08:	ea40      	jalr	v0
bfc10b0a:	6791      	move	a0,s1
bfc10b0c:	d207      	sw	v0,28(sp)

bfc10b0e <.L53>:
bfc10b0e:	9207      	lw	v0,28(sp)
    }

    rcp_deal_ok:

    return result;

#else
    return RESULT_NULL;
#endif
}
bfc10b10:	6476      	restore	48,ra,s0-s1
bfc10b12:	e8a0      	jrc	ra
bfc10b14:	a0c0      	lbu	a2,0(s0)
bfc10b16:	9fc1      	lw	a2,4(a3)
bfc10b18:	a2a0      	lbu	a1,0(v0)
bfc10b1a:	9fc1      	lw	a2,4(a3)
bfc10b1c:	a298      	lbu	a0,24(v0)
bfc10b1e:	9fc1      	lw	a2,4(a3)
bfc10b20:	0c69      	la	a0,bfc10cc4 <com_btmanager_sppble_read+0x5c>
bfc10b22:	bfc1      	lwu	a2,4(a3)
bfc10b24:	5801      	sltiu	s0,1
bfc10b26:	4842      	addiu	s0,66
bfc10b28:	5821      	sltiu	s0,33
bfc10b2a:	4842      	addiu	s0,66
bfc10b2c:	0b6d      	la	v1,bfc10ce0 <com_btmanager_sppble_read+0x78>
bfc10b2e:	bfc1      	lwu	a2,4(a3)
bfc10b30:	a29c      	lbu	a0,28(v0)
bfc10b32:	9fc1      	lw	a2,4(a3)
bfc10b34:	a29e      	lbu	a0,30(v0)
bfc10b36:	9fc1      	lw	a2,4(a3)
bfc10b38:	0ba9      	la	v1,bfc10ddc <com_detect_energy_realtime+0x14>
bfc10b3a:	bfc1      	lwu	a2,4(a3)

bfc10b3c <aset_test_loop_deal>:
bfc10b3c:	64c3      	save	24,ra

void aset_loop_deal(void) __FAR__;

void __section__(".rcode") aset_test_loop_deal(void)
{
bfc10b3e:	6c00      	li	a0,0
    uint32 tmp_ab_timer = sys_get_ab_timer();
bfc10b40:	b208      	lw	v0,bfc10b60 <aset_test_loop_deal+0x24>
bfc10b42:	67a4      	move	a1,a0
bfc10b44:	67c4      	move	a2,a0
bfc10b46:	ea40      	jalr	v0
bfc10b48:	6f1c      	li	a3,28
bfc10b4a:	b407      	lw	a0,bfc10b64 <aset_test_loop_deal+0x28>

#ifdef WAVES_ASET_TOOLS 

    aset_loop_deal();

#else
    //200ms执行一次任务
    if ((tmp_ab_timer - g_aset_base_timer) >= 200)
bfc10b4c:	6762      	move	v1,v0
bfc10b4e:	9ca0      	lw	a1,0(a0)
bfc10b50:	e2ab      	subu	v0,a1
bfc10b52:	5ac8      	sltiu	v0,200
bfc10b54:	6103      	btnez	bfc10b5c <aset_test_loop_deal+0x20>
bfc10b56:	dc60      	sw	v1,0(a0)
    {
        g_aset_base_timer = tmp_ab_timer;
bfc10b58:	b304      	lw	v1,bfc10b68 <aset_test_loop_deal+0x2c>

        aset_loop_deal();
bfc10b5a:	ebc0      	jalrc	v1
bfc10b5c:	6443      	restore	24,ra

    }
#endif

}
bfc10b5e:	e8a0      	jrc	ra
bfc10b60:	e901      	sdbbp	8
bfc10b62:	bfc1      	lwu	a2,4(a3)
bfc10b64:	a2b4      	lbu	a1,20(v0)
bfc10b66:	9fc1      	lw	a2,4(a3)
bfc10b68:	5b6d      	sltiu	v1,109
bfc10b6a:	4856      	addiu	s0,86

bfc10b6c <com_check_valid_rcp>:
bfc10b6c:	a447      	lbu	v0,7(a0)
bfc10b6e:	a466      	lbu	v1,6(a0)
bfc10b70:	67c5      	move	a2,a1
bfc10b72:	3540      	sll	a1,v0,8
bfc10b74:	a440      	lbu	v0,0(a0)
bfc10b76:	e57d      	addu	a3,a1,v1
bfc10b78:	67a7      	move	a1,a3
bfc10b7a:	7201      	cmpi	v0,1
bfc10b7c:	ee31      	zeh	a2
bfc10b7e:	ed31      	zeh	a1
bfc10b80:	a461      	lbu	v1,1(a0)
bfc10b82:	6106      	btnez	bfc10b90 <com_check_valid_rcp+0x24>
bfc10b84:	73fe      	cmpi	v1,254
bfc10b86:	6104      	btnez	bfc10b90 <com_check_valid_rcp+0x24>
bfc10b88:	b707      	lw	a3,bfc10ba4 <com_check_valid_rcp+0x38>
bfc10b8a:	af80      	lhu	a0,0(a3)
bfc10b8c:	eca3      	sltu	a0,a1
bfc10b8e:	6002      	bteqz	bfc10b94 <com_check_valid_rcp+0x28>
bfc10b90:	e820      	jr	ra
bfc10b92:	6a00      	li	v0,0
bfc10b94:	eea3      	sltu	a2,a1
bfc10b96:	6778      	move	v1,t8
bfc10b98:	5b01      	sltiu	v1,1
bfc10b9a:	6e02      	li	a2,2
bfc10b9c:	67b8      	move	a1,t8
bfc10b9e:	e820      	jr	ra
bfc10ba0:	e6ab      	subu	v0,a2,a1
bfc10ba2:	0000      	addiu	s0,sp,0
bfc10ba4:	a2a2      	lbu	a1,2(v0)
bfc10ba6:	9fc1      	lw	a2,4(a3)

bfc10ba8 <com_rcp_cmd_dispatch>:
bfc10ba8:	64f6      	save	48,ra,s0-s1
bfc10baa:	b318      	lw	v1,bfc10c08 <com_rcp_cmd_dispatch+0x60>
bfc10bac:	6724      	move	s1,a0
bfc10bae:	eb40      	jalr	v1
bfc10bb0:	6800      	li	s0,0
bfc10bb2:	99a0      	lw	a1,0(s1)
bfc10bb4:	b216      	lw	v0,bfc10c0c <com_rcp_cmd_dispatch+0x64>
bfc10bb6:	0404      	addiu	a0,sp,16
bfc10bb8:	6e10      	li	a2,16
bfc10bba:	ea40      	jalr	v0
bfc10bbc:	67f0      	move	a3,s0
bfc10bbe:	a942      	lhu	v0,4(s1)
bfc10bc0:	67b0      	move	a1,s0
bfc10bc2:	5a11      	sltiu	v0,17
bfc10bc4:	6102      	btnez	bfc10bca <com_rcp_cmd_dispatch+0x22>
bfc10bc6:	99a0      	lw	a1,0(s1)
bfc10bc8:	4d10      	addiu	a1,16
bfc10bca:	679d      	move	a0,sp
bfc10bcc:	b311      	lw	v1,bfc10c10 <com_rcp_cmd_dispatch+0x68>
bfc10bce:	a4d2      	lbu	a2,18(a0)
bfc10bd0:	a453      	lbu	v0,19(a0)
bfc10bd2:	a415      	lbu	s0,21(a0)
bfc10bd4:	b710      	lw	a3,bfc10c14 <com_rcp_cmd_dispatch+0x6c>
bfc10bd6:	c3c0      	sb	a2,0(v1)
bfc10bd8:	c341      	sb	v0,1(v1)
bfc10bda:	c700      	sb	s0,0(a3)
bfc10bdc:	acca      	lhu	a2,20(a0)
bfc10bde:	7651      	cmpi	a2,81
bfc10be0:	610a      	btnez	bfc10bf6 <com_rcp_cmd_dispatch+0x4e>
bfc10be2:	b50f      	lw	a1,bfc10c1c <com_rcp_cmd_dispatch+0x74>
bfc10be4:	b40d      	lw	a0,bfc10c18 <com_rcp_cmd_dispatch+0x70>
bfc10be6:	9d40      	lw	v0,0(a1)
bfc10be8:	6f00      	li	a3,0
bfc10bea:	c4e0      	sb	a3,0(a0)
bfc10bec:	9507      	lw	a1,28(sp)
bfc10bee:	9406      	lw	a0,24(sp)
bfc10bf0:	2a04      	bnez	v0,bfc10bfa <com_rcp_cmd_dispatch+0x52>
bfc10bf2:	b20c      	lw	v0,bfc10c20 <com_rcp_cmd_dispatch+0x78>
bfc10bf4:	1002      	b	bfc10bfa <com_rcp_cmd_dispatch+0x52>
bfc10bf6:	b20c      	lw	v0,bfc10c24 <com_rcp_cmd_dispatch+0x7c>
bfc10bf8:	0404      	addiu	a0,sp,16
bfc10bfa:	eac0      	jalrc	v0
bfc10bfc:	b30b      	lw	v1,bfc10c24 <com_rcp_cmd_dispatch+0x7c>
bfc10bfe:	eb40      	jalr	v1
bfc10c00:	6702      	move	s0,v0
bfc10c02:	6750      	move	v0,s0
bfc10c04:	6476      	restore	48,ra,s0-s1
bfc10c06:	e8a0      	jrc	ra
bfc10c08:	0c2d      	la	a0,bfc10cb8 <com_btmanager_sppble_read+0x50>
bfc10c0a:	bfc1      	lwu	a2,4(a3)
bfc10c0c:	e905      	break	8
bfc10c0e:	bfc1      	lwu	a2,4(a3)
bfc10c10:	a290      	lbu	a0,16(v0)
bfc10c12:	9fc1      	lw	a2,4(a3)
bfc10c14:	a292      	lbu	a0,18(v0)
bfc10c16:	9fc1      	lw	a2,4(a3)
bfc10c18:	a294      	lbu	a0,20(v0)
bfc10c1a:	9fc1      	lw	a2,4(a3)
bfc10c1c:	a250      	lbu	v0,16(v0)
bfc10c1e:	9fc1      	lw	a2,4(a3)
bfc10c20:	0c4d      	la	a0,bfc10d54 <send_sync_msg_btmanager+0x40>
bfc10c22:	bfc1      	lwu	a2,4(a3)
bfc10c24:	5c31      	sltiu	a0,49
bfc10c26:	4842      	addiu	s0,66
bfc10c28:	0c45      	la	a0,bfc10d3c <send_sync_msg_btmanager+0x28>
bfc10c2a:	bfc1      	lwu	a2,4(a3)

bfc10c2c <com_rcp_cmd_dispatch_before_hook>:
bfc10c2c:	b404      	lw	a0,bfc10c3c <com_rcp_cmd_dispatch_before_hook+0x10>
/* 命令分发之前勾子函数，进入RCP命令分发函数时调用 */
void __section__(".rcode") com_rcp_cmd_dispatch_before_hook(void)
{
    //收到APK命令，表示APK available
    g_app_info_state.apk_status = APK_FRONTGROUND;
bfc10c2e:	b205      	lw	v0,bfc10c40 <com_rcp_cmd_dispatch_before_hook+0x14>
    g_sys_counter.apk_counter = 0;
bfc10c30:	6d02      	li	a1,2
bfc10c32:	6b00      	li	v1,0
bfc10c34:	c4b4      	sb	a1,20(a0)
bfc10c36:	e820      	jr	ra
bfc10c38:	c26b      	sb	v1,11(v0)
bfc10c3a:	0000      	addiu	s0,sp,0
bfc10c3c:	a0c0      	lbu	a2,0(s0)
bfc10c3e:	9fc1      	lw	a2,4(a3)
bfc10c40:	a0dc      	lbu	a2,28(s0)
bfc10c42:	9fc1      	lw	a2,4(a3)

bfc10c44 <com_rcp_cmd_dispatch_after_hook>:
bfc10c44:	e8a0      	jrc	ra
bfc10c46:	6500      	nop

bfc10c48 <com_get_com_info>:
bfc10c48:	e8a0      	jrc	ra
	...

bfc10c4c <com_get_global_rcp_info>:


/*获取公共信息*/
void __section__(".rcode") com_get_com_info(com_rcp_info_t *p_com_rcp_info)
{
bfc10c4c:	64c9      	save	72,ra
//    uint8 i;
//#if (SUPPORT_RCP_FUNC == 1)
//
//    uint8 cur_func_id = get_cur_func_id();
//
//#if (SUPPORT_SLAVE_CONTROL == 1)
//    p_com_rcp_info->reserve_bytes[0] = 0x5a;
//#else
//    if ((cur_func_id == APP_FUNC_LINREC_TOC) || (cur_func_id == APP_FUNC_FMREC_TOC))
//    {
//        cur_func_id = APP_FUNC_MICREC_TOC;
//    }
//    if ((cur_func_id == APP_FUNC_LINREC_TOU) || (cur_func_id == APP_FUNC_FMREC_TOU))
//    {
//        cur_func_id = APP_FUNC_MICREC_TOU;
//    }
//    if (g_ap_switch_var.apk_alarm_flag == 1)
//    {
//        cur_func_id = APP_FUNC_CLOCK;
//    }
//    p_com_rcp_info->app_type = cur_func_id;
//    p_com_rcp_info->max_volume = VOLUME_VALUE_MAX;
//    p_com_rcp_info->min_volume = 0;
//    p_com_rcp_info->cur_volume = sys_comval->volume_current;
//    p_com_rcp_info->cur_eqtype = sys_comval->eq_type;
//    p_com_rcp_info->mute_flag = get_mute_enable();
//    p_com_rcp_info->battery_state = get_charge_state();
//    p_com_rcp_info->battery_value = get_bat_value();
//    for(i = 0; i < 5; i++)
//    {
//        if(p_com_rcp_info->battery_value >= bat_val_tap[i])
//        {
//            p_com_rcp_info->battery_value = 5 - i;
//            break;
//        }
//    }
//    p_com_rcp_info->sdcard_in = get_card_state();
//    p_com_rcp_info->uhost_in = get_uhost_state();
//    p_com_rcp_info->usb_in = get_cable_state();
//    p_com_rcp_info->linein_in = get_linein_state();
//    p_com_rcp_info->hp_in = get_headphone_state();
//    p_com_rcp_info->config_flag = FALSE;/*完成配置，由应用调用com_get_com_info之后自行赋值*/
//    p_com_rcp_info->alarm_clock = g_app_info_state.ring_alarm;
//    p_com_rcp_info->app_argv = 0;
//    p_com_rcp_info->dialog_type = g_dialog_type;
//    g_dialog_type = DIALOG_TYPE_NONE; //g_dialog_type只能读一次
//    p_com_rcp_info->dialog_button_type = g_dialog_button_type;
//    p_com_rcp_info->dialog_desc_id = g_dialog_desc_id;
//    p_com_rcp_info->dialog_active_default = g_dialog_active_default;
//    if (sys_comval->dae_cfg.bypass == 1)
//    {
//        p_com_rcp_info->dae_mode = DAE_MODE_NONE;
//    }
//    else
//    {
//        p_com_rcp_info->dae_mode = DAE_MODE_DAE;
//    }
//    p_com_rcp_info->dae_option = (sys_comval->dae_cfg.vbass_enable << DAE_OPTION_VBASS)
//    | (sys_comval->dae_cfg.treble_enhance_enable << DAE_OPTION_TREBLE)
//    | (sys_comval->dae_cfg.vsurround_enable << DAE_OPTION_VSURROUND)
//    | (sys_comval->dae_cfg.spk_compensation_enable << DAE_OPTION_SFR)
//    | (sys_comval->dae_cfg.peq_enable << DAE_OPTION_PEQ)
//    | (sys_comval->dae_cfg.mdrc_enable << DAE_OPTION_MDRC)
//    | (sys_comval->dae_enhanced_enable << DAE_OPTION_DAE_ENH)
//    | (sys_comval->dae_weaken_enable << DAE_OPTION_DAE_WKN);
//#endif
//
//#endif
}

/*查询全局状态信息命令默认应答*/
app_result_e __section__(".rcode") com_get_global_rcp_info(uint32 data1, uint32 data2)
{
bfc10c4e:	6f18      	li	a3,24
    uint8 tmp_com_rcp_info[sizeof(com_rcp_info_t) + RCP_COMMAND_HEAD_SIZE];
    com_rcp_info_t *p_com_rcp_info = (com_rcp_info_t *) (tmp_com_rcp_info + RCP_COMMAND_HEAD_SIZE);

    //获取公共信息
    com_get_com_info(p_com_rcp_info);
#if     0 // modi
    if (g_this_app_info->app_id == APP_ID_BTCALL)
    {
        libc_print("APPState:",tmp_com_rcp_info[16],2);
        if (g_btmanager_gl_var.last_hfp_status[0] == HFP_STATUS_INCOMING)
        {
            /*
             if (sys_share_query_read(APP_ID_BTSTACK, &g_bt_stack_cur_info) == -1)
             {
             PRINT_ERR("btstack share query not exist!!");
             }

             if(g_bt_stack_cur_info.rmt_dev[0].hfp_status != HFP_STATUS_INCOMING)
             */
            {
                tmp_com_rcp_info[16]=0; // pb tts中，手机拒接来电，查询状态，可能及时更新，
                // 所以预取，前提:apk后台时，不查询，上屏蔽改法,不能用
            }
        }
    }
#endif

    com_rcp_send_pkg(0, 0, tmp_com_rcp_info, sizeof(com_rcp_info_t), sizeof(com_rcp_info_t));
bfc10c50:	6c00      	li	a0,0
bfc10c52:	b205      	lw	v0,bfc10c64 <com_get_global_rcp_info+0x18>
bfc10c54:	d704      	sw	a3,16(sp)
bfc10c56:	67a4      	move	a1,a0
bfc10c58:	ea40      	jalr	v0
bfc10c5a:	0606      	addiu	a2,sp,24
bfc10c5c:	6a00      	li	v0,0

    return RESULT_NULL;
}
bfc10c5e:	6449      	restore	72,ra
bfc10c60:	e8a0      	jrc	ra
bfc10c62:	0000      	addiu	s0,sp,0
bfc10c64:	5f29      	sltiu	a3,41
bfc10c66:	482a      	addiu	s0,42

bfc10c68 <com_btmanager_sppble_read>:
bfc10c68:	f004 64f5 	save	a0,40,ra,s0-s1
#endif
}

int __section__(".rcode") com_btmanager_sppble_read(uint8 *rcp_buf, uint16 data_len)
{
bfc10c6c:	ed31      	zeh	a1
bfc10c6e:	6c00      	li	a0,0
#if (SUPPORT_RCP_FUNC == 1)
    uint16 read_len, rem_len;

    sys_os_sched_lock();
bfc10c70:	b226      	lw	v0,bfc10d08 <com_btmanager_sppble_read+0xa0>
bfc10c72:	d504      	sw	a1,16(sp)
bfc10c74:	67c4      	move	a2,a0
bfc10c76:	67a4      	move	a1,a0
bfc10c78:	ea40      	jalr	v0
bfc10c7a:	6f33      	li	a3,51
bfc10c7c:	b324      	lw	v1,bfc10d0c <com_btmanager_sppble_read+0xa4>

    if (g_p_rcp_in_data_ctl->length >= data_len)
bfc10c7e:	9ba0      	lw	a1,0(v1)
bfc10c80:	9304      	lw	v1,16(sp)
bfc10c82:	ad43      	lhu	v0,6(a1)
bfc10c84:	ea63      	sltu	v0,v1
bfc10c86:	6137      	btnez	bfc10cf6 <com_btmanager_sppble_read+0x8e>
bfc10c88:	adc0      	lhu	a2,0(a1)
    {
        if ((g_p_rcp_in_data_ctl->read_ptr + data_len) >= g_p_rcp_in_data_ctl->capacity)
bfc10c8a:	6786      	move	a0,a2
bfc10c8c:	ec31      	zeh	a0
bfc10c8e:	e461      	addu	s0,a0,v1
bfc10c90:	ad82      	lhu	a0,4(a1)
bfc10c92:	67e4      	move	a3,a0
bfc10c94:	ef31      	zeh	a3
bfc10c96:	e8e2      	slt	s0,a3
bfc10c98:	6108      	btnez	bfc10caa <com_btmanager_sppble_read+0x42>
bfc10c9a:	e4cf      	subu	v1,a0,a2
        {
            read_len = g_p_rcp_in_data_ctl->capacity - g_p_rcp_in_data_ctl->read_ptr;
bfc10c9c:	9104      	lw	s1,16(sp)
            rem_len = data_len - read_len;
bfc10c9e:	6703      	move	s0,v1
bfc10ca0:	e831      	zeh	s0
bfc10ca2:	e11b      	subu	a2,s1,s0
bfc10ca4:	6726      	move	s1,a2
bfc10ca6:	e931      	zeh	s1
bfc10ca8:	1002      	b	bfc10cae <com_btmanager_sppble_read+0x46>
bfc10caa:	9004      	lw	s0,16(sp)
        }
        else
        {
            read_len = data_len;
bfc10cac:	6900      	li	s1,0
            rem_len = 0;
bfc10cae:	9dc2      	lw	a2,8(a1)
        }

        libc_memcpy(rcp_buf, g_p_rcp_in_data_ctl->raw_data + g_p_rcp_in_data_ctl->read_ptr, read_len);
bfc10cb0:	ad40      	lhu	v0,0(a1)
bfc10cb2:	b318      	lw	v1,bfc10d10 <com_btmanager_sppble_read+0xa8>
bfc10cb4:	940a      	lw	a0,40(sp)
bfc10cb6:	e655      	addu	a1,a2,v0
bfc10cb8:	6f00      	li	a3,0
bfc10cba:	eb40      	jalr	v1
bfc10cbc:	67d0      	move	a2,s0
bfc10cbe:	b714      	lw	a3,bfc10d0c <com_btmanager_sppble_read+0xa4>

        g_p_rcp_in_data_ctl->read_ptr += read_len;
bfc10cc0:	9f60      	lw	v1,0(a3)
bfc10cc2:	ab40      	lhu	v0,0(v1)
bfc10cc4:	e055      	addu	a1,s0,v0
bfc10cc6:	cba0      	sh	a1,0(v1)
bfc10cc8:	210a      	beqz	s1,bfc10cde <com_btmanager_sppble_read+0x76>

        if (rem_len != 0)
bfc10cca:	970a      	lw	a3,40(sp)
        {
            libc_memcpy(rcp_buf + read_len, g_p_rcp_in_data_ctl->raw_data, rem_len);
bfc10ccc:	9ba2      	lw	a1,8(v1)
bfc10cce:	b311      	lw	v1,bfc10d10 <com_btmanager_sppble_read+0xa8>
bfc10cd0:	e711      	addu	a0,a3,s0
bfc10cd2:	67d1      	move	a2,s1
bfc10cd4:	eb40      	jalr	v1
bfc10cd6:	6f00      	li	a3,0
bfc10cd8:	b50d      	lw	a1,bfc10d0c <com_btmanager_sppble_read+0xa4>

            g_p_rcp_in_data_ctl->read_ptr = rem_len;
bfc10cda:	9d80      	lw	a0,0(a1)
bfc10cdc:	cc20      	sh	s1,0(a0)
bfc10cde:	b50c      	lw	a1,bfc10d0c <com_btmanager_sppble_read+0xa4>
        }

        if (g_p_rcp_in_data_ctl->read_ptr >= g_p_rcp_in_data_ctl->capacity)
bfc10ce0:	9d80      	lw	a0,0(a1)
bfc10ce2:	ac40      	lhu	v0,0(a0)
bfc10ce4:	acc2      	lhu	a2,4(a0)
bfc10ce6:	eac3      	sltu	v0,a2
bfc10ce8:	6102      	btnez	bfc10cee <com_btmanager_sppble_read+0x86>
bfc10cea:	6b00      	li	v1,0
        {
            g_p_rcp_in_data_ctl->read_ptr = 0;
bfc10cec:	cc60      	sh	v1,0(a0)
bfc10cee:	acc3      	lhu	a2,6(a0)
        }

        g_p_rcp_in_data_ctl->length -= data_len;
bfc10cf0:	9204      	lw	v0,16(sp)
bfc10cf2:	e65f      	subu	a3,a2,v0
bfc10cf4:	cce3      	sh	a3,6(a0)
bfc10cf6:	6c00      	li	a0,0
    }

    sys_os_sched_unlock();
bfc10cf8:	b204      	lw	v0,bfc10d08 <com_btmanager_sppble_read+0xa0>
bfc10cfa:	67a4      	move	a1,a0
bfc10cfc:	67c4      	move	a2,a0
bfc10cfe:	ea40      	jalr	v0
bfc10d00:	6f34      	li	a3,52
bfc10d02:	6a00      	li	v0,0
#endif
    return 0;
}
bfc10d04:	6475      	restore	40,ra,s0-s1
bfc10d06:	e8a0      	jrc	ra
bfc10d08:	e901      	sdbbp	8
bfc10d0a:	bfc1      	lwu	a2,4(a3)
bfc10d0c:	a338      	lbu	s1,24(v1)
bfc10d0e:	9fc1      	lw	a2,4(a3)
bfc10d10:	e905      	break	8
bfc10d12:	bfc1      	lwu	a2,4(a3)

bfc10d14 <send_sync_msg_btmanager>:
bfc10d14:	f00e 64f9 	save	a0-a3,72,ra,s0-s1
 *      由于发送同步消息后会等待返回，如果调用 send_sync_msg 的代码是在 control bank段，那么上面的
 *      缓冲区可以开在bank data中。
 *******************************************************************************/
int send_sync_msg_btmanager(uint8 *bd_addr, msg_apps_t *msg, msg_reply_t *reply, uint32 timeout)
{
bfc10d18:	b328      	lw	v1,bfc10db8 <send_sync_msg_btmanager+0xa4>
    btstack_msg_t cur_msg;
    msg_reply_t temp_reply;
    os_event_t *sem; //同步消息同步信号量指针
    int retvalue = ERR_NO_ERR;
    uint8 mq_id = MQ_ID_BT;

    PRINT_DBG_INT("sync msg:", msg->type);

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
bfc10d1a:	a34c      	lbu	v0,12(v1)
bfc10d1c:	6900      	li	s1,0
bfc10d1e:	6519      	move	t8,s1
    {
        return 0;
bfc10d20:	2247      	beqz	v0,bfc10db0 <send_sync_msg_btmanager+0x9c>
bfc10d22:	b527      	lw	a1,bfc10dbc <send_sync_msg_btmanager+0xa8>
    }

    //无限时等待信号量，同时只能有1个线程发送同步消息
    libc_sem_wait(thread_mutex, 0);
bfc10d24:	b027      	lw	s0,bfc10dc0 <send_sync_msg_btmanager+0xac>
bfc10d26:	9d80      	lw	a0,0(a1)
bfc10d28:	67d1      	move	a2,s1
bfc10d2a:	67b1      	move	a1,s1
bfc10d2c:	e840      	jalr	s0
bfc10d2e:	6f14      	li	a3,20
bfc10d30:	9513      	lw	a1,76(sp)

    //填充私有消息结构体
    libc_memcpy(&(cur_msg.msg), msg, sizeof(msg_apps_t));
bfc10d32:	0404      	addiu	a0,sp,16
bfc10d34:	6e08      	li	a2,8
bfc10d36:	e840      	jalr	s0
bfc10d38:	67f1      	move	a3,s1
bfc10d3a:	9212      	lw	v0,72(sp)
    if (bd_addr != NULL)
bfc10d3c:	f020 0402 	addiu	a0,sp,34
bfc10d40:	2204      	beqz	v0,bfc10d4a <send_sync_msg_btmanager+0x36>
bfc10d42:	67a2      	move	a1,v0
    {
        libc_memcpy(cur_msg.bd_addr, bd_addr, BD_ADDR_LEN);
bfc10d44:	6e06      	li	a2,6
bfc10d46:	67f1      	move	a3,s1
bfc10d48:	1003      	b	bfc10d50 <send_sync_msg_btmanager+0x3c>
bfc10d4a:	67b1      	move	a1,s1
    }
    else
    {
        libc_memset(cur_msg.bd_addr, 0x0, BD_ADDR_LEN);
bfc10d4c:	6e06      	li	a2,6
bfc10d4e:	6f01      	li	a3,1
bfc10d50:	e8c0      	jalrc	s0
bfc10d52:	6d00      	li	a1,0
    }

    libc_sem_init(&sem, 0);
bfc10d54:	b01b      	lw	s0,bfc10dc0 <send_sync_msg_btmanager+0xac>
bfc10d56:	040c      	addiu	a0,sp,48
bfc10d58:	67c5      	move	a2,a1
bfc10d5a:	e840      	jalr	s0
bfc10d5c:	6f12      	li	a3,18
bfc10d5e:	960c      	lw	a2,48(sp)
    cur_msg.sem = sem;
bfc10d60:	9414      	lw	a0,80(sp)
    if (reply == NULL)
bfc10d62:	d606      	sw	a2,24(sp)
bfc10d64:	2c02      	bnez	a0,bfc10d6a <send_sync_msg_btmanager+0x56>
bfc10d66:	020a      	addiu	v0,sp,40
    {
        cur_msg.reply = &temp_reply;
bfc10d68:	1001      	b	bfc10d6c <send_sync_msg_btmanager+0x58>
bfc10d6a:	9214      	lw	v0,80(sp)
    }
    else
    {
        cur_msg.reply = reply;
bfc10d6c:	d207      	sw	v0,28(sp)
bfc10d6e:	b216      	lw	v0,bfc10dc4 <send_sync_msg_btmanager+0xb0>
    }

    //发送消息到队列中
    if (sys_mq_send((uint32) (mq_id), (void *) &cur_msg) < 0)
bfc10d70:	6c03      	li	a0,3
bfc10d72:	0504      	addiu	a1,sp,16
bfc10d74:	6e00      	li	a2,0
bfc10d76:	ea40      	jalr	v0
bfc10d78:	6f18      	li	a3,24
bfc10d7a:	5200      	slti	v0,0
bfc10d7c:	6002      	bteqz	bfc10d82 <send_sync_msg_btmanager+0x6e>
bfc10d7e:	6902      	li	s1,2
    {
        //PRINT_ERR("sync msg ERR_MSGQUEUE_FULL!!");
        retvalue = ERR_MSGQUEUE_FULL;
bfc10d80:	1009      	b	bfc10d94 <send_sync_msg_btmanager+0x80>
bfc10d82:	940c      	lw	a0,48(sp)
    }
    else
    {
        //等待同步消息回应
        if (libc_sem_wait(sem, timeout) < 0)
bfc10d84:	9515      	lw	a1,84(sp)
bfc10d86:	b00f      	lw	s0,bfc10dc0 <send_sync_msg_btmanager+0xac>
bfc10d88:	6e00      	li	a2,0
bfc10d8a:	e840      	jalr	s0
bfc10d8c:	6f14      	li	a3,20
bfc10d8e:	5200      	slti	v0,0
bfc10d90:	6002      	bteqz	bfc10d96 <send_sync_msg_btmanager+0x82>
bfc10d92:	6904      	li	s1,4
        {
            //PRINT_ERR("sync msg ERR_SYNC_TIMEOUT!!");
            retvalue = ERR_SYNC_TIMEOUT;
bfc10d94:	e92b      	neg	s1
bfc10d96:	6d00      	li	a1,0
        }
    }

    libc_sem_destroy(&sem);
bfc10d98:	b00a      	lw	s0,bfc10dc0 <send_sync_msg_btmanager+0xac>
bfc10d9a:	67c5      	move	a2,a1
bfc10d9c:	040c      	addiu	a0,sp,48
bfc10d9e:	e840      	jalr	s0
bfc10da0:	6f13      	li	a3,19
bfc10da2:	b707      	lw	a3,bfc10dbc <send_sync_msg_btmanager+0xa8>
    libc_sem_post(thread_mutex);
bfc10da4:	6d00      	li	a1,0
bfc10da6:	9f80      	lw	a0,0(a3)
bfc10da8:	67c5      	move	a2,a1
bfc10daa:	e840      	jalr	s0
bfc10dac:	6f16      	li	a3,22
bfc10dae:	6519      	move	t8,s1

    PRINT_DBG_INT("sync msg ret:", msg->type);

    return retvalue;
bfc10db0:	6758      	move	v0,t8
}
bfc10db2:	6479      	restore	72,ra,s0-s1
bfc10db4:	e8a0      	jrc	ra
bfc10db6:	0000      	addiu	s0,sp,0
bfc10db8:	a080      	lbu	a0,0(s0)
bfc10dba:	9fc1      	lw	a2,4(a3)
bfc10dbc:	9994      	lw	a0,80(s1)
bfc10dbe:	9fc1      	lw	a2,4(a3)
bfc10dc0:	e905      	break	8
bfc10dc2:	bfc1      	lwu	a2,4(a3)
bfc10dc4:	e901      	sdbbp	8
bfc10dc6:	bfc1      	lwu	a2,4(a3)

bfc10dc8 <com_detect_energy_realtime>:
bfc10dc8:	64f4      	save	32,ra,s0-s1
}
#endif
//实时能量检测
void __section__(".rcode") com_detect_energy_realtime(void)
{
bfc10dca:	b61a      	lw	a2,bfc10e30 <com_detect_energy_realtime+0x68>
#if (SUPPORT_DETECT_ENERGY == 1)
    dae_config_t *p_dae_cfg = &(sys_comval->dae_cfg);
    short *p_signal_energy_inner;
    short tmp_signal_energy_inner;
    uint8 vbass_enable;

    p_signal_energy_inner = g_app_info_state_all.p_energy_value - 1;
bfc10dcc:	b418      	lw	a0,bfc10e2c <com_detect_energy_realtime+0x64>
bfc10dce:	9ea3      	lw	a1,12(a2)
bfc10dd0:	9c60      	lw	v1,0(a0)
bfc10dd2:	f7ff 8d5e 	lh	v0,-2(a1)
    tmp_signal_energy_inner = *p_signal_energy_inner;
bfc10dd6:	6703      	move	s0,v1
bfc10dd8:	484c      	addiu	s0,76
bfc10dda:	f6df 5214 	slti	v0,-300
    
    vbass_enable = p_dae_cfg->vbass_enable;

    sys_comval->signal_energy = tmp_signal_energy_inner;

    //规避小信号大音量的时候，虚拟低音打开会产生电流声
    if(sys_comval->signal_energy<-300)
bfc10dde:	a02b      	lbu	s1,11(s0)
bfc10de0:	f040 cb46 	sh	v0,70(v1)
bfc10de4:	6a00      	li	v0,0
    {
        p_dae_cfg->vbass_enable = 0;        
bfc10de6:	6106      	btnez	bfc10df4 <com_detect_energy_realtime+0x2c>
bfc10de8:	f020 a3f9 	lbu	a3,57(v1)
    }
    else
    {
        //大信号的时候，通过APP设置过音效，就不做处理;否则恢复默认状态
        if (sys_comval->set_dae_by_app_flag == 1)
bfc10dec:	7701      	cmpi	a3,1
bfc10dee:	6003      	bteqz	bfc10df6 <com_detect_energy_realtime+0x2e>
bfc10df0:	f020 a358 	lbu	v0,56(v1)
        {
            ;//for qac
        }
        else
        {
            p_dae_cfg->vbass_enable = sys_comval->default_vbass_enable;
bfc10df4:	c04b      	sb	v0,11(s0)
bfc10df6:	9c80      	lw	a0,0(a0)
        }
    }
    
    if (sys_comval->signal_energy < sys_comval->signal_energy_min)
bfc10df8:	f040 aca8 	lhu	a1,72(a0)
bfc10dfc:	f040 8c46 	lh	v0,70(a0)
bfc10e00:	6765      	move	v1,a1
bfc10e02:	ebb1      	seh	v1
bfc10e04:	ea62      	slt	v0,v1
bfc10e06:	6002      	bteqz	bfc10e0c <com_detect_energy_realtime+0x44>
bfc10e08:	f040 cca6 	sh	a1,70(a0)
    {
        sys_comval->signal_energy = sys_comval->signal_energy_min;
bfc10e0c:	f040 aca6 	lhu	a1,70(a0)
    }
    else 
    {
        ;//do noting for qac
    }
	
    if (sys_comval->signal_energy_used != sys_comval->signal_energy)
bfc10e10:	f040 8cc4 	lh	a2,68(a0)
bfc10e14:	67e5      	move	a3,a1
bfc10e16:	efb1      	seh	a3
bfc10e18:	eeee      	xor	a2,a3
bfc10e1a:	2604      	beqz	a2,bfc10e24 <com_detect_energy_realtime+0x5c>
bfc10e1c:	b206      	lw	v0,bfc10e34 <com_detect_energy_realtime+0x6c>
    {
        sys_comval->signal_energy_used = sys_comval->signal_energy;
        com_set_dae_config_dynamic();
bfc10e1e:	f040 cca4 	sh	a1,68(a0)
bfc10e22:	eac0      	jalrc	v0
bfc10e24:	c02b      	sb	s1,11(s0)
    }

    p_dae_cfg->vbass_enable = vbass_enable;
bfc10e26:	6474      	restore	32,ra,s0-s1
bfc10e28:	e8a0      	jrc	ra
bfc10e2a:	0000      	addiu	s0,sp,0
bfc10e2c:	999c      	lw	a0,112(s1)
bfc10e2e:	9fc1      	lw	a2,4(a3)
bfc10e30:	a094      	lbu	a0,20(s0)
bfc10e32:	9fc1      	lw	a2,4(a3)
bfc10e34:	5dd1      	sltiu	a1,209
bfc10e36:	484a      	addiu	s0,74

bfc10e38 <discrete_led_twinkle>:
bfc10e38:	64e3      	save	24,ra,s0
}

//分立led灯闪烁效果
void __section__(".text.led_twinkle") discrete_led_twinkle(void)
{
bfc10e3a:	b21a      	lw	v0,bfc10ea0 <discrete_led_twinkle+0x68>
bfc10e3c:	b618      	lw	a2,bfc10e9c <discrete_led_twinkle+0x64>
bfc10e3e:	a280      	lbu	a0,0(v0)
bfc10e40:	6b00      	li	v1,0
    uint8 i;

    for (i = 0; i < LED_ID_MAX; i++)
bfc10e42:	6d3f      	li	a1,63
bfc10e44:	3768      	sll	a3,v1,2
    {
        if ((g_discrete_led_info[i].timer_id & 0x3f) == g_app_timer_id) //COMMON软定时器ID只有低6bit可用
bfc10e46:	e7c9      	addu	v0,a3,a2
bfc10e48:	a2e2      	lbu	a3,2(v0)
bfc10e4a:	efac      	and	a3,a1
bfc10e4c:	ef8e      	xor	a3,a0
bfc10e4e:	2705      	beqz	a3,bfc10e5a <discrete_led_twinkle+0x22>
bfc10e50:	4341      	addiu	v0,v1,1
bfc10e52:	6762      	move	v1,v0
bfc10e54:	eb11      	zeb	v1
bfc10e56:	5b02      	sltiu	v1,2
bfc10e58:	61f5      	btnez	bfc10e44 <discrete_led_twinkle+0xc>
bfc10e5a:	7302      	cmpi	v1,2
        {
            break;
        }
    }

    if (i == LED_ID_MAX)
bfc10e5c:	601c      	bteqz	bfc10e96 <discrete_led_twinkle+0x5e>
bfc10e5e:	3568      	sll	a1,v1,2
    {
        //这种情况不应该发生
        return;
    }

    if (g_discrete_led_info[i].on_off == TRUE)
bfc10e60:	e5d1      	addu	a0,a1,a2
bfc10e62:	a4e1      	lbu	a3,1(a0)
bfc10e64:	a460      	lbu	v1,0(a0)
bfc10e66:	32f6      	srl	v0,a3,5
bfc10e68:	6e01      	li	a2,1
bfc10e6a:	67a3      	move	a1,v1
bfc10e6c:	eacc      	and	v0,a2
bfc10e6e:	b00e      	lw	s0,bfc10ea4 <discrete_led_twinkle+0x6c>
bfc10e70:	ed11      	zeb	a1
bfc10e72:	2209      	beqz	v0,bfc10e86 <discrete_led_twinkle+0x4e>
bfc10e74:	6a21      	li	v0,33
    {
        //灭掉LED灯
        g_discrete_led_info[i].on_off = FALSE;
bfc10e76:	ea4b      	neg	v0
bfc10e78:	eaec      	and	v0,a3
bfc10e7a:	c441      	sb	v0,1(a0)
bfc10e7c:	6c07      	li	a0,7
        key_discrete_led_off(g_discrete_led_info[i].led_port, g_discrete_led_info[i].led_pin);
bfc10e7e:	ecac      	and	a0,a1
bfc10e80:	46c1      	addiu	a2,a2,1
bfc10e82:	356e      	srl	a1,v1,3
bfc10e84:	1006      	b	bfc10e92 <discrete_led_twinkle+0x5a>
bfc10e86:	6a20      	li	v0,32
    }
    else
    {
        //亮LED灯
        g_discrete_led_info[i].on_off = TRUE;
bfc10e88:	eaed      	or	v0,a3
bfc10e8a:	c441      	sb	v0,1(a0)
bfc10e8c:	6c07      	li	a0,7
        key_discrete_led_on(g_discrete_led_info[i].led_port, g_discrete_led_info[i].led_pin);
bfc10e8e:	ecac      	and	a0,a1
bfc10e90:	356e      	srl	a1,v1,3
bfc10e92:	e840      	jalr	s0
bfc10e94:	6f06      	li	a3,6
bfc10e96:	6463      	restore	24,ra,s0
    }
}
bfc10e98:	e8a0      	jrc	ra
bfc10e9a:	0000      	addiu	s0,sp,0
bfc10e9c:	a18c      	lbu	a0,12(s1)
bfc10e9e:	9fc1      	lw	a2,4(a3)
bfc10ea0:	998c      	lw	a0,48(s1)
bfc10ea2:	9fc1      	lw	a2,4(a3)
bfc10ea4:	e90d      	or	s1,s0
bfc10ea6:	bfc1      	lwu	a2,4(a3)
Disassembly of section BANK_UI_1_10:

482a5800 <com_battery_charge_deal>:
482a5800:	64f7      	save	56,ra,s0-s1
 * \ingroup
 * \note
 *******************************************************************************/
void com_battery_charge_deal(void)
{
482a5802:	677d      	move	v1,sp
    uint16 msg;
    uint32 tmp_battery_value; //当前电池电量
    uint32 tmp_charge_state; //当前充电状态，分无充电，正在充电，充电已满，无电池
    uint32 real_charge_state;
    int32 volume_limit;
    uint8 app_id = 0;//g_app_info_vector[1].app_id;//linein不作特殊处理
482a5804:	6c00      	li	a0,0
482a5806:	b032      	lw	s0,482a58cc <com_battery_charge_deal+0xcc>

#if (SUPPORT_OUTER_CHARGE == 1)
    if (sys_comval->bat_charge_mode == BAT_CHARGE_MODE_OUTER)
    {
        if ((g_app_info_state.extern_bat_in == 0) && (IS_EXTERN_BATTERY_IN() == 1))
        {
#if (SUPPORT_TK_DRIVER == TK_DRIVER_OUTER)
            key_extern_tk_op(TK_OP_ON);
#endif
            g_app_info_state.extern_bat_in = 1;
        }
        else if ((g_app_info_state.extern_bat_in == 1) && (IS_EXTERN_BATTERY_IN() == 0))
        {
#if (SUPPORT_TK_DRIVER == TK_DRIVER_OUTER)
            key_extern_tk_op(TK_OP_OFF);
#endif
            g_app_info_state.extern_bat_in = 0;
        }

        if ((g_app_info_state.stub_tools_type == 0) && (sys_comval->stub_enable == FALSE)
                && (IS_EXTERN_BATTERY_IN() == 0))
        {
            if ((g_this_app_info->app_id != APP_ID_UDISK) && (g_this_app_info->app_id != APP_ID_CONFIG))
            {
                //进入空闲模式
                msg = MSG_IDLE_MODE;
                sys_mq_send(MQ_ID_SYS, &msg);
            }
        }
    }
#endif

    tmp_charge_state = key_battery_get_status(&real_charge_state, &volume_limit, &app_id);
482a5808:	c392      	sb	a0,18(v1)
482a580a:	0506      	addiu	a1,sp,24
482a580c:	0405      	addiu	a0,sp,20
482a580e:	f000 0612 	addiu	a2,sp,18
482a5812:	e840      	jalr	s0
482a5814:	6f02      	li	a3,2
482a5816:	67a2      	move	a1,v0
482a5818:	9205      	lw	v0,20(sp)

    if (real_charge_state < BATTERY_GRADE_MAX)
482a581a:	ed11      	zeb	a1
482a581c:	5a09      	sltiu	v0,9
482a581e:	6722      	move	s1,v0
    {
        tmp_battery_value = real_charge_state;
482a5820:	6101      	btnez	482a5824 <com_battery_charge_deal+0x24>
482a5822:	6909      	li	s1,9
    }
    else
    {
        tmp_battery_value = BATTERY_GRADE_MAX;
482a5824:	9306      	lw	v1,24(sp)
    }
    //PRINT_DBG_INT("bat charge:", (tmp_charge_state << 8) | tmp_battery_value);

    volume_limit *= 10;
482a5826:	680a      	li	s0,10
482a5828:	eb18      	mult	v1,s0
482a582a:	b22a      	lw	v0,482a58d0 <com_battery_charge_deal+0xd0>
    
    if (volume_limit != sys_comval->volume_limit)
482a582c:	eb12      	mflo	v1
482a582e:	9ae0      	lw	a3,0(v0)
482a5830:	d306      	sw	v1,24(sp)
482a5832:	f020 87c4 	lb	a2,36(a3)
482a5836:	ee6e      	xor	a2,v1
482a5838:	2606      	beqz	a2,482a5846 <com_battery_charge_deal+0x46>
482a583a:	ec12      	mflo	a0
    {
        com_update_volume_limit(volume_limit);
482a583c:	b226      	lw	v0,482a58d4 <com_battery_charge_deal+0xd4>
482a583e:	d508      	sw	a1,32(sp)
482a5840:	ea40      	jalr	v0
482a5842:	ec91      	seb	a0
482a5844:	9508      	lw	a1,32(sp)
482a5846:	458d      	addiu	a0,a1,-3
    }       

    if ((tmp_charge_state == BAT_CHECKING) || (tmp_charge_state == BAT_NO_EXIST))
482a5848:	5c02      	sltiu	a0,2
482a584a:	6002      	bteqz	482a5850 <com_battery_charge_deal+0x50>
482a584c:	6d00      	li	a1,0
    {
        tmp_charge_state = BAT_NORMAL;
482a584e:	6909      	li	s1,9
        tmp_battery_value = BATTERY_GRADE_MAX;
482a5850:	b722      	lw	a3,482a58d8 <com_battery_charge_deal+0xd8>
    }

    //需要过滤电池供电时电池电量不稳定的情况，只允许电池电量往下跌，不允许往上涨
    if ((g_app_info_state.charge_state == BAT_NORMAL) && (tmp_charge_state == BAT_NORMAL) && (tmp_battery_value
482a5852:	a769      	lbu	v1,9(a3)
482a5854:	2b05      	bnez	v1,482a5860 <com_battery_charge_deal+0x60>
482a5856:	2d04      	bnez	a1,482a5860 <com_battery_charge_deal+0x60>
482a5858:	a74a      	lbu	v0,10(a3)
482a585a:	ea23      	sltu	v0,s1
482a585c:	6001      	bteqz	482a5860 <com_battery_charge_deal+0x60>
482a585e:	6722      	move	s1,v0
            > g_app_info_state.bat_value))
    {
        tmp_battery_value = g_app_info_state.bat_value;
482a5860:	b01f      	lw	s0,482a58dc <com_battery_charge_deal+0xdc>
    }
    
    //libc_print("bat:",g_app_info_state.bat_value,2);
    
    if (g_sys_counter.bat_change_cnt >= 10)
482a5862:	a883      	lhu	a0,6(s0)
482a5864:	5c0a      	sltiu	a0,10
482a5866:	6108      	btnez	482a5878 <com_battery_charge_deal+0x78>
482a5868:	6785      	move	a0,a1
    {
        com_battery_charge_change_deal(tmp_charge_state, tmp_battery_value);
482a586a:	67b1      	move	a1,s1
482a586c:	19f0 9794 	jal	483e5e50 <com_battery_charge_change_deal>
482a5870:	ed11      	zeb	a1
482a5872:	6d00      	li	a1,0
        g_sys_counter.bat_change_cnt = 0;
482a5874:	c8a3      	sh	a1,6(s0)
482a5876:	1028      	b	482a58c8 <com_battery_charge_deal+0xc8>
        return;
482a5878:	67c3      	move	a2,v1
    }
    
    if ((g_app_info_state.charge_state != tmp_charge_state) || (g_app_info_state.bat_value != tmp_battery_value))
482a587a:	ee11      	zeb	a2
482a587c:	eeae      	xor	a2,a1
482a587e:	2e03      	bnez	a2,482a5886 <com_battery_charge_deal+0x86>
482a5880:	a74a      	lbu	v0,10(a3)
482a5882:	ea2e      	xor	v0,s1
482a5884:	2202      	beqz	v0,482a588a <com_battery_charge_deal+0x8a>
482a5886:	4441      	addiu	v0,a0,1
    {
        g_sys_counter.bat_change_cnt ++;
482a5888:	1001      	b	482a588c <com_battery_charge_deal+0x8c>
482a588a:	6a00      	li	v0,0
    }
    else
    {
        g_sys_counter.bat_change_cnt = 0;
482a588c:	67c3      	move	a2,v1
    }

    if ((g_app_info_state.charge_state == BAT_NORMAL) && (g_app_info_state.bat_value <= 1))
482a588e:	ee11      	zeb	a2
482a5890:	c843      	sh	v0,6(s0)
482a5892:	2e13      	bnez	a2,482a58ba <com_battery_charge_deal+0xba>
482a5894:	a78a      	lbu	a0,10(a3)
482a5896:	5c02      	sltiu	a0,2
482a5898:	6010      	bteqz	482a58ba <com_battery_charge_deal+0xba>
482a589a:	a864      	lhu	v1,8(s0)
    {
        g_sys_counter.bat_low_cnt++;
482a589c:	43e1      	addiu	a3,v1,1
482a589e:	c8e4      	sh	a3,8(s0)
482a58a0:	ef31      	zeh	a3
        if (g_sys_counter.bat_low_cnt >= BAT_LOW_WARNING_CYCLE)
482a58a2:	5f78      	sltiu	a3,120
482a58a4:	6111      	btnez	482a58c8 <com_battery_charge_deal+0xc8>
482a58a6:	67bd      	move	a1,sp
        {
            g_sys_counter.bat_low_cnt = 0;

            //检测到低电，广播低电消息
            msg = MSG_LOW_POWER;
482a58a8:	6c82      	li	a0,130
482a58aa:	b20e      	lw	v0,482a58e0 <com_battery_charge_deal+0xe0>
            sys_mq_send(MQ_ID_SYS, &msg);
482a58ac:	c8c4      	sh	a2,8(s0)
482a58ae:	6f18      	li	a3,24
482a58b0:	cd88      	sh	a0,16(a1)
482a58b2:	6c05      	li	a0,5
482a58b4:	ea40      	jalr	v0
482a58b6:	0504      	addiu	a1,sp,16
482a58b8:	1007      	b	482a58c8 <com_battery_charge_deal+0xc8>
482a58ba:	67c3      	move	a2,v1
        }
    }
    else if (g_app_info_state.charge_state == BAT_FULL)
482a58bc:	ee11      	zeb	a2
482a58be:	7602      	cmpi	a2,2
482a58c0:	6103      	btnez	482a58c8 <com_battery_charge_deal+0xc8>
482a58c2:	19f0 97d5 	jal	483e5f54 <com_battery_charge_full_check>
    {
        com_battery_charge_full_check(real_charge_state);
482a58c6:	9405      	lw	a0,20(sp)
482a58c8:	6477      	restore	56,ra,s0-s1
    }
    else
    {
        ; //nothing for QAC
    }
}
482a58ca:	e8a0      	jrc	ra
482a58cc:	e90d      	or	s1,s0
482a58ce:	bfc1      	lwu	a2,4(a3)
482a58d0:	999c      	lw	a0,112(s1)
482a58d2:	9fc1      	lw	a2,4(a3)
482a58d4:	5dbd      	sltiu	a1,189
482a58d6:	4836      	addiu	s0,54
482a58d8:	a0c0      	lbu	a2,0(s0)
482a58da:	9fc1      	lw	a2,4(a3)
482a58dc:	a0dc      	lbu	a2,28(s0)
482a58de:	9fc1      	lw	a2,4(a3)
482a58e0:	e901      	sdbbp	8
482a58e2:	bfc1      	lwu	a2,4(a3)

482a58e4 <sys_counter_handle>:
482a58e4:	64f5      	save	40,ra,s0-s1
 *      让前台AP自己回到正在播放场景。返回正在播放界面需要AP的正在播放场景协助，即在进入场景时
 *      change_app_state(APP_STATE_PLAYING)，在退出场景时 change_app_state(APP_STATE_NO_PLAY)。
 *******************************************************************************/
void sys_counter_handle(void)
{
482a58e6:	b44b      	lw	a0,482a5a10 <.LBE10+0xe>

    bool usb_cable_adapter = FALSE;
    sys_status_e cur_sys_status;
    bool enter_lp_flag = FALSE;
    uint16 cur_poff_timer; //省电关机时间(0.5s单位)

    if ((act_readl(CHG_DET) & (1 << CHG_DET_UVLO)) != 0) //USB电缆或充电适配线插入
482a58e8:	6b80      	li	v1,128
482a58ea:	9c40      	lw	v0,0(a0)
482a58ec:	6900      	li	s1,0
482a58ee:	ea6c      	and	v0,v1
482a58f0:	d104      	sw	s1,16(sp)
482a58f2:	2202      	beqz	v0,482a58f8 <sys_counter_handle+0x14>
482a58f4:	6d01      	li	a1,1
    {
        usb_cable_adapter = TRUE;
482a58f6:	d504      	sw	a1,16(sp)
482a58f8:	b047      	lw	s0,482a5a14 <.LBE10+0x12>
    }

#if (SUPPORT_OUTER_CHARGE == 1)
    if (sys_comval->bat_charge_mode == BAT_CHARGE_MODE_OUTER)
    {
        if (IS_EXTERN_CAHREGE_IN() == 1)
        {
            usb_cable_adapter = TRUE;
        }
    }
#endif

    //电池及其充电检测处理
    com_battery_charge_deal();
482a58fa:	e8c0      	jalrc	s0
482a58fc:	b747      	lw	a3,482a5a14 <.LBE10+0x12>

    if ((g_app_last_state.last_ui_status != UI_STATUS_IDLE)
482a58fe:	a7c3      	lbu	a2,3(a3)
482a5900:	2605      	beqz	a2,482a590c <sys_counter_handle+0x28>
482a5902:	b347      	lw	v1,482a5a1c <.LBE10+0x1a>
482a5904:	a343      	lbu	v0,3(v1)
482a5906:	2a02      	bnez	v0,482a590c <sys_counter_handle+0x28>
482a5908:	b446      	lw	a0,482a5a20 <.LBE10+0x1e>
            && (g_app_info_state_all.ui_status == UI_STATUS_IDLE))
    {
        g_sys_counter.ui_idle_counter = 0;
482a590a:	c42c      	sb	s1,12(a0)
482a590c:	9504      	lw	a1,16(sp)
    }

    /* 关闭背光及前台进入功耗优化模式 */
    if (usb_cable_adapter == FALSE)
482a590e:	2d25      	bnez	a1,482a595a <.LBB6>
482a5910:	b745      	lw	a3,482a5a24 <.LBE10+0x22>
    {
        if ((sys_comval->light_timer > 0) && (get_backlight_state() == BACKLIGHT_STATE_NORMAL))
482a5912:	9f80      	lw	a0,0(a3)
482a5914:	f020 a4c6 	lbu	a2,38(a0)
482a5918:	260f      	beqz	a2,482a5938 <.LBE4>

482a591a <.LBB2>:
482a591a:	b544      	lw	a1,482a5a28 <.LBE10+0x26>

482a591c <.LBE2>:
482a591c:	a503      	lbu	s0,3(a1)
482a591e:	280c      	bnez	s0,482a5938 <.LBE4>
482a5920:	b740      	lw	a3,482a5a20 <.LBE10+0x1e>
        {
            g_sys_counter.light_counter++;
482a5922:	af01      	lhu	s0,2(a3)
482a5924:	4061      	addiu	v1,s0,1
482a5926:	cf61      	sh	v1,2(a3)
482a5928:	f020 a4c6 	lbu	a2,38(a0)
            if (g_sys_counter.light_counter >= (2u * sys_comval->light_timer)) //light_timer 以1S为单位
482a592c:	eb31      	zeh	v1
482a592e:	32c4      	sll	v0,a2,1
482a5930:	eb43      	sltu	v1,v0
482a5932:	6102      	btnez	482a5938 <.LBE4>

482a5934 <.LBB4>:
482a5934:	6c02      	li	a0,2
            {
                com_set_display_onoff(FALSE);
            }
        }

        /* 空闲一段时间就降低频率 */
        if (g_app_info_state_all.ui_status == UI_STATUS_IDLE)
        {
            g_sys_counter.ui_idle_counter++;
            if (g_sys_counter.ui_idle_counter >= UI_IDLE_TIMER)
            {
                adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL2, FREQ_NULL);
                g_app_info_state_all.ui_status = UI_STATUS_IDLE_LOWFREQ;
            }
        }
    }

    /* 获取当前系统工作状态 */
    cur_sys_status = get_cur_sys_status();

    /* 开启省电关机计时 */
    if (((g_app_last_state.last_sys_status != SYS_STATUS_IDLE) && (cur_sys_status == SYS_STATUS_IDLE))
            || ((g_app_last_state.last_sys_status != SYS_STATUS_WAIT_LINK) && (cur_sys_status == SYS_STATUS_WAIT_LINK)))
    {
        g_sys_counter.poweroff_counter = 0;
    }

    /* 省电关机计时器；在USB电缆没有插入时有效 */
    if ((usb_cable_adapter == FALSE) && (cur_sys_status != SYS_STATUS_WORKING))
    {
        if (sys_comval->lowpower_mode != LOW_POWER_MODE_NONE)
        {
            if (sys_comval->lowpower_timer == 0)
            {
                enter_lp_flag = TRUE;
            }
            else
            {
                cur_poff_timer = 120u * sys_comval->lowpower_timer;

                g_sys_counter.poweroff_counter++;
                if (g_sys_counter.poweroff_counter >= cur_poff_timer)
                {
                    enter_lp_flag = TRUE;
                }
            }

            if (enter_lp_flag == TRUE)
            {
/*#ifdef ENABLE_TRUE_WIRELESS_STEREO
                if(g_bt_stack_cur_info.dev_role==NORMAL_DEV)
                {
                    enter_lower_mode();
                }
#else*/
                enter_lower_mode();                
//#endif      

            }
        }
#if 0
        else
        {
            //poweroff_timer 等于0不省电关机
            if (sys_comval->poweroff_timer > 0)
            {
                if (cur_sys_status == SYS_STATUS_WAIT_LINK)
                {
                    //蓝牙省电时间，一般长于省电关机时间，默认为5分钟
                    cur_poff_timer = 120u * sys_comval->poweroff_bt_waitpair_timer;
                }
                else
                {
                    cur_poff_timer = 120u * sys_comval->poweroff_timer;
                }

                g_sys_counter.poweroff_counter++;
                if (g_sys_counter.poweroff_counter >= cur_poff_timer)
                {
                    //广播关机消息
                    msg.type = MSG_POWER_OFF;
                    broadcast_msg(&msg, TRUE);
                }
            }
        }
#endif
    }

    /* 3秒钟没获取到APK命令，表示APK进入后台模式 */
    g_sys_counter.apk_counter++;
    if (g_sys_counter.apk_counter >= APK_BACKGROND_OVERTIME)
    {
        set_apk_status(APK_BACKGROUND);
    }

    /* 更新最近状态 */
    g_app_last_state.last_sys_status = cur_sys_status;
    g_app_last_state.last_ui_status = g_app_info_state_all.ui_status;
}

static sys_status_e get_cur_sys_status(void)
{
    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
    {
        if (g_btmanager_gl_var.btmanager_status != BTMANAGER_STATUS_IDLE)
        {
            return SYS_STATUS_WORKING;
        }
    }

    if ((g_app_info_state_all.engine_state == ENGINE_STATE_PLAYING)
            || (g_app_info_state_all.app_state != APP_STATE_NO_PLAY)
            || (g_app_info_state_all.ui_status != UI_STATUS_IDLE_LOWFREQ))
    {
        return SYS_STATUS_WORKING;
    }

    //后台引擎与前台应用保持空闲状态；蓝牙没有通信；前台没有操作持续7秒钟以上
    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
    {
        if ((g_bt_stack_cur_info.conn_status == CONN_STATUS_WAIT_PAIR)
                && ((get_cur_func_id() == APP_FUNC_BTPLAY) || (get_cur_func_id() == APP_FUNC_BTCALL)))
        {
            return SYS_STATUS_WAIT_LINK;
        }
    }

    return SYS_STATUS_IDLE;
}

/******************************************************************************/
/*!
 * \par  Description:
 *    外部设备检测服务函数,200ms执行一次
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      misc_func
 * \note
 *******************************************************************************/
void peripheral_detect_handle(void)
{
    uint32 detect_mode = 0;
    
#if (SUPPORT_CARD_DETECT != 0)
    if (sys_comval->hard_support_card == 1)
    {
        detect_mode |= PER_DETECT_CARD;
        if (get_card_state() == CARD_STATE_CARD_NULL)
        {
            detect_mode |= PRE_DETECT_CARD_FOR_IN;
        }
        if (g_detect_card_force_flag == 1)
        {
            g_detect_card_force_flag = 0;
            detect_mode |= PER_DETECT_CARD_FORCE;
        }
    }
#endif

    if (sys_comval->support_linein == 1)
    {
        detect_mode |= PER_DETECT_AUX;
        if (get_linein_state() == LINEIN_STATE_LINEIN_NULL)
        {
            detect_mode |= PER_DETECT_AUX_FOR_IN;
        }
    }

#if (SUPPORT_HP_DETECT != 0)
    if (sys_comval->hard_support_headphone == 1)
    {
        detect_mode |= PER_DETECT_HP;
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            detect_mode |= PER_DETECT_HP_FOR_IN;
        }
    }
#endif

#if ((CASE_BOARD_TYPE != CASE_BOARD_ATS2823) && (CASE_BOARD_TYPE != CASE_BOARD_DVB_ATS2823))
    //只有支持U盘播放功能才动态检测usb和u盘插入；否则只检测usb插入
    if ((sys_comval->hard_support_uhost == 1) && (sys_comval->support_uhostplay == 1))
    {
        detect_mode |= PER_DETECT_USBUHOST_SWITCH;
    }
#endif

    if (detect_mode != 0)
    {
        key_peripheral_detect_handle(detect_mode);
    }
}

//LED数码管关屏及恢复
void __section__(".bank") com_set_display_onoff(bool onoff)
{
    if (onoff == TRUE)
    {
        led_wake_up_display();
        g_app_info_state.backlight_state = BACKLIGHT_STATE_NORMAL;
    }
    else
    {
        led_sleep_display();
        g_app_info_state.backlight_state = BACKLIGHT_STATE_OFF;
482a5936:	c583      	sb	a0,3(a1)

482a5938 <.LBE4>:
482a5938:	b039      	lw	s0,482a5a1c <.LBE10+0x1a>
482a593a:	a0c3      	lbu	a2,3(s0)
482a593c:	2e0e      	bnez	a2,482a595a <.LBB6>
482a593e:	b239      	lw	v0,482a5a20 <.LBE10+0x1e>
482a5940:	a26c      	lbu	v1,12(v0)
482a5942:	43a1      	addiu	a1,v1,1
482a5944:	c2ac      	sb	a1,12(v0)
482a5946:	ed11      	zeb	a1
482a5948:	5d0e      	sltiu	a1,14
482a594a:	6107      	btnez	482a595a <.LBB6>
482a594c:	b238      	lw	v0,482a5a2c <.LBE10+0x2a>
482a594e:	6c0a      	li	a0,10
482a5950:	6d02      	li	a1,2
482a5952:	ea40      	jalr	v0
482a5954:	6f03      	li	a3,3
482a5956:	6e01      	li	a2,1
482a5958:	c0c3      	sb	a2,3(s0)

482a595a <.LBB6>:
482a595a:	b036      	lw	s0,482a5a30 <.LBE10+0x2e>
482a595c:	a08c      	lbu	a0,12(s0)
482a595e:	67e4      	move	a3,a0
482a5960:	ef11      	zeb	a3
482a5962:	7701      	cmpi	a3,1
482a5964:	6104      	btnez	482a596e <.LBB6+0x14>
482a5966:	b334      	lw	v1,482a5a34 <.LBE10+0x32>
482a5968:	a3af      	lbu	a1,15(v1)
482a596a:	6b02      	li	v1,2
482a596c:	2d1a      	bnez	a1,482a59a2 <.LBE6>
482a596e:	b32c      	lw	v1,482a5a1c <.LBE10+0x1a>
482a5970:	a3c1      	lbu	a2,1(v1)
482a5972:	7601      	cmpi	a2,1
482a5974:	6004      	bteqz	482a597e <.LBB6+0x24>
482a5976:	ab41      	lhu	v0,2(v1)
482a5978:	f100 7200 	cmpi	v0,256
482a597c:	6002      	bteqz	482a5982 <.LBB6+0x28>
482a597e:	6b02      	li	v1,2
482a5980:	1010      	b	482a59a2 <.LBE6>
482a5982:	67e4      	move	a3,a0
482a5984:	ef11      	zeb	a3
482a5986:	7701      	cmpi	a3,1
482a5988:	610b      	btnez	482a59a0 <.LBE8+0xc>
482a598a:	b02c      	lw	s0,482a5a38 <.LBE10+0x36>
482a598c:	a080      	lbu	a0,0(s0)
482a598e:	7401      	cmpi	a0,1
482a5990:	6107      	btnez	482a59a0 <.LBE8+0xc>

482a5992 <.LBB8>:
482a5992:	b526      	lw	a1,482a5a28 <.LBE10+0x26>

482a5994 <.LBE8>:
482a5994:	a553      	lbu	v0,19(a1)
482a5996:	2202      	beqz	v0,482a599c <.LBE8+0x8>
482a5998:	720e      	cmpi	v0,14
482a599a:	6102      	btnez	482a59a0 <.LBE8+0xc>
482a599c:	6b01      	li	v1,1
482a599e:	1001      	b	482a59a2 <.LBE6>
482a59a0:	6b00      	li	v1,0

482a59a2 <.LBE6>:
482a59a2:	6703      	move	s0,v1
482a59a4:	b31d      	lw	v1,482a5a18 <.LBE10+0x16>
482a59a6:	e811      	zeb	s0
482a59a8:	a342      	lbu	v0,2(v1)
482a59aa:	2201      	beqz	v0,482a59ae <.LBE6+0xc>
482a59ac:	2004      	beqz	s0,482a59b6 <.LBE6+0x14>
482a59ae:	7201      	cmpi	v0,1
482a59b0:	6005      	bteqz	482a59bc <.LBE6+0x1a>
482a59b2:	7001      	cmpi	s0,1
482a59b4:	6103      	btnez	482a59bc <.LBE6+0x1a>
482a59b6:	b61b      	lw	a2,482a5a20 <.LBE10+0x1e>
482a59b8:	6a00      	li	v0,0
482a59ba:	ce40      	sh	v0,0(a2)
482a59bc:	9704      	lw	a3,16(sp)
482a59be:	2f17      	bnez	a3,482a59ee <.LBE6+0x4c>
482a59c0:	7002      	cmpi	s0,2
482a59c2:	6015      	bteqz	482a59ee <.LBE6+0x4c>
482a59c4:	b518      	lw	a1,482a5a24 <.LBE10+0x22>
482a59c6:	9d60      	lw	v1,0(a1)
482a59c8:	a38d      	lbu	a0,13(v1)
482a59ca:	2411      	beqz	a0,482a59ee <.LBE6+0x4c>
482a59cc:	a36e      	lbu	v1,14(v1)
482a59ce:	230a      	beqz	v1,482a59e4 <.LBE6+0x42>
482a59d0:	b714      	lw	a3,482a5a20 <.LBE10+0x1e>
482a59d2:	6c78      	li	a0,120
482a59d4:	af40      	lhu	v0,0(a3)
482a59d6:	eb98      	mult	v1,a0
482a59d8:	42c1      	addiu	a2,v0,1
482a59da:	eb12      	mflo	v1
482a59dc:	cfc0      	sh	a2,0(a3)
482a59de:	ee31      	zeh	a2
482a59e0:	ee63      	sltu	a2,v1
482a59e2:	6101      	btnez	482a59e6 <.LBE6+0x44>
482a59e4:	6901      	li	s1,1
482a59e6:	2103      	beqz	s1,482a59ee <.LBE6+0x4c>
482a59e8:	1990 96c2 	jal	48325b08 <enter_lower_mode>
482a59ec:	6500      	nop
482a59ee:	b60d      	lw	a2,482a5a20 <.LBE10+0x1e>
482a59f0:	a6eb      	lbu	a3,11(a2)
482a59f2:	4761      	addiu	v1,a3,1
482a59f4:	c66b      	sb	v1,11(a2)
482a59f6:	eb11      	zeb	v1
482a59f8:	5b06      	sltiu	v1,6
482a59fa:	6103      	btnez	482a5a02 <.LBE10>

482a59fc <.LBB10>:
482a59fc:	b20b      	lw	v0,482a5a28 <.LBE10+0x26>
482a59fe:	6c03      	li	a0,3
482a5a00:	c294      	sb	a0,20(v0)

482a5a02 <.LBE10>:
482a5a02:	b607      	lw	a2,482a5a1c <.LBE10+0x1a>
482a5a04:	b505      	lw	a1,482a5a18 <.LBE10+0x16>
482a5a06:	a663      	lbu	v1,3(a2)
482a5a08:	c502      	sb	s0,2(a1)
482a5a0a:	c563      	sb	v1,3(a1)
482a5a0c:	6475      	restore	40,ra,s0-s1
482a5a0e:	e8a0      	jrc	ra
482a5a10:	0010      	addiu	s0,sp,64
482a5a12:	c002      	sb	s0,2(s0)
482a5a14:	5801      	sltiu	s0,1
482a5a16:	482a      	addiu	s0,42
482a5a18:	a184      	lbu	a0,4(s1)
482a5a1a:	9fc1      	lw	a2,4(a3)
482a5a1c:	a094      	lbu	a0,20(s0)
482a5a1e:	9fc1      	lw	a2,4(a3)
482a5a20:	a0dc      	lbu	a2,28(s0)
482a5a22:	9fc1      	lw	a2,4(a3)
482a5a24:	999c      	lw	a0,112(s1)
482a5a26:	9fc1      	lw	a2,4(a3)
482a5a28:	a0c0      	lbu	a2,0(s0)
482a5a2a:	9fc1      	lw	a2,4(a3)
482a5a2c:	e90d      	or	s1,s0
482a5a2e:	bfc1      	lwu	a2,4(a3)
482a5a30:	a080      	lbu	a0,0(s0)
482a5a32:	9fc1      	lw	a2,4(a3)
482a5a34:	a33c      	lbu	s1,28(v1)
482a5a36:	9fc1      	lw	a2,4(a3)
482a5a38:	a2fc      	lbu	a3,28(v0)
482a5a3a:	9fc1      	lw	a2,4(a3)

482a5a3c <peripheral_detect_handle>:
482a5a3c:	64c3      	save	24,ra
482a5a3e:	b40b      	lw	a0,482a5a68 <.LBE13+0x1e>
482a5a40:	9c60      	lw	v1,0(a0)
482a5a42:	a344      	lbu	v0,4(v1)
482a5a44:	7201      	cmpi	v0,1
482a5a46:	610d      	btnez	482a5a62 <.LBE13+0x18>

482a5a48 <.LBB13>:
482a5a48:	b509      	lw	a1,482a5a6c <.LBE13+0x22>

482a5a4a <.LBE13>:
482a5a4a:	6eff      	li	a2,255
482a5a4c:	a546      	lbu	v0,6(a1)
482a5a4e:	4681      	addiu	a0,a2,1
482a5a50:	2a03      	bnez	v0,482a5a58 <.LBE13+0xe>
482a5a52:	f200 4a00 	addiu	v0,512
482a5a56:	ec4d      	or	a0,v0
482a5a58:	6d00      	li	a1,0
482a5a5a:	b206      	lw	v0,482a5a70 <.LBE13+0x26>
482a5a5c:	67c5      	move	a2,a1
482a5a5e:	ea40      	jalr	v0
482a5a60:	6f04      	li	a3,4
482a5a62:	6443      	restore	24,ra
482a5a64:	e8a0      	jrc	ra
482a5a66:	0000      	addiu	s0,sp,0
482a5a68:	999c      	lw	a0,112(s1)
482a5a6a:	9fc1      	lw	a2,4(a3)
482a5a6c:	a0c0      	lbu	a2,0(s0)
482a5a6e:	9fc1      	lw	a2,4(a3)
482a5a70:	e90d      	or	s1,s0
482a5a72:	bfc1      	lwu	a2,4(a3)

482a5a74 <connect_remain_profile>:
482a5a74:	64f5      	save	40,ra,s0-s1
}

//检测是否还有服务没有连上
uint8 connect_remain_profile(void)
{
482a5a76:	6c00      	li	a0,0
    
    uint8 i;
    uint8 need_connect = 0;
482a5a78:	d405      	sw	a0,20(sp)
482a5a7a:	b363      	lw	v1,482a5c04 <connect_remain_profile+0x190>
    uint8 tmp_already_conn_init = 0;

    if(check_id2 >= g_btmanager_gl_var.support_dev_num)
482a5a7c:	b461      	lw	a0,482a5c00 <connect_remain_profile+0x18c>
482a5a7e:	a36b      	lbu	v1,11(v1)
482a5a80:	a440      	lbu	v0,0(a0)
482a5a82:	ea63      	sltu	v0,v1
482a5a84:	6103      	btnez	482a5a8c <connect_remain_profile+0x18>
482a5a86:	67dd      	move	a2,sp
    {
        check_id2 = 0;
482a5a88:	a6b4      	lbu	a1,20(a2)
482a5a8a:	c4a0      	sb	a1,0(a0)
482a5a8c:	9705      	lw	a3,20(sp)
    }

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
482a5a8e:	d704      	sw	a3,16(sp)
482a5a90:	ef63      	sltu	a3,v1
482a5a92:	f0a0 6012 	bteqz	482a5bfa <connect_remain_profile+0x186>
482a5a96:	b15b      	lw	s1,482a5c00 <connect_remain_profile+0x18c>
    {
        libc_memcpy(g_bt_auto_connect_addr, g_bt_stack_cur_info.rmt_dev[check_id2].addr.bytes, BD_ADDR_LEN);
482a5a98:	6d12      	li	a1,18
482a5a9a:	a1c0      	lbu	a2,0(s1)
482a5a9c:	b05c      	lw	s0,482a5c0c <connect_remain_profile+0x198>
482a5a9e:	eeb8      	mult	a2,a1
482a5aa0:	b45a      	lw	a0,482a5c08 <connect_remain_profile+0x194>
482a5aa2:	eb12      	mflo	v1
482a5aa4:	b25b      	lw	v0,482a5c10 <connect_remain_profile+0x19c>
482a5aa6:	e315      	addu	a1,v1,s0
482a5aa8:	6e06      	li	a2,6
482a5aaa:	ea40      	jalr	v0
482a5aac:	6f00      	li	a3,0
482a5aae:	a160      	lbu	v1,0(s1)

    //确定本次回连没成功，回连下一个设备的服务
       // tmp_already_conn_init = com_get_dev_conn_init();
       // if((tmp_already_conn_init == 1) && (g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn == 0))
       if(g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn == 0)
482a5ab0:	6c12      	li	a0,18
482a5ab2:	6743      	move	v0,v1
482a5ab4:	ea11      	zeb	v0
482a5ab6:	ea98      	mult	v0,a0
482a5ab8:	400b      	addiu	s0,s0,-5
482a5aba:	ed12      	mflo	a1
482a5abc:	e519      	addu	a2,a1,s0
482a5abe:	a684      	lbu	a0,4(a2)
482a5ac0:	2c0a      	bnez	a0,482a5ad6 <connect_remain_profile+0x62>
482a5ac2:	4341      	addiu	v0,v1,1
        {
            if(++check_id2 >= g_btmanager_gl_var.support_dev_num)
482a5ac4:	b350      	lw	v1,482a5c04 <connect_remain_profile+0x190>
482a5ac6:	c140      	sb	v0,0(s1)
482a5ac8:	a3eb      	lbu	a3,11(v1)
482a5aca:	ea11      	zeb	v0
482a5acc:	eae3      	sltu	v0,a3
482a5ace:	f080 610b 	btnez	482a5be8 <connect_remain_profile+0x174>
482a5ad2:	c180      	sb	a0,0(s1)
            {
                check_id2 = 0;
482a5ad4:	1089      	b	482a5be8 <connect_remain_profile+0x174>
            }
            continue;
482a5ad6:	f020 a04e 	lbu	v0,46(s0)
        }
    //    libc_print("check_id2 =",check_id2,2);

        //主箱或者从箱不检测tws设备此项
        if (!( ((g_bt_stack_cur_info.dev_role == 1) || (g_bt_stack_cur_info.dev_role == 2))
482a5ada:	42ef      	addiu	a3,v0,-1
482a5adc:	ef11      	zeb	a3
482a5ade:	5f02      	sltiu	a3,2
482a5ae0:	6003      	bteqz	482a5ae8 <connect_remain_profile+0x74>
482a5ae2:	a675      	lbu	v1,21(a2)
482a5ae4:	7302      	cmpi	v1,2
482a5ae6:	603d      	bteqz	482a5b62 <connect_remain_profile+0xee>
482a5ae8:	b64c      	lw	a2,482a5c18 <connect_remain_profile+0x1a4>
              &&(g_bt_stack_cur_info.rmt_dev[check_id2].dev_type == TWS_DEV)))
        {
        if ((g_bt_auto_connect_ctrl.enable_a2dp == 1)
482a5aea:	6f01      	li	a3,1
482a5aec:	a663      	lbu	v1,3(a2)
482a5aee:	ef6c      	and	a3,v1
482a5af0:	270d      	beqz	a3,482a5b0c <connect_remain_profile+0x98>
482a5af2:	6a03      	li	v0,3
482a5af4:	ec4c      	and	a0,v0
482a5af6:	7401      	cmpi	a0,1
482a5af8:	6109      	btnez	482a5b0c <connect_remain_profile+0x98>
482a5afa:	e5cd      	addu	v1,a1,a2
                && ((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & A2DP_CONNECTED) == 0)
                && ((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & HFP_CONNECTED) != 0))
        {
            if (g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt > A2DP_CONNECT_TIME_AFTER_HFP_CONNECT)
482a5afc:	ab4c      	lhu	v0,24(v1)
482a5afe:	5a11      	sltiu	v0,17
482a5b00:	6121      	btnez	482a5b44 <connect_remain_profile+0xd0>
482a5b02:	6786      	move	a0,a2
            {
                need_connect = connect_remain_profile_bank(&g_bt_auto_connect_ctrl.dev_info[check_id2],
482a5b04:	4c0e      	addiu	a0,14
482a5b06:	e591      	addu	a0,a1,a0
482a5b08:	6d02      	li	a1,2
482a5b0a:	1017      	b	482a5b3a <connect_remain_profile+0xc6>
482a5b0c:	6d02      	li	a1,2
                        AUTO_CONNECT_NEED_CONNECT_A2DP);
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt++;
            }
        }
        else if ((g_bt_auto_connect_ctrl.enable_hfp == 1)
482a5b0e:	ed6c      	and	a1,v1
482a5b10:	251b      	beqz	a1,482a5b48 <connect_remain_profile+0xd4>
482a5b12:	b33c      	lw	v1,482a5c00 <connect_remain_profile+0x18c>
482a5b14:	6d12      	li	a1,18
482a5b16:	a3e0      	lbu	a3,0(v1)
482a5b18:	b43f      	lw	a0,482a5c14 <connect_remain_profile+0x1a0>
482a5b1a:	efb8      	mult	a3,a1
482a5b1c:	6b03      	li	v1,3
482a5b1e:	ed12      	mflo	a1
482a5b20:	e589      	addu	v0,a1,a0
482a5b22:	a2e4      	lbu	a3,4(v0)
482a5b24:	ef6c      	and	a3,v1
482a5b26:	7702      	cmpi	a3,2
482a5b28:	610f      	btnez	482a5b48 <connect_remain_profile+0xd4>
482a5b2a:	e5cd      	addu	v1,a1,a2
                && ((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & HFP_CONNECTED) == 0)
                && ((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & A2DP_CONNECTED) != 0))
        {
            if (g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt > HFP_CONNECT_TIME_AFTER_A2DP_CONNECT)
482a5b2c:	ab4c      	lhu	v0,24(v1)
482a5b2e:	5a11      	sltiu	v0,17
482a5b30:	6109      	btnez	482a5b44 <connect_remain_profile+0xd0>
482a5b32:	6746      	move	v0,a2
            {
                need_connect = connect_remain_profile_bank(&g_bt_auto_connect_ctrl.dev_info[check_id2],
482a5b34:	4a0e      	addiu	v0,14
482a5b36:	e551      	addu	a0,a1,v0
482a5b38:	6d01      	li	a1,1
482a5b3a:	1b10 975b 	jal	48625d6c <connect_remain_profile_bank>
482a5b3e:	6500      	nop
482a5b40:	d205      	sw	v0,20(sp)
482a5b42:	101a      	b	482a5b78 <connect_remain_profile+0x104>
482a5b44:	4241      	addiu	v0,v0,1
                        AUTO_CONNECT_NEED_CONNECT_HFP);
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt++;
482a5b46:	1017      	b	482a5b76 <connect_remain_profile+0x102>
482a5b48:	b52e      	lw	a1,482a5c00 <connect_remain_profile+0x18c>
            }
        }
        else
        {
            g_bt_auto_connect_ctrl.dev_info[check_id2].reconnect_another_cnt = 0;
482a5b4a:	6f12      	li	a3,18
482a5b4c:	a580      	lbu	a0,0(a1)
482a5b4e:	6a00      	li	v0,0
482a5b50:	ecf8      	mult	a0,a3
482a5b52:	eb12      	mflo	v1
482a5b54:	e3d1      	addu	a0,v1,a2
482a5b56:	c455      	sb	v0,21(a0)
482a5b58:	a560      	lbu	v1,0(a1)
            g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt = 0;
482a5b5a:	ebf8      	mult	v1,a3
482a5b5c:	ec12      	mflo	a0
482a5b5e:	e4cd      	addu	v1,a0,a2
482a5b60:	1009      	b	482a5b74 <connect_remain_profile+0x100>
482a5b62:	b62e      	lw	a2,482a5c18 <connect_remain_profile+0x1a4>
        }
        }
        else
        {
               g_bt_auto_connect_ctrl.dev_info[check_id2].reconnect_another_cnt = 0;
482a5b64:	6c00      	li	a0,0
482a5b66:	e5cd      	addu	v1,a1,a2
482a5b68:	c395      	sb	a0,21(v1)
482a5b6a:	a140      	lbu	v0,0(s1)
               g_bt_auto_connect_ctrl.dev_info[check_id2].onlyone_disconnect_cnt = 0;
482a5b6c:	6d12      	li	a1,18
482a5b6e:	eab8      	mult	v0,a1
482a5b70:	ef12      	mflo	a3
482a5b72:	e7cd      	addu	v1,a3,a2
482a5b74:	6a00      	li	v0,0
482a5b76:	cb4c      	sh	v0,24(v1)
482a5b78:	b527      	lw	a1,482a5c14 <connect_remain_profile+0x1a0>
        }

        //主箱不检测从箱此项
        if (!( (g_bt_stack_cur_info.dev_role == 1)
482a5b7a:	f020 a5ce 	lbu	a2,46(a1)
482a5b7e:	7601      	cmpi	a2,1
482a5b80:	6109      	btnez	482a5b94 <connect_remain_profile+0x120>
482a5b82:	b620      	lw	a2,482a5c00 <connect_remain_profile+0x18c>
482a5b84:	6c12      	li	a0,18
482a5b86:	a660      	lbu	v1,0(a2)
482a5b88:	eb98      	mult	v1,a0
482a5b8a:	eb12      	mflo	v1
482a5b8c:	e3a9      	addu	v0,v1,a1
482a5b8e:	a2f5      	lbu	a3,21(v0)
482a5b90:	7702      	cmpi	a3,2
482a5b92:	601b      	bteqz	482a5bca <connect_remain_profile+0x156>
482a5b94:	b21b      	lw	v0,482a5c00 <connect_remain_profile+0x18c>
              &&(g_bt_stack_cur_info.rmt_dev[check_id2].dev_type == TWS_DEV) ))    
        {      
        //检测是否需要连接AVRCP
        if (((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & AVRCP_CONNECTED_MY) == 0)
482a5b96:	6e12      	li	a2,18
482a5b98:	a2e0      	lbu	a3,0(v0)
482a5b9a:	6c06      	li	a0,6
482a5b9c:	efd8      	mult	a3,a2
482a5b9e:	ef12      	mflo	a3
482a5ba0:	e7ad      	addu	v1,a3,a1
482a5ba2:	a344      	lbu	v0,4(v1)
482a5ba4:	b51d      	lw	a1,482a5c18 <connect_remain_profile+0x1a4>
482a5ba6:	ea8c      	and	v0,a0
482a5ba8:	7202      	cmpi	v0,2
482a5baa:	e7b1      	addu	a0,a3,a1
482a5bac:	6a00      	li	v0,0
                && ((g_bt_stack_cur_info.rmt_dev[check_id2].serv_conn & A2DP_CONNECTED) != 0))
        //倘若A2DP已连接且AVRCP未连接
        {
            if (g_bt_auto_connect_ctrl.dev_info[check_id2].avrcp_disconnect_cnt > CHECK_AVRCP_CONNECT_TIME)
            {
                need_connect = AUTO_CONNECT_NEED_CONNECT_AVRCP;

                g_bt_auto_connect_ctrl.dev_info[check_id2].avrcp_disconnect_cnt = 0;
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[check_id2].avrcp_disconnect_cnt++;
            }
        }
        else
        {
            g_bt_auto_connect_ctrl.dev_info[check_id2].avrcp_disconnect_cnt = 0;
482a5bae:	6109      	btnez	482a5bc2 <connect_remain_profile+0x14e>
482a5bb0:	ac4b      	lhu	v0,22(a0)
482a5bb2:	5a09      	sltiu	v0,9
482a5bb4:	6105      	btnez	482a5bc0 <connect_remain_profile+0x14c>
482a5bb6:	6b04      	li	v1,4
482a5bb8:	6d00      	li	a1,0
482a5bba:	d305      	sw	v1,20(sp)
482a5bbc:	ccab      	sh	a1,22(a0)
482a5bbe:	101d      	b	482a5bfa <connect_remain_profile+0x186>
482a5bc0:	4241      	addiu	v0,v0,1
482a5bc2:	cc4b      	sh	v0,22(a0)
482a5bc4:	9405      	lw	a0,20(sp)
        }

        if (need_connect != 0)
482a5bc6:	2405      	beqz	a0,482a5bd2 <connect_remain_profile+0x15e>
482a5bc8:	1018      	b	482a5bfa <connect_remain_profile+0x186>
        {
            break; //每次只连一个设备
482a5bca:	b214      	lw	v0,482a5c18 <connect_remain_profile+0x1a4>
        }
        }
        else
        {
             g_bt_auto_connect_ctrl.dev_info[check_id2].avrcp_disconnect_cnt = 0;
482a5bcc:	6f00      	li	a3,0
482a5bce:	e359      	addu	a2,v1,v0
482a5bd0:	ceeb      	sh	a3,22(a2)
482a5bd2:	b40c      	lw	a0,482a5c00 <connect_remain_profile+0x18c>
        }    
        if(++check_id2 >= g_btmanager_gl_var.support_dev_num)
482a5bd4:	b30c      	lw	v1,482a5c04 <connect_remain_profile+0x190>
482a5bd6:	a4e0      	lbu	a3,0(a0)
482a5bd8:	a3ab      	lbu	a1,11(v1)
482a5bda:	47c1      	addiu	a2,a3,1
482a5bdc:	c4c0      	sb	a2,0(a0)
482a5bde:	ee11      	zeb	a2
482a5be0:	eea3      	sltu	a2,a1
482a5be2:	6102      	btnez	482a5be8 <connect_remain_profile+0x174>
482a5be4:	6a00      	li	v0,0
        {
            check_id2 = 0;
482a5be6:	c440      	sb	v0,0(a0)
482a5be8:	9704      	lw	a3,16(sp)
482a5bea:	b607      	lw	a2,482a5c04 <connect_remain_profile+0x190>
482a5bec:	4761      	addiu	v1,a3,1
482a5bee:	eb11      	zeb	v1
482a5bf0:	d304      	sw	v1,16(sp)
482a5bf2:	a68b      	lbu	a0,11(a2)
482a5bf4:	9504      	lw	a1,16(sp)
482a5bf6:	ed83      	sltu	a1,a0
482a5bf8:	174c      	b	482a5a92 <connect_remain_profile+0x1e>
482a5bfa:	9205      	lw	v0,20(sp)
        }

    }
    return need_connect;
    
}
482a5bfc:	6475      	restore	40,ra,s0-s1
482a5bfe:	e8a0      	jrc	ra
482a5c00:	a360      	lbu	v1,0(v1)
482a5c02:	9fc1      	lw	a2,4(a3)
482a5c04:	a33c      	lbu	s1,28(v1)
482a5c06:	9fc1      	lw	a2,4(a3)
482a5c08:	a2c0      	lbu	a2,0(v0)
482a5c0a:	9fc1      	lw	a2,4(a3)
482a5c0c:	a301      	lbu	s0,1(v1)
482a5c0e:	9fc1      	lw	a2,4(a3)
482a5c10:	e905      	break	8
482a5c12:	bfc1      	lwu	a2,4(a3)
482a5c14:	a2fc      	lbu	a3,28(v0)
482a5c16:	9fc1      	lw	a2,4(a3)
482a5c18:	a2c8      	lbu	a2,8(v0)
482a5c1a:	9fc1      	lw	a2,4(a3)

482a5c1c <check_connect_status>:
482a5c1c:	64f7      	save	56,ra,s0-s1
#else
//检测是否还有服务没有连上
uint8 connect_remain_profile(void)
{
    uint8 i;
    uint8 need_connect = 0;

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
    {
        libc_memcpy(g_bt_auto_connect_addr, g_bt_stack_cur_info.rmt_dev[i].addr.bytes, BD_ADDR_LEN);

        if ((g_bt_auto_connect_ctrl.enable_a2dp == 1)
                && ((g_bt_stack_cur_info.rmt_dev[i].serv_conn & A2DP_CONNECTED) == 0)
                && (((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HFP_CONNECTED) != 0)
                    ||((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HID_CONNECTED)!=0)))
        {
            if (g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt > A2DP_CONNECT_TIME_AFTER_HFP_CONNECT)
            {
                need_connect = connect_remain_profile_bank(&g_bt_auto_connect_ctrl.dev_info[i],
                        AUTO_CONNECT_NEED_CONNECT_A2DP);
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt++;
            }
        }
        else if ((g_bt_auto_connect_ctrl.enable_hfp == 1)
                && ((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HFP_CONNECTED) == 0)
                && (((g_bt_stack_cur_info.rmt_dev[i].serv_conn & A2DP_CONNECTED) != 0)
                     ||((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HID_CONNECTED)!=0)))
        {
            if (g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt > HFP_CONNECT_TIME_AFTER_A2DP_CONNECT)
            {
                need_connect = connect_remain_profile_bank(&g_bt_auto_connect_ctrl.dev_info[i],
                        AUTO_CONNECT_NEED_CONNECT_HFP);
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt++;
            }
        }
        else if ((g_bt_auto_connect_ctrl.enable_hid == 1)
                && ((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HID_CONNECTED) == 0)
                && (((g_bt_stack_cur_info.rmt_dev[i].serv_conn & A2DP_CONNECTED) != 0)
                     ||((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HFP_CONNECTED)!=0)))
        {
            if (g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt > HID_CONNECT_TIME_AFTER_OTHER_CONNECT)
            {
                need_connect = connect_remain_profile_bank(&g_bt_auto_connect_ctrl.dev_info[i],
                        AUTO_CONNECT_NEED_CONNECT_HID);
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt++;
            }
        }
        else
        {
            g_bt_auto_connect_ctrl.dev_info[i].reconnect_another_cnt = 0;
            g_bt_auto_connect_ctrl.dev_info[i].onlyone_disconnect_cnt = 0;
        }

        //检测是否需要连接AVRCP
        if (((g_bt_stack_cur_info.rmt_dev[i].serv_conn & AVRCP_CONNECTED_MY) == 0)
                && ((g_bt_stack_cur_info.rmt_dev[i].serv_conn & A2DP_CONNECTED) != 0))
        //倘若A2DP已连接且AVRCP未连接
        {
            if (g_bt_auto_connect_ctrl.dev_info[i].avrcp_disconnect_cnt > CHECK_AVRCP_CONNECT_TIME)
            {
                need_connect = AUTO_CONNECT_NEED_CONNECT_AVRCP;

                g_bt_auto_connect_ctrl.dev_info[i].avrcp_disconnect_cnt = 0;
            }
            else
            {
                g_bt_auto_connect_ctrl.dev_info[i].avrcp_disconnect_cnt++;
            }
        }
        else
        {
            g_bt_auto_connect_ctrl.dev_info[i].avrcp_disconnect_cnt = 0;
        }

        if (need_connect != 0)
        {
            break; //每次只连一个设备
        }
    }

    return need_connect;
}
#endif

void check_connect_status(void)
{
482a5c1e:	b45c      	lw	a0,482a5d8c <check_connect_status+0x170>
    uint8 i, j ;
    auto_conn_dev_info_t tmp_dev;
    //PRINT_DATA(g_bt_auto_connect_ctrl.dev_info[0].remote_addr.bytes,6);
    //PRINT_DATA(g_bt_auto_connect_ctrl.dev_info[1].remote_addr.bytes,6);
    if (g_bt_stack_cur_info.num_connected == g_btmanager_gl_var.support_dev_num)
482a5c20:	b25c      	lw	v0,482a5d90 <check_connect_status+0x174>
482a5c22:	a463      	lbu	v1,3(a0)
482a5c24:	a24b      	lbu	v0,11(v0)
482a5c26:	eb4a      	cmp	v1,v0
482a5c28:	6126      	btnez	482a5c76 <check_connect_status+0x5a>
482a5c2a:	6800      	li	s0,0
    {
        for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
482a5c2c:	2216      	beqz	v0,482a5c5a <check_connect_status+0x3e>
482a5c2e:	6a12      	li	v0,18
        {
            if (((g_bt_stack_cur_info.rmt_dev[i].serv_conn & HFP_CONNECTED) != 0)
482a5c30:	e858      	mult	s0,v0
482a5c32:	b657      	lw	a2,482a5d8c <check_connect_status+0x170>
482a5c34:	ef12      	mflo	a3
482a5c36:	6b03      	li	v1,3
482a5c38:	e7d5      	addu	a1,a3,a2
482a5c3a:	a584      	lbu	a0,4(a1)
482a5c3c:	ec6c      	and	a0,v1
482a5c3e:	2406      	beqz	a0,482a5c4c <check_connect_status+0x30>
482a5c40:	18f1 9600 	jal	489e5800 <stop_auto_con>
                    || ((g_bt_stack_cur_info.rmt_dev[i].serv_conn & A2DP_CONNECTED) != 0))
            {

                //切bank
                stop_auto_con(i);
482a5c44:	6790      	move	a0,s0
482a5c46:	4181      	addiu	a0,s1,1
                j++;
482a5c48:	6724      	move	s1,a0
482a5c4a:	e911      	zeb	s1
482a5c4c:	b551      	lw	a1,482a5d90 <check_connect_status+0x174>
482a5c4e:	40c1      	addiu	a2,s0,1
482a5c50:	6706      	move	s0,a2
482a5c52:	a56b      	lbu	v1,11(a1)
482a5c54:	e811      	zeb	s0
482a5c56:	e863      	sltu	s0,v1
482a5c58:	61ea      	btnez	482a5c2e <check_connect_status+0x12>
482a5c5a:	b24e      	lw	v0,482a5d90 <check_connect_status+0x174>
                //PRINT_INFO("clear flag");            
                //g_bt_auto_connect_ctrl.dev_info[i].connect_cnt = 0;
                //g_bt_auto_connect_ctrl.dev_info[i].conn_flag = 0;

            }
        }

        if ((j == g_btmanager_gl_var.support_dev_num)
482a5c5c:	a2eb      	lbu	a3,11(v0)
482a5c5e:	ef2e      	xor	a3,s1
482a5c60:	2f75      	bnez	a3,482a5d4c <check_connect_status+0x130>
482a5c62:	b44d      	lw	a0,482a5d94 <check_connect_status+0x178>
482a5c64:	a461      	lbu	v1,1(a0)
482a5c66:	7301      	cmpi	v1,1
482a5c68:	6171      	btnez	482a5d4c <check_connect_status+0x130>
482a5c6a:	6d00      	li	a1,0
                && (g_bt_auto_connect_ctrl.need_auto_connect == 1))
        {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
           once_auto_flag = 0;
482a5c6c:	b64b      	lw	a2,482a5d98 <check_connect_status+0x17c>
482a5c6e:	c4a1      	sb	a1,1(a0)
#endif
            g_bt_auto_connect_ctrl.need_auto_connect = 0x0;
482a5c70:	0c38      	la	a0,482a5d50 <check_connect_status+0x134>
            PRINT_INFO("stop auto-conn1");
482a5c72:	c6a0      	sb	a1,0(a2)
482a5c74:	1066      	b	482a5d42 <check_connect_status+0x126>
482a5c76:	2345      	beqz	v1,482a5d02 <check_connect_status+0xe6>
        }
        return;
    }

    if (g_bt_stack_cur_info.num_connected != 0)
482a5c78:	f020 a4ee 	lbu	a3,46(a0)
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        //添加条件 当副箱连接上了主箱的时候，那么就不再去回连手机
        if((g_bt_stack_cur_info.dev_role == TWS_SLAVE)&&( g_bt_auto_connect_ctrl.need_auto_connect!=0))
482a5c7c:	7702      	cmpi	a3,2
482a5c7e:	610b      	btnez	482a5c96 <check_connect_status+0x7a>
482a5c80:	b345      	lw	v1,482a5d94 <check_connect_status+0x178>
482a5c82:	a381      	lbu	a0,1(v1)
482a5c84:	2408      	beqz	a0,482a5c96 <check_connect_status+0x7a>
482a5c86:	6d00      	li	a1,0
        {
             g_bt_auto_connect_ctrl.need_auto_connect = 0x0;
482a5c88:	c3a1      	sb	a1,1(v1)
482a5c8a:	b245      	lw	v0,482a5d9c <check_connect_status+0x180>
             PRINT_INFO("stop auto-conn2");
482a5c8c:	6d00      	li	a1,0
482a5c8e:	0c36      	la	a0,482a5d64 <check_connect_status+0x148>
482a5c90:	67c5      	move	a2,a1
482a5c92:	ea40      	jalr	v0
482a5c94:	6f4b      	li	a3,75
482a5c96:	b33e      	lw	v1,482a5d8c <check_connect_status+0x170>
        }
        //调整设备回连顺序
        if(g_bt_stack_cur_info.dev_role==TWS_MASTER)
482a5c98:	f020 a3ce 	lbu	a2,46(v1)
482a5c9c:	7601      	cmpi	a2,1
482a5c9e:	612c      	btnez	482a5cf8 <check_connect_status+0xdc>
482a5ca0:	a3e3      	lbu	a3,3(v1)
        {
            for (i = 0; i < g_bt_stack_cur_info.num_connected ; i++)
482a5ca2:	6900      	li	s1,0
482a5ca4:	2729      	beqz	a3,482a5cf8 <check_connect_status+0xdc>
482a5ca6:	b03b      	lw	s0,482a5d90 <check_connect_status+0x174>
            {
                for(j = 0;j < g_btmanager_gl_var.support_dev_num;j++)
482a5ca8:	a06b      	lbu	v1,11(s0)
482a5caa:	6800      	li	s0,0
482a5cac:	231e      	beqz	v1,482a5cea <check_connect_status+0xce>
482a5cae:	6b12      	li	v1,18
                {
                    //调整回连设备顺序
                    if ((libc_memcmp(g_bt_auto_connect_ctrl.dev_info[j].remote_addr.bytes,
482a5cb0:	e878      	mult	s0,v1
482a5cb2:	b439      	lw	a0,482a5d94 <check_connect_status+0x178>
482a5cb4:	ef12      	mflo	a3
482a5cb6:	e978      	mult	s1,v1
482a5cb8:	b53a      	lw	a1,482a5da0 <check_connect_status+0x184>
482a5cba:	ee12      	mflo	a2
482a5cbc:	4c0e      	addiu	a0,14
482a5cbe:	b23a      	lw	v0,482a5da4 <check_connect_status+0x188>
482a5cc0:	e791      	addu	a0,a3,a0
482a5cc2:	e6b5      	addu	a1,a2,a1
482a5cc4:	6f02      	li	a3,2
482a5cc6:	ea40      	jalr	v0
482a5cc8:	6e06      	li	a2,6
482a5cca:	2a08      	bnez	v0,482a5cdc <check_connect_status+0xc0>
482a5ccc:	e90a      	cmp	s1,s0
482a5cce:	6006      	bteqz	482a5cdc <check_connect_status+0xc0>
482a5cd0:	b236      	lw	v0,482a5da8 <check_connect_status+0x18c>
                         g_bt_stack_cur_info.rmt_dev[i].addr.bytes, 6) == 0) && (i != j))
                    {
                        com_exchange_vale(&tmp_dev,i,j);
482a5cd2:	0404      	addiu	a0,sp,16
482a5cd4:	67b1      	move	a1,s1
482a5cd6:	ea40      	jalr	v0
482a5cd8:	67d0      	move	a2,s0
482a5cda:	1007      	b	482a5cea <check_connect_status+0xce>
                        break;                        
482a5cdc:	b62d      	lw	a2,482a5d90 <check_connect_status+0x174>
482a5cde:	4081      	addiu	a0,s0,1
482a5ce0:	6704      	move	s0,a0
482a5ce2:	a6ab      	lbu	a1,11(a2)
482a5ce4:	e811      	zeb	s0
482a5ce6:	e8a3      	sltu	s0,a1
482a5ce8:	61e2      	btnez	482a5cae <check_connect_status+0x92>
482a5cea:	b329      	lw	v1,482a5d8c <check_connect_status+0x170>
482a5cec:	4141      	addiu	v0,s1,1
482a5cee:	6722      	move	s1,v0
482a5cf0:	a3e3      	lbu	a3,3(v1)
482a5cf2:	e911      	zeb	s1
482a5cf4:	e9e3      	sltu	s1,a3
482a5cf6:	61d7      	btnez	482a5ca6 <check_connect_status+0x8a>
482a5cf8:	b627      	lw	a2,482a5d94 <check_connect_status+0x178>
                    }    
                }
             }
        }
#endif
        if(g_bt_auto_connect_ctrl.need_auto_connect!=0)
482a5cfa:	a6a1      	lbu	a1,1(a2)
482a5cfc:	2502      	beqz	a1,482a5d02 <check_connect_status+0xe6>
482a5cfe:	b32c      	lw	v1,482a5dac <check_connect_status+0x190>
        {
            //切bank,该bank空间紧张 
            check_auto_con_flag(); 
482a5d00:	ebc0      	jalrc	v1
482a5d02:	b424      	lw	a0,482a5d90 <check_connect_status+0x174>
        }      
    }

    //如果每个设备都不需要回连，则停止回连
    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
482a5d04:	a46b      	lbu	v1,11(a0)
482a5d06:	6c00      	li	a0,0
482a5d08:	230f      	beqz	v1,482a5d28 <check_connect_status+0x10c>
482a5d0a:	b623      	lw	a2,482a5d94 <check_connect_status+0x178>
482a5d0c:	6d12      	li	a1,18
482a5d0e:	ecb8      	mult	a0,a1
    {
        if (g_bt_auto_connect_ctrl.dev_info[i].conn_flag == 1)
482a5d10:	ef12      	mflo	a3
482a5d12:	e7c9      	addu	v0,a3,a2
482a5d14:	a2fd      	lbu	a3,29(v0)
482a5d16:	7701      	cmpi	a3,1
482a5d18:	6007      	bteqz	482a5d28 <check_connect_status+0x10c>
482a5d1a:	44e1      	addiu	a3,a0,1
482a5d1c:	6787      	move	a0,a3
482a5d1e:	6743      	move	v0,v1
482a5d20:	ec11      	zeb	a0
482a5d22:	ea11      	zeb	v0
482a5d24:	ec43      	sltu	a0,v0
482a5d26:	61f3      	btnez	482a5d0e <check_connect_status+0xf2>
482a5d28:	67a3      	move	a1,v1
        {
            break;
        }
    }
    if ((i == g_btmanager_gl_var.support_dev_num)
482a5d2a:	ed11      	zeb	a1
482a5d2c:	ed8e      	xor	a1,a0
482a5d2e:	2d0e      	bnez	a1,482a5d4c <check_connect_status+0x130>
482a5d30:	b419      	lw	a0,482a5d94 <check_connect_status+0x178>
482a5d32:	a4c1      	lbu	a2,1(a0)
482a5d34:	7601      	cmpi	a2,1
482a5d36:	610a      	btnez	482a5d4c <check_connect_status+0x130>
482a5d38:	b318      	lw	v1,482a5d98 <check_connect_status+0x17c>
            && (g_bt_auto_connect_ctrl.need_auto_connect == 1))
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
       once_auto_flag = 0;
482a5d3a:	6a00      	li	v0,0
482a5d3c:	c441      	sb	v0,1(a0)
#endif
        g_bt_auto_connect_ctrl.need_auto_connect = 0x0;
482a5d3e:	c340      	sb	v0,0(v1)
482a5d40:	0c0e      	la	a0,482a5d78 <check_connect_status+0x15c>
#ifdef __ESD_MODE_
        g_end_autoconnt = 1;
#endif
        PRINT_INFO("stop auto-conn");
482a5d42:	6d00      	li	a1,0
482a5d44:	b216      	lw	v0,482a5d9c <check_connect_status+0x180>
482a5d46:	67c5      	move	a2,a1
482a5d48:	ea40      	jalr	v0
482a5d4a:	6f4b      	li	a3,75
482a5d4c:	6477      	restore	56,ra,s0-s1
    }
}
482a5d4e:	e8a0      	jrc	ra
482a5d50:	493c      	addiu	s1,60
482a5d52:	203e      	beqz	s0,482a5dd0 <com_btmanager_autoconnect+0x20>
482a5d54:	7473      	cmpi	a0,115
482a5d56:	706f      	cmpi	s0,111
482a5d58:	6120      	btnez	482a5d9a <check_connect_status+0x17e>
482a5d5a:	7475      	cmpi	a0,117
482a5d5c:	2d6f      	bnez	a1,482a5e3c <com_btmanager_sppble_send>
482a5d5e:	6f63      	li	a3,99
482a5d60:	6e6e      	li	a2,110
482a5d62:	0031      	addiu	s0,sp,196
482a5d64:	493c      	addiu	s1,60
482a5d66:	203e      	beqz	s0,482a5de4 <com_btmanager_autoconnect+0x34>
482a5d68:	7473      	cmpi	a0,115
482a5d6a:	706f      	cmpi	s0,111
482a5d6c:	6120      	btnez	482a5dae <check_connect_status+0x192>
482a5d6e:	7475      	cmpi	a0,117
482a5d70:	2d6f      	bnez	a1,482a5e50 <com_btmanager_sppble_send+0x14>
482a5d72:	6f63      	li	a3,99
482a5d74:	6e6e      	li	a2,110
482a5d76:	0032      	addiu	s0,sp,200
482a5d78:	493c      	addiu	s1,60
482a5d7a:	203e      	beqz	s0,482a5df8 <com_btmanager_autoconnect+0x48>
482a5d7c:	7473      	cmpi	a0,115
482a5d7e:	706f      	cmpi	s0,111
482a5d80:	6120      	btnez	482a5dc2 <com_btmanager_autoconnect+0x12>
482a5d82:	7475      	cmpi	a0,117
482a5d84:	2d6f      	bnez	a1,482a5e64 <com_btmanager_sppble_send+0x28>
482a5d86:	6f63      	li	a3,99
482a5d88:	6e6e      	li	a2,110
482a5d8a:	0000      	addiu	s0,sp,0
482a5d8c:	a2fc      	lbu	a3,28(v0)
482a5d8e:	9fc1      	lw	a2,4(a3)
482a5d90:	a33c      	lbu	s1,28(v1)
482a5d92:	9fc1      	lw	a2,4(a3)
482a5d94:	a2c8      	lbu	a2,8(v0)
482a5d96:	9fc1      	lw	a2,4(a3)
482a5d98:	a361      	lbu	v1,1(v1)
482a5d9a:	9fc1      	lw	a2,4(a3)
482a5d9c:	e901      	sdbbp	8
482a5d9e:	bfc1      	lwu	a2,4(a3)
482a5da0:	a301      	lbu	s0,1(v1)
482a5da2:	9fc1      	lw	a2,4(a3)
482a5da4:	e905      	break	8
482a5da6:	bfc1      	lwu	a2,4(a3)
482a5da8:	5895      	sltiu	s0,149
482a5daa:	48c2      	addiu	s0,-62
482a5dac:	5801      	sltiu	s0,1
482a5dae:	48c2      	addiu	s0,-62

482a5db0 <com_btmanager_autoconnect>:
482a5db0:	64e3      	save	24,ra,s0

void __section__(".text.auto_connect_bank") auto_connect_profile(uint8 need_connect)
{
    msg_apps_t conn_msg;

    g_btmanager_gl_var.autoconnect_link_succ_flag = 1;

    if ((need_connect & AUTO_CONNECT_NEED_CONNECT_HFP) != 0)
    {
        conn_msg.type = MSG_BTSTACK_HFP_CONNECT_SYNC;
    }
    else if ((need_connect & AUTO_CONNECT_NEED_CONNECT_A2DP) != 0)
    {
        conn_msg.type = MSG_BTSTACK_A2DP_CONNECT_SYNC;
    }
    else if((need_connect & AUTO_CONNECT_NEED_CONNECT_HID) != 0)
    {
        conn_msg.type = MSG_BTSTACK_HID_CONNECT_SYNC;
    }
    else //if ((need_connect & AUTO_CONNECT_NEED_CONNECT_A2DP) != 0)
    {
        conn_msg.type = MSG_BTSTACK_AVRCP_CONNECT_SYNC;
    }

    //设置BT MANAGER状态为“连接”
    if (g_btmanager_gl_var.btmanager_status != BTMANAGER_STATUS_LINKING)
    {
        change_btmanager_status(BTMANAGER_STATUS_LINKING);
    }

    send_sync_msg_btmanager(g_bt_auto_connect_addr, &conn_msg, NULL, 0);
}

/*COMMON 后台蓝牙超时断开后回连统一处理*/
void com_btmanager_autoconnect(void)
{
482a5db2:	b31d      	lw	v1,482a5e24 <com_btmanager_autoconnect+0x74>
    uint8 need_connect = 0;

    //uint8 weixin_flag;

    //btstack没有初始化完成的话,此时发起回连,不成功,需要间隔
    //20s才发起下一次回连.避免浪费20s,加快回连成功时间
    if (g_bt_stack_cur_info.conn_status == CONN_STATUS_NONE)
482a5db4:	a340      	lbu	v0,0(v1)
482a5db6:	2234      	beqz	v0,482a5e20 <com_btmanager_autoconnect+0x70>
482a5db8:	1950 9707 	jal	482a5c1c <check_connect_status>
    {
        return;
    }

    check_connect_status();
482a5dbc:	6500      	nop
482a5dbe:	b01b      	lw	s0,482a5e28 <com_btmanager_autoconnect+0x78>

    if (g_bt_auto_connect_ctrl.need_auto_connect == 1)
482a5dc0:	a081      	lbu	a0,1(s0)
482a5dc2:	7401      	cmpi	a0,1
482a5dc4:	6112      	btnez	482a5dea <com_btmanager_autoconnect+0x3a>
482a5dc6:	a846      	lhu	v0,12(s0)
    {
        g_bt_auto_connect_ctrl.connect_tick_cnt++;
482a5dc8:	a8e5      	lhu	a3,10(s0)
        if (g_bt_auto_connect_ctrl.connect_tick_cnt >= (g_bt_auto_connect_ctrl.auto_connect_interval * 2))
482a5dca:	42c1      	addiu	a2,v0,1
482a5dcc:	c8c6      	sh	a2,12(s0)
482a5dce:	35e4      	sll	a1,a3,1
482a5dd0:	ee31      	zeh	a2
482a5dd2:	eea2      	slt	a2,a1
482a5dd4:	6114      	btnez	482a5dfe <com_btmanager_autoconnect+0x4e>
482a5dd6:	1b10 96e5 	jal	48625b94 <auto_connect_deal>
        {
            need_connect = auto_connect_deal();
482a5dda:	6500      	nop
482a5ddc:	b514      	lw	a1,482a5e2c <com_btmanager_autoconnect+0x7c>
            g_bt_auto_connect_ctrl.connect_tick_cnt = 0;
            g_ap_switch_var.tws_phon_come_flag=0;
482a5dde:	6b00      	li	v1,0
482a5de0:	6782      	move	a0,v0
482a5de2:	c866      	sh	v1,12(s0)
482a5de4:	f020 c564 	sb	v1,36(a1)
482a5de8:	1006      	b	482a5df6 <com_btmanager_autoconnect+0x46>
482a5dea:	1950 969d 	jal	482a5a74 <connect_remain_profile>
        }
    }
    else
    {
        need_connect = connect_remain_profile();
482a5dee:	6500      	nop
482a5df0:	6e00      	li	a2,0
        g_bt_auto_connect_ctrl.connect_tick_cnt = 0;
482a5df2:	6782      	move	a0,v0
482a5df4:	c8c6      	sh	a2,12(s0)
482a5df6:	2403      	beqz	a0,482a5dfe <com_btmanager_autoconnect+0x4e>
    }

    if (need_connect != 0)
482a5df8:	1b10 9776 	jal	48625dd8 <auto_connect_profile>
    { //有且只有一个服务要发起连接
        auto_connect_profile(need_connect);
482a5dfc:	6500      	nop
482a5dfe:	b30d      	lw	v1,482a5e30 <com_btmanager_autoconnect+0x80>
    }

    if ((g_btmanager_gl_var.btmanager_status == BTMANAGER_STATUS_POWERON)   
482a5e00:	a3ef      	lbu	a3,15(v1)
482a5e02:	478e      	addiu	a0,a3,-2
482a5e04:	ec11      	zeb	a0
482a5e06:	5c02      	sltiu	a0,2
482a5e08:	6009      	bteqz	482a5e1c <com_btmanager_autoconnect+0x6c>
482a5e0a:	a3b0      	lbu	a1,16(v1)
      ||(g_btmanager_gl_var.btmanager_status == BTMANAGER_STATUS_LINKING))
    {
        g_btmanager_gl_var.linking_timer++;
482a5e0c:	4541      	addiu	v0,a1,1
482a5e0e:	c350      	sb	v0,16(v1)
482a5e10:	ea11      	zeb	v0
        if (g_btmanager_gl_var.linking_timer > LINKING_TO_WORKING_TIMER)
482a5e12:	5a3d      	sltiu	v0,61
482a5e14:	6103      	btnez	482a5e1c <com_btmanager_autoconnect+0x6c>
482a5e16:	b308      	lw	v1,482a5e34 <com_btmanager_autoconnect+0x84>
        {
            change_btmanager_status(BTMANAGER_STATUS_WORKING);
482a5e18:	eb40      	jalr	v1
482a5e1a:	6c01      	li	a0,1
482a5e1c:	b207      	lw	v0,482a5e38 <com_btmanager_autoconnect+0x88>
        }
    }

    //APK/APP校验
#ifndef SUPPORT_SPPBLE_TEST
    //weixin_flag = (uint8) com_get_config_default(BTSTACK_ENABLE_WEIXIN);
    //#if 0
    //if (weixin_flag == 0)
    //{
    com_btmanager_apk_app_verification_handle();
482a5e1e:	eac0      	jalrc	v0
482a5e20:	6463      	restore	24,ra,s0
    //}
#endif
}
482a5e22:	e8a0      	jrc	ra
482a5e24:	a2fc      	lbu	a3,28(v0)
482a5e26:	9fc1      	lw	a2,4(a3)
482a5e28:	a2c8      	lbu	a2,8(v0)
482a5e2a:	9fc1      	lw	a2,4(a3)
482a5e2c:	a19c      	lbu	a0,28(s1)
482a5e2e:	9fc1      	lw	a2,4(a3)
482a5e30:	a33c      	lbu	s1,28(v1)
482a5e32:	9fc1      	lw	a2,4(a3)
482a5e34:	5dc5      	sltiu	a1,197
482a5e36:	4882      	addiu	s0,-126
482a5e38:	5e85      	sltiu	a2,133
482a5e3a:	482a      	addiu	s0,42

482a5e3c <com_btmanager_sppble_send>:
482a5e3c:	64c5      	save	40,ra
482a5e3e:	b30f      	lw	v1,482a5e78 <com_btmanager_sppble_send+0x3c>
482a5e40:	b70f      	lw	a3,482a5e7c <com_btmanager_sppble_send+0x40>
482a5e42:	a340      	lbu	v0,0(v1)
482a5e44:	d406      	sw	a0,24(sp)
482a5e46:	679d      	move	a0,sp
482a5e48:	a7c0      	lbu	a2,0(a3)
482a5e4a:	ccae      	sh	a1,28(a0)
482a5e4c:	67bd      	move	a1,sp
482a5e4e:	f001 6c07 	li	a0,2055
482a5e52:	c55e      	sb	v0,30(a1)
482a5e54:	0306      	addiu	v1,sp,24
482a5e56:	d404      	sw	a0,16(sp)
482a5e58:	b20a      	lw	v0,482a5e80 <com_btmanager_sppble_send+0x44>
482a5e5a:	6c00      	li	a0,0
482a5e5c:	c5df      	sb	a2,31(a1)
482a5e5e:	d305      	sw	v1,20(sp)
482a5e60:	0504      	addiu	a1,sp,16
482a5e62:	67c4      	move	a2,a0
482a5e64:	ea40      	jalr	v0
482a5e66:	67e4      	move	a3,a0
482a5e68:	6762      	move	v1,v0
482a5e6a:	2202      	beqz	v0,482a5e70 <com_btmanager_sppble_send+0x34>
482a5e6c:	6d01      	li	a1,1
482a5e6e:	ebab      	neg	v1,a1
482a5e70:	6743      	move	v0,v1
482a5e72:	6445      	restore	40,ra
482a5e74:	e8a0      	jrc	ra
482a5e76:	0000      	addiu	s0,sp,0
482a5e78:	a248      	lbu	v0,8(v0)
482a5e7a:	9fc1      	lw	a2,4(a3)
482a5e7c:	a249      	lbu	v0,9(v0)
482a5e7e:	9fc1      	lw	a2,4(a3)
482a5e80:	0d15      	la	a1,482a5ed4 <com_btmanager_apk_app_verification_handle+0x50>
482a5e82:	bfc1      	lwu	a2,4(a3)

482a5e84 <com_btmanager_apk_app_verification_handle>:
482a5e84:	64e3      	save	24,ra,s0

//启动APK/APP验证
void __section__(".bank") com_btmanater_start_apk_app_verification(void)
{
#if 1
    if (((g_bt_stack_cur_info.spp_con_flag !=0)||(g_bt_stack_cur_info.ble_con_flag !=0))
            && ((uint8) com_get_config_default(BTMANAGER_VERIFICATION_APK_ENABLE) == 0))
#else
    if (((g_bt_stack_cur_info.rmt_dev[0].serv_conn & (SPP_CONNECTED | BLE_CONNECTED)) != 0)
            && ((uint8) com_get_config_default(BTMANAGER_VERIFICATION_APK_ENABLE) == 0))

#endif            
    {
        g_app_info_state.verification_status = VERIFICATION_PASS;
        PRINT_INFO("RCP VERIFICATION NEEDN'T");
    }
    else
    {
        g_app_info_state.verification_status = VERIFICATION_START;
        PRINT_INFO("RCP VERIFICATION START");
    }
    g_sys_counter.apk_app_counter = 0;
}

//断开SPP/BLE连接 mode ==1 disconect ble others disconect current link
void __section__(".bank") com_btmanager_unlink_spp_ble_profile(uint8 disc_mode)
{
    msg_apps_t msg;

#if 1
    if(g_bt_stack_cur_info.spp_con_flag !=0)
#else
    if ((g_bt_stack_cur_info.rmt_dev[0].serv_conn & SPP_CONNECTED) != 0)
#endif
    {
        msg.type = MSG_BTSTACK_SPP_DISCONNECT_SYNC;
    }
    else
    {
        msg.type = MSG_BTSTACK_BLE_DISCONNECT_SYNC;
    }
    
    if(disc_mode == 1)   	
    {
    	  msg.type = MSG_BTSTACK_BLE_DISCONNECT_SYNC; 
    }
    
    msg.content.data[0] = 0;

#if 1
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
#else
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[0].addr.bytes, &msg, NULL, 0);
#endif

    //g_app_info_state.verification_status = VERIFICATION_FAIL;
    g_app_info_state.verification_status = VERIFICATION_NULL;

    PRINT_INFO("RCP VERIFICATION OVERTIME, UNLINK");
}

//APK/APP校验
void com_btmanager_apk_app_verification_handle(void)
{
482a5e86:	b311      	lw	v1,482a5ec8 <com_btmanager_apk_app_verification_handle+0x44>
#if (SUPPORT_RCP_FUNC == 1)
#if 1
    if ((g_btmanager_gl_var.last_spp_ble_status== 0)
482a5e88:	a344      	lbu	v0,4(v1)
482a5e8a:	2a09      	bnez	v0,482a5e9e <com_btmanager_apk_app_verification_handle+0x1a>
482a5e8c:	b510      	lw	a1,482a5ecc <com_btmanager_apk_app_verification_handle+0x48>
482a5e8e:	ad96      	lhu	a0,44(a1)
482a5e90:	2406      	beqz	a0,482a5e9e <com_btmanager_apk_app_verification_handle+0x1a>
482a5e92:	b710      	lw	a3,482a5ed0 <com_btmanager_apk_app_verification_handle+0x4c>
482a5e94:	a7d5      	lbu	a2,21(a3)
482a5e96:	2e03      	bnez	a2,482a5e9e <com_btmanager_apk_app_verification_handle+0x1a>
482a5e98:	1af0 9798 	jal	485e5e60 <com_btmanater_start_apk_app_verification>
            && ((g_bt_stack_cur_info.spp_con_flag !=0)||(g_bt_stack_cur_info.ble_con_flag !=0))
            && (g_app_info_state.verification_status == VERIFICATION_NULL))
#else
    if (((g_btmanager_gl_var.last_spp_ble_status & (SPP_CONNECTED | BLE_CONNECTED)) == 0)
            && ((g_bt_stack_cur_info.rmt_dev[0].serv_conn & (SPP_CONNECTED | BLE_CONNECTED)) != 0)
            && (g_app_info_state.verification_status == VERIFICATION_NULL))

#endif
    {
        com_btmanater_start_apk_app_verification();
482a5e9c:	6500      	nop
482a5e9e:	b30b      	lw	v1,482a5ec8 <com_btmanager_apk_app_verification_handle+0x44>
    }

#if 1
    if ((g_btmanager_gl_var.last_spp_ble_status != 0)
482a5ea0:	a344      	lbu	v0,4(v1)
482a5ea2:	2207      	beqz	v0,482a5eb2 <com_btmanager_apk_app_verification_handle+0x2e>
482a5ea4:	b40a      	lw	a0,482a5ecc <com_btmanager_apk_app_verification_handle+0x48>
482a5ea6:	ac16      	lhu	s0,44(a0)
482a5ea8:	2804      	bnez	s0,482a5eb2 <com_btmanager_apk_app_verification_handle+0x2e>
482a5eaa:	b20b      	lw	v0,482a5ed4 <com_btmanager_apk_app_verification_handle+0x50>
            && ((g_bt_stack_cur_info.spp_con_flag==0)&&(g_bt_stack_cur_info.ble_con_flag==0)))
#else
    if (((g_btmanager_gl_var.last_spp_ble_status & (SPP_CONNECTED | BLE_CONNECTED)) != 0)
            && ((g_bt_stack_cur_info.rmt_dev[0].serv_conn & (SPP_CONNECTED | BLE_CONNECTED)) == 0))

#endif
    {
        com_rcp_state_init();
482a5eac:	eac0      	jalrc	v0
482a5eae:	b509      	lw	a1,482a5ed0 <com_btmanager_apk_app_verification_handle+0x4c>
        g_app_info_state.verification_status = VERIFICATION_NULL;
482a5eb0:	c515      	sb	s0,21(a1)
482a5eb2:	b307      	lw	v1,482a5ecc <com_btmanager_apk_app_verification_handle+0x48>
    }

//    if (g_app_info_state.verification_status == VERIFICATION_START)
//    {
//        g_sys_counter.apk_app_counter++;
//        if (g_sys_counter.apk_app_counter >= APK_APP_VERIFICATION_OVERTIME)
//        {
//            //断开SPP/BLE连接
//            com_btmanager_unlink_spp_ble_profile();
//        }
//    }

#if 1
    g_btmanager_gl_var.last_spp_ble_status = (g_bt_stack_cur_info.spp_con_flag<<4) |(g_bt_stack_cur_info.ble_con_flag);
482a5eb4:	b605      	lw	a2,482a5ec8 <com_btmanager_apk_app_verification_handle+0x44>
482a5eb6:	f020 a3ac 	lbu	a1,44(v1)
482a5eba:	f020 a3ed 	lbu	a3,45(v1)
482a5ebe:	34b0      	sll	a0,a1,4
482a5ec0:	ef8d      	or	a3,a0
482a5ec2:	c6e4      	sb	a3,4(a2)
482a5ec4:	6463      	restore	24,ra,s0
482a5ec6:	e8a0      	jrc	ra
482a5ec8:	a33c      	lbu	s1,28(v1)
482a5eca:	9fc1      	lw	a2,4(a3)
482a5ecc:	a2fc      	lbu	a3,28(v0)
482a5ece:	9fc1      	lw	a2,4(a3)
482a5ed0:	a0c0      	lbu	a2,0(s0)
482a5ed2:	9fc1      	lw	a2,4(a3)
482a5ed4:	5801      	sltiu	s0,1
482a5ed6:	48b2      	addiu	s0,-78

482a5ed8 <com_btmanager_event_dispatch>:
482a5ed8:	64c4      	save	32,ra
    }
}

app_result_e __section__(".rcode") com_btmanager_event_dispatch(btstack_event_t *p_event, bool tts_flag)
{
482a5eda:	9c40      	lw	v0,0(a0)
    app_result_e result = RESULT_NULL;

    if (p_event->msg.type == MSG_BTSTACK_SPPBLE_RCP_PKG)
482a5edc:	ed11      	zeb	a1
482a5ede:	f101 7205 	cmpi	v0,2309
482a5ee2:	6115      	btnez	482a5f0e <.LBE19>

482a5ee4 <.LBB19>:
482a5ee4:	9ce1      	lw	a3,4(a0)
    {
        rmt_ctrl_pkg_t tmp_rcp;

        tmp_rcp.rcp_data = p_event->msg.content.addr;
482a5ee6:	677d      	move	v1,sp
        tmp_rcp.rcp_len = ((uint16) (p_event->reserve[1]) << 8) | p_event->reserve[0];
482a5ee8:	d704      	sw	a3,16(sp)
482a5eea:	a4c9      	lbu	a2,9(a0)
482a5eec:	a448      	lbu	v0,8(a0)
482a5eee:	35c0      	sll	a1,a2,8
482a5ef0:	eaad      	or	v0,a1
482a5ef2:	cb4a      	sh	v0,20(v1)
482a5ef4:	a4ca      	lbu	a2,10(a0)
        //libc_memcpy(&tmp_rcp,p_event->msg.content.addr,sizeof(rmt_ctrl_pkg_t));
        tmp_rcp.rcp_flag = (uint8)p_event->bd_addr[0];
482a5ef6:	67fd      	move	a3,sp
482a5ef8:	c7d6      	sb	a2,22(a3)
482a5efa:	a48b      	lbu	a0,11(a0)
            
        tmp_rcp.rcp_remote = (uint8)p_event->bd_addr[1];   
482a5efc:	b507      	lw	a1,482a5f18 <.LBE19+0xa>
        
             
        
        g_rcp_service_type = tmp_rcp.rcp_flag;
482a5efe:	b308      	lw	v1,482a5f1c <.LBE19+0xe>
        
        g_rcp_remote_number = tmp_rcp.rcp_remote;
482a5f00:	b208      	lw	v0,482a5f20 <.LBE19+0x12>

        result = com_rcp_dispatch(&tmp_rcp);
482a5f02:	c797      	sb	a0,23(a3)
482a5f04:	c380      	sb	a0,0(v1)
482a5f06:	c5c0      	sb	a2,0(a1)
482a5f08:	ea40      	jalr	v0
482a5f0a:	0404      	addiu	a0,sp,16
482a5f0c:	1002      	b	482a5f12 <.LBE19+0x4>

482a5f0e <.LBE19>:
482a5f0e:	b206      	lw	v0,482a5f24 <.LBE19+0x16>
    }
    else
    {
        result = com_btmanager_event_dispatch_bank(p_event, tts_flag);
482a5f10:	eac0      	jalrc	v0
482a5f12:	6444      	restore	32,ra
    }

    return result;
}
482a5f14:	e8a0      	jrc	ra
482a5f16:	0000      	addiu	s0,sp,0
482a5f18:	a248      	lbu	v0,8(v0)
482a5f1a:	9fc1      	lw	a2,4(a3)
482a5f1c:	a249      	lbu	v0,9(v0)
482a5f1e:	9fc1      	lw	a2,4(a3)
482a5f20:	0a61      	la	v0,482a60a4 <com_rcp_send_pkg+0x17c>
482a5f22:	bfc1      	lwu	a2,4(a3)
482a5f24:	5865      	sltiu	s0,101
482a5f26:	48ae      	addiu	s0,-82

482a5f28 <com_rcp_send_pkg>:
482a5f28:	64f6      	save	48,ra,s0-s1
482a5f2a:	675d      	move	v0,sp
482a5f2c:	6704      	move	s0,a0
482a5f2e:	6725      	move	s1,a1
482a5f30:	ef31      	zeh	a3
482a5f32:	f040 aaa0 	lhu	a1,64(v0)
482a5f36:	6786      	move	a0,a2
482a5f38:	2e01      	bnez	a2,482a5f3c <com_rcp_send_pkg+0x14>
482a5f3a:	0404      	addiu	a0,sp,16
482a5f3c:	b20e      	lw	v0,482a5f74 <com_rcp_send_pkg+0x4c>
482a5f3e:	6b01      	li	v1,1
482a5f40:	6e02      	li	a2,2
482a5f42:	eecb      	neg	a2
482a5f44:	c460      	sb	v1,0(a0)
482a5f46:	c4c1      	sb	a2,1(a0)
482a5f48:	a2c0      	lbu	a2,0(v0)
482a5f4a:	6b03      	li	v1,3
482a5f4c:	ee6c      	and	a2,v1
482a5f4e:	c4c2      	sb	a2,2(a0)
482a5f50:	6b00      	li	v1,0
482a5f52:	b60a      	lw	a2,482a5f78 <com_rcp_send_pkg+0x50>
482a5f54:	6a41      	li	v0,65
482a5f56:	c444      	sb	v0,4(a0)
482a5f58:	c463      	sb	v1,3(a0)
482a5f5a:	a660      	lbu	v1,0(a2)
482a5f5c:	4f10      	addiu	a3,16
482a5f5e:	4d10      	addiu	a1,16
482a5f60:	cca3      	sh	a1,6(a0)
482a5f62:	b207      	lw	v0,482a5f7c <com_rcp_send_pkg+0x54>
482a5f64:	67a7      	move	a1,a3
482a5f66:	c465      	sb	v1,5(a0)
482a5f68:	dc02      	sw	s0,8(a0)
482a5f6a:	dc23      	sw	s1,12(a0)
482a5f6c:	ea40      	jalr	v0
482a5f6e:	ed31      	zeh	a1
482a5f70:	6476      	restore	48,ra,s0-s1
482a5f72:	e8a0      	jrc	ra
482a5f74:	a290      	lbu	a0,16(v0)
482a5f76:	9fc1      	lw	a2,4(a3)
482a5f78:	a292      	lbu	a0,18(v0)
482a5f7a:	9fc1      	lw	a2,4(a3)
482a5f7c:	5e3d      	sltiu	a2,61
482a5f7e:	482a      	addiu	s0,42
	...
Disassembly of section BANK_UI_1_11:

482e5800 <get_engine_type_by_appid>:
482e5800:	b609      	lw	a2,482e5824 <get_engine_type_by_appid+0x24>
};

//判断是否引擎
engine_type_e get_engine_type_by_appid(uint8 app_id)
{
482e5802:	ec11      	zeb	a0
482e5804:	6d00      	li	a1,0
    uint8 i;

    for (i = 0; i < (sizeof(applib_app2eg_type) / sizeof(app2engine_type_t)); i++)
482e5806:	37a4      	sll	a3,a1,1
    {
        if (applib_app2eg_type[i].engine_app_id == app_id)
482e5808:	e7cd      	addu	v1,a3,a2
482e580a:	a340      	lbu	v0,0(v1)
482e580c:	ea8e      	xor	v0,a0
482e580e:	2a02      	bnez	v0,482e5814 <get_engine_type_by_appid+0x14>
482e5810:	e820      	jr	ra
        {
            return applib_app2eg_type[i].engine_type;
482e5812:	a341      	lbu	v0,1(v1)
482e5814:	4561      	addiu	v1,a1,1
482e5816:	67a3      	move	a1,v1
482e5818:	ed11      	zeb	a1
482e581a:	5d06      	sltiu	a1,6
482e581c:	61f4      	btnez	482e5806 <get_engine_type_by_appid+0x6>
482e581e:	e820      	jr	ra
        }
    }

    return ENGINE_NULL;
}
482e5820:	6a00      	li	v0,0
482e5822:	0000      	addiu	s0,sp,0
482e5824:	5854      	sltiu	s0,84
482e5826:	482e      	addiu	s0,46

482e5828 <get_engine_appid_by_type>:
482e5828:	ec11      	zeb	a0

//获取引擎对应 app id
uint8 get_engine_appid_by_type(engine_type_e engine_type)
{
482e582a:	6a18      	li	v0,24
    uint8 i;

    if (engine_type == ENGINE_NULL)
    {
        return APP_ID_MAX;
482e582c:	2c03      	bnez	a0,482e5834 <get_engine_appid_by_type+0xc>
482e582e:	100f      	b	482e584e <get_engine_appid_by_type+0x26>
482e5830:	e820      	jr	ra
    }

    for (i = 0; i < (sizeof(applib_app2eg_type) / sizeof(app2engine_type_t)); i++)
    {
        if (applib_app2eg_type[i].engine_type == engine_type)
        {
            return applib_app2eg_type[i].engine_app_id;
482e5832:	a340      	lbu	v0,0(v1)
482e5834:	b607      	lw	a2,482e5850 <get_engine_appid_by_type+0x28>
482e5836:	6d00      	li	a1,0
482e5838:	37a4      	sll	a3,a1,1
482e583a:	e7cd      	addu	v1,a3,a2
482e583c:	a341      	lbu	v0,1(v1)
482e583e:	ea8e      	xor	v0,a0
482e5840:	22f7      	beqz	v0,482e5830 <get_engine_appid_by_type+0x8>
482e5842:	4561      	addiu	v1,a1,1
482e5844:	67a3      	move	a1,v1
482e5846:	ed11      	zeb	a1
482e5848:	5d06      	sltiu	a1,6
482e584a:	61f6      	btnez	482e5838 <get_engine_appid_by_type+0x10>
482e584c:	6a18      	li	v0,24
        }
    }

    return APP_ID_MAX;
482e584e:	e8a0      	jrc	ra
}
482e5850:	5854      	sltiu	s0,84
482e5852:	482e      	addiu	s0,46

482e5854 <applib_app2eg_type>:
482e5854:	010e 0212 030f 0410 0511 0613               ............

482e5860 <applib_init>:
482e5860:	64f5      	save	40,ra,s0-s1
 * \note
 * \li  在应用 main 函数入口处调用，在此之前，不许调用其他 applib 接口。
 *******************************************************************************/
bool applib_init(uint8 app_id, app_type_e type)
{
482e5862:	ec11      	zeb	a0
482e5864:	6705      	move	s0,a1
482e5866:	5c18      	sltiu	a0,24
    app_info_t *cur_app_info;

    if (app_id >= APP_ID_MAX)
482e5868:	d404      	sw	a0,16(sp)
482e586a:	e811      	zeb	s0
482e586c:	6a00      	li	v0,0
    {
        return FALSE;
482e586e:	6056      	bteqz	482e591c <applib_init+0xbc>
482e5870:	6b01      	li	v1,1
    }

    //调节频率
    if (type == APP_TYPE_GUI)
482e5872:	eb0e      	xor	v1,s0
482e5874:	5b01      	sltiu	v1,1
482e5876:	6758      	move	v0,t8
482e5878:	d205      	sw	v0,20(sp)
482e587a:	220a      	beqz	v0,482e5890 <applib_init+0x30>
482e587c:	b12d      	lw	s1,482e5930 <applib_init+0xd0>
    {
        adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
482e587e:	6c0a      	li	a0,10
482e5880:	6d07      	li	a1,7
482e5882:	6e00      	li	a2,0
482e5884:	e940      	jalr	s1
482e5886:	6f03      	li	a3,3
482e5888:	b42b      	lw	a0,482e5934 <applib_init+0xd4>
        g_app_info_state_all.ui_status = UI_STATUS_IDLE;
482e588a:	6d00      	li	a1,0
482e588c:	c4a3      	sb	a1,3(a0)
482e588e:	1008      	b	482e58a0 <applib_init+0x40>
482e5890:	7002      	cmpi	s0,2
    }
    else if (type == APP_TYPE_CONSOLE)
482e5892:	6106      	btnez	482e58a0 <applib_init+0x40>
482e5894:	b227      	lw	v0,482e5930 <applib_init+0xd0>
    {
        adjust_freq_set_level(AP_BACK_LOW_PRIO, FREQ_LEVEL2, FREQ_NULL);
482e5896:	6c06      	li	a0,6
482e5898:	6d02      	li	a1,2
482e589a:	6e00      	li	a2,0
482e589c:	ea40      	jalr	v0
482e589e:	6f03      	li	a3,3
482e58a0:	b426      	lw	a0,482e5938 <applib_init+0xd8>
    }
    else
    {
        //nothing
    }

    //获取 app_info 结构体指针
    cur_app_info = &g_app_info_vector[type];
482e58a2:	3308      	sll	v1,s0,2
482e58a4:	e385      	addu	s1,v1,a0
482e58a6:	b226      	lw	v0,482e593c <applib_init+0xdc>

    //上锁，禁止任务调度
    sys_os_sched_lock();
482e58a8:	6c00      	li	a0,0
482e58aa:	67a4      	move	a1,a0
482e58ac:	67c4      	move	a2,a0
482e58ae:	ea40      	jalr	v0
482e58b0:	6f33      	li	a3,51
482e58b2:	b224      	lw	v0,482e5940 <applib_init+0xe0>

    //初始化应用信息
    libc_memset(cur_app_info, 0x0, sizeof(app_info_t));
482e58b4:	6e04      	li	a2,4
482e58b6:	6f01      	li	a3,1
482e58b8:	6791      	move	a0,s1
482e58ba:	ea40      	jalr	v0
482e58bc:	6d00      	li	a1,0
482e58be:	6a01      	li	v0,1
    cur_app_info->used = 1; //标志已被分配使用
482e58c0:	c140      	sb	v0,0(s1)
482e58c2:	67fd      	move	a3,sp
    cur_app_info->app_id = app_id;
482e58c4:	a7d0      	lbu	a2,16(a3)
482e58c6:	c102      	sb	s0,2(s1)
    cur_app_info->app_type = (uint8) type;
482e58c8:	c1c1      	sb	a2,1(s1)
482e58ca:	2802      	bnez	s0,482e58d0 <applib_init+0x70>
    //cur_app_info->soft_watchdog_timeout_expires = 0;
    if (type == APP_TYPE_PMNG)
482e58cc:	c103      	sb	s0,3(s1)
    {
        cur_app_info->mq_id = (uint8) MQ_ID_MNG;
482e58ce:	1012      	b	482e58f4 <applib_init+0x94>
482e58d0:	7003      	cmpi	s0,3
    }
    else if (type == APP_TYPE_BTSTACK)
482e58d2:	6103      	btnez	482e58da <applib_init+0x7a>
482e58d4:	6803      	li	s0,3
    {
        cur_app_info->mq_id = (uint8) MQ_ID_BT;
482e58d6:	c103      	sb	s0,3(s1)
482e58d8:	100d      	b	482e58f4 <applib_init+0x94>
482e58da:	9505      	lw	a1,20(sp)
    }
    else if (type == APP_TYPE_GUI)
482e58dc:	b016      	lw	s0,482e5934 <applib_init+0xd4>
482e58de:	2504      	beqz	a1,482e58e8 <applib_init+0x88>
482e58e0:	6e00      	li	a2,0
    {
        cur_app_info->mq_id = (uint8) MQ_ID_DESK;
        g_app_info_state_all.app_state = APP_STATE_NO_PLAY; //前台AP注册，初始化为 NO_PLAY 状态
482e58e2:	c143      	sb	v0,3(s1)
482e58e4:	c0c2      	sb	a2,2(s0)
482e58e6:	1006      	b	482e58f4 <applib_init+0x94>
482e58e8:	6f02      	li	a3,2
    }
    else
    {
        //message queue
        cur_app_info->mq_id = (uint8) MQ_ID_EGN;
482e58ea:	c1e3      	sb	a3,3(s1)
482e58ec:	b216      	lw	v0,482e5944 <applib_init+0xe4>

        g_app_info_state_all.engine_type = get_engine_type_by_appid(app_id);
482e58ee:	ea40      	jalr	v0
482e58f0:	9404      	lw	a0,16(sp)
482e58f2:	c040      	sb	v0,0(s0)
482e58f4:	6c00      	li	a0,0
    }

    //解锁，允许任务调度
    sys_os_sched_unlock();
482e58f6:	b012      	lw	s0,482e593c <applib_init+0xdc>
482e58f8:	67a4      	move	a1,a0
482e58fa:	67c4      	move	a2,a0
482e58fc:	e840      	jalr	s0
482e58fe:	6f34      	li	a3,52
482e5900:	b412      	lw	a0,482e5948 <applib_init+0xe8>

    g_this_app_info = cur_app_info;
482e5902:	b210      	lw	v0,482e5940 <applib_init+0xe0>

    //初始化线程互斥信号量
    libc_sem_init(&thread_mutex, 1);
482e5904:	dc20      	sw	s1,0(a0)
482e5906:	b412      	lw	a0,482e594c <applib_init+0xec>
482e5908:	6d01      	li	a1,1
482e590a:	6e00      	li	a2,0
482e590c:	ea40      	jalr	v0
482e590e:	6f12      	li	a3,18
482e5910:	9504      	lw	a1,16(sp)

    PRINT_INFO_INT("app init:", app_id);
482e5912:	0c04      	la	a0,482e5920 <applib_init+0xc0>
482e5914:	6e02      	li	a2,2
482e5916:	e840      	jalr	s0
482e5918:	6f4b      	li	a3,75
482e591a:	6a01      	li	v0,1

    return TRUE;
482e591c:	6475      	restore	40,ra,s0-s1
}
482e591e:	e8a0      	jrc	ra
482e5920:	493c      	addiu	s1,60
482e5922:	203e      	beqz	s0,482e59a0 <.LBE2+0x14>
482e5924:	7061      	cmpi	s0,97
482e5926:	2070      	beqz	s0,482e5a08 <.LBE2+0x7c>
482e5928:	6e69      	li	a2,105
482e592a:	7469      	cmpi	a0,105
482e592c:	003a      	addiu	s0,sp,232
482e592e:	0000      	addiu	s0,sp,0
482e5930:	e90d      	or	s1,s0
482e5932:	bfc1      	lwu	a2,4(a3)
482e5934:	a094      	lbu	a0,20(s0)
482e5936:	9fc1      	lw	a2,4(a3)
482e5938:	a080      	lbu	a0,0(s0)
482e593a:	9fc1      	lw	a2,4(a3)
482e593c:	e901      	sdbbp	8
482e593e:	bfc1      	lwu	a2,4(a3)
482e5940:	e905      	break	8
482e5942:	bfc1      	lwu	a2,4(a3)
482e5944:	5801      	sltiu	s0,1
482e5946:	482e      	addiu	s0,46
482e5948:	9990      	lw	a0,64(s1)
482e594a:	9fc1      	lw	a2,4(a3)
482e594c:	9994      	lw	a0,80(s1)
482e594e:	9fc1      	lw	a2,4(a3)

482e5950 <applib_quit>:
482e5950:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    应用在 applib 模块上的注销处理。
 * \param[in]    none
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 表示注销成功。
 * \retval           FALSE 表示注销失败。
 * \ingroup      app_manager
 * \par          exmaple code
 * \code
 例子1：应用进行 applib 模块注销
 applib_quit();
 * \endcode
 * \note
 * \li  在应用 main 函数退出处调用，在此之后，不许调用其他 applib 接口。
 *******************************************************************************/
bool applib_quit(void)
{
482e5952:	b02f      	lw	s0,482e5a0c <.LBE2+0x80>
    app_info_t cur_app_info;

    PRINT_INFO_INT("app quit:", g_this_app_info->app_id);
482e5954:	b12f      	lw	s1,482e5a10 <.LBE2+0x84>
482e5956:	9860      	lw	v1,0(s0)
482e5958:	0c29      	la	a0,482e59fc <.LBE2+0x70>
482e595a:	a3a1      	lbu	a1,1(v1)
482e595c:	6e02      	li	a2,2
482e595e:	e940      	jalr	s1
482e5960:	6f4b      	li	a3,75
482e5962:	6d00      	li	a1,0

    //销毁线程互斥信号量
    libc_sem_destroy(&thread_mutex);
482e5964:	b42c      	lw	a0,482e5a14 <.LBE2+0x88>
482e5966:	b12d      	lw	s1,482e5a18 <.LBE2+0x8c>
482e5968:	67c5      	move	a2,a1
482e596a:	e940      	jalr	s1
482e596c:	6f13      	li	a3,19
482e596e:	98a0      	lw	a1,0(s0)

    if (g_this_app_info->app_type == APP_TYPE_CONSOLE)
482e5970:	a542      	lbu	v0,2(a1)
482e5972:	7202      	cmpi	v0,2
482e5974:	6104      	btnez	482e597e <applib_quit+0x2e>
482e5976:	b42a      	lw	a0,482e5a1c <.LBE2+0x90>
    {
        //修改后台引擎类型为 NONE
        g_app_info_state_all.engine_type = ENGINE_NULL;
482e5978:	6e00      	li	a2,0
482e597a:	c4c0      	sb	a2,0(a0)
482e597c:	c4c1      	sb	a2,1(a0)
        g_app_info_state_all.engine_state = ENGINE_STATE_NULL;
482e597e:	0404      	addiu	a0,sp,16
    }

    //修改 app_info 结构体为未被使用
    libc_memcpy(&cur_app_info, g_this_app_info, sizeof(app_info_t));
482e5980:	6f00      	li	a3,0
482e5982:	e940      	jalr	s1
482e5984:	6e04      	li	a2,4
482e5986:	67fd      	move	a3,sp
    cur_app_info.used = 0;
482e5988:	6a18      	li	v0,24

482e598a <.LBB2>:
    cur_app_info.app_id = APP_ID_MAX;
482e598a:	98a0      	lw	a1,0(s0)

482e598c <.LBE2>:
    //cur_app_info.soft_watchdog_timeout_expires = 0;
    __app_running_set_app_info(g_this_app_info->app_id, &cur_app_info);

    //调节频率
    if (g_this_app_info->app_type == APP_TYPE_GUI)
    {
        adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_NULL, FREQ_NULL);
    }
    else if (g_this_app_info->app_type == APP_TYPE_CONSOLE)
    {
        adjust_freq_set_level(AP_BACK_LOW_PRIO, FREQ_NULL, FREQ_NULL);
    }
    else
    {
        //nothing
    }

    return TRUE;
}

/*! \endcond */

/*! \cond */

//根据应用ID设置应用信息
static bool __app_running_set_app_info(uint8 app_id, const app_info_t *app_info)
{
482e598c:	c751      	sb	v0,17(a3)
482e598e:	a581      	lbu	a0,1(a1)
482e5990:	6b00      	li	v1,0
482e5992:	5c18      	sltiu	a0,24
    app_info_t *app;
    uint8 i;

    if (app_id >= APP_ID_MAX)
482e5994:	c770      	sb	v1,16(a3)
482e5996:	6020      	bteqz	482e59d8 <.LBE2+0x4c>
482e5998:	b522      	lw	a1,482e5a20 <.LBE2+0x94>
482e599a:	6b00      	li	v1,0
    {
        return FALSE;
    }

    //搜索 app_id 对应 app_info_t
    app = NULL;
    for (i = 0; i < MAX_APP_COUNT; i++)
482e599c:	3668      	sll	a2,v1,2
    {
        app = &g_app_info_vector[i];
482e599e:	e6a5      	addu	s1,a2,a1
482e59a0:	a100      	lbu	s0,0(s1)
        if ((app->used == 1) && (app->app_id == app_id))
482e59a2:	7001      	cmpi	s0,1
482e59a4:	6103      	btnez	482e59ac <.LBE2+0x20>
482e59a6:	a1e1      	lbu	a3,1(s1)
482e59a8:	ef8e      	xor	a3,a0
482e59aa:	2705      	beqz	a3,482e59b6 <.LBE2+0x2a>
482e59ac:	4341      	addiu	v0,v1,1
482e59ae:	6762      	move	v1,v0
482e59b0:	eb11      	zeb	v1
482e59b2:	5b04      	sltiu	v1,4
482e59b4:	61f3      	btnez	482e599c <.LBE2+0x10>
482e59b6:	6c00      	li	a0,0
        {
            break;
        }
    }

    if (NULL == app)
    {
        return FALSE;
    }

    sys_os_sched_lock();
482e59b8:	b016      	lw	s0,482e5a10 <.LBE2+0x84>
482e59ba:	67a4      	move	a1,a0
482e59bc:	67c4      	move	a2,a0
482e59be:	e840      	jalr	s0
482e59c0:	6f33      	li	a3,51
482e59c2:	b216      	lw	v0,482e5a18 <.LBE2+0x8c>
    libc_memcpy(app, app_info, sizeof(app_info_t));
482e59c4:	6791      	move	a0,s1
482e59c6:	0504      	addiu	a1,sp,16
482e59c8:	6e04      	li	a2,4
482e59ca:	ea40      	jalr	v0
482e59cc:	6f00      	li	a3,0
482e59ce:	6c00      	li	a0,0
    sys_os_sched_unlock();
482e59d0:	67a4      	move	a1,a0
482e59d2:	67c4      	move	a2,a0
482e59d4:	e840      	jalr	s0
482e59d6:	6f34      	li	a3,52
482e59d8:	b50d      	lw	a1,482e5a0c <.LBE2+0x80>
482e59da:	9d80      	lw	a0,0(a1)
482e59dc:	a442      	lbu	v0,2(a0)
482e59de:	6c0a      	li	a0,10
482e59e0:	7201      	cmpi	v0,1
482e59e2:	6003      	bteqz	482e59ea <.LBE2+0x5e>
482e59e4:	7202      	cmpi	v0,2
482e59e6:	6106      	btnez	482e59f4 <.LBE2+0x68>
482e59e8:	6c06      	li	a0,6
482e59ea:	6d00      	li	a1,0
482e59ec:	b20e      	lw	v0,482e5a24 <.LBE2+0x98>
482e59ee:	67c5      	move	a2,a1
482e59f0:	ea40      	jalr	v0
482e59f2:	6f03      	li	a3,3
482e59f4:	6a01      	li	v0,1
482e59f6:	6475      	restore	40,ra,s0-s1
482e59f8:	e8a0      	jrc	ra
482e59fa:	0000      	addiu	s0,sp,0
482e59fc:	493c      	addiu	s1,60
482e59fe:	203e      	beqz	s0,482e5a7c <send_sync_msg+0x18>
482e5a00:	7061      	cmpi	s0,97
482e5a02:	2070      	beqz	s0,482e5ae4 <.L5+0x2c>
482e5a04:	7571      	cmpi	a1,113
482e5a06:	7469      	cmpi	a0,105
482e5a08:	003a      	addiu	s0,sp,232
482e5a0a:	0000      	addiu	s0,sp,0
482e5a0c:	9990      	lw	a0,64(s1)
482e5a0e:	9fc1      	lw	a2,4(a3)
482e5a10:	e901      	sdbbp	8
482e5a12:	bfc1      	lwu	a2,4(a3)
482e5a14:	9994      	lw	a0,80(s1)
482e5a16:	9fc1      	lw	a2,4(a3)
482e5a18:	e905      	break	8
482e5a1a:	bfc1      	lwu	a2,4(a3)
482e5a1c:	a094      	lbu	a0,20(s0)
482e5a1e:	9fc1      	lw	a2,4(a3)
482e5a20:	a080      	lbu	a0,0(s0)
482e5a22:	9fc1      	lw	a2,4(a3)
482e5a24:	e90d      	or	s1,s0
482e5a26:	bfc1      	lwu	a2,4(a3)

482e5a28 <applib_message_init>:
482e5a28:	64c3      	save	24,ra
 *******************************************************************************/
extern bool com_gui_msg_hook(input_gui_msg_t *input_msg) __FAR__;
extern void com_app_msg_hook(private_msg_t *private_msg) __FAR__;
bool applib_message_init(void)
{
482e5a2a:	b709      	lw	a3,482e5a4c <applib_message_init+0x24>
    //清空 应用消息队列
    sys_mq_flush(g_this_app_info->mq_id);
482e5a2c:	6d00      	li	a1,0
482e5a2e:	9fc0      	lw	a2,0(a3)
482e5a30:	b208      	lw	v0,482e5a50 <applib_message_init+0x28>
482e5a32:	a683      	lbu	a0,3(a2)
482e5a34:	6f1a      	li	a3,26
482e5a36:	ea40      	jalr	v0
482e5a38:	67c5      	move	a2,a1
482e5a3a:	b209      	lw	v0,482e5a5c <applib_message_init+0x34>

    g_this_gui_msg_hook = com_gui_msg_hook;
    g_this_app_msg_hook = com_app_msg_hook;
482e5a3c:	b309      	lw	v1,482e5a60 <applib_message_init+0x38>
482e5a3e:	b507      	lw	a1,482e5a58 <applib_message_init+0x30>
482e5a40:	b405      	lw	a0,482e5a54 <applib_message_init+0x2c>
482e5a42:	da60      	sw	v1,0(v0)
482e5a44:	6a01      	li	v0,1

    return TRUE;
}
482e5a46:	dca0      	sw	a1,0(a0)
482e5a48:	6443      	restore	24,ra
482e5a4a:	e8a0      	jrc	ra
482e5a4c:	9990      	lw	a0,64(s1)
482e5a4e:	9fc1      	lw	a2,4(a3)
482e5a50:	e901      	sdbbp	8
482e5a52:	bfc1      	lwu	a2,4(a3)
482e5a54:	9980      	lw	a0,0(s1)
482e5a56:	9fc1      	lw	a2,4(a3)
482e5a58:	5ce5      	sltiu	a0,229
482e5a5a:	484e      	addiu	s0,78
482e5a5c:	9984      	lw	a0,16(s1)
482e5a5e:	9fc1      	lw	a2,4(a3)
482e5a60:	58c1      	sltiu	s0,193
482e5a62:	4832      	addiu	s0,50

482e5a64 <send_sync_msg>:
482e5a64:	f00e 64f8 	save	a0-a3,64,ra,s0-s1
 *      由于发送同步消息后会等待返回，如果调用 send_sync_msg 的代码是在 control bank段，那么上面的
 *      缓冲区可以开在bank data中。
 *******************************************************************************/
int send_sync_msg(uint8 app_id, msg_apps_t *msg, msg_reply_t *reply, uint32 timeout)
{
482e5a68:	6704      	move	s0,a0
482e5a6a:	6c00      	li	a0,0
    private_msg_t cur_send_pmsg;
    const app_info_t *target_app_info;
    msg_reply_t temp_reply;
    os_event_t *sem; //同步消息同步信号量指针
    int retvalue = ERR_NO_ERR;
482e5a6c:	d40b      	sw	a0,44(sp)
482e5a6e:	b367      	lw	v1,482e5c08 <.L5+0x150>

    PRINT_DBG_INT("sync msg:", msg->type);

    //无限时等待信号量，同时只能有1个线程发送同步消息
    libc_sem_wait(thread_mutex, 0);
482e5a70:	950b      	lw	a1,44(sp)
482e5a72:	9b80      	lw	a0,0(v1)
482e5a74:	b266      	lw	v0,482e5c0c <.L5+0x154>
482e5a76:	e811      	zeb	s0
482e5a78:	67c5      	move	a2,a1
482e5a7a:	ea40      	jalr	v0
482e5a7c:	6f14      	li	a3,20
482e5a7e:	7080      	cmpi	s0,128

    //通用引擎ID转换为具体APP ID
    if (app_id == APP_ID_THEENGINE)
482e5a80:	6107      	btnez	482e5a90 <.LBB4>

482e5a82 <.LBB2>:
482e5a82:	b564      	lw	a1,482e5c10 <.L5+0x158>

482e5a84 <.LBE2>:
482e5a84:	b064      	lw	s0,482e5c14 <.L5+0x15c>
482e5a86:	e840      	jalr	s0
482e5a88:	a580      	lbu	a0,0(a1)
482e5a8a:	7218      	cmpi	v0,24
    {
        app_id = get_engine_appid_by_type(get_engine_type());
        if (app_id == APP_ID_MAX)
482e5a8c:	6702      	move	s0,v0
482e5a8e:	6014      	bteqz	482e5ab8 <.L5>

482e5a90 <.LBB4>:
482e5a90:	5818      	sltiu	s0,24
        {
            goto app_noexist;
        }
    }

    //查找目标应用
    target_app_info = __app_running_get_app_info(app_id);
    if (NULL == target_app_info)
    {
        app_noexist:
        libc_sem_post(thread_mutex);
        PRINT_ERR("sync msg ERR_TARGET_NOEXIST!!");
        return ERR_TARGET_NOEXIST;
    }

    //不能发送同步消息给应用自己
    if (target_app_info == g_this_app_info)
    {
        libc_sem_post(thread_mutex);
        PRINT_ERR("sync msg ERR_SYNC_ITSELF!!");
        return ERR_SYNC_ITSELF;
    }

    //填充私有消息结构体
    libc_memcpy(&(cur_send_pmsg.msg), msg, sizeof(msg_apps_t));
    libc_sem_init(&sem, 0);
    cur_send_pmsg.sem = sem;
    if (reply == NULL)
    {
        cur_send_pmsg.reply = &temp_reply;
    }
    else
    {
        cur_send_pmsg.reply = reply;
    }

    //发送消息到队列中
    if (sys_mq_send((uint32) (target_app_info->mq_id), (void *) &cur_send_pmsg) < 0)
    {
        PRINT_ERR("sync msg ERR_MSGQUEUE_FULL!!");
        retvalue = ERR_MSGQUEUE_FULL;
    }
    else
    {
        //等待同步消息回应
        if (libc_sem_wait(sem, timeout) < 0)
        {
            PRINT_ERR("sync msg ERR_SYNC_TIMEOUT!!");
            retvalue = ERR_SYNC_TIMEOUT;
        }
    }

    libc_sem_destroy(&sem);
    libc_sem_post(thread_mutex);

    PRINT_DBG_INT("sync msg ret:", msg->type);

    return retvalue;
}

/*! \endcond */

/*! \cond */

//根据应用ID获取应用信息
static app_info_t *__app_running_get_app_info(uint8 app_id)
{
    app_info_t *app;
    uint8 i;

    if (app_id >= APP_ID_MAX)
482e5a92:	6012      	bteqz	482e5ab8 <.L5>
482e5a94:	940b      	lw	a0,44(sp)
    {
        return NULL;
    }

    for (i = 0; i < MAX_APP_COUNT; i++)
482e5a96:	b261      	lw	v0,482e5c18 <.L5+0x160>
    {
        app = &g_app_info_vector[i];
482e5a98:	3788      	sll	a3,a0,2
482e5a9a:	e74d      	addu	v1,a3,v0
482e5a9c:	a3c0      	lbu	a2,0(v1)
        if ((app->used == 1) && (app->app_id == app_id))
482e5a9e:	7601      	cmpi	a2,1
482e5aa0:	6103      	btnez	482e5aa8 <.LBB4+0x18>
482e5aa2:	a3a1      	lbu	a1,1(v1)
482e5aa4:	ed0e      	xor	a1,s0
482e5aa6:	2506      	beqz	a1,482e5ab4 <.LBB4+0x24>
482e5aa8:	4461      	addiu	v1,a0,1
482e5aaa:	6783      	move	a0,v1
482e5aac:	ec11      	zeb	a0
482e5aae:	5c04      	sltiu	a0,4
482e5ab0:	61f2      	btnez	482e5a96 <.LBB4+0x6>
482e5ab2:	1002      	b	482e5ab8 <.L5>
482e5ab4:	6703      	move	s0,v1

482e5ab6 <.LBE4>:
        {
            return app;
482e5ab6:	2b0f      	bnez	v1,482e5ad6 <.L5+0x1e>

482e5ab8 <.L5>:
482e5ab8:	b654      	lw	a2,482e5c08 <.L5+0x150>
482e5aba:	6d00      	li	a1,0
482e5abc:	9e80      	lw	a0,0(a2)
482e5abe:	b254      	lw	v0,482e5c0c <.L5+0x154>
482e5ac0:	67c5      	move	a2,a1
482e5ac2:	ea40      	jalr	v0
482e5ac4:	6f16      	li	a3,22
482e5ac6:	6d00      	li	a1,0
482e5ac8:	b255      	lw	v0,482e5c1c <.L5+0x164>
482e5aca:	0c2e      	la	a0,482e5b80 <.L5+0xc8>
482e5acc:	67c5      	move	a2,a1
482e5ace:	ea40      	jalr	v0
482e5ad0:	6f4b      	li	a3,75
482e5ad2:	6a01      	li	v0,1
482e5ad4:	1012      	b	482e5afa <.L5+0x42>
482e5ad6:	b153      	lw	s1,482e5c20 <.L5+0x168>
482e5ad8:	9980      	lw	a0,0(s1)
482e5ada:	b14d      	lw	s1,482e5c0c <.L5+0x154>
482e5adc:	ec6e      	xor	a0,v1
482e5ade:	2c0f      	bnez	a0,482e5afe <.L5+0x46>
482e5ae0:	b74a      	lw	a3,482e5c08 <.L5+0x150>
482e5ae2:	6d00      	li	a1,0
482e5ae4:	9f80      	lw	a0,0(a3)
482e5ae6:	67c5      	move	a2,a1
482e5ae8:	e940      	jalr	s1
482e5aea:	6f16      	li	a3,22
482e5aec:	6d00      	li	a1,0
482e5aee:	b24c      	lw	v0,482e5c1c <.L5+0x164>
482e5af0:	0c2d      	la	a0,482e5ba4 <.L5+0xec>
482e5af2:	67c5      	move	a2,a1
482e5af4:	ea40      	jalr	v0
482e5af6:	6f4b      	li	a3,75
482e5af8:	6a03      	li	v0,3
482e5afa:	ea4b      	neg	v0
482e5afc:	103e      	b	482e5b7a <.L5+0xc2>
482e5afe:	9511      	lw	a1,68(sp)
482e5b00:	0404      	addiu	a0,sp,16
482e5b02:	6e08      	li	a2,8
482e5b04:	e940      	jalr	s1
482e5b06:	6f00      	li	a3,0
482e5b08:	6d00      	li	a1,0
482e5b0a:	67c5      	move	a2,a1
482e5b0c:	040a      	addiu	a0,sp,40
482e5b0e:	e940      	jalr	s1
482e5b10:	6f12      	li	a3,18
482e5b12:	930a      	lw	v1,40(sp)
482e5b14:	9512      	lw	a1,72(sp)
482e5b16:	d306      	sw	v1,24(sp)
482e5b18:	2d02      	bnez	a1,482e5b1e <.L5+0x66>
482e5b1a:	0208      	addiu	v0,sp,32
482e5b1c:	1001      	b	482e5b20 <.L5+0x68>
482e5b1e:	9212      	lw	v0,72(sp)
482e5b20:	d207      	sw	v0,28(sp)
482e5b22:	a083      	lbu	a0,3(s0)
482e5b24:	b03e      	lw	s0,482e5c1c <.L5+0x164>
482e5b26:	0504      	addiu	a1,sp,16
482e5b28:	6e00      	li	a2,0
482e5b2a:	e840      	jalr	s0
482e5b2c:	6f18      	li	a3,24
482e5b2e:	5200      	slti	v0,0
482e5b30:	6007      	bteqz	482e5b40 <.L5+0x88>
482e5b32:	6d00      	li	a1,0
482e5b34:	0c24      	la	a0,482e5bc4 <.L5+0x10c>
482e5b36:	67c5      	move	a2,a1
482e5b38:	e840      	jalr	s0
482e5b3a:	6f4b      	li	a3,75
482e5b3c:	6a02      	li	v0,2
482e5b3e:	100e      	b	482e5b5c <.L5+0xa4>
482e5b40:	940a      	lw	a0,40(sp)
482e5b42:	9513      	lw	a1,76(sp)
482e5b44:	b232      	lw	v0,482e5c0c <.L5+0x154>
482e5b46:	6e00      	li	a2,0
482e5b48:	ea40      	jalr	v0
482e5b4a:	6f14      	li	a3,20
482e5b4c:	5200      	slti	v0,0
482e5b4e:	6008      	bteqz	482e5b60 <.L5+0xa8>
482e5b50:	6d00      	li	a1,0
482e5b52:	0c26      	la	a0,482e5be8 <.L5+0x130>
482e5b54:	67c5      	move	a2,a1
482e5b56:	e840      	jalr	s0
482e5b58:	6f4b      	li	a3,75
482e5b5a:	6a04      	li	v0,4
482e5b5c:	e84b      	neg	s0,v0
482e5b5e:	d00b      	sw	s0,44(sp)
482e5b60:	6d00      	li	a1,0
482e5b62:	b02b      	lw	s0,482e5c0c <.L5+0x154>
482e5b64:	67c5      	move	a2,a1
482e5b66:	040a      	addiu	a0,sp,40
482e5b68:	e840      	jalr	s0
482e5b6a:	6f13      	li	a3,19
482e5b6c:	b627      	lw	a2,482e5c08 <.L5+0x150>
482e5b6e:	6d00      	li	a1,0
482e5b70:	9e80      	lw	a0,0(a2)
482e5b72:	6f16      	li	a3,22
482e5b74:	e840      	jalr	s0
482e5b76:	67c5      	move	a2,a1
482e5b78:	920b      	lw	v0,44(sp)
482e5b7a:	6478      	restore	64,ra,s0-s1
482e5b7c:	e8a0      	jrc	ra
482e5b7e:	0000      	addiu	s0,sp,0
482e5b80:	453c      	daddiu	s1,a1,-4
482e5b82:	203e      	beqz	s0,482e5c00 <.L5+0x148>
482e5b84:	7973      	sd	v1,152(s1)
482e5b86:	636e      	addiu	sp,880
482e5b88:	6d20      	li	a1,32
482e5b8a:	6773      	move	v1,s3
482e5b8c:	4520      	addiu	s1,a1,0
482e5b8e:	5252      	slti	v0,82
482e5b90:	545f      	slti	a0,95
482e5b92:	5241      	slti	v0,65
482e5b94:	4547      	addiu	v0,a1,7
482e5b96:	5f54      	sltiu	a3,84
482e5b98:	4f4e      	addiu	a3,78
482e5b9a:	5845      	sltiu	s0,69
482e5b9c:	5349      	slti	v1,73
482e5b9e:	2154      	beqz	s1,482e5c48 <.LBE2+0xa>
482e5ba0:	0021      	addiu	s0,sp,132
482e5ba2:	0000      	addiu	s0,sp,0
482e5ba4:	453c      	daddiu	s1,a1,-4
482e5ba6:	203e      	beqz	s0,482e5c24 <send_async_msg>
482e5ba8:	7973      	sd	v1,152(s1)
482e5baa:	636e      	addiu	sp,880
482e5bac:	6d20      	li	a1,32
482e5bae:	6773      	move	v1,s3
482e5bb0:	4520      	addiu	s1,a1,0
482e5bb2:	5252      	slti	v0,82
482e5bb4:	535f      	slti	v1,95
482e5bb6:	4e59      	addiu	a2,89
482e5bb8:	5f43      	sltiu	a3,67
482e5bba:	5449      	slti	a0,73
482e5bbc:	4553      	daddiu	v0,a1,3
482e5bbe:	464c      	addiu	v0,a2,-4
482e5bc0:	2121      	beqz	s1,482e5c04 <.L5+0x14c>
482e5bc2:	0000      	addiu	s0,sp,0
482e5bc4:	453c      	daddiu	s1,a1,-4
482e5bc6:	203e      	beqz	s0,482e5c44 <.LBE2+0x6>
482e5bc8:	7973      	sd	v1,152(s1)
482e5bca:	636e      	addiu	sp,880
482e5bcc:	6d20      	li	a1,32
482e5bce:	6773      	move	v1,s3
482e5bd0:	4520      	addiu	s1,a1,0
482e5bd2:	5252      	slti	v0,82
482e5bd4:	4d5f      	addiu	a1,95
482e5bd6:	4753      	daddiu	v0,a3,3
482e5bd8:	5551      	slti	a1,81
482e5bda:	5545      	slti	a1,69
482e5bdc:	5f45      	sltiu	a3,69
482e5bde:	5546      	slti	a1,70
482e5be0:	4c4c      	addiu	a0,76
482e5be2:	2121      	beqz	s1,482e5c26 <send_async_msg+0x2>
482e5be4:	0000      	addiu	s0,sp,0
482e5be6:	0000      	addiu	s0,sp,0
482e5be8:	453c      	daddiu	s1,a1,-4
482e5bea:	203e      	beqz	s0,482e5c68 <.LBB4+0x1e>
482e5bec:	7973      	sd	v1,152(s1)
482e5bee:	636e      	addiu	sp,880
482e5bf0:	6d20      	li	a1,32
482e5bf2:	6773      	move	v1,s3
482e5bf4:	4520      	addiu	s1,a1,0
482e5bf6:	5252      	slti	v0,82
482e5bf8:	535f      	slti	v1,95
482e5bfa:	4e59      	addiu	a2,89
482e5bfc:	5f43      	sltiu	a3,67
482e5bfe:	4954      	addiu	s1,84
482e5c00:	454d      	addiu	v0,a1,-3
482e5c02:	554f      	slti	a1,79
482e5c04:	2154      	beqz	s1,482e5cae <.L14+0x2c>
482e5c06:	0021      	addiu	s0,sp,132
482e5c08:	9994      	lw	a0,80(s1)
482e5c0a:	9fc1      	lw	a2,4(a3)
482e5c0c:	e905      	break	8
482e5c0e:	bfc1      	lwu	a2,4(a3)
482e5c10:	a094      	lbu	a0,20(s0)
482e5c12:	9fc1      	lw	a2,4(a3)
482e5c14:	5829      	sltiu	s0,41
482e5c16:	482e      	addiu	s0,46
482e5c18:	a080      	lbu	a0,0(s0)
482e5c1a:	9fc1      	lw	a2,4(a3)
482e5c1c:	e901      	sdbbp	8
482e5c1e:	bfc1      	lwu	a2,4(a3)
482e5c20:	9990      	lw	a0,64(s1)
482e5c22:	9fc1      	lw	a2,4(a3)

482e5c24 <send_async_msg>:
482e5c24:	64f6      	save	48,ra,s0-s1
 * \li  返回错误原因包括：找不到接收应用，消息队列已满。
 * \li  私有消息异步发送方式，最多只能附带4个字节的消息内容（建议采用双方约定code作为消息内容）。
 *******************************************************************************/
int send_async_msg(uint8 app_id, msg_apps_t *msg)
{
482e5c26:	6704      	move	s0,a0
482e5c28:	6725      	move	s1,a1
482e5c2a:	b239      	lw	v0,482e5d0c <.L14+0x8a>
    const app_info_t *target_app_info;
    private_msg_t cur_send_pmsg;
    uint8 mq_id;

    PRINT_INFO_INT("async msg:", msg->type);
482e5c2c:	9da0      	lw	a1,0(a1)
482e5c2e:	e811      	zeb	s0
482e5c30:	0c21      	la	a0,482e5cb4 <.L14+0x32>
482e5c32:	6e02      	li	a2,2
482e5c34:	ea40      	jalr	v0
482e5c36:	6f4b      	li	a3,75
482e5c38:	7080      	cmpi	s0,128

    //通用引擎ID转换为具体APP ID
    if (app_id == APP_ID_THEENGINE)
482e5c3a:	6107      	btnez	482e5c4a <.LBB4>

482e5c3c <.LBB2>:
482e5c3c:	b335      	lw	v1,482e5d10 <.L14+0x8e>

482e5c3e <.LBE2>:
482e5c3e:	b036      	lw	s0,482e5d14 <.L14+0x92>
482e5c40:	e840      	jalr	s0
482e5c42:	a380      	lbu	a0,0(v1)
482e5c44:	7218      	cmpi	v0,24
    {
        app_id = get_engine_appid_by_type(get_engine_type());
        if (app_id == APP_ID_MAX)
482e5c46:	6702      	move	s0,v0
482e5c48:	6013      	bteqz	482e5c70 <.L5>

482e5c4a <.LBB4>:
482e5c4a:	5818      	sltiu	s0,24
        {
            goto app_noexist;
        }
    }

    //查找目标应用
    target_app_info = __app_running_get_app_info(app_id);
    if (target_app_info == NULL)
    {
        app_noexist:
        PRINT_ERR("async msg ERR_TARGET_NOEXIST!!");
        return ERR_TARGET_NOEXIST;
    }
    mq_id = target_app_info->mq_id;

    send_msg:
    //填充私有消息结构体
    libc_memcpy(&(cur_send_pmsg.msg), msg, sizeof(msg_apps_t));

    //发送消息到队列中
    if (sys_mq_send((uint32) (mq_id), (void *) &cur_send_pmsg) < 0)
    {
        PRINT_ERR("async msg ERR_MSGQUEUE_FULL!!");
        return ERR_MSGQUEUE_FULL;
    }

    return ERR_NO_ERR;
}

/*! \endcond */

/*! \cond */

//根据应用ID获取应用信息
static app_info_t *__app_running_get_app_info(uint8 app_id)
{
    app_info_t *app;
    uint8 i;

    if (app_id >= APP_ID_MAX)
482e5c4c:	6011      	bteqz	482e5c70 <.L5>
482e5c4e:	6c00      	li	a0,0
    {
        return NULL;
    }

    for (i = 0; i < MAX_APP_COUNT; i++)
482e5c50:	b732      	lw	a3,482e5d18 <.L14+0x96>
    {
        app = &g_app_info_vector[i];
482e5c52:	3688      	sll	a2,a0,2
482e5c54:	e6ed      	addu	v1,a2,a3
482e5c56:	a3a0      	lbu	a1,0(v1)
        if ((app->used == 1) && (app->app_id == app_id))
482e5c58:	7501      	cmpi	a1,1
482e5c5a:	6103      	btnez	482e5c62 <.LBB4+0x18>
482e5c5c:	a341      	lbu	v0,1(v1)
482e5c5e:	ea0e      	xor	v0,s0
482e5c60:	2206      	beqz	v0,482e5c6e <.LBE4>
482e5c62:	4461      	addiu	v1,a0,1
482e5c64:	6783      	move	a0,v1
482e5c66:	ec11      	zeb	a0
482e5c68:	5c04      	sltiu	a0,4
482e5c6a:	61f2      	btnez	482e5c50 <.LBB4+0x6>
482e5c6c:	1001      	b	482e5c70 <.L5>

482e5c6e <.LBE4>:
482e5c6e:	2b08      	bnez	v1,482e5c80 <.L5+0x10>

482e5c70 <.L5>:
482e5c70:	6d00      	li	a1,0
482e5c72:	b227      	lw	v0,482e5d0c <.L14+0x8a>
482e5c74:	0c14      	la	a0,482e5cc4 <.L14+0x42>
482e5c76:	67c5      	move	a2,a1
482e5c78:	ea40      	jalr	v0
482e5c7a:	6f4b      	li	a3,75
482e5c7c:	6a01      	li	v0,1
482e5c7e:	1016      	b	482e5cac <.L14+0x2a>
482e5c80:	a303      	lbu	s0,3(v1)

482e5c82 <.L14>:
482e5c82:	0404      	addiu	a0,sp,16
482e5c84:	b226      	lw	v0,482e5d1c <.L14+0x9a>
482e5c86:	67b1      	move	a1,s1
482e5c88:	6e08      	li	a2,8
482e5c8a:	ea40      	jalr	v0
482e5c8c:	6f00      	li	a3,0
482e5c8e:	6790      	move	a0,s0
482e5c90:	b01f      	lw	s0,482e5d0c <.L14+0x8a>
482e5c92:	0504      	addiu	a1,sp,16
482e5c94:	6e00      	li	a2,0
482e5c96:	e840      	jalr	s0
482e5c98:	6f18      	li	a3,24
482e5c9a:	5200      	slti	v0,0
482e5c9c:	6a00      	li	v0,0
482e5c9e:	6007      	bteqz	482e5cae <.L14+0x2c>
482e5ca0:	0c12      	la	a0,482e5ce8 <.L14+0x66>
482e5ca2:	67a2      	move	a1,v0
482e5ca4:	67c2      	move	a2,v0
482e5ca6:	e840      	jalr	s0
482e5ca8:	6f4b      	li	a3,75
482e5caa:	6a02      	li	v0,2
482e5cac:	ea4b      	neg	v0
482e5cae:	6476      	restore	48,ra,s0-s1
482e5cb0:	e8a0      	jrc	ra
482e5cb2:	0000      	addiu	s0,sp,0
482e5cb4:	493c      	addiu	s1,60
482e5cb6:	203e      	beqz	s0,482e5d34 <broadcast_msg+0x14>
482e5cb8:	7361      	cmpi	v1,97
482e5cba:	6e79      	li	a2,121
482e5cbc:	2063      	beqz	s0,482e5d84 <com_app_sleep+0x24>
482e5cbe:	736d      	cmpi	v1,109
482e5cc0:	3a67      	ld	v1,56(v0)
482e5cc2:	0000      	addiu	s0,sp,0
482e5cc4:	453c      	daddiu	s1,a1,-4
482e5cc6:	203e      	beqz	s0,482e5d44 <broadcast_msg+0x24>
482e5cc8:	7361      	cmpi	v1,97
482e5cca:	6e79      	li	a2,121
482e5ccc:	2063      	beqz	s0,482e5d94 <com_app_sleep+0x34>
482e5cce:	736d      	cmpi	v1,109
482e5cd0:	2067      	beqz	s0,482e5da0 <com_app_sleep+0x40>
482e5cd2:	5245      	slti	v0,69
482e5cd4:	5f52      	sltiu	a3,82
482e5cd6:	4154      	daddiu	v0,s1,4
482e5cd8:	4752      	daddiu	v0,a3,2
482e5cda:	5445      	slti	a0,69
482e5cdc:	4e5f      	addiu	a2,95
482e5cde:	454f      	addiu	v0,a1,-1
482e5ce0:	4958      	addiu	s1,88
482e5ce2:	5453      	slti	a0,83
482e5ce4:	2121      	beqz	s1,482e5d28 <broadcast_msg+0x8>
482e5ce6:	0000      	addiu	s0,sp,0
482e5ce8:	453c      	daddiu	s1,a1,-4
482e5cea:	203e      	beqz	s0,482e5d68 <com_app_sleep+0x8>
482e5cec:	7361      	cmpi	v1,97
482e5cee:	6e79      	li	a2,121
482e5cf0:	2063      	beqz	s0,482e5db8 <send_async_msg_btmanager+0xc>
482e5cf2:	736d      	cmpi	v1,109
482e5cf4:	2067      	beqz	s0,482e5dc4 <send_async_msg_btmanager+0x18>
482e5cf6:	5245      	slti	v0,69
482e5cf8:	5f52      	sltiu	a3,82
482e5cfa:	534d      	slti	v1,77
482e5cfc:	5147      	slti	s1,71
482e5cfe:	4555      	daddiu	v0,a1,5
482e5d00:	4555      	daddiu	v0,a1,5
482e5d02:	465f      	daddiu	v0,a2,-1
482e5d04:	4c55      	addiu	a0,85
482e5d06:	214c      	beqz	s1,482e5da0 <com_app_sleep+0x40>
482e5d08:	0021      	addiu	s0,sp,132
482e5d0a:	0000      	addiu	s0,sp,0
482e5d0c:	e901      	sdbbp	8
482e5d0e:	bfc1      	lwu	a2,4(a3)
482e5d10:	a094      	lbu	a0,20(s0)
482e5d12:	9fc1      	lw	a2,4(a3)
482e5d14:	5829      	sltiu	s0,41
482e5d16:	482e      	addiu	s0,46
482e5d18:	a080      	lbu	a0,0(s0)
482e5d1a:	9fc1      	lw	a2,4(a3)
482e5d1c:	e905      	break	8
482e5d1e:	bfc1      	lwu	a2,4(a3)

482e5d20 <broadcast_msg>:
482e5d20:	f004 64f4 	save	a0,32,ra,s0-s1
 * \li  广播应用消息最多只能附带4个字节的消息内容（建议采用双方约定code作为消息内容）。
 * \li  该接口不会把系统消息广播到 manager ap 私有消息队列中。
 *******************************************************************************/
bool broadcast_msg(msg_apps_t *msg, bool only_front)
{
482e5d24:	6725      	move	s1,a1
482e5d26:	e911      	zeb	s1
482e5d28:	6800      	li	s0,0
    app_info_t *app;
    uint8 i;

    //广播该消息给所有应用
    for (i = 0; i < MAX_APP_COUNT; i++)
482e5d2a:	b40c      	lw	a0,482e5d58 <broadcast_msg+0x38>
    {
        app = &g_app_info_vector[i];
482e5d2c:	3308      	sll	v1,s0,2
482e5d2e:	e38d      	addu	v1,a0
482e5d30:	a340      	lbu	v0,0(v1)
        if (app->used == 1)
482e5d32:	7201      	cmpi	v0,1
482e5d34:	6108      	btnez	482e5d46 <broadcast_msg+0x26>
482e5d36:	2103      	beqz	s1,482e5d3e <broadcast_msg+0x1e>
        {
            if ((only_front == FALSE) || (app->app_type == APP_TYPE_GUI))
482e5d38:	a3a2      	lbu	a1,2(v1)
482e5d3a:	7501      	cmpi	a1,1
482e5d3c:	6104      	btnez	482e5d46 <broadcast_msg+0x26>
482e5d3e:	a381      	lbu	a0,1(v1)
            {
                send_async_msg(app->app_id, msg);
482e5d40:	b207      	lw	v0,482e5d5c <broadcast_msg+0x3c>
482e5d42:	ea40      	jalr	v0
482e5d44:	9508      	lw	a1,32(sp)
482e5d46:	40c1      	addiu	a2,s0,1
482e5d48:	6706      	move	s0,a2
482e5d4a:	e811      	zeb	s0
482e5d4c:	5804      	sltiu	s0,4
482e5d4e:	61ed      	btnez	482e5d2a <broadcast_msg+0xa>
482e5d50:	6a01      	li	v0,1
            }
        }
    }

    return TRUE;
}
482e5d52:	6474      	restore	32,ra,s0-s1
482e5d54:	e8a0      	jrc	ra
482e5d56:	0000      	addiu	s0,sp,0
482e5d58:	a080      	lbu	a0,0(s0)
482e5d5a:	9fc1      	lw	a2,4(a3)
482e5d5c:	5c25      	sltiu	a0,37
482e5d5e:	482e      	addiu	s0,46

482e5d60 <com_app_sleep>:
482e5d60:	64e4      	save	32,ra,s0
 * \endcode
 * \note
 *******************************************************************************/
app_result_e com_app_sleep(uint32 sleep_timer)
{
482e5d62:	6a64      	li	v0,100
    input_gui_msg_t input_msg;
    uint32 sleep_100ms_timer;

    //计算 100ms 计时器
    sleep_100ms_timer = sleep_timer / 100;
482e5d64:	ec5b      	divu	zero,a0,v0
482e5d66:	e812      	mflo	s0
482e5d68:	6500      	nop
482e5d6a:	1013      	b	482e5d92 <com_app_sleep+0x32>
482e5d6c:	b40d      	lw	a0,482e5da0 <com_app_sleep+0x40>
    if (sleep_100ms_timer == 0)
    {
        return RESULT_NULL;
    }
    while (1)
    {
        //获取gui消息
        while (get_gui_msg(&input_msg) == TRUE) //有gui消息
        {
            //按任意按键返回
            libc_memcpy(&g_buffer_gui_msg, &input_msg, sizeof(input_gui_msg_t)); //备份缓冲消息
482e5d6e:	b20e      	lw	v0,482e5da4 <com_app_sleep+0x44>
482e5d70:	0504      	addiu	a1,sp,16
482e5d72:	6e05      	li	a2,5
482e5d74:	ea40      	jalr	v0
482e5d76:	6f00      	li	a3,0
482e5d78:	100d      	b	482e5d94 <com_app_sleep+0x34>
            return RESULT_NULL;
482e5d7a:	b209      	lw	v0,482e5d9c <com_app_sleep+0x3c>
482e5d7c:	ea40      	jalr	v0
482e5d7e:	0404      	addiu	a0,sp,16
482e5d80:	7201      	cmpi	v0,1
482e5d82:	60f4      	bteqz	482e5d6c <com_app_sleep+0xc>
482e5d84:	6d00      	li	a1,0
        }

        //挂起100ms，多任务调度
        sys_os_time_dly(10);
482e5d86:	b209      	lw	v0,482e5da8 <com_app_sleep+0x48>
482e5d88:	6c0a      	li	a0,10
482e5d8a:	67c5      	move	a2,a1
482e5d8c:	ea40      	jalr	v0
482e5d8e:	6f31      	li	a3,49
482e5d90:	400f      	addiu	s0,s0,-1

        //睡眠时间计时器递减
        sleep_100ms_timer--;
482e5d92:	28f3      	bnez	s0,482e5d7a <com_app_sleep+0x1a>
        //睡眠时间已到，退出
        if (sleep_100ms_timer == 0)
482e5d94:	6a00      	li	v0,0
        {
            return RESULT_NULL;
        }
    }
}
482e5d96:	6464      	restore	32,ra,s0
482e5d98:	e8a0      	jrc	ra
482e5d9a:	0000      	addiu	s0,sp,0
482e5d9c:	ead9      	multu	v0,a2
482e5d9e:	bfc1      	lwu	a2,4(a3)
482e5da0:	a0ec      	lbu	a3,12(s0)
482e5da2:	9fc1      	lw	a2,4(a3)
482e5da4:	e905      	break	8
482e5da6:	bfc1      	lwu	a2,4(a3)
482e5da8:	e901      	sdbbp	8
482e5daa:	bfc1      	lwu	a2,4(a3)

482e5dac <send_async_msg_btmanager>:
482e5dac:	64f7      	save	56,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    以异步方式发送应用私有消息。
 * \param[in]    bd_addr 命令对象的设备地址
 * \param[in]    msg 指向要发送的应用消息结构体
 * \param[out]   none
 * \return       int
 * \retval           0  发送异步消息成功。
 * \retval           -1 目标应用不存在。
 * \retval           -2 消息队列已满。
 * \note
 * \li  返回错误原因包括：找不到接收应用，消息队列已满。
 * \li  私有消息异步发送方式，最多只能附带4个字节的消息内容（建议采用双方约定code作为消息内容）。
 *******************************************************************************/
int __section__(".bank") send_async_msg_btmanager(uint8 *bd_addr, msg_apps_t *msg)
{
482e5dae:	6705      	move	s0,a1
482e5db0:	b222      	lw	v0,482e5e38 <send_async_msg_btmanager+0x8c>
    btstack_msg_t cur_msg;
    uint8 mq_id = MQ_ID_BT;

    PRINT_INFO_INT("async msg:", msg->type);
482e5db2:	9da0      	lw	a1,0(a1)
482e5db4:	6e02      	li	a2,2
482e5db6:	6724      	move	s1,a0
482e5db8:	0c13      	la	a0,482e5e04 <send_async_msg_btmanager+0x58>
482e5dba:	ea40      	jalr	v0
482e5dbc:	6f4b      	li	a3,75
482e5dbe:	67b0      	move	a1,s0

    //填充私有消息结构体
    libc_memcpy(&(cur_msg.msg), msg, sizeof(msg_apps_t));
482e5dc0:	b01f      	lw	s0,482e5e3c <send_async_msg_btmanager+0x90>
482e5dc2:	0404      	addiu	a0,sp,16
482e5dc4:	6e08      	li	a2,8
482e5dc6:	e840      	jalr	s0
482e5dc8:	6f00      	li	a3,0
482e5dca:	f020 0402 	addiu	a0,sp,34
482e5dce:	2104      	beqz	s1,482e5dd8 <send_async_msg_btmanager+0x2c>
    if (bd_addr != NULL)
482e5dd0:	67b1      	move	a1,s1
    {
        libc_memcpy(cur_msg.bd_addr, bd_addr, BD_ADDR_LEN);
482e5dd2:	6e06      	li	a2,6
482e5dd4:	6f00      	li	a3,0
482e5dd6:	1003      	b	482e5dde <send_async_msg_btmanager+0x32>
482e5dd8:	67b1      	move	a1,s1
    }
    else
    {
        libc_memset(cur_msg.bd_addr, 0x0, BD_ADDR_LEN);
482e5dda:	6e06      	li	a2,6
482e5ddc:	6f01      	li	a3,1
482e5dde:	e8c0      	jalrc	s0
482e5de0:	b016      	lw	s0,482e5e34 <send_async_msg_btmanager+0x88>
    }

    //发送消息到队列中
    if (sys_mq_send((uint32) (mq_id), (void *) &cur_msg) < 0)
482e5de2:	6c03      	li	a0,3
482e5de4:	0504      	addiu	a1,sp,16
482e5de6:	6e00      	li	a2,0
482e5de8:	e840      	jalr	s0
482e5dea:	6f18      	li	a3,24
482e5dec:	5200      	slti	v0,0
482e5dee:	6a00      	li	v0,0
    {
        PRINT_ERR("async msg ERR_MSGQUEUE_FULL!!");
        return ERR_MSGQUEUE_FULL;
    }

    return ERR_NO_ERR;
482e5df0:	6007      	bteqz	482e5e00 <send_async_msg_btmanager+0x54>
482e5df2:	0c09      	la	a0,482e5e14 <send_async_msg_btmanager+0x68>
482e5df4:	67a2      	move	a1,v0
482e5df6:	67c2      	move	a2,v0
482e5df8:	e840      	jalr	s0
482e5dfa:	6f4b      	li	a3,75
482e5dfc:	6b02      	li	v1,2
482e5dfe:	ea6b      	neg	v0,v1
482e5e00:	6477      	restore	56,ra,s0-s1
}
482e5e02:	e8a0      	jrc	ra
482e5e04:	493c      	addiu	s1,60
482e5e06:	203e      	beqz	s0,482e5e84 <send_async_msg_btmanager+0xd8>
482e5e08:	7361      	cmpi	v1,97
482e5e0a:	6e79      	li	a2,121
482e5e0c:	2063      	beqz	s0,482e5ed4 <send_async_msg_btmanager+0x128>
482e5e0e:	736d      	cmpi	v1,109
482e5e10:	3a67      	ld	v1,56(v0)
482e5e12:	0000      	addiu	s0,sp,0
482e5e14:	453c      	daddiu	s1,a1,-4
482e5e16:	203e      	beqz	s0,482e5e94 <send_async_msg_btmanager+0xe8>
482e5e18:	7361      	cmpi	v1,97
482e5e1a:	6e79      	li	a2,121
482e5e1c:	2063      	beqz	s0,482e5ee4 <send_async_msg_btmanager+0x138>
482e5e1e:	736d      	cmpi	v1,109
482e5e20:	2067      	beqz	s0,482e5ef0 <send_async_msg_btmanager+0x144>
482e5e22:	5245      	slti	v0,69
482e5e24:	5f52      	sltiu	a3,82
482e5e26:	534d      	slti	v1,77
482e5e28:	5147      	slti	s1,71
482e5e2a:	4555      	daddiu	v0,a1,5
482e5e2c:	4555      	daddiu	v0,a1,5
482e5e2e:	465f      	daddiu	v0,a2,-1
482e5e30:	4c55      	addiu	a0,85
482e5e32:	214c      	beqz	s1,482e5ecc <send_async_msg_btmanager+0x120>
482e5e34:	0021      	addiu	s0,sp,132
482e5e36:	0000      	addiu	s0,sp,0
482e5e38:	e901      	sdbbp	8
482e5e3a:	bfc1      	lwu	a2,4(a3)
482e5e3c:	e905      	break	8
482e5e3e:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_12:

48325800 <com_create_volume_view>:
48325800:	63fe      	addiu	sp,-16
#include "common_func.h"

void com_set_volume_view(view_update_e mode);
void com_create_volume_view(void)
{
48325802:	e820      	jr	ra
    create_view_param_t create_view_param;

#if (SUPPORT_LED_DRIVER == 1)
    if (sys_comval->support_led_display == 1)
    {
        create_view_param.type = VIEW_TYPE_MSG;
        create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
        create_view_param.overtime = 3000;
        create_view_param.ke_maplist = NULL;
        create_view_param.se_maplist = NULL;
        create_view_param.view_cb = com_set_volume_view;
        com_view_add(COM_VIEW_ID_SET_VOLUME, &create_view_param);
    }
#endif
}
48325804:	6302      	addiu	sp,16
	...

48325808 <com_set_volume_view>:
48325808:	e8a0      	jrc	ra
	...

4832580c <com_volume_add>:

static void __com_set_volume_redraw(void)
{
    led_display(LCD_COL, 0xff, 0); //清除:号
    led_display(0, NUM_U, 1);
    led_display(1, NUM_0, 0);
    led_display(2, (sys_comval->volume_current / 10) + NUM_0, 1);
    led_display(3, (sys_comval->volume_current % 10) + NUM_0, 1);
}

void com_set_volume_view(view_update_e mode)
{
    switch (mode)
    {
        case VIEW_UPDATE_CREATE:
        {
            __com_set_volume_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __com_set_volume_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __com_set_volume_redraw();
        }
        break;

        default:
        break;
4832580c:	64c5      	save	40,ra
    }
}

void com_volume_add(bool tts_flag)
{
4832580e:	b20e      	lw	v0,48325844 <com_volume_add+0x38>
    uint8 cur_volume;

    if(SMART_MODE == sys_comval->dae_cfg.audiopp_type)
48325810:	9a40      	lw	v0,0(v0)
48325812:	f160 a27f 	lbu	v1,383(v0)
48325816:	2302      	beqz	v1,4832581c <com_volume_add+0x10>
48325818:	7301      	cmpi	v1,1
    {
        if (sys_comval->volume_current < VOLUME_VALUE_MAX)
        {   
           cur_volume = sys_comval->volume_current + 1;  
           com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);
        }
    }
    else if(STANDARD_MODE == sys_comval->dae_cfg.audiopp_type)
4832581a:	6108      	btnez	4832582c <com_volume_add+0x20>
4832581c:	a25b      	lbu	v0,27(v0)
    {
#if 0
        cur_volume = sys_comval->volume_current + 2;

        if (cur_volume > VOLUME_VALUE_MAX)
        {
            cur_volume = VOLUME_VALUE_MAX;
        } 

        com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);
#endif  
        if (sys_comval->volume_current < VOLUME_VALUE_MAX)
4832581e:	5a1f      	sltiu	v0,31
48325820:	6005      	bteqz	4832582c <com_volume_add+0x20>
48325822:	4281      	addiu	a0,v0,1
        {   
           cur_volume = sys_comval->volume_current + 1;  
48325824:	b209      	lw	v0,48325848 <com_volume_add+0x3c>
           com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);
48325826:	ec11      	zeb	a0
48325828:	ea40      	jalr	v0
4832582a:	6d01      	li	a1,1
4832582c:	b506      	lw	a1,48325844 <com_volume_add+0x38>
        }
    }
    
    if (tts_flag == FALSE)
    {
        com_create_volume_view();
    }

    if (sys_comval->volume_current >= VOLUME_VALUE_MAX)
4832582e:	9d80      	lw	a0,0(a1)
48325830:	a47b      	lbu	v1,27(a0)
48325832:	5b1f      	sltiu	v1,31
48325834:	6104      	btnez	4832583e <com_volume_add+0x32>
48325836:	b206      	lw	v0,4832584c <com_volume_add+0x40>
    {
        //com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_MAX_VOLUME);
#if 1
        keytone_play(KEYTONE_WARNING, KEYTONE_NOBLOCK);
48325838:	6c01      	li	a0,1
4832583a:	ea40      	jalr	v0
4832583c:	6d00      	li	a1,0
4832583e:	6445      	restore	40,ra
#endif
#if 0
        if (g_p_view_ke->type == KEY_TYPE_DOWN)
        {
            com_start_key_tone(KEYTONE_BLOCK);
        }
        else
        {
            com_start_key_tone(KEYTONE_BLOCK);
            com_start_key_tone(KEYTONE_BLOCK);
        }

        sys_os_time_dly(10);
        com_filter_keymsg_in_queue(g_p_view_ke->val, KEY_TYPE_SHORT_UP);
        com_filter_keymsg_in_queue(g_p_view_ke->val, KEY_TYPE_HOLD);
#endif
    }
}
48325840:	e8a0      	jrc	ra
48325842:	0000      	addiu	s0,sp,0
48325844:	999c      	lw	a0,112(s1)
48325846:	9fc1      	lw	a2,4(a3)
48325848:	5a49      	sltiu	v0,73
4832584a:	48be      	addiu	s0,-66
4832584c:	5cad      	sltiu	a0,173
4832584e:	485a      	addiu	s0,90

48325850 <com_volume_sub>:
48325850:	64c5      	save	40,ra

void com_volume_sub(bool tts_flag)
{
48325852:	b209      	lw	v0,48325874 <com_volume_sub+0x24>
    uint8 cur_volume;

    if(SMART_MODE == sys_comval->dae_cfg.audiopp_type)
48325854:	9a40      	lw	v0,0(v0)
48325856:	f160 a27f 	lbu	v1,383(v0)
4832585a:	2302      	beqz	v1,48325860 <com_volume_sub+0x10>
4832585c:	7301      	cmpi	v1,1
    {
       if (sys_comval->volume_current > 0)
       {
          cur_volume = sys_comval->volume_current - 1; 
          com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);   
       }
    }
    else if(STANDARD_MODE == sys_comval->dae_cfg.audiopp_type) 
4832585e:	6107      	btnez	4832586e <com_volume_sub+0x1e>
48325860:	a25b      	lbu	v0,27(v0)
    {
#if 0
        if (sys_comval->volume_current > 2)
        {
           if (VOLUME_VALUE_MAX == sys_comval->volume_current)
           {
               cur_volume = VOLUME_VALUE_MAX -1;     
           }
           else
           {
               cur_volume = sys_comval->volume_current - 2;
           }
        }
        else
        {
            cur_volume = 0;
        }
         com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);
#endif
       if (sys_comval->volume_current > 0)
48325862:	2205      	beqz	v0,4832586e <com_volume_sub+0x1e>
48325864:	428f      	addiu	a0,v0,-1
       {
          cur_volume = sys_comval->volume_current - 1; 
48325866:	b205      	lw	v0,48325878 <com_volume_sub+0x28>
          com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);   
48325868:	ec11      	zeb	a0
4832586a:	ea40      	jalr	v0
4832586c:	6d01      	li	a1,1
4832586e:	6445      	restore	40,ra
       }
    }
 
 
    if (tts_flag == FALSE)
    {
        com_create_volume_view();
    }

    if (sys_comval->volume_current == 0)
48325870:	e8a0      	jrc	ra
48325872:	0000      	addiu	s0,sp,0
48325874:	999c      	lw	a0,112(s1)
48325876:	9fc1      	lw	a2,4(a3)
48325878:	5a49      	sltiu	v0,73
4832587a:	48be      	addiu	s0,-66

4832587c <com_volume_set>:
4832587c:	64f6      	save	48,ra,s0-s1
    {
        //com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_MIN_VOLUME);
    }
}

void com_volume_set(uint8 set_vol, uint8 set_mode)
{
4832587e:	6704      	move	s0,a0
48325880:	b40d      	lw	a0,483258b4 <com_volume_set+0x38>
    if ((set_vol != sys_comval->volume_current) && (set_vol <= VOLUME_VALUE_MAX))
48325882:	e811      	zeb	s0
48325884:	9c60      	lw	v1,0(a0)
48325886:	6725      	move	s1,a1
48325888:	a35b      	lbu	v0,27(v1)
4832588a:	e911      	zeb	s1
4832588c:	ea0e      	xor	v0,s0
4832588e:	220f      	beqz	v0,483258ae <com_volume_set+0x32>
48325890:	5820      	sltiu	s0,32
48325892:	600d      	bteqz	483258ae <com_volume_set+0x32>
48325894:	b209      	lw	v0,483258b8 <com_volume_set+0x3c>
    {
        com_set_sound_volume(set_vol, 0);
48325896:	6d00      	li	a1,0
48325898:	ea40      	jalr	v0
4832589a:	6790      	move	a0,s0
4832589c:	6d02      	li	a1,2

        if ((set_mode & SET_VOLUME_VIEW) != 0)
        {
            com_create_volume_view();
        }

        if ((set_mode & SET_VOLUME_TTS) != 0)
4832589e:	ed2c      	and	a1,s1
483258a0:	2506      	beqz	a1,483258ae <com_volume_set+0x32>
483258a2:	581f      	sltiu	s0,31
        {
            if (set_vol >= VOLUME_VALUE_MAX)
483258a4:	6104      	btnez	483258ae <com_volume_set+0x32>
483258a6:	b206      	lw	v0,483258bc <com_volume_set+0x40>
            {
                //com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_MAX_VOLUME);
#if 1
                keytone_play(KEYTONE_WARNING, KEYTONE_NOBLOCK);
483258a8:	6c01      	li	a0,1
483258aa:	ea40      	jalr	v0
483258ac:	6d00      	li	a1,0
483258ae:	6476      	restore	48,ra,s0-s1
#endif
#if 0
                com_start_key_tone(KEYTONE_BLOCK);
                com_start_key_tone(KEYTONE_BLOCK);
#endif
            }

            if (set_vol == 0)
            {
                //com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_MIN_VOLUME);
            }
        }
    }
}
483258b0:	e8a0      	jrc	ra
483258b2:	0000      	addiu	s0,sp,0
483258b4:	999c      	lw	a0,112(s1)
483258b6:	9fc1      	lw	a2,4(a3)
483258b8:	5a49      	sltiu	v0,73
483258ba:	48be      	addiu	s0,-66
483258bc:	5cad      	sltiu	a0,173
483258be:	485a      	addiu	s0,90

483258c0 <com_app_msg_hook>:
483258c0:	f004 64f4 	save	a0,32,ra,s0-s1
 * \ingroup      misc_func
 * \note
 *******************************************************************************/
void com_app_msg_hook(private_msg_t *private_msg)
{
483258c4:	ac40      	lhu	v0,0(a0)
    msg_apps_type_e msg_type = private_msg->msg.type;
483258c6:	72c0      	cmpi	v0,192
    bool vip_event_flag = FALSE;

    switch (msg_type)
483258c8:	6800      	li	s0,0
483258ca:	604d      	bteqz	48325966 <.LBB11>
483258cc:	52c1      	slti	v0,193
483258ce:	6017      	bteqz	483258fe <com_app_msg_hook+0x3e>
483258d0:	7290      	cmpi	v0,144
483258d2:	607d      	bteqz	483259ce <.LBE27>
483258d4:	5291      	slti	v0,145
483258d6:	6008      	bteqz	483258e8 <com_app_msg_hook+0x28>
483258d8:	7282      	cmpi	v0,130
483258da:	f0c0 6019 	bteqz	48325a90 <.LBE42+0x2>
483258de:	5282      	slti	v0,130
483258e0:	f0c0 611a 	btnez	48325a98 <.LBE42+0xa>
483258e4:	5285      	slti	v0,133
483258e6:	1020      	b	48325928 <com_app_msg_hook+0x68>
483258e8:	72b0      	cmpi	v0,176
483258ea:	6021      	bteqz	4832592e <.LBB2>
483258ec:	52b1      	slti	v0,177
483258ee:	6004      	bteqz	483258f8 <com_app_msg_hook+0x38>
483258f0:	7291      	cmpi	v0,145
483258f2:	f080 601f 	bteqz	48325a34 <.LBB35>
483258f6:	10d0      	b	48325a98 <.LBE42+0xa>
483258f8:	72b1      	cmpi	v0,177
483258fa:	6027      	bteqz	4832594a <.LBB7>
483258fc:	10cd      	b	48325a98 <.LBE42+0xa>
483258fe:	72e0      	cmpi	v0,224
48325900:	f0a0 601f 	bteqz	48325a82 <.LBB39>
48325904:	52e1      	slti	v0,225
48325906:	600a      	bteqz	4832591c <com_app_msg_hook+0x5c>
48325908:	72d0      	cmpi	v0,208
4832590a:	6052      	bteqz	483259b0 <.LBB20>
4832590c:	52d1      	slti	v0,209
4832590e:	6003      	bteqz	48325916 <com_app_msg_hook+0x56>
48325910:	72c1      	cmpi	v0,193
48325912:	603b      	bteqz	4832598a <.LBB16>
48325914:	10c1      	b	48325a98 <.LBE42+0xa>
48325916:	72d1      	cmpi	v0,209
48325918:	6055      	bteqz	483259c4 <.LBB25>
4832591a:	10be      	b	48325a98 <.LBE42+0xa>
4832591c:	72e1      	cmpi	v0,225
4832591e:	f0a0 6014 	bteqz	48325a8a <.LBB42>
48325922:	f6bf 4a1f 	addiu	v0,-321
48325926:	5a02      	sltiu	v0,2
48325928:	f0a0 6016 	bteqz	48325a98 <.LBE42+0xa>
4832592c:	10b4      	b	48325a96 <.LBE42+0x8>

4832592e <.LBB2>:
4832592e:	b76d      	lw	a3,48325ae0 <.LBE44+0x44>

48325930 <.LBE2>:
48325930:	a744      	lbu	v0,4(a3)
48325932:	2a45      	bnez	v0,483259be <.LBE22+0x6>
48325934:	a7b6      	lbu	a1,22(a3)

48325936 <.LBB4>:
    {
        case MSG_SD_IN:
        if (get_card_state() == CARD_STATE_CARD_NULL)
        {
            change_card_state(CARD_STATE_CARD_IN);
            g_app_info_state.need_update_playlist |= CARD_NEED_MASK;
48325936:	6c01      	li	a0,1

48325938 <.LBE4>:
48325938:	6e03      	li	a2,3
4832593a:	b36b      	lw	v1,48325ae4 <.LBE44+0x48>
            //for disk play to clr bk info
            g_ap_switch_var.card_in_out_flag = 1;
4832593c:	edcd      	or	a1,a2
4832593e:	6704      	move	s0,a0
            vip_event_flag = TRUE;
48325940:	c784      	sb	a0,4(a3)
48325942:	c7b6      	sb	a1,22(a3)
48325944:	f020 c382 	sb	a0,34(v1)
48325948:	10a7      	b	48325a98 <.LBE42+0xa>

4832594a <.LBB7>:
4832594a:	b466      	lw	a0,48325ae0 <.LBE44+0x44>

4832594c <.LBE7>:
4832594c:	a4e4      	lbu	a3,4(a0)
4832594e:	f080 2715 	beqz	a3,48325a7c <.LBE37+0x28>

48325952 <.LBB9>:
48325952:	c404      	sb	s0,4(a0)

48325954 <.LBE9>:
48325954:	a416      	lbu	s0,22(a0)
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
        }
        break;
        case MSG_SD_OUT:
        if (get_card_state() != CARD_STATE_CARD_NULL)
        {
            change_card_state(CARD_STATE_CARD_NULL);
            g_app_info_state.need_update_playlist |= CARD_NEED_MASK;
48325956:	6b03      	li	v1,3
48325958:	e86d      	or	s0,v1
4832595a:	b263      	lw	v0,48325ae4 <.LBE44+0x48>
            vip_event_flag = TRUE;
            g_ap_switch_var.card_in_out_flag = 1;
4832595c:	c416      	sb	s0,22(a0)
4832595e:	6801      	li	s0,1
48325960:	f020 c202 	sb	s0,34(v0)
48325964:	1099      	b	48325a98 <.LBE42+0xa>

48325966 <.LBB11>:
48325966:	b75f      	lw	a3,48325ae0 <.LBE44+0x44>

48325968 <.LBE11>:
48325968:	a785      	lbu	a0,5(a3)
4832596a:	2c29      	bnez	a0,483259be <.LBE22+0x6>
4832596c:	a7d6      	lbu	a2,22(a3)
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
        }
        break;

        case MSG_UH_IN:
        if (get_uhost_state() == UHOST_STATE_UHOST_NULL)
        {
            change_uhost_state(UHOST_STATE_UHOST_IN);
            g_app_info_state.need_update_playlist |= UHOST_NEED_MASK;
4832596e:	6b30      	li	v1,48

48325970 <.LBB13>:
48325970:	6d01      	li	a1,1

48325972 <.LBE13>:
48325972:	ee6d      	or	a2,v1
48325974:	b45d      	lw	a0,48325ae8 <.LBE44+0x4c>
            vip_event_flag = TRUE;
            GLOBAL_KERNEL_BACKDOOR_FLAG &= ~(BACKDOOR_USB_STATUS_CHANGED);
48325976:	c7a5      	sb	a1,5(a3)
48325978:	c7d6      	sb	a2,22(a3)
4832597a:	9c40      	lw	v0,0(a0)
4832597c:	f3df 4b0f 	addiu	v1,-1073
48325980:	ea6c      	and	v0,v1
48325982:	6705      	move	s0,a1
48325984:	f380 4b00 	addiu	v1,896
            ENABLE_UHOST_DETECT();
48325988:	100d      	b	483259a4 <.LBE18+0xc>

4832598a <.LBB16>:
4832598a:	b456      	lw	a0,48325ae0 <.LBE44+0x44>

4832598c <.LBE16>:
4832598c:	a4e5      	lbu	a3,5(a0)
4832598e:	2776      	beqz	a3,48325a7c <.LBE37+0x28>
48325990:	a456      	lbu	v0,22(a0)
            g_ap_switch_var.uhost_in_out_flag = 1;
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
        }
        break;
        case MSG_UH_OUT:
        if (get_uhost_state() != UHOST_STATE_UHOST_NULL)
        {
            change_uhost_state(UHOST_STATE_UHOST_NULL);
            g_app_info_state.need_update_playlist |= UHOST_NEED_MASK;
48325992:	6b30      	li	v1,48
48325994:	ea6d      	or	v0,v1

48325996 <.LBB18>:
48325996:	c405      	sb	s0,5(a0)

48325998 <.LBE18>:
48325998:	c456      	sb	v0,22(a0)
4832599a:	b454      	lw	a0,48325ae8 <.LBE44+0x4c>
            vip_event_flag = TRUE;
            GLOBAL_KERNEL_BACKDOOR_FLAG &= ~(BACKDOOR_USB_STATUS_CHANGED);
4832599c:	6801      	li	s0,1
4832599e:	9c40      	lw	v0,0(a0)
483259a0:	f3df 4b0f 	addiu	v1,-1073
483259a4:	ea6c      	and	v0,v1
483259a6:	b350      	lw	v1,48325ae4 <.LBE44+0x48>
            g_ap_switch_var.uhost_in_out_flag = 1;
483259a8:	dc40      	sw	v0,0(a0)
483259aa:	f020 c303 	sb	s0,35(v1)
483259ae:	1074      	b	48325a98 <.LBE42+0xa>

483259b0 <.LBB20>:
483259b0:	b34c      	lw	v1,48325ae0 <.LBE44+0x44>

483259b2 <.LBE20>:
483259b2:	a346      	lbu	v0,6(v1)
483259b4:	2a04      	bnez	v0,483259be <.LBE22+0x6>

483259b6 <.LBB22>:
483259b6:	4281      	addiu	a0,v0,1

483259b8 <.LBE22>:
483259b8:	6704      	move	s0,a0
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
        }
        break;

        case MSG_LINEIN_IN:
        if (get_linein_state() == LINEIN_STATE_LINEIN_NULL)
        {
            change_linein_state(LINEIN_STATE_LINEIN_IN);
            vip_event_flag = TRUE;
483259ba:	c386      	sb	a0,6(v1)
483259bc:	106d      	b	48325a98 <.LBE42+0xa>
483259be:	9508      	lw	a1,32(sp)
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
483259c0:	dd00      	sw	s0,0(a1)
483259c2:	106a      	b	48325a98 <.LBE42+0xa>

483259c4 <.LBB25>:
        }
        break;
483259c4:	b347      	lw	v1,48325ae0 <.LBE44+0x44>

483259c6 <.LBE25>:
483259c6:	a3c6      	lbu	a2,6(v1)
483259c8:	2659      	beqz	a2,48325a7c <.LBE37+0x28>

483259ca <.LBB27>:
483259ca:	c306      	sb	s0,6(v1)
483259cc:	1064      	b	48325a96 <.LBE42+0x8>

483259ce <.LBE27>:
483259ce:	b148      	lw	s1,48325aec <.LBE44+0x50>
        case MSG_LINEIN_OUT:
        if (get_linein_state() != LINEIN_STATE_LINEIN_NULL)
        {
            change_linein_state(LINEIN_STATE_LINEIN_NULL);
            vip_event_flag = TRUE;
        }
        else
        {
            //无效的消息
            private_msg->msg.type = MSG_NULL;
        }
        break;

        case MSG_USB_STICK:
        /* wait 50ms for USB-connect stably. */
        sys_os_time_dly(20);
483259d0:	6f31      	li	a3,49
483259d2:	6c14      	li	a0,20
483259d4:	67b0      	move	a1,s0
483259d6:	e940      	jalr	s1
483259d8:	67d0      	move	a2,s0

483259da <.LBB29>:
483259da:	b142      	lw	s1,48325ae0 <.LBE44+0x44>

483259dc <.LBE29>:
483259dc:	a1e7      	lbu	a3,7(s1)
483259de:	2f4e      	bnez	a3,48325a7c <.LBE37+0x28>
483259e0:	b244      	lw	v0,48325af0 <.LBE44+0x54>

        if (get_cable_state() == CABLE_STATE_CABLE_NULL)
        {
            if ((act_readb(DPDMCTRL) & (1 << DPDMCTRL_Plugin)) == 0)
483259e2:	6840      	li	s0,64
483259e4:	a260      	lbu	v1,0(v0)
483259e6:	e86c      	and	s0,v1
483259e8:	280b      	bnez	s0,48325a00 <.LBB32>
483259ea:	b041      	lw	s0,48325aec <.LBE44+0x50>
            {
                //ADAPTOR适配线插入
                PRINT_INFO_INT("async msg hook:", MSG_ADAPTOR_IN);
483259ec:	0c38      	la	a0,48325acc <.LBE44+0x30>
483259ee:	6da0      	li	a1,160
483259f0:	6e02      	li	a2,2
483259f2:	e840      	jalr	s0
483259f4:	6f4b      	li	a3,75
483259f6:	9408      	lw	a0,32(sp)
                private_msg->msg.type = MSG_ADAPTOR_IN;
483259f8:	6da0      	li	a1,160

483259fa <.LBB31>:
483259fa:	6a02      	li	v0,2

483259fc <.LBE31>:
483259fc:	dca0      	sw	a1,0(a0)
483259fe:	1001      	b	48325a02 <.LBE32>

48325a00 <.LBB32>:
48325a00:	6a01      	li	v0,1

48325a02 <.LBE32>:
48325a02:	b33d      	lw	v1,48325af4 <.LBE44+0x58>
                change_cable_state(CABLE_STATE_ADAPTOR_IN);
            }
            else
            {
                //有usb线插入
                change_cable_state(CABLE_STATE_CABLE_IN);
            }

            if ((g_this_app_info->app_id != APP_ID_CONFIG) && ((g_ap_switch_var.app_func_support & (uint32) (1
48325a04:	c147      	sb	v0,7(s1)
48325a06:	9be0      	lw	a3,0(v1)
48325a08:	a7c1      	lbu	a2,1(a3)
48325a0a:	760a      	cmpi	a2,10
48325a0c:	6007      	bteqz	48325a1c <.LBE32+0x1a>
48325a0e:	b436      	lw	a0,48325ae4 <.LBE44+0x48>
48325a10:	6a20      	li	v0,32
48325a12:	9c60      	lw	v1,0(a0)
48325a14:	eb4c      	and	v1,v0
48325a16:	2b02      	bnez	v1,48325a1c <.LBE32+0x1a>
48325a18:	9508      	lw	a1,32(sp)
                    << APP_FUNC_USOUND)) == 0))
            {
                private_msg->msg.type = MSG_NULL;
48325a1a:	dd60      	sw	v1,0(a1)
48325a1c:	b633      	lw	a2,48325ae8 <.LBE44+0x4c>
            }
            vip_event_flag = TRUE;

            GLOBAL_KERNEL_BACKDOOR_FLAG &= ~(BACKDOOR_USB_STATUS_CHANGED);
48325a1e:	f400 6a01 	li	v0,1025
48325a22:	9ee0      	lw	a3,0(a2)
48325a24:	eb4b      	neg	v1,v0
48325a26:	ef6c      	and	a3,v1
48325a28:	f3c0 4b00 	addiu	v1,960

            ENABLE_USB_DETECT();
48325a2c:	ef6c      	and	a3,v1
48325a2e:	6801      	li	s0,1
48325a30:	dee0      	sw	a3,0(a2)
48325a32:	1032      	b	48325a98 <.LBE42+0xa>

48325a34 <.LBB35>:
48325a34:	b12b      	lw	s1,48325ae0 <.LBE44+0x44>

48325a36 <.LBE35>:
48325a36:	a147      	lbu	v0,7(s1)
48325a38:	2221      	beqz	v0,48325a7c <.LBE37+0x28>
48325a3a:	7202      	cmpi	v0,2
48325a3c:	6109      	btnez	48325a50 <.LBE35+0x1a>
48325a3e:	b22c      	lw	v0,48325aec <.LBE44+0x50>
        }
        else
        {
            //无效的device消息
            private_msg->msg.type = MSG_NULL;
        }
        break;
        case MSG_USB_UNSTICK:
        if (get_cable_state() != CABLE_STATE_CABLE_NULL)
        {
            if (get_cable_state() == CABLE_STATE_ADAPTOR_IN) //ADAPTOR适配线拔出
            {
                PRINT_INFO_INT("async msg hook:", MSG_ADAPTOR_OUT);
48325a40:	0c23      	la	a0,48325acc <.LBE44+0x30>
48325a42:	6da1      	li	a1,161
48325a44:	6e02      	li	a2,2
48325a46:	ea40      	jalr	v0
48325a48:	6f4b      	li	a3,75
48325a4a:	9408      	lw	a0,32(sp)
                private_msg->msg.type = MSG_ADAPTOR_OUT; //改为MSG_ADAPTOR_OUT消息
48325a4c:	6da1      	li	a1,161
48325a4e:	dca0      	sw	a1,0(a0)
48325a50:	b329      	lw	v1,48325af4 <.LBE44+0x58>

48325a52 <.LBB37>:
            }
            change_cable_state(CABLE_STATE_CABLE_NULL);

            if ((g_this_app_info->app_id != APP_ID_CONFIG) && ((g_ap_switch_var.app_func_support & (uint32) (1
48325a52:	c107      	sb	s0,7(s1)

48325a54 <.LBE37>:
48325a54:	9be0      	lw	a3,0(v1)
48325a56:	a7c1      	lbu	a2,1(a3)
48325a58:	760a      	cmpi	a2,10
48325a5a:	6007      	bteqz	48325a6a <.LBE37+0x16>
48325a5c:	b222      	lw	v0,48325ae4 <.LBE44+0x48>
48325a5e:	6d20      	li	a1,32
48325a60:	9a80      	lw	a0,0(v0)
48325a62:	ecac      	and	a0,a1
48325a64:	2c02      	bnez	a0,48325a6a <.LBE37+0x16>
48325a66:	9608      	lw	a2,32(sp)
                    << APP_FUNC_USOUND)) == 0))
            {
                private_msg->msg.type = MSG_NULL;
48325a68:	de00      	sw	s0,0(a2)
48325a6a:	b720      	lw	a3,48325ae8 <.LBE44+0x4c>
            }
            vip_event_flag = TRUE;

            GLOBAL_KERNEL_BACKDOOR_FLAG &= ~(BACKDOOR_USB_STATUS_CHANGED);
48325a6c:	f400 6d01 	li	a1,1025
48325a70:	9f60      	lw	v1,0(a3)
48325a72:	ecab      	neg	a0,a1
48325a74:	eb8c      	and	v1,a0
48325a76:	6801      	li	s0,1
48325a78:	df60      	sw	v1,0(a3)
48325a7a:	100e      	b	48325a98 <.LBE42+0xa>
48325a7c:	9208      	lw	v0,32(sp)
        }
        else
        {
            //无效的device消息
            private_msg->msg.type = MSG_NULL;
48325a7e:	da00      	sw	s0,0(v0)
48325a80:	100b      	b	48325a98 <.LBE42+0xa>

48325a82 <.LBB39>:
        }
        break;
48325a82:	b618      	lw	a2,48325ae0 <.LBE44+0x44>
48325a84:	6f01      	li	a3,1
48325a86:	c6e8      	sb	a3,8(a2)

48325a88 <.LBE39>:
48325a88:	1007      	b	48325a98 <.LBE42+0xa>

48325a8a <.LBB42>:

        /*耳机（天线）插入*/
        case MSG_HP_IN:
        change_headphone_state(HEADPHONE_STATE_IN);
        break;
48325a8a:	b316      	lw	v1,48325ae0 <.LBE44+0x44>
48325a8c:	c308      	sb	s0,8(v1)

48325a8e <.LBE42>:
48325a8e:	1004      	b	48325a98 <.LBE42+0xa>

        /*耳机（天线）拔出*/
        case MSG_HP_OUT:
        change_headphone_state(HEADPHONE_STATE_NULL);
        break;
48325a90:	b514      	lw	a1,48325ae0 <.LBE44+0x44>

        case MSG_POWER_OFF:
        case MSG_RTCALARM:
        case MSG_BT_CONNECTED:
        case MSG_BT_DISCONNECT:
        vip_event_flag = TRUE;
        break;

        case MSG_LOW_POWER:
        if (g_app_info_state.bat_value == 0)
48325a92:	a58a      	lbu	a0,10(a1)
48325a94:	2c01      	bnez	a0,48325a98 <.LBE42+0xa>
48325a96:	6801      	li	s0,1
        {
            vip_event_flag = TRUE;
48325a98:	2017      	beqz	s0,48325ac8 <.LBE44+0x2c>

48325a9a <.LBB44>:
        }
        break;

        default:
        break;
    }

    if (vip_event_flag == TRUE)
48325a9a:	b712      	lw	a3,48325ae0 <.LBE44+0x44>

48325a9c <.LBE44>:
48325a9c:	b017      	lw	s0,48325af8 <.LBE44+0x5c>
    {
        //省电关机,屏保计时清0
        g_sys_counter.poweroff_counter = 0;
48325a9e:	a7c3      	lbu	a2,3(a3)
48325aa0:	6900      	li	s1,0
48325aa2:	7602      	cmpi	a2,2
48325aa4:	c820      	sh	s1,0(s0)
48325aa6:	c821      	sh	s1,2(s0)
        g_sys_counter.light_counter = 0;
48325aa8:	6103      	btnez	48325ab0 <.LBE44+0x14>
48325aaa:	b315      	lw	v1,48325afc <.LBE44+0x60>

        if (get_backlight_state() == BACKLIGHT_STATE_OFF)
        {
            com_set_display_onoff(TRUE);
48325aac:	eb40      	jalr	v1
48325aae:	6c01      	li	a0,1
48325ab0:	c02c      	sb	s1,12(s0)
        }

        //提高频率
        g_sys_counter.ui_idle_counter = 0;
48325ab2:	b014      	lw	s0,48325b00 <.LBE44+0x64>
        if (g_app_info_state_all.ui_status == UI_STATUS_IDLE_LOWFREQ)
48325ab4:	a083      	lbu	a0,3(s0)
48325ab6:	7401      	cmpi	a0,1
48325ab8:	6107      	btnez	48325ac8 <.LBE44+0x2c>
48325aba:	b213      	lw	v0,48325b04 <.LBE44+0x68>
        {
            adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
48325abc:	6c0a      	li	a0,10
48325abe:	6d07      	li	a1,7
48325ac0:	6e00      	li	a2,0
48325ac2:	ea40      	jalr	v0
48325ac4:	6f03      	li	a3,3
48325ac6:	c023      	sb	s1,3(s0)
            g_app_info_state_all.ui_status = UI_STATUS_IDLE;
48325ac8:	6474      	restore	32,ra,s0-s1
        }
    }
}
48325aca:	e8a0      	jrc	ra
48325acc:	493c      	addiu	s1,60
48325ace:	203e      	beqz	s0,48325b4c <enter_lower_mode+0x44>
48325ad0:	7361      	cmpi	v1,97
48325ad2:	6e79      	li	a2,121
48325ad4:	2063      	beqz	s0,48325b9c <.LBE4+0xc>
48325ad6:	736d      	cmpi	v1,109
48325ad8:	2067      	beqz	s0,48325ba8 <SPEAKER_OUT_SWITCH+0x8>
48325ada:	6f68      	li	a3,104
48325adc:	6b6f      	li	v1,111
48325ade:	003a      	addiu	s0,sp,232
48325ae0:	a0c0      	lbu	a2,0(s0)
48325ae2:	9fc1      	lw	a2,4(a3)
48325ae4:	a19c      	lbu	a0,28(s1)
48325ae6:	9fc1      	lw	a2,4(a3)
48325ae8:	aa5c      	lhu	v0,56(v0)
48325aea:	9fc1      	lw	a2,4(a3)
48325aec:	e901      	sdbbp	8
48325aee:	bfc1      	lwu	a2,4(a3)
48325af0:	041a      	addiu	a0,sp,104
48325af2:	c008      	sb	s0,8(s0)
48325af4:	9990      	lw	a0,64(s1)
48325af6:	9fc1      	lw	a2,4(a3)
48325af8:	a0dc      	lbu	a2,28(s0)
48325afa:	9fc1      	lw	a2,4(a3)
48325afc:	5b59      	sltiu	v1,89
48325afe:	4832      	addiu	s0,50
48325b00:	a094      	lbu	a0,20(s0)
48325b02:	9fc1      	lw	a2,4(a3)
48325b04:	e90d      	or	s1,s0
48325b06:	bfc1      	lwu	a2,4(a3)

48325b08 <enter_lower_mode>:
48325b08:	64c4      	save	32,ra
48325b0a:	b30f      	lw	v1,48325b44 <enter_lower_mode+0x3c>
48325b0c:	6a7f      	li	v0,127
48325b0e:	a3cc      	lbu	a2,12(v1)
48325b10:	ee4c      	and	a2,v0
48325b12:	2e16      	bnez	a2,48325b40 <enter_lower_mode+0x38>
48325b14:	b70d      	lw	a3,48325b48 <enter_lower_mode+0x40>
48325b16:	9fa0      	lw	a1,0(a3)
48325b18:	a58d      	lbu	a0,13(a1)
48325b1a:	7401      	cmpi	a0,1
48325b1c:	6103      	btnez	48325b24 <enter_lower_mode+0x1c>
48325b1e:	6ef9      	li	a2,249
48325b20:	d604      	sw	a2,16(sp)
48325b22:	100a      	b	48325b38 <enter_lower_mode+0x30>
48325b24:	6dfb      	li	a1,251
48325b26:	b30a      	lw	v1,48325b4c <enter_lower_mode+0x44>
48325b28:	d504      	sw	a1,16(sp)
48325b2a:	9b80      	lw	a0,0(v1)
48325b2c:	b209      	lw	v0,48325b50 <enter_lower_mode+0x48>
48325b2e:	db80      	sw	a0,0(v1)
48325b30:	67a6      	move	a1,a2
48325b32:	6c05      	li	a0,5
48325b34:	ea40      	jalr	v0
48325b36:	6f1d      	li	a3,29
48325b38:	b207      	lw	v0,48325b54 <enter_lower_mode+0x4c>
48325b3a:	0404      	addiu	a0,sp,16
48325b3c:	ea40      	jalr	v0
48325b3e:	6d01      	li	a1,1
48325b40:	6444      	restore	32,ra
48325b42:	e8a0      	jrc	ra
48325b44:	a0c0      	lbu	a2,0(s0)
48325b46:	9fc1      	lw	a2,4(a3)
48325b48:	999c      	lw	a0,112(s1)
48325b4a:	9fc1      	lw	a2,4(a3)
48325b4c:	0050      	addiu	s0,sp,320
48325b4e:	c002      	sb	s0,2(s0)
48325b50:	e901      	sdbbp	8
48325b52:	bfc1      	lwu	a2,4(a3)
48325b54:	5d21      	sltiu	a1,33
48325b56:	482e      	addiu	s0,46

48325b58 <com_set_display_onoff>:
48325b58:	ec11      	zeb	a0
48325b5a:	7401      	cmpi	a0,1
48325b5c:	b303      	lw	v1,48325b68 <com_set_display_onoff+0x10>
48325b5e:	6a00      	li	v0,0
48325b60:	6001      	bteqz	48325b64 <com_set_display_onoff+0xc>
48325b62:	6a02      	li	v0,2
48325b64:	e820      	jr	ra
48325b66:	c343      	sb	v0,3(v1)
48325b68:	a0c0      	lbu	a2,0(s0)
48325b6a:	9fc1      	lw	a2,4(a3)

48325b6c <SPEAKER_OUT_SWITCH_SEND_MSG>:
48325b6c:	64c4      	save	32,ra

48325b6e <.LBB2>:
#include "common_func.h"

//切换音频输出，发送同步消息让解码暂停一下
static bool SPEAKER_OUT_SWITCH_SEND_MSG(bool start_or_stop)
{
48325b6e:	b30b      	lw	v1,48325b98 <.LBE4+0x8>

48325b70 <.LBE2>:
48325b70:	6d01      	li	a1,1
    bool bret = TRUE;
48325b72:	a340      	lbu	v0,0(v1)
48325b74:	651d      	move	t8,a1
48325b76:	220c      	beqz	v0,48325b90 <.LBE4>

48325b78 <.LBB4>:
48325b78:	7401      	cmpi	a0,1

    //发送同步消息
    if (get_engine_type() != ENGINE_NULL)
    {
        msg_apps_t msg;

        if (start_or_stop == TRUE)
48325b7a:	6af4      	li	v0,244
        {
            msg.type = MSG_SWITCH_AOUT_START_SYNC;
48325b7c:	6001      	bteqz	48325b80 <.LBB4+0x8>
48325b7e:	6af5      	li	v0,245
        }
        else
        {
            msg.type = MSG_SWITCH_AOUT_STOP_SYNC;
48325b80:	d204      	sw	v0,16(sp)
48325b82:	6e00      	li	a2,0
        }

        bret = (bool) (send_sync_msg(APP_ID_THEENGINE, &msg, NULL, 0) == ERR_NO_ERR);
48325b84:	b206      	lw	v0,48325b9c <.LBE4+0xc>
48325b86:	6c80      	li	a0,128
48325b88:	0504      	addiu	a1,sp,16
48325b8a:	ea40      	jalr	v0
48325b8c:	67e6      	move	a3,a2
48325b8e:	5a01      	sltiu	v0,1

48325b90 <.LBE4>:
48325b90:	6758      	move	v0,t8
    }

    return bret;
}
48325b92:	6444      	restore	32,ra
48325b94:	e8a0      	jrc	ra
48325b96:	0000      	addiu	s0,sp,0
48325b98:	a094      	lbu	a0,20(s0)
48325b9a:	9fc1      	lw	a2,4(a3)
48325b9c:	5a65      	sltiu	v0,101
48325b9e:	482e      	addiu	s0,46

48325ba0 <SPEAKER_OUT_SWITCH>:
48325ba0:	64f5      	save	40,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    SPEAKER 输出切换
 * \param[in]    hp_in 0表示Headphone拔出切换输出，1表示Headphone插入切换输出
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_OUT_SWITCH(uint8 hp_in)
{
48325ba2:	b04d      	lw	s0,48325cd4 <.LBE5+0xca>
    bool outer_pa_on_bk = g_app_info_state.outer_pa_on;
48325ba4:	ec11      	zeb	a0
48325ba6:	a051      	lbu	v0,17(s0)
48325ba8:	6d00      	li	a1,0

    PRINT_INFO("start swtich aout");
48325baa:	b14c      	lw	s1,48325cd8 <.LBE5+0xce>
48325bac:	d404      	sw	a0,16(sp)
48325bae:	d205      	sw	v0,20(sp)
48325bb0:	0c37      	la	a0,48325c8c <.LBE5+0x82>
48325bb2:	67c5      	move	a2,a1
48325bb4:	e940      	jalr	s1
48325bb6:	6f4b      	li	a3,75
48325bb8:	1990 96db 	jal	48325b6c <SPEAKER_OUT_SWITCH_SEND_MSG>

    if (SPEAKER_OUT_SWITCH_SEND_MSG(TRUE) == FALSE)
48325bbc:	6c01      	li	a0,1
48325bbe:	2a05      	bnez	v0,48325bca <SPEAKER_OUT_SWITCH+0x2a>
48325bc0:	0c39      	la	a0,48325ca4 <.LBE5+0x9a>
    {
        PRINT_ERR("aout switch error!!");
48325bc2:	67a2      	move	a1,v0
48325bc4:	67c2      	move	a2,v0
48325bc6:	e940      	jalr	s1
48325bc8:	6f4b      	li	a3,75
48325bca:	9304      	lw	v1,16(sp)
    }

    if (hp_in == 1)
48325bcc:	7301      	cmpi	v1,1
48325bce:	6129      	btnez	48325c22 <.LBE5+0x18>
48325bd0:	a082      	lbu	a0,2(s0)
    {
        if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
48325bd2:	7401      	cmpi	a0,1
48325bd4:	6106      	btnez	48325be2 <SPEAKER_OUT_SWITCH+0x42>
48325bd6:	6c01      	li	a0,1
        {
            disable_pa(AO_SOURCE_I2S);
48325bd8:	6d00      	li	a1,0
48325bda:	b241      	lw	v0,48325cdc <.LBE5+0xd2>
48325bdc:	67c5      	move	a2,a1
48325bde:	ea40      	jalr	v0
48325be0:	67e4      	move	a3,a0
48325be2:	a0b1      	lbu	a1,17(s0)
        }

        if (g_app_info_state.outer_pa_on == TRUE)
48325be4:	7501      	cmpi	a1,1
48325be6:	6102      	btnez	48325bec <SPEAKER_OUT_SWITCH+0x4c>
48325be8:	b33e      	lw	v1,48325ce0 <.LBE5+0xd6>
        {
            SPEAKER_OFF();
48325bea:	ebc0      	jalrc	v1
48325bec:	b23e      	lw	v0,48325ce0 <.LBE5+0xd6>
        }
        SPEAKER_CONTROL_DISABLE();
48325bee:	eac0      	jalrc	v0
48325bf0:	a0c2      	lbu	a2,2(s0)

        if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
48325bf2:	7601      	cmpi	a2,1
48325bf4:	610a      	btnez	48325c0a <.LBE5>

48325bf6 <.LBB5>:
48325bf6:	b23d      	lw	v0,48325ce8 <.LBE5+0xde>
        {//切换为DAC Headphone输出
            uint8 pa_mode = (uint8) com_get_config_default(SETTING_AUDIO_INNER_PA_SET_MODE);
48325bf8:	ea40      	jalr	v0
48325bfa:	6c29      	li	a0,41
48325bfc:	6782      	move	a0,v0
            enable_pa(pa_mode, 0, AO_SOURCE_DAC);
48325bfe:	6d00      	li	a1,0
48325c00:	b237      	lw	v0,48325cdc <.LBE5+0xd2>
48325c02:	ec11      	zeb	a0
48325c04:	67c5      	move	a2,a1
48325c06:	ea40      	jalr	v0
48325c08:	67e5      	move	a3,a1

48325c0a <.LBE5>:
48325c0a:	6d00      	li	a1,0
        }

        g_app_info_state.aout_mode = AO_SOURCE_DAC;
48325c0c:	b238      	lw	v0,48325cec <.LBE5+0xe2>

        //禁用DAE
        com_set_dae_onoff(FALSE);
48325c0e:	c0a2      	sb	a1,2(s0)
48325c10:	ea40      	jalr	v0
48325c12:	6c00      	li	a0,0
48325c14:	b237      	lw	v0,48325cf0 <.LBE5+0xe6>

        //更新DAE参数后，需要重新设置音量
        com_reset_sound_volume(0);
48325c16:	ea40      	jalr	v0
48325c18:	6c00      	li	a0,0
48325c1a:	679d      	move	a0,sp

        g_app_info_state.outer_pa_on = outer_pa_on_bk;
48325c1c:	a4f4      	lbu	a3,20(a0)
48325c1e:	c0f1      	sb	a3,17(s0)
48325c20:	1023      	b	48325c68 <.LBE5+0x5e>
48325c22:	b232      	lw	v0,48325ce8 <.LBE5+0xde>
    }
    else
    {
        g_app_info_state.aout_mode = (aout_type_e) com_get_config_default(SETTING_AUDIO_OUTPUT_CHANNAL);
48325c24:	ea40      	jalr	v0
48325c26:	6c28      	li	a0,40
48325c28:	c042      	sb	v0,2(s0)
48325c2a:	ea11      	zeb	v0

        if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
48325c2c:	7201      	cmpi	v0,1
48325c2e:	6106      	btnez	48325c3c <.LBE5+0x32>
48325c30:	6c00      	li	a0,0
        {
            disable_pa(AO_SOURCE_DAC);
48325c32:	b22b      	lw	v0,48325cdc <.LBE5+0xd2>
48325c34:	67a4      	move	a1,a0
48325c36:	67c4      	move	a2,a0
48325c38:	ea40      	jalr	v0
48325c3a:	6f01      	li	a3,1
48325c3c:	b22e      	lw	v0,48325cf4 <.LBE5+0xea>
        }

        SPEAKER_CONTROL_ENABLE();
48325c3e:	eac0      	jalrc	v0
48325c40:	a062      	lbu	v1,2(s0)

        if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
48325c42:	7301      	cmpi	v1,1
48325c44:	6106      	btnez	48325c52 <.LBE5+0x48>
48325c46:	6c00      	li	a0,0
        {//切换为I2S输出
#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
            //DEMO IC:A0,A1,A2,VRO_S
            enable_pa(3, 0, AO_SOURCE_I2S);
#elif (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2825)
            //DVB:B7,B8,B9,A6
            enable_pa(4, 0, AO_SOURCE_I2S);
#elif (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2823)
            //DVB:AOUTL,AOUTR,VRO,VROS
            enable_pa(0, 0, AO_SOURCE_I2S);
48325c48:	b225      	lw	v0,48325cdc <.LBE5+0xd2>
48325c4a:	67a4      	move	a1,a0
48325c4c:	6e01      	li	a2,1
48325c4e:	ea40      	jalr	v0
48325c50:	67e4      	move	a3,a0
48325c52:	9605      	lw	a2,20(sp)
#else
            //DEMO IC:A0,A1,A2,A3
            enable_pa(1, 0, AO_SOURCE_I2S);
#endif
        }

        if (outer_pa_on_bk == TRUE)
48325c54:	7601      	cmpi	a2,1
48325c56:	6102      	btnez	48325c5c <.LBE5+0x52>
48325c58:	b328      	lw	v1,48325cf8 <.LBE5+0xee>
        {
            SPEAKER_ON();
48325c5a:	ebc0      	jalrc	v1
48325c5c:	b224      	lw	v0,48325ce8 <.LBE5+0xde>
        }

        //恢复DAE
        com_set_dae_onoff(TRUE);
48325c5e:	ea40      	jalr	v0
48325c60:	6c01      	li	a0,1
48325c62:	b224      	lw	v0,48325cf0 <.LBE5+0xe6>

        //更新DAE参数后，需要重新设置音量
        com_reset_sound_volume(0);
48325c64:	ea40      	jalr	v0
48325c66:	6c00      	li	a0,0
48325c68:	1990 96db 	jal	48325b6c <SPEAKER_OUT_SWITCH_SEND_MSG>
    }

    if (SPEAKER_OUT_SWITCH_SEND_MSG(FALSE) == FALSE)
48325c6c:	6c00      	li	a0,0
48325c6e:	2a06      	bnez	v0,48325c7c <.LBE5+0x72>
48325c70:	67a2      	move	a1,v0
    {
        PRINT_ERR("aout switch error!!");
48325c72:	67c2      	move	a2,v0
48325c74:	b219      	lw	v0,48325cd8 <.LBE5+0xce>
48325c76:	0c0c      	la	a0,48325ca4 <.LBE5+0x9a>
48325c78:	ea40      	jalr	v0
48325c7a:	6f4b      	li	a3,75
48325c7c:	6d00      	li	a1,0
    }

    PRINT_INFO("finish swtich aout");
48325c7e:	b217      	lw	v0,48325cd8 <.LBE5+0xce>
48325c80:	0c0f      	la	a0,48325cbc <.LBE5+0xb2>
48325c82:	67c5      	move	a2,a1
48325c84:	ea40      	jalr	v0
48325c86:	6f4b      	li	a3,75
48325c88:	6475      	restore	40,ra,s0-s1
48325c8a:	e8a0      	jrc	ra
48325c8c:	493c      	addiu	s1,60
48325c8e:	203e      	beqz	s0,48325d0c <.LBE5+0x102>
48325c90:	7473      	cmpi	a0,115
48325c92:	7261      	cmpi	v0,97
48325c94:	2074      	beqz	s0,48325d7e <.LBE5+0x174>
48325c96:	7773      	cmpi	a3,115
48325c98:	6974      	li	s1,116
48325c9a:	6863      	li	s0,99
48325c9c:	6120      	btnez	48325cde <.LBE5+0xd4>
48325c9e:	756f      	cmpi	a1,111
48325ca0:	0074      	addiu	s0,sp,464
48325ca2:	0000      	addiu	s0,sp,0
48325ca4:	453c      	daddiu	s1,a1,-4
48325ca6:	203e      	beqz	s0,48325d24 <.LBE5+0x11a>
48325ca8:	6f61      	li	a3,97
48325caa:	7475      	cmpi	a0,117
48325cac:	7320      	cmpi	v1,32
48325cae:	6977      	li	s1,119
48325cb0:	6374      	addiu	sp,928
48325cb2:	2068      	beqz	s0,48325d84 <.LBE5+0x17a>
48325cb4:	7265      	cmpi	v0,101
48325cb6:	6f72      	li	a3,114
48325cb8:	2172      	beqz	s1,48325d9e <.LBE5+0x194>
48325cba:	0021      	addiu	s0,sp,132
48325cbc:	493c      	addiu	s1,60
48325cbe:	203e      	beqz	s0,48325d3c <.LBE5+0x132>
48325cc0:	6966      	li	s1,102
48325cc2:	696e      	li	s1,110
48325cc4:	6873      	li	s0,115
48325cc6:	7320      	cmpi	v1,32
48325cc8:	7477      	cmpi	a0,119
48325cca:	6369      	addiu	sp,840
48325ccc:	2068      	beqz	s0,48325d9e <.LBE5+0x194>
48325cce:	6f61      	li	a3,97
48325cd0:	7475      	cmpi	a0,117
48325cd2:	0000      	addiu	s0,sp,0
48325cd4:	a0c0      	lbu	a2,0(s0)
48325cd6:	9fc1      	lw	a2,4(a3)
48325cd8:	e901      	sdbbp	8
48325cda:	bfc1      	lwu	a2,4(a3)
48325cdc:	e909      	entry	a0
48325cde:	bfc1      	lwu	a2,4(a3)
48325ce0:	5b3d      	sltiu	v1,61
48325ce2:	485e      	addiu	s0,94
48325ce4:	5a79      	sltiu	v0,121
48325ce6:	485e      	addiu	s0,94
48325ce8:	5ac5      	sltiu	v0,197
48325cea:	4846      	addiu	s0,70
48325cec:	5e65      	sltiu	a2,101
48325cee:	4846      	addiu	s0,70
48325cf0:	5af9      	sltiu	v0,249
48325cf2:	48be      	addiu	s0,-66
48325cf4:	5a09      	sltiu	v0,9
48325cf6:	485e      	addiu	s0,94
48325cf8:	5ae9      	sltiu	v0,233
48325cfa:	485e      	addiu	s0,94
	...
Disassembly of section BANK_UI_1_13:

48365800 <com_set_sound_out>:
48365800:	b202      	lw	v0,48365808 <.LBE2+0x4>
48365802:	c287      	sb	a0,7(v0)

48365804 <.LBE2>:
48365804:	e820      	jr	ra
    //设置音频输出状态
    change_soundout_state(state);

    return TRUE;
}
48365806:	6a01      	li	v0,1
48365808:	a094      	lbu	a0,20(s0)
4836580a:	9fc1      	lw	a2,4(a3)

4836580c <_calc_keytone_precut_inner_pa>:
4836580c:	64e3      	save	24,ra,s0
    }
}

static void _calc_keytone_precut_inner_pa(uint8 set_vol, uint32 vol_hard_pa, uint32 vol_hard_da)
{
4836580e:	b20f      	lw	v0,48365848 <_calc_keytone_precut_inner_pa+0x3c>
    int db;
    int tab_index_tmp;
    uint32 vol_hard_pa_tmp, vol_hard_da_tmp;

#if ((CASE_LINEIN_CHANNEL_SEL == 0) || (CASE_FM_CHANNEL_SEL == 0))

    if (set_vol > sys_comval->kt_tts_max_volume)
    {
        tab_index_tmp = VOLUME_VALUE_MAX - sys_comval->kt_tts_max_volume;

        vol_hard_pa_tmp = g_hard_volume_table[sys_comval->volume_gain][tab_index_tmp].vol_pa;
        vol_hard_da_tmp = g_hard_volume_table[sys_comval->volume_gain][tab_index_tmp].vol_da;

        db = (g_ana_pa_db[vol_hard_pa_tmp] + ((int16) vol_hard_da_tmp * 15 / 4))
                - (g_ana_pa_db[vol_hard_pa] + ((int16) vol_hard_da * 15 / 4));

        if (db >= 0)
        {
            sys_comval->kt_tts_percent = 100;
        }
        else
        {
            sys_comval->kt_tts_percent = (uint8)(com_math_exp_fixed(db));//db为负数
        }
    }
    else
    {
        sys_comval->kt_tts_percent = 100;
    }

#else

    if (set_vol > sys_comval->kt_tts_max_volume)
48365810:	9a00      	lw	s0,0(v0)
48365812:	a079      	lbu	v1,25(s0)
48365814:	eb83      	sltu	v1,a0
48365816:	6014      	bteqz	48365840 <_calc_keytone_precut_inner_pa+0x34>
48365818:	6f1f      	li	a3,31
    {
        tab_index_tmp = VOLUME_VALUE_MAX - sys_comval->kt_tts_max_volume;
4836581a:	e777      	subu	a1,a3,v1
4836581c:	b30c      	lw	v1,4836584c <_calc_keytone_precut_inner_pa+0x40>

        vol_hard_da_tmp = g_hard_volume_table[tab_index_tmp].vol_da;
4836581e:	34a4      	sll	a0,a1,1
48365820:	e469      	addu	v0,a0,v1
48365822:	a2a1      	lbu	a1,1(v0)

        db = ((int16) vol_hard_da_tmp - (int16) vol_hard_da) * 15 / 4;
48365824:	67e6      	move	a3,a2
48365826:	efb1      	seh	a3
48365828:	e5f3      	subu	a0,a1,a3
4836582a:	3390      	sll	v1,a0,4
4836582c:	e38f      	subu	v1,a0
4836582e:	5300      	slti	v1,0
48365830:	6001      	bteqz	48365834 <_calc_keytone_precut_inner_pa+0x28>
48365832:	4363      	addiu	v1,v1,3
48365834:	346b      	sra	a0,v1,2
48365836:	5400      	slti	a0,0

        if (db >= 0)
48365838:	6003      	bteqz	48365840 <_calc_keytone_precut_inner_pa+0x34>
4836583a:	b206      	lw	v0,48365850 <_calc_keytone_precut_inner_pa+0x44>
        {
            sys_comval->kt_tts_percent = 100;
        }
        else
        {
            sys_comval->kt_tts_percent = (uint8)(com_math_exp_fixed(db));//db为负数
4836583c:	eac0      	jalrc	v0
4836583e:	1001      	b	48365842 <_calc_keytone_precut_inner_pa+0x36>
48365840:	6a64      	li	v0,100
        }
    }
    else
    {
        sys_comval->kt_tts_percent = 100;
48365842:	c05a      	sb	v0,26(s0)
48365844:	6463      	restore	24,ra,s0
    }

#endif
}
48365846:	e8a0      	jrc	ra
48365848:	999c      	lw	a0,112(s1)
4836584a:	9fc1      	lw	a2,4(a3)
4836584c:	5e88      	sltiu	a2,136
4836584e:	4836      	addiu	s0,54
48365850:	5de9      	sltiu	a1,233
48365852:	484a      	addiu	s0,74

48365854 <com_set_phy_volume>:
48365854:	64f7      	save	56,ra,s0-s1
48365856:	f520 b104 	lw	s1,48365d78 <.LBE21+0x7a>
4836585a:	ec11      	zeb	a0
4836585c:	99c0      	lw	a2,0(s1)
4836585e:	d405      	sw	a0,20(sp)
48365860:	d404      	sw	a0,16(sp)
48365862:	f040 a697 	lbu	a0,87(a2)
48365866:	f500 b018 	lw	s0,48365d7c <.LBE21+0x7e>
4836586a:	d406      	sw	a0,24(sp)
4836586c:	f040 a6ad 	lbu	a1,77(a2)
48365870:	f4a0 0c00 	la	a0,48365d10 <.LBE21+0x12>
48365874:	6e02      	li	a2,2
48365876:	e840      	jalr	s0
48365878:	6f4b      	li	a3,75
4836587a:	9505      	lw	a1,20(sp)
4836587c:	f480 0c14 	la	a0,48365d10 <.LBE21+0x12>
48365880:	6e02      	li	a2,2
48365882:	e840      	jalr	s0
48365884:	6f4b      	li	a3,75
48365886:	9980      	lw	a0,0(s1)
48365888:	f4e0 b518 	lw	a1,48365d80 <.LBE21+0x82>
4836588c:	9c50      	lw	v0,64(a0)
4836588e:	f4e0 b318 	lw	v1,48365d84 <.LBE21+0x86>
48365892:	eaac      	and	v0,a1
48365894:	ea6e      	xor	v0,v1
48365896:	2a16      	bnez	v0,483658c4 <com_set_phy_volume+0x70>
48365898:	f4e0 b310 	lw	v1,48365d88 <.LBE21+0x8a>
4836589c:	a3ea      	lbu	a3,10(v1)
4836589e:	7701      	cmpi	a3,1
483658a0:	6111      	btnez	483658c4 <com_set_phy_volume+0x70>
483658a2:	9ba3      	lw	a1,12(v1)
483658a4:	f7ff 8d5e 	lh	v0,-2(a1)
483658a8:	f6df 5214 	slti	v0,-300
483658ac:	f040 cc46 	sh	v0,70(a0)
483658b0:	6a00      	li	v0,0
483658b2:	6106      	btnez	483658c0 <com_set_phy_volume+0x6c>
483658b4:	f020 a479 	lbu	v1,57(a0)
483658b8:	7301      	cmpi	v1,1
483658ba:	6004      	bteqz	483658c4 <com_set_phy_volume+0x70>
483658bc:	f020 a458 	lbu	v0,56(a0)
483658c0:	f040 c457 	sb	v0,87(a0)
483658c4:	f4a0 b414 	lw	a0,48365d78 <.LBE21+0x7a>
483658c8:	9cc0      	lw	a2,0(a0)
483658ca:	f020 a600 	lbu	s0,32(a2)
483658ce:	580a      	sltiu	s0,10
483658d0:	610e      	btnez	483658ee <com_set_phy_volume+0x9a>
483658d2:	6d00      	li	a1,0
483658d4:	f4a0 b008 	lw	s0,48365d7c <.LBE21+0x7e>
483658d8:	67c5      	move	a2,a1
483658da:	f440 0c04 	la	a0,48365d1c <.LBE21+0x1e>
483658de:	e840      	jalr	s0
483658e0:	6f4b      	li	a3,75
483658e2:	f480 b518 	lw	a1,48365d78 <.LBE21+0x7a>
483658e6:	6a09      	li	v0,9
483658e8:	9de0      	lw	a3,0(a1)
483658ea:	f020 c740 	sb	v0,32(a3)
483658ee:	9305      	lw	v1,20(sp)
483658f0:	5b20      	sltiu	v1,32
483658f2:	6102      	btnez	483658f8 <com_set_phy_volume+0xa4>
483658f4:	6e1f      	li	a2,31
483658f6:	d605      	sw	a2,20(sp)
483658f8:	f480 b400 	lw	a0,48365d78 <.LBE21+0x7a>
483658fc:	67dd      	move	a2,sp
483658fe:	9ce0      	lw	a3,0(a0)
48365900:	a6b0      	lbu	a1,16(a2)
48365902:	f480 b20c 	lw	v0,48365d8c <.LBE21+0x8e>
48365906:	c7bc      	sb	a1,28(a3)
48365908:	9005      	lw	s0,20(sp)
4836590a:	6f1f      	li	a3,31
4836590c:	e717      	subu	a1,a3,s0
4836590e:	9c00      	lw	s0,0(a0)
48365910:	a242      	lbu	v0,2(v0)
48365912:	f020 a07a 	lbu	v1,58(s0)
48365916:	7301      	cmpi	v1,1
48365918:	616a      	btnez	483659ee <.LBE3+0x2>

4836591a <.LBB3>:
4836591a:	a0db      	lbu	a2,27(s0)

4836591c <.LBE4>:

//注意：该接口需要根据PA音量单位修改，修改点注释为 //TO MODIFY CASE BY CASE
static void _set_phy_volume_i2s_pa(uint16 reg_val_to)
{
    uint16 reg_val = reg_val_to;
    int db;
    uint8 tab_index = 0;
        
    db = (int16) g_hard_volume_table_i2s_pa[0] - (int16) reg_val_to; //TO MODIFY CASE BY CASE
    db = db * 10 / 8; //TO MODIFY CASE BY CASE
    sys_comval->volume_relative = (int16)db;

    if (reg_val < 0x3ff) //TO MODIFY CASE BY CASE
    {
        reg_val += ((uint16) sys_comval->volume_gain * 8); //TO MODIFY CASE BY CASE
    }

    if (FALSE == sys_comval->dae_cfg.bypass)
    {
        com_set_dae_config_dynamic();

        if ((SMART_MODE == sys_comval->dae_cfg.audiopp_type) && (sys_comval->dae_cfg.mdrc_enable == 1)) 
        {
            int16 limit_threshold;
            int16 vol_offset, tmp_vol_offset;

            limit_threshold = sys_comval->dae_cfg.mdrc_threshold_base_max;
            if (sys_comval->dae_cfg.limiter_enable == 1)
            {
                limit_threshold += ((int16) sys_comval->dae_cfg.limiter_threshold_diff \
                    - sys_comval->dae_cfg.limiter_threshold);
            }

            vol_offset  = (int16) 0 - limit_threshold;
            vol_offset -= (int16)sys_comval->dae_cfg.makeup_gain;
            vol_offset += sys_comval->dae_cfg.precut_ratio;
            vol_offset += sys_comval->mdrc_vol_adjust;

            if (vol_offset > 0)
            {
                reg_val -= vol_offset * 8 / 10; //TO MODIFY CASE BY CASE
            }
            else
            {
                reg_val += ((int16) 0 - vol_offset) * 8 / 10; //TO MODIFY CASE BY CASE
            }

            //保证PA音量递增
            tmp_vol_offset = vol_offset * 8 / 10; //TO MODIFY CASE BY CASE
            tmp_vol_offset = tmp_vol_offset * 10 / 8; //TO MODIFY CASE BY CASE

            if (vol_offset != tmp_vol_offset)
            {
                reg_val--; //TO MODIFY CASE BY CASE
            }

            if (reg_val < g_hard_volume_table_i2s_pa[0]) //TO MODIFY CASE BY CASE
            {
                reg_val = g_hard_volume_table_i2s_pa[0];
            }
        }
        else if(STANDARD_MODE == sys_comval->dae_cfg.audiopp_type)
        {
            //标准模式不根据音效参数修改PA寄存器值
        }
    }

    PRINT_INFO_INT("i2s_reg_val",reg_val);
    ccd_i2s_pa_set_volume(reg_val);        
}

static void _set_phy_volume_inner_pa(uint32 vol_hard_pa_to, uint32 vol_hard_da_to)
{
    uint32 vol_hard_pa, vol_hard_da;
    uint32 vol_hard_pa_tmp, vol_hard_da_tmp;
    int db;


    vol_hard_pa = vol_hard_pa_to;
    vol_hard_da = vol_hard_da_to;

#if ((CASE_LINEIN_CHANNEL_SEL == 0) || (CASE_FM_CHANNEL_SEL == 0))
    vol_hard_pa_tmp = g_hard_volume_table[sys_comval->volume_gain][0].vol_pa;
    vol_hard_da_tmp = g_hard_volume_table[sys_comval->volume_gain][0].vol_da;

    db = g_ana_pa_db[vol_hard_pa_to] - g_ana_pa_db[vol_hard_pa_tmp];
    db += ((int32) vol_hard_da_to - (int32) vol_hard_da_tmp) * 15 / 4;

    sys_comval->volume_relative = (int16)db;
#endif

#if ((CASE_LINEIN_CHANNEL_SEL == 1) && (CASE_FM_CHANNEL_SEL == 1))

    db = ((int16) vol_hard_da_to - (int16) g_hard_volume_table[0].vol_da) * 15 / 4;
    sys_comval->volume_relative = (int16)db;
    
    if (FALSE == sys_comval->dae_cfg.bypass)
    {
        com_set_dae_config_dynamic();
        
        if (sys_comval->dae_cfg.mdrc_enable == 1)
        {
            int16 limit_threshold;
            int16 vol_offset, tmp_vol_offset;

            limit_threshold = sys_comval->dae_cfg.mdrc_threshold_base_max;
            if (sys_comval->dae_cfg.limiter_enable == 1)
            {
                limit_threshold += ((int16) sys_comval->dae_cfg.limiter_threshold_diff \
                    - sys_comval->dae_cfg.limiter_threshold);
            }

            vol_offset  = (int16) 0 - limit_threshold;
            vol_offset -= (int16)sys_comval->dae_cfg.makeup_gain;
            vol_offset += sys_comval->dae_cfg.precut_ratio;
            vol_offset += sys_comval->mdrc_vol_adjust;

            if (vol_offset > 0)
            {
                vol_hard_da += (uint32)(vol_offset * 4 / 15);
            }
            else
            {
                vol_hard_da -= (uint32)(((int16) 0 - vol_offset) * 4 / 15);
            }

            //保证PA音量递增
            tmp_vol_offset = vol_offset * 4 / 15;
            tmp_vol_offset = tmp_vol_offset * 15 / 4;

            if (vol_offset != tmp_vol_offset)
            {
                vol_hard_da++;
            }

            if (vol_hard_da > g_hard_volume_table[0].vol_da)
            {
                vol_hard_da = g_hard_volume_table[0].vol_da;
            }
        }
    }
  
#endif

        PRINT_INFO_INT("vol_hard_da",vol_hard_da);
        
        while(set_pa_volume(vol_hard_pa, vol_hard_da) != 0)
        {
            sys_os_time_dly(10);
        }    
}

//小米模型DAC输出 音量处理
static void _set_ao_source_dac_sm(int tab_index, uint8 vol_to)
{
    uint32 vol_hard_pa_to, vol_hard_da_to;  
    uint32 vol_hard_pa_tmp, vol_hard_da_tmp;
    int db;
    
    if (VOLUME_VALUE_MAX == tab_index)
    {
        vol_hard_pa_to = 0;
    }
    else
    {
        vol_hard_pa_to = g_hard_volume_table_sm[tab_index].vol_pa - sys_comval->volume_gain;
    }
    vol_hard_da_to = g_hard_volume_table_sm[tab_index].vol_da;

    //音量限制处理
    vol_hard_pa_tmp = g_hard_volume_table_sm[0].vol_pa - sys_comval->volume_gain;
    vol_hard_da_tmp = g_hard_volume_table_sm[0].vol_da;

    db = ((int16) vol_hard_da_to - (int16) vol_hard_da_tmp) * 15 / 4;
    
    //音量限制处理
    if (db > sys_comval->volume_limit)
    {
        vol_hard_da_to = vol_hard_da_to - (uint32)((db - sys_comval->volume_limit) * 4 / 15);
    }

    _calc_keytone_precut_inner_pa(vol_to, vol_hard_pa_to, vol_hard_da_to);
    
    _set_phy_volume_inner_pa_sm(vol_hard_pa_to, vol_hard_da_to);
}

static void _set_phy_volume_inner_pa_sm(uint32 vol_hard_pa_to, uint32 vol_hard_da_to)
{
    uint32 vol_hard_pa, vol_hard_da;
    int db;

    vol_hard_pa = vol_hard_pa_to;
    vol_hard_da = vol_hard_da_to;

#if ((CASE_LINEIN_CHANNEL_SEL == 1) && (CASE_FM_CHANNEL_SEL == 1))

    db = ((int16) vol_hard_da_to - (int16) g_hard_volume_table_sm[0].vol_da) * 15 / 4;
    sys_comval->volume_relative = (int16)db;

    if (FALSE == sys_comval->dae_cfg.bypass)
    {
        com_set_dae_config_dynamic();
        
        vol_hard_da = mdrc_comp_handle(vol_hard_da);        
    }

#endif

    PRINT_INFO_INT("vol_hard_da_standard_mode",vol_hard_da);

    while(set_pa_volume(vol_hard_pa, vol_hard_da) != 0)
    {
        sys_os_time_dly(10);
    }
}

uint32 __section__(".BANK46") mdrc_comp_handle(uint32 vol_hard_da)
{
        
   uint32 vol_hard_da_temp = 0;

   vol_hard_da_temp = vol_hard_da;
         
   if (sys_comval->dae_cfg.mdrc_enable_standard_mode == 1)
   {
        int16 compressor_threshold;
        int16 vol_offset, tmp_vol_offset;

        vol_offset = 0;

        vol_offset += sys_comval->mdrc_vol_adjust_standard_mode;            

        if (vol_offset > 0)
        {
            vol_hard_da_temp += (uint32)(vol_offset * 4 / 15);
        }
        else
        {
            vol_hard_da_temp -= (uint32)(((int16) 0 - vol_offset) * 4 / 15);
        }

        //保证PA音量递增
        tmp_vol_offset = vol_offset * 4 / 15;
        tmp_vol_offset = tmp_vol_offset * 15 / 4;

        if (vol_offset != tmp_vol_offset)
        {
            vol_hard_da_temp++;
        }

        if (vol_hard_da_temp > 0xbf)
        {
            vol_hard_da_temp = 0xbf;
        }
   }
   
   return vol_hard_da_temp;
}


/************按下音量调节音量时，实际调节的是信号大小**************
 ***********需要算法的支持，方案中只有使用WAVES音效时才会用*******/
static void adjust_input_signal(uint8 aout_mode) 
{
    uint8  tab_index = 0;
    uint32 vol_hard_da = 0;
    uint16 w_reg_val = 0;
    
    //为避免按键音太大，对按键音做衰减
    sys_comval->mdrc_percent = sys_comval->volume_current + 2;
4836591c:	6762      	move	v1,v0

4836591e <.LBB5>:
4836591e:	46a2      	addiu	a1,a2,2
48365920:	f020 c0b5 	sb	a1,53(s0)

48365924 <.LBE5>:
48365924:	eb11      	zeb	v1
48365926:	9c40      	lw	v0,0(a0)

48365928 <.LBB6>:
48365928:	7301      	cmpi	v1,1

    switch (aout_mode)
4836592a:	6900      	li	s1,0
4836592c:	a27b      	lbu	v1,27(v0)
4836592e:	611b      	btnez	48365966 <.LBB6+0x3e>
48365930:	2b06      	bnez	v1,4836593e <.LBB6+0x16>
    {
        case AO_SOURCE_I2S: 
        {
            if (0 == sys_comval->volume_current)
48365932:	f3e0 6c1f 	li	a0,1023
            {
                ccd_i2s_pa_set_volume(0x03ff);   
48365936:	67b1      	move	a1,s1
48365938:	67d1      	move	a2,s1
4836593a:	4fe3      	addiu	a3,-29
4836593c:	1010      	b	4836595e <.LBB6+0x36>
4836593e:	f440 b018 	lw	s0,48365d94 <.LBE21+0x96>
            }
            else
            {       
                if (TTS_STATUS_PLAYING == g_tts_play_info.status)
48365942:	a084      	lbu	a0,4(s0)
48365944:	7402      	cmpi	a0,2
48365946:	6caa      	li	a0,170
                {
                    //避免TTS音量过大
                    tab_index = 31 - sys_comval->volume_current;
                    w_reg_val = g_hard_volume_table_i2s_pa[tab_index];
                }
                else
                {
                    w_reg_val = 0x00aa;
48365948:	6107      	btnez	48365958 <.LBB6+0x30>
4836594a:	e777      	subu	a1,a3,v1
4836594c:	ed11      	zeb	a1
4836594e:	f440 b30c 	lw	v1,48365d98 <.LBE21+0x9a>
48365952:	32a4      	sll	v0,a1,1
48365954:	e27d      	addu	a3,v0,v1
48365956:	af80      	lhu	a0,0(a3)
48365958:	6d00      	li	a1,0
                }
                
                ccd_i2s_pa_set_volume(w_reg_val);
4836595a:	67c5      	move	a2,a1
4836595c:	6f02      	li	a3,2
4836595e:	f420 b014 	lw	s0,48365d90 <.LBE21+0x92>
48365962:	e8c0      	jalrc	s0
48365964:	102d      	b	483659c0 <.LBB6+0x98>
            }
        }
        break;
48365966:	2b11      	bnez	v1,4836598a <.LBB6+0x62>

        //internel dac & i2s or spdif and external dac both chanel
        case AO_SOURCE_DACI2S: //i2s + internel dac
        case AO_SOURCE_DACSPDIF: //spdif +internel dac
        default:
        {
            if (0 == sys_comval->volume_current)
48365968:	1007      	b	48365978 <.LBB6+0x50>
            {
                while(set_pa_volume(VOL_HARD_PA, 0) != 0)
4836596a:	6d00      	li	a1,0
                {
                    sys_os_time_dly(10);
4836596c:	f400 b210 	lw	v0,48365d7c <.LBE21+0x7e>
48365970:	6c0a      	li	a0,10
48365972:	67c5      	move	a2,a1
48365974:	ea40      	jalr	v0
48365976:	6f31      	li	a3,49
48365978:	6d00      	li	a1,0
4836597a:	f420 b004 	lw	s0,48365d9c <.LBE21+0x9e>
4836597e:	6c28      	li	a0,40
48365980:	67c5      	move	a2,a1
48365982:	e840      	jalr	s0
48365984:	6f02      	li	a3,2
48365986:	2af1      	bnez	v0,4836596a <.LBB6+0x42>
48365988:	101b      	b	483659c0 <.LBB6+0x98>
4836598a:	f400 b60c 	lw	a2,48365d94 <.LBE21+0x96>
                }   
            }
            else
            {       
                if (TTS_STATUS_PLAYING == g_tts_play_info.status)
4836598e:	a624      	lbu	s1,4(a2)
48365990:	7102      	cmpi	s1,2
48365992:	69bf      	li	s1,191
                {
                    //避免TTS音量过大
                    tab_index = 31 - sys_comval->volume_current;
                    vol_hard_da = g_hard_volume_table[tab_index].vol_da;
                }
                else
                {
                    vol_hard_da = 0xbf;
48365994:	610e      	btnez	483659b2 <.LBB6+0x8a>
48365996:	e777      	subu	a1,a3,v1
48365998:	ed11      	zeb	a1
4836599a:	f400 b308 	lw	v1,48365da0 <.LBE21+0xa2>
4836599e:	37a4      	sll	a3,a1,1
483659a0:	e771      	addu	a0,a3,v1
483659a2:	a421      	lbu	s1,1(a0)
483659a4:	1006      	b	483659b2 <.LBB6+0x8a>
483659a6:	6d00      	li	a1,0
                }
                
                while(set_pa_volume(VOL_HARD_PA, vol_hard_da) != 0)
                {
                    sys_os_time_dly(10);
483659a8:	b2f5      	lw	v0,48365d7c <.LBE21+0x7e>
483659aa:	6c0a      	li	a0,10
483659ac:	67c5      	move	a2,a1
483659ae:	ea40      	jalr	v0
483659b0:	6f31      	li	a3,49
483659b2:	b0fb      	lw	s0,48365d9c <.LBE21+0x9e>
483659b4:	6c28      	li	a0,40
483659b6:	67b1      	move	a1,s1
483659b8:	6e00      	li	a2,0
483659ba:	e840      	jalr	s0
483659bc:	6f02      	li	a3,2
483659be:	2af3      	bnez	v0,483659a6 <.LBB6+0x7e>
483659c0:	b4f9      	lw	a0,48365da4 <.LBE21+0xa6>
                }
            }
        }
        break;
    }  
     
    sys_disable_mem_use(0x37000,0x37000 + 0x650);
483659c2:	b5fa      	lw	a1,48365da8 <.LBE21+0xaa>
483659c4:	b0ee      	lw	s0,48365d7c <.LBE21+0x7e>
483659c6:	6e00      	li	a2,0
483659c8:	e840      	jalr	s0
483659ca:	6f53      	li	a3,83
483659cc:	b0eb      	lw	s0,48365d78 <.LBE21+0x7a>
    waves_set_effect_param(SET_WAVES_INPUT_PARAM, &sys_comval->volume_current);
483659ce:	b2f8      	lw	v0,48365dac <.LBE21+0xae>
483659d0:	98a0      	lw	a1,0(s0)
483659d2:	6c05      	li	a0,5
483659d4:	4d1b      	addiu	a1,27
483659d6:	6e00      	li	a2,0
483659d8:	ea40      	jalr	v0
483659da:	6f09      	li	a3,9
483659dc:	98c0      	lw	a2,0(s0)
    sys_comval->dae_cfg.volume_current = sys_comval->volume_current;
483659de:	a69b      	lbu	a0,27(a2)
483659e0:	f1a0 c688 	sb	a0,424(a2)
483659e4:	9880      	lw	a0,0(s0)
    __set_dae_config(&(sys_comval->dae_cfg));
483659e6:	1a50 9733 	jal	484a5ccc <__set_dae_config>
483659ea:	4c4c      	addiu	a0,76

483659ec <.LBE3>:
483659ec:	118e      	b	48365d0a <.LBE21+0xc>
483659ee:	ea11      	zeb	v0
483659f0:	7201      	cmpi	v0,1
483659f2:	f0a0 6102 	btnez	48365b3a <.LBE15+0x2>

483659f6 <.LBB7>:
483659f6:	b6e9      	lw	a2,48365d98 <.LBE21+0x9a>
483659f8:	31a4      	sll	s1,a1,1
483659fa:	e1c9      	addu	v0,s1,a2
483659fc:	aa20      	lhu	s1,0(v0)
483659fe:	8e80      	lh	a0,0(a2)
48365a00:	6771      	move	v1,s1
48365a02:	ebb1      	seh	v1
48365a04:	e477      	subu	a1,a0,v1
48365a06:	6c0a      	li	a0,10
48365a08:	ed98      	mult	a1,a0
48365a0a:	ea12      	mflo	v0
48365a0c:	5200      	slti	v0,0
48365a0e:	6001      	bteqz	48365a12 <.LBB7+0x1c>
48365a10:	4247      	addiu	v0,v0,7
48365a12:	334f      	sra	v1,v0,3
48365a14:	f020 8044 	lb	v0,36(s0)
48365a18:	ea62      	slt	v0,v1
48365a1a:	6007      	bteqz	48365a2a <.LBB8>
48365a1c:	e357      	subu	a1,v1,v0
48365a1e:	32ac      	sll	v0,a1,3
48365a20:	ea9a      	div	zero,v0,a0
48365a22:	eb12      	mflo	v1
48365a24:	e175      	addu	a1,s1,v1
48365a26:	6725      	move	s1,a1
48365a28:	e931      	zeh	s1

48365a2a <.LBB8>:
48365a2a:	a059      	lbu	v0,25(s0)
48365a2c:	9305      	lw	v1,20(sp)
48365a2e:	ea63      	sltu	v0,v1
48365a30:	6012      	bteqz	48365a56 <.LBB8+0x2c>
48365a32:	e74b      	subu	v0,a3,v0
48365a34:	3344      	sll	v1,v0,1
48365a36:	e3c9      	addu	v0,v1,a2
48365a38:	8ac0      	lh	a2,0(v0)
48365a3a:	67b1      	move	a1,s1
48365a3c:	edb1      	seh	a1
48365a3e:	e5df      	subu	a3,a1,a2
48365a40:	ef98      	mult	a3,a0
48365a42:	ea12      	mflo	v0
48365a44:	5200      	slti	v0,0
48365a46:	6001      	bteqz	48365a4a <.LBB8+0x20>
48365a48:	4247      	addiu	v0,v0,7
48365a4a:	344f      	sra	a0,v0,3
48365a4c:	5400      	slti	a0,0
48365a4e:	6003      	bteqz	48365a56 <.LBB8+0x2c>
48365a50:	b2d8      	lw	v0,48365db0 <.LBE21+0xb2>
48365a52:	eac0      	jalrc	v0
48365a54:	1001      	b	48365a58 <.LBB10>
48365a56:	6a64      	li	v0,100

48365a58 <.LBB10>:
48365a58:	b5d0      	lw	a1,48365d98 <.LBE21+0x9a>

48365a5a <.LBB13>:
48365a5a:	c05a      	sb	v0,26(s0)

48365a5c <.LBB15>:
48365a5c:	6711      	move	s0,s1
48365a5e:	67f0      	move	a3,s0
48365a60:	8d20      	lh	s1,0(a1)
48365a62:	efb1      	seh	a3
48365a64:	e1f3      	subu	a0,s1,a3
48365a66:	690a      	li	s1,10
48365a68:	ec38      	mult	a0,s1
48365a6a:	ea12      	mflo	v0
48365a6c:	5200      	slti	v0,0
48365a6e:	6001      	bteqz	48365a72 <.LBB15+0x16>
48365a70:	4247      	addiu	v0,v0,7
48365a72:	b4c2      	lw	a0,48365d78 <.LBE21+0x7a>
48365a74:	364f      	sra	a2,v0,3
48365a76:	9c60      	lw	v1,0(a0)
48365a78:	f3e0 581f 	sltiu	s0,1023
48365a7c:	cbd1      	sh	a2,34(v1)
48365a7e:	6006      	bteqz	48365a8c <.LBB15+0x30>
48365a80:	f020 a3a0 	lbu	a1,32(v1)
48365a84:	37ac      	sll	a3,a1,3
48365a86:	e0e9      	addu	v0,s0,a3
48365a88:	6702      	move	s0,v0
48365a8a:	e831      	zeh	s0
48365a8c:	f040 a3cd 	lbu	a2,77(v1)
48365a90:	2e47      	bnez	a2,48365b20 <.LBE16>
48365a92:	b2c9      	lw	v0,48365db4 <.LBE21+0xb6>
48365a94:	eac0      	jalrc	v0
48365a96:	b2b9      	lw	v0,48365d78 <.LBE21+0x7a>
48365a98:	9a80      	lw	a0,0(v0)
48365a9a:	f160 a47f 	lbu	v1,383(a0)
48365a9e:	2b40      	bnez	v1,48365b20 <.LBE16>
48365aa0:	f040 a4fa 	lbu	a3,90(a0)
48365aa4:	7701      	cmpi	a3,1
48365aa6:	613c      	btnez	48365b20 <.LBE16>

48365aa8 <.LBB16>:
48365aa8:	f040 a4db 	lbu	a2,91(a0)
48365aac:	f160 8cb0 	lh	a1,368(a0)
48365ab0:	7601      	cmpi	a2,1
48365ab2:	6108      	btnez	48365ac4 <.LBB16+0x1c>
48365ab4:	f160 acf2 	lhu	a3,370(a0)
48365ab8:	f140 acc4 	lhu	a2,324(a0)
48365abc:	e7cb      	subu	v0,a3,a2
48365abe:	e54d      	addu	v1,a1,v0
48365ac0:	67a3      	move	a1,v1
48365ac2:	edb1      	seh	a1
48365ac4:	eaab      	neg	v0,a1
48365ac6:	f040 acb2 	lhu	a1,82(a0)
48365aca:	f040 a4ce 	lbu	a2,78(a0)
48365ace:	f020 8474 	lb	v1,52(a0)
48365ad2:	e2bf      	subu	a3,v0,a1
48365ad4:	e7c9      	addu	v0,a3,a2
48365ad6:	e275      	addu	a1,v0,v1
48365ad8:	6785      	move	a0,a1
48365ada:	ecb1      	seh	a0
48365adc:	5401      	slti	a0,1
48365ade:	338c      	sll	v1,a0,3
48365ae0:	6104      	btnez	48365aea <.LBB16+0x42>
48365ae2:	eb3a      	div	zero,v1,s1
48365ae4:	ef12      	mflo	a3
48365ae6:	e0eb      	subu	v0,s0,a3
48365ae8:	1004      	b	48365af2 <.LBB16+0x4a>
48365aea:	ea6b      	neg	v0,v1
48365aec:	ea3a      	div	zero,v0,s1
48365aee:	ee12      	mflo	a2
48365af0:	e0c9      	addu	v0,s0,a2
48365af2:	6d0a      	li	a1,10
48365af4:	ebba      	div	zero,v1,a1
48365af6:	6702      	move	s0,v0
48365af8:	e831      	zeh	s0
48365afa:	eb12      	mflo	v1
48365afc:	ebb1      	seh	v1
48365afe:	ebb8      	mult	v1,a1
48365b00:	ea12      	mflo	v0
48365b02:	5200      	slti	v0,0
48365b04:	6001      	bteqz	48365b08 <.LBB16+0x60>
48365b06:	4247      	addiu	v0,v0,7
48365b08:	374f      	sra	a3,v0,3
48365b0a:	efb1      	seh	a3
48365b0c:	ef8e      	xor	a3,a0
48365b0e:	2703      	beqz	a3,48365b16 <.LBB16+0x6e>
48365b10:	408f      	addiu	a0,s0,-1
48365b12:	6704      	move	s0,a0
48365b14:	e831      	zeh	s0
48365b16:	b6a1      	lw	a2,48365d98 <.LBE21+0x9a>
48365b18:	ae40      	lhu	v0,0(a2)
48365b1a:	e843      	sltu	s0,v0
48365b1c:	6001      	bteqz	48365b20 <.LBE16>
48365b1e:	6702      	move	s0,v0

48365b20 <.LBE16>:
48365b20:	b297      	lw	v0,48365d7c <.LBE21+0x7e>
48365b22:	67b0      	move	a1,s0
48365b24:	0c85      	la	a0,48365d38 <.LBE21+0x3a>
48365b26:	6e02      	li	a2,2
48365b28:	ea40      	jalr	v0
48365b2a:	6f4b      	li	a3,75
48365b2c:	6d00      	li	a1,0
48365b2e:	b299      	lw	v0,48365d90 <.LBE21+0x92>
48365b30:	6790      	move	a0,s0
48365b32:	67c5      	move	a2,a1
48365b34:	ea40      	jalr	v0
48365b36:	6f02      	li	a3,2

48365b38 <.LBE15>:
48365b38:	10e2      	b	48365cfe <.LBE21>
48365b3a:	f160 a09f 	lbu	a0,383(s0)
48365b3e:	f080 2c0c 	bnez	a0,48365c5a <.LBE17+0x2>

48365b42 <.LBB17>:
48365b42:	751f      	cmpi	a1,31
48365b44:	d407      	sw	a0,28(sp)
48365b46:	6008      	bteqz	48365b58 <.LBB17+0x16>
48365b48:	b696      	lw	a2,48365da0 <.LBE21+0xa2>
48365b4a:	34a4      	sll	a0,a1,1
48365b4c:	e4dd      	addu	a3,a0,a2
48365b4e:	f020 a060 	lbu	v1,32(s0)
48365b52:	a720      	lbu	s1,0(a3)
48365b54:	e163      	subu	s0,s1,v1
48365b56:	d007      	sw	s0,28(sp)
48365b58:	b392      	lw	v1,48365da0 <.LBE21+0xa2>
48365b5a:	30a4      	sll	s0,a1,1
48365b5c:	e07d      	addu	a3,s0,v1
48365b5e:	a341      	lbu	v0,1(v1)
48365b60:	a701      	lbu	s0,1(a3)
48365b62:	d208      	sw	v0,32(sp)
48365b64:	e047      	subu	s1,s0,v0
48365b66:	3530      	sll	a1,s1,4
48365b68:	e52b      	subu	v0,a1,s1
48365b6a:	5200      	slti	v0,0
48365b6c:	6001      	bteqz	48365b70 <.LBB17+0x2e>
48365b6e:	4243      	addiu	v0,v0,3
48365b70:	b182      	lw	s1,48365d78 <.LBE21+0x7a>
48365b72:	334b      	sra	v1,v0,2
48365b74:	9980      	lw	a0,0(s1)
48365b76:	f020 8444 	lb	v0,36(a0)
48365b7a:	ea62      	slt	v0,v1
48365b7c:	6006      	bteqz	48365b8a <.LBB17+0x48>
48365b7e:	e35f      	subu	a3,v1,v0
48365b80:	32e8      	sll	v0,a3,2
48365b82:	6d0f      	li	a1,15
48365b84:	eaba      	div	zero,v0,a1
48365b86:	ee12      	mflo	a2
48365b88:	e0c3      	subu	s0,a2
48365b8a:	9405      	lw	a0,20(sp)
48365b8c:	9507      	lw	a1,28(sp)
48365b8e:	19b0 9603 	jal	4836580c <_calc_keytone_precut_inner_pa>
48365b92:	67d0      	move	a2,s0

48365b94 <.LBB18>:
48365b94:	67d0      	move	a2,s0
48365b96:	9508      	lw	a1,32(sp)
48365b98:	eeb1      	seh	a2
48365b9a:	e6b3      	subu	a0,a2,a1
48365b9c:	3390      	sll	v1,a0,4
48365b9e:	e38f      	subu	v1,a0
48365ba0:	5300      	slti	v1,0
48365ba2:	6001      	bteqz	48365ba6 <.LBB18+0x12>
48365ba4:	4363      	addiu	v1,v1,3
48365ba6:	99e0      	lw	a3,0(s1)
48365ba8:	336b      	sra	v1,2
48365baa:	f040 a74d 	lbu	v0,77(a3)
48365bae:	cf71      	sh	v1,34(a3)
48365bb0:	2a41      	bnez	v0,48365c34 <.LBE20>
48365bb2:	b281      	lw	v0,48365db4 <.LBE21+0xb6>
48365bb4:	eac0      	jalrc	v0
48365bb6:	9980      	lw	a0,0(s1)
48365bb8:	f040 a4da 	lbu	a2,90(a0)
48365bbc:	7601      	cmpi	a2,1
48365bbe:	613a      	btnez	48365c34 <.LBE20>

48365bc0 <.LBB20>:
48365bc0:	f040 a4fb 	lbu	a3,91(a0)
48365bc4:	f160 8cb0 	lh	a1,368(a0)
48365bc8:	7701      	cmpi	a3,1
48365bca:	6108      	btnez	48365bdc <.LBB20+0x1c>
48365bcc:	f160 ac52 	lhu	v0,370(a0)
48365bd0:	f140 ace4 	lhu	a3,324(a0)
48365bd4:	e2fb      	subu	a2,v0,a3
48365bd6:	e5cd      	addu	v1,a1,a2
48365bd8:	67a3      	move	a1,v1
48365bda:	edb1      	seh	a1
48365bdc:	eaab      	neg	v0,a1
48365bde:	f040 acb2 	lhu	a1,82(a0)
48365be2:	f040 a4ee 	lbu	a3,78(a0)
48365be6:	e2bb      	subu	a2,v0,a1
48365be8:	f020 8474 	lb	v1,52(a0)
48365bec:	e6f5      	addu	a1,a2,a3
48365bee:	e571      	addu	a0,a1,v1
48365bf0:	67a4      	move	a1,a0
48365bf2:	edb1      	seh	a1
48365bf4:	5501      	slti	a1,1
48365bf6:	34a8      	sll	a0,a1,2
48365bf8:	6105      	btnez	48365c04 <.LBB20+0x44>
48365bfa:	6e0f      	li	a2,15
48365bfc:	ecda      	div	zero,a0,a2
48365bfe:	eb12      	mflo	v1
48365c00:	e061      	addu	s0,v1
48365c02:	1005      	b	48365c0e <.LBB20+0x4e>
48365c04:	eb8b      	neg	v1,a0
48365c06:	6a0f      	li	v0,15
48365c08:	eb5a      	div	zero,v1,v0
48365c0a:	ef12      	mflo	a3
48365c0c:	e0e3      	subu	s0,a3
48365c0e:	6f0f      	li	a3,15
48365c10:	ecfa      	div	zero,a0,a3
48365c12:	ee12      	mflo	a2
48365c14:	eeb1      	seh	a2
48365c16:	34d0      	sll	a0,a2,4
48365c18:	e4cb      	subu	v0,a0,a2
48365c1a:	5200      	slti	v0,0
48365c1c:	6001      	bteqz	48365c20 <.LBB20+0x60>
48365c1e:	4243      	addiu	v0,v0,3
48365c20:	324b      	sra	v0,2
48365c22:	eab1      	seh	v0
48365c24:	eaae      	xor	v0,a1
48365c26:	2201      	beqz	v0,48365c2a <.LBB20+0x6a>
48365c28:	4001      	addiu	s0,s0,1
48365c2a:	b55e      	lw	a1,48365da0 <.LBE21+0xa2>
48365c2c:	a541      	lbu	v0,1(a1)
48365c2e:	ea03      	sltu	v0,s0
48365c30:	6001      	bteqz	48365c34 <.LBE20>
48365c32:	6702      	move	s0,v0

48365c34 <.LBE20>:
48365c34:	0c45      	la	a0,48365d48 <.LBE21+0x4a>
48365c36:	67b0      	move	a1,s0
48365c38:	6e02      	li	a2,2
48365c3a:	6f4b      	li	a3,75
48365c3c:	1004      	b	48365c46 <.LBE20+0x12>
48365c3e:	6d00      	li	a1,0
48365c40:	6c0a      	li	a0,10
48365c42:	67c5      	move	a2,a1
48365c44:	6f31      	li	a3,49
48365c46:	b24e      	lw	v0,48365d7c <.LBE21+0x7e>
48365c48:	eac0      	jalrc	v0
48365c4a:	9407      	lw	a0,28(sp)
48365c4c:	b254      	lw	v0,48365d9c <.LBE21+0x9e>
48365c4e:	67b0      	move	a1,s0
48365c50:	6e00      	li	a2,0
48365c52:	ea40      	jalr	v0
48365c54:	6f02      	li	a3,2
48365c56:	2af3      	bnez	v0,48365c3e <.LBE20+0xa>

48365c58 <.LBE17>:
48365c58:	1052      	b	48365cfe <.LBE21>
48365c5a:	7401      	cmpi	a0,1
48365c5c:	6150      	btnez	48365cfe <.LBE21>

48365c5e <.LBB21>:
48365c5e:	6900      	li	s1,0
48365c60:	751f      	cmpi	a1,31
48365c62:	d109      	sw	s1,36(sp)
48365c64:	6008      	bteqz	48365c76 <.LBB21+0x18>
48365c66:	b255      	lw	v0,48365db8 <.LBE21+0xba>
48365c68:	37a4      	sll	a3,a1,1
48365c6a:	e759      	addu	a2,a3,v0
48365c6c:	f020 a080 	lbu	a0,32(s0)
48365c70:	a660      	lbu	v1,0(a2)
48365c72:	e383      	subu	s0,v1,a0
48365c74:	d009      	sw	s0,36(sp)
48365c76:	b451      	lw	a0,48365db8 <.LBE21+0xba>
48365c78:	30a4      	sll	s0,a1,1
48365c7a:	e085      	addu	s1,s0,a0
48365c7c:	a101      	lbu	s0,1(s1)
48365c7e:	a421      	lbu	s1,1(a0)
48365c80:	e02f      	subu	v1,s0,s1
48365c82:	3570      	sll	a1,v1,4
48365c84:	e56b      	subu	v0,a1,v1
48365c86:	5200      	slti	v0,0
48365c88:	6001      	bteqz	48365c8c <.LBB21+0x2e>
48365c8a:	4243      	addiu	v0,v0,3
48365c8c:	b73b      	lw	a3,48365d78 <.LBE21+0x7a>
48365c8e:	334b      	sra	v1,v0,2
48365c90:	9fc0      	lw	a2,0(a3)
48365c92:	f020 8644 	lb	v0,36(a2)
48365c96:	ea62      	slt	v0,v1
48365c98:	6006      	bteqz	48365ca6 <.LBB21+0x48>
48365c9a:	e353      	subu	a0,v1,v0
48365c9c:	3388      	sll	v1,a0,2
48365c9e:	6d0f      	li	a1,15
48365ca0:	ebba      	div	zero,v1,a1
48365ca2:	ea12      	mflo	v0
48365ca4:	e043      	subu	s0,v0
48365ca6:	9405      	lw	a0,20(sp)
48365ca8:	9509      	lw	a1,36(sp)
48365caa:	19b0 9603 	jal	4836580c <_calc_keytone_precut_inner_pa>
48365cae:	67d0      	move	a2,s0

48365cb0 <.LBB23>:
48365cb0:	6750      	move	v0,s0
48365cb2:	eab1      	seh	v0
48365cb4:	e23f      	subu	a3,v0,s1
48365cb6:	36f0      	sll	a2,a3,4
48365cb8:	e6ef      	subu	v1,a2,a3
48365cba:	5300      	slti	v1,0
48365cbc:	6001      	bteqz	48365cc0 <.LBB23+0x10>
48365cbe:	4363      	addiu	v1,v1,3
48365cc0:	b42e      	lw	a0,48365d78 <.LBE21+0x7a>
48365cc2:	336b      	sra	v1,2
48365cc4:	9cc0      	lw	a2,0(a0)
48365cc6:	f040 a6ad 	lbu	a1,77(a2)
48365cca:	ce71      	sh	v1,34(a2)
48365ccc:	2d06      	bnez	a1,48365cda <.LBB23+0x2a>
48365cce:	b23a      	lw	v0,48365db4 <.LBE21+0xb6>
48365cd0:	eac0      	jalrc	v0
48365cd2:	19d1 9600 	jal	48ba5800 <mdrc_comp_handle>
48365cd6:	6790      	move	a0,s0
48365cd8:	6702      	move	s0,v0
48365cda:	0c20      	la	a0,48365d58 <.LBE21+0x5a>
48365cdc:	67b0      	move	a1,s0
48365cde:	6e02      	li	a2,2
48365ce0:	6f4b      	li	a3,75
48365ce2:	1004      	b	48365cec <.LBB23+0x3c>
48365ce4:	6d00      	li	a1,0
48365ce6:	6c0a      	li	a0,10
48365ce8:	67c5      	move	a2,a1
48365cea:	6f31      	li	a3,49
48365cec:	b224      	lw	v0,48365d7c <.LBE21+0x7e>
48365cee:	eac0      	jalrc	v0
48365cf0:	9409      	lw	a0,36(sp)
48365cf2:	b22b      	lw	v0,48365d9c <.LBE21+0x9e>
48365cf4:	67b0      	move	a1,s0
48365cf6:	6e00      	li	a2,0
48365cf8:	ea40      	jalr	v0
48365cfa:	6f02      	li	a3,2
48365cfc:	2af3      	bnez	v0,48365ce4 <.LBB23+0x34>

48365cfe <.LBE21>:
48365cfe:	b31f      	lw	v1,48365d78 <.LBE21+0x7a>
48365d00:	67dd      	move	a2,sp
48365d02:	9be0      	lw	a3,0(v1)
48365d04:	a6b8      	lbu	a1,24(a2)
48365d06:	f040 c7b7 	sb	a1,87(a3)
48365d0a:	6477      	restore	56,ra,s0-s1
48365d0c:	e8a0      	jrc	ra
48365d0e:	0000      	addiu	s0,sp,0
48365d10:	493c      	addiu	s1,60
48365d12:	203e      	beqz	s0,48365d90 <.LBE21+0x92>
48365d14:	6573      	move	s3,v1
48365d16:	5f74      	sltiu	a3,116
48365d18:	6f76      	li	a3,118
48365d1a:	006c      	addiu	s0,sp,432
48365d1c:	573c      	slti	a3,60
48365d1e:	203e      	beqz	s0,48365d9c <.LBE21+0x9e>
48365d20:	6e49      	li	a2,73
48365d22:	6176      	btnez	48365e10 <g_hard_volume_table_i2s_pa+0x8>
48365d24:	696c      	li	s1,108
48365d26:	2064      	beqz	s0,48365df0 <.LBE25+0x1e>
48365d28:	6f76      	li	a3,118
48365d2a:	756c      	cmpi	a1,108
48365d2c:	656d      	move	t3,a1
48365d2e:	6720      	move	s1,zero
48365d30:	6961      	li	s1,97
48365d32:	216e      	beqz	s1,48365e10 <g_hard_volume_table_i2s_pa+0x8>
48365d34:	0021      	addiu	s0,sp,132
48365d36:	0000      	addiu	s0,sp,0
48365d38:	493c      	addiu	s1,60
48365d3a:	203e      	beqz	s0,48365db8 <.LBE21+0xba>
48365d3c:	3269      	dsll	v0,v1,2
48365d3e:	5f73      	sltiu	a3,115
48365d40:	6572      	move	s3,v0
48365d42:	5f67      	sltiu	a3,103
48365d44:	6176      	btnez	48365e32 <g_hard_volume_table_i2s_pa+0x2a>
48365d46:	006c      	addiu	s0,sp,432
48365d48:	493c      	addiu	s1,60
48365d4a:	203e      	beqz	s0,48365dc8 <com_update_volume_limit+0xc>
48365d4c:	6f76      	li	a3,118
48365d4e:	5f6c      	sltiu	a3,108
48365d50:	6168      	btnez	48365e22 <g_hard_volume_table_i2s_pa+0x1a>
48365d52:	6472      	restore	16,ra,s0-s1
48365d54:	645f      	restore	120,ra,s1
48365d56:	0061      	addiu	s0,sp,388
48365d58:	493c      	addiu	s1,60
48365d5a:	203e      	beqz	s0,48365dd8 <.LBE25+0x6>
48365d5c:	6f76      	li	a3,118
48365d5e:	5f6c      	sltiu	a3,108
48365d60:	6168      	btnez	48365e32 <g_hard_volume_table_i2s_pa+0x2a>
48365d62:	6472      	restore	16,ra,s0-s1
48365d64:	645f      	restore	120,ra,s1
48365d66:	5f61      	sltiu	a3,97
48365d68:	7473      	cmpi	a0,115
48365d6a:	6e61      	li	a2,97
48365d6c:	6164      	btnez	48365e36 <g_hard_volume_table_i2s_pa+0x2e>
48365d6e:	6472      	restore	16,ra,s0-s1
48365d70:	6d5f      	li	a1,95
48365d72:	646f      	restore	120,ra,s0
48365d74:	0065      	addiu	s0,sp,404
48365d76:	0000      	addiu	s0,sp,0
48365d78:	999c      	lw	a0,112(s1)
48365d7a:	9fc1      	lw	a2,4(a3)
48365d7c:	e901      	sdbbp	8
48365d7e:	bfc1      	lwu	a2,4(a3)
48365d80:	00ff      	addiu	s0,sp,1020
48365d82:	00ff      	addiu	s0,sp,1020
48365d84:	0001      	addiu	s0,sp,4
48365d86:	0001      	addiu	s0,sp,4
48365d88:	a094      	lbu	a0,20(s0)
48365d8a:	9fc1      	lw	a2,4(a3)
48365d8c:	a0c0      	lbu	a2,0(s0)
48365d8e:	9fc1      	lw	a2,4(a3)
48365d90:	e919      	multu	s1,s0
48365d92:	bfc1      	lwu	a2,4(a3)
48365d94:	a1f4      	lbu	a3,20(s1)
48365d96:	9fc1      	lw	a2,4(a3)
48365d98:	5e08      	sltiu	a2,8
48365d9a:	4836      	addiu	s0,54
48365d9c:	e909      	entry	a0
48365d9e:	bfc1      	lwu	a2,4(a3)
48365da0:	5e88      	sltiu	a2,136
48365da2:	4836      	addiu	s0,54
48365da4:	7000      	cmpi	s0,0
48365da6:	0003      	addiu	s0,sp,12
48365da8:	7650      	cmpi	a2,80
48365daa:	0003      	addiu	s0,sp,12
48365dac:	e90d      	or	s1,s0
48365dae:	bfc1      	lwu	a2,4(a3)
48365db0:	5de9      	sltiu	a1,233
48365db2:	484a      	addiu	s0,74
48365db4:	5dd1      	sltiu	a1,209
48365db6:	484a      	addiu	s0,74
48365db8:	5e48      	sltiu	a2,72
48365dba:	4836      	addiu	s0,54

48365dbc <com_update_volume_limit>:
48365dbc:	64e3      	save	24,ra,s0
48365dbe:	6704      	move	s0,a0
48365dc0:	e891      	seb	s0
48365dc2:	b20e      	lw	v0,48365df8 <.LBE25+0x26>
48365dc4:	0c09      	la	a0,48365de8 <.LBE25+0x16>
48365dc6:	67b0      	move	a1,s0
48365dc8:	6e02      	li	a2,2
48365dca:	ea40      	jalr	v0
48365dcc:	6f4b      	li	a3,75
48365dce:	b30c      	lw	v1,48365dfc <.LBE25+0x2a>

48365dd0 <.LBB25>:
48365dd0:	b40c      	lw	a0,48365e00 <.LBE25+0x2e>

48365dd2 <.LBE25>:
48365dd2:	9ba0      	lw	a1,0(v1)
48365dd4:	f020 c504 	sb	s0,36(a1)
48365dd8:	a440      	lbu	v0,0(a0)
48365dda:	2a04      	bnez	v0,48365de4 <.LBE25+0x12>
48365ddc:	9bc0      	lw	a2,0(v1)
48365dde:	b30a      	lw	v1,48365e04 <.LBE25+0x32>
48365de0:	eb40      	jalr	v1
48365de2:	a69b      	lbu	a0,27(a2)
48365de4:	6463      	restore	24,ra,s0
48365de6:	e8a0      	jrc	ra
48365de8:	493c      	addiu	s1,60
48365dea:	203e      	beqz	s0,48365e68 <g_hard_volume_table_sm+0x20>
48365dec:	6f76      	li	a3,118
48365dee:	5f6c      	sltiu	a3,108
48365df0:	696c      	li	s1,108
48365df2:	696d      	li	s1,109
48365df4:	0074      	addiu	s0,sp,464
48365df6:	0000      	addiu	s0,sp,0
48365df8:	e901      	sdbbp	8
48365dfa:	bfc1      	lwu	a2,4(a3)
48365dfc:	999c      	lw	a0,112(s1)
48365dfe:	9fc1      	lw	a2,4(a3)
48365e00:	a0c0      	lbu	a2,0(s0)
48365e02:	9fc1      	lw	a2,4(a3)
48365e04:	5855      	sltiu	s0,85
48365e06:	4836      	addiu	s0,54

48365e08 <g_hard_volume_table_i2s_pa>:
48365e08:	00aa 00b0 00b6 00bc 00c2 00c8 00ce 00d4     ................
48365e18:	00da 00e0 00e6 00ec 00f2 00f8 0100 0108     ................
48365e28:	0110 0118 0124 0130 013c 0148 0154 0160     ....$.0.<.H.T.`.
48365e38:	0170 0180 0198 01b0 01d0 01f0 0220 03ff     p........... ...

48365e48 <g_hard_volume_table_sm>:
48365e48:	bf28 bf28 be28 be28 bd28 bd28 bb28 bb28     (.(.(.(.(.(.(.(.
48365e58:	b928 b928 b728 b728 b028 b028 ac28 ac28     (.(.(.(.(.(.(.(.
48365e68:	a628 a628 a128 a128 9c28 9c28 9528 9528     (.(.(.(.(.(.(.(.
48365e78:	8c28 8c28 8028 8028 6b28 6b28 0028 0028     (.(.(.(.(k(k(.(.

48365e88 <g_hard_volume_table>:
48365e88:	a428 a328 a228 a028 9f28 9e28 9d28 9a28     (.(.(.(.(.(.(.(.
48365e98:	9728 9228 8d28 8728 8228 7d28 7728 7228     (.(.(.(.(.(}(w(r
48365ea8:	6d28 6728 6228 5728 5228 4d28 4828 4328     (m(g(b(W(R(M(H(C
48365eb8:	3e28 3928 3428 2f28 2a28 2528 2028 0028     (>(9(4(/(*(%( (.
	...
Disassembly of section BANK_UI_1_14:

483a5800 <need_tts_state_play>:
483a5800:	64b1      	save	8,s0-s1
 * \note
 * \li
 *******************************************************************************/
bool need_tts_state_play(uint16 tts_mode, void *tts_info, uint8 *tts_sec_ids)
{
483a5802:	b728      	lw	a3,483a58a0 <.LBE4+0x24>
    uint8 section_cnt = 0;

    g_tts_play_info.tts_str = NULL;

    if (sys_comval->tts_enable == FALSE)
483a5804:	6705      	move	s0,a1
483a5806:	b526      	lw	a1,483a589c <.LBE4+0x20>
483a5808:	6726      	move	s1,a2
483a580a:	9f60      	lw	v1,0(a3)
483a580c:	6e00      	li	a2,0
483a580e:	ddcf      	sw	a2,60(a1)
483a5810:	a356      	lbu	v0,22(v1)
483a5812:	ec31      	zeh	a0
483a5814:	653e      	move	t9,a2
    { //不支持状态语音播报功能
        return 0;
483a5816:	223e      	beqz	v0,483a5894 <.LBE4+0x18>
483a5818:	8543      	lb	v0,3(a1)
    }

    if (((g_tts_play_info.option & IGNORE_PLAY_TTS) != 0)
483a581a:	eac2      	slt	v0,a2
483a581c:	6003      	bteqz	483a5824 <.LBB2>
483a581e:	6f80      	li	a3,128
483a5820:	ef8c      	and	a3,a0
483a5822:	2738      	beqz	a3,483a5894 <.LBE4+0x18>

483a5824 <.LBB2>:
483a5824:	b720      	lw	a3,483a58a4 <.LBE4+0x28>

483a5826 <.LBE2>:
483a5826:	a740      	lbu	v0,0(a3)
483a5828:	7201      	cmpi	v0,1
483a582a:	6a00      	li	v0,0
            && ((tts_mode & TTS_MODE_PB_OPTION_MASK) == TTS_MODE_PB_NOPLAY))
    { //场景不便进行TTS，屏蔽TTS；电话簿播报除外
        return 0;
    }

    if (get_mute_enable() == TRUE)
    { //静音状态下，直接返回
        return 0;
483a582c:	653a      	move	t9,v0
483a582e:	6032      	bteqz	483a5894 <.LBE4+0x18>
483a5830:	a74d      	lbu	v0,13(a3)
    }

    if (g_app_info_state.autotest_mode == TRUE)
483a5832:	7201      	cmpi	v0,1
483a5834:	602f      	bteqz	483a5894 <.LBE4+0x18>
483a5836:	a744      	lbu	v0,4(a3)
483a5838:	2a2d      	bnez	v0,483a5894 <.LBE4+0x18>
483a583a:	a3fb      	lbu	a3,27(v1)
    {
        return 0;
    }

#if ((CASE_BOARD_TYPE == CASE_BOARD_ATS2823) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2823))
    if (get_card_state() != CARD_STATE_CARD_NULL)
    {
        return 0;
    }
#endif

    if ((sys_comval->volume_current == 0)
483a583c:	2f05      	bnez	a3,483a5848 <.LBE2+0x22>
483a583e:	a358      	lbu	v0,24(v1)
483a5840:	2228      	beqz	v0,483a5892 <.LBE4+0x16>
483a5842:	6b20      	li	v1,32
483a5844:	eb8c      	and	v1,a0
483a5846:	2b25      	bnez	v1,483a5892 <.LBE4+0x16>
483a5848:	6a03      	li	v0,3
            && ((sys_comval->kt_tts_min_volume == 0)
                    || ((tts_mode & TTS_MODE_MIN_VOLUME_MASK) == TTS_MODE_MIN_VOLUME_NO)))
    { //允许音量为0时没有按键音和TTS
        return 0;
    }

    if ((tts_mode & TTS_MODE_TYPE_MASK) == TTS_MODE_ONLYONE)
483a584a:	ea8c      	and	v0,a0
483a584c:	2a03      	bnez	v0,483a5854 <.LBE2+0x2e>
483a584e:	6e01      	li	a2,1
    {
        tts_sec_ids[0] = (uint8) (uint32) tts_info;
        section_cnt = 1;
483a5850:	c100      	sb	s0,0(s1)
483a5852:	101a      	b	483a5888 <.LBE4+0xc>
483a5854:	7201      	cmpi	v0,1
    }
    else if ((tts_mode & TTS_MODE_TYPE_MASK) == TTS_MODE_SECLIST)
483a5856:	6113      	btnez	483a587e <.LBE4+0x2>

483a5858 <.LBB4>:
483a5858:	6e00      	li	a2,0
    {
        uint8 *p_tts_sec = (uint8 *) tts_info;
        uint8 i;

        section_cnt = 0;
483a585a:	67e6      	move	a3,a2
        for (i = 0; i < (TTS_SECTIONS_MAX - 1); i++)
483a585c:	e0e9      	addu	v0,s0,a3
        {
            if (p_tts_sec[i] == 0xff)
483a585e:	a280      	lbu	a0,0(v0)
483a5860:	67a4      	move	a1,a0
483a5862:	ed11      	zeb	a1
483a5864:	75ff      	cmpi	a1,255
483a5866:	6010      	bteqz	483a5888 <.LBE4+0xc>
483a5868:	e1f5      	addu	a1,s1,a3
            {
                break;
            }
            tts_sec_ids[i] = p_tts_sec[i];
483a586a:	c580      	sb	a0,0(a1)
483a586c:	4781      	addiu	a0,a3,1
483a586e:	67e4      	move	a3,a0
483a5870:	4661      	addiu	v1,a2,1
            section_cnt++;
483a5872:	ef11      	zeb	a3
483a5874:	67c3      	move	a2,v1
483a5876:	5f0f      	sltiu	a3,15
483a5878:	ee11      	zeb	a2
483a587a:	61f0      	btnez	483a585c <.LBB4+0x4>

483a587c <.LBE4>:
483a587c:	1005      	b	483a5888 <.LBE4+0xc>
483a587e:	6f01      	li	a3,1
        }
    }
    else if ((tts_mode & TTS_MODE_TYPE_MASK) == TTS_MODE_STRING)
    {
        g_tts_play_info.tts_str = tts_info;
    }
    else
    {
        section_cnt = 1;
483a5880:	7202      	cmpi	v0,2
483a5882:	653f      	move	t9,a3
483a5884:	6107      	btnez	483a5894 <.LBE4+0x18>
483a5886:	dd0f      	sw	s0,60(a1)
483a5888:	e1d1      	addu	a0,s1,a2
        return section_cnt;
    }

    tts_sec_ids[section_cnt] = 0xff;
483a588a:	6e01      	li	a2,1
483a588c:	eecb      	neg	a2
483a588e:	c4c0      	sb	a2,0(a0)
483a5890:	6f01      	li	a3,1

    return TRUE;
483a5892:	653f      	move	t9,a3
483a5894:	6759      	move	v0,t9
}
483a5896:	6431      	restore	8,s0-s1
483a5898:	e8a0      	jrc	ra
483a589a:	0000      	addiu	s0,sp,0
483a589c:	a1f4      	lbu	a3,20(s1)
483a589e:	9fc1      	lw	a2,4(a3)
483a58a0:	999c      	lw	a0,112(s1)
483a58a2:	9fc1      	lw	a2,4(a3)
483a58a4:	a0c0      	lbu	a2,0(s0)
483a58a6:	9fc1      	lw	a2,4(a3)

483a58a8 <com_tts_state_play_init>:
483a58a8:	f008 64f6 	save	a0-a1,48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 * \void com_tts_state_play(uint8 tts_id, void *tts_info)
 *    状态语音播报
 * \param[in]    tts_id 状态编号
 * \param[in]    value 状态值
 * \param[out]   none
 * \return       none
 * \ingroup      misc_func
 * \note
 * \li
 *******************************************************************************/
tts_play_ret_e com_tts_state_play_deal(void)
{
    tts_play_ret_e ret_val = TTS_PLAY_RET_NORMAL;

    if ((g_tts_play_info.status == TTS_STATUS_READY) || (g_tts_play_info.status == TTS_STATUS_PLAYING))
    {
        return ret_val;
    }

    if ((g_tts_play_info.status == TTS_STATUS_IDLE) && (g_tts_play_info.count > 0))
    {
        tts_fifo_out(&(g_tts_play_info.cur_mode), g_tts_play_info.section_ids);
        if (com_tts_state_play_init(g_tts_play_info.cur_mode, g_tts_play_info.tts_str) == FALSE)
        {
            return TTS_PLAY_RET_NORMAL;
        }
        if ((g_tts_play_info.cur_mode & TTS_MODE_BLOCK_OPTION_MASK) == TTS_MODE_BLOCK)
        {
            ret_val = com_tts_state_play_loop(g_tts_play_info.cur_mode);
        }
    }

    if (g_tts_play_info.status == TTS_STATUS_PLAYOVER)
    {
        com_tts_state_play_exit(g_tts_play_info.cur_mode);
    }

    return ret_val;
}

bool com_tts_state_play_init(uint16 tts_mode, void* tts_ptr)
{
483a58ac:	6704      	move	s0,a0
483a58ae:	b12e      	lw	s1,483a5964 <com_tts_state_play_init+0xbc>
    pthread_ext_param_t tts_thread;

    PRINT_INFO_INT("tts enter:", (tts_mode << 16) | g_tts_play_info.section_ids[0]);
483a58b0:	e831      	zeh	s0
483a58b2:	3700      	sll	a3,s0,8
483a58b4:	a1c5      	lbu	a2,5(s1)
483a58b6:	b32d      	lw	v1,483a5968 <com_tts_state_play_init+0xc0>
483a58b8:	35e0      	sll	a1,a3,8
483a58ba:	edcd      	or	a1,a2
483a58bc:	6f4b      	li	a3,75
483a58be:	0c21      	la	a0,483a5940 <com_tts_state_play_init+0x98>
483a58c0:	eb40      	jalr	v1
483a58c2:	6e02      	li	a2,2
483a58c4:	b22a      	lw	v0,483a596c <com_tts_state_play_init+0xc4>
     //DAE模式切换时必须保证按键音已播完
    keytone_play_deal_wait();
483a58c6:	eac0      	jalrc	v0
483a58c8:	b52a      	lw	a1,483a596c <com_tts_state_play_init+0xc4>

    sys_comval->bypass_temp = sys_comval->dae_cfg.bypass; //TTS播报前备份音效的开关状态
483a58ca:	b22b      	lw	v0,483a5974 <com_tts_state_play_init+0xcc>
    
    //报TTS之前关闭actions音效
    com_set_dae_onoff(FALSE);   
483a58cc:	9d60      	lw	v1,0(a1)
483a58ce:	f040 a38d 	lbu	a0,77(v1)
483a58d2:	f020 c393 	sb	a0,51(v1)
483a58d6:	ea40      	jalr	v0
483a58d8:	6c00      	li	a0,0
483a58da:	950d      	lw	a1,52(sp)

    if (tts_play_init(tts_mode, tts_ptr) == FALSE)
483a58dc:	19d0 976f 	jal	483a5dbc <tts_play_init>
483a58e0:	6790      	move	a0,s0
483a58e2:	6702      	move	s0,v0
483a58e4:	2a09      	bnez	v0,483a58f8 <com_tts_state_play_init+0x50>
483a58e6:	b321      	lw	v1,483a5968 <com_tts_state_play_init+0xc0>
    {
        PRINT_ERR("tts init fail");
483a58e8:	0c1a      	la	a0,483a5950 <com_tts_state_play_init+0xa8>
483a58ea:	67a2      	move	a1,v0
483a58ec:	67c2      	move	a2,v0
483a58ee:	eb40      	jalr	v1
483a58f0:	6f4b      	li	a3,75
483a58f2:	6750      	move	v0,s0
        g_tts_play_info.status = TTS_STATUS_IDLE;
        return FALSE;
483a58f4:	c104      	sb	s0,4(s1)
483a58f6:	1022      	b	483a593c <com_tts_state_play_init+0x94>
483a58f8:	6801      	li	s0,1
    }

    g_tts_play_info.status = TTS_STATUS_READY;
483a58fa:	6c03      	li	a0,3

    //TTS线程和DSP调频
    adjust_freq_set_level(AP_BACK_HIGH_PRIO, FREQ_LEVEL7, FREQ_LEVEL7);
483a58fc:	c104      	sb	s0,4(s1)
483a58fe:	b01f      	lw	s0,483a5978 <com_tts_state_play_init+0xd0>
483a5900:	67e4      	move	a3,a0
483a5902:	f700 6d07 	li	a1,1799
483a5906:	e840      	jalr	s0
483a5908:	6e00      	li	a2,0
483a590a:	b31a      	lw	v1,483a5970 <com_tts_state_play_init+0xc8>
    adjust_freq_add_value(0, sys_comval->dae_cfg.run_freq);
483a590c:	6c00      	li	a0,0
483a590e:	9b40      	lw	v0,0(v1)
483a5910:	6e01      	li	a2,1
483a5912:	f060 a2a0 	lbu	a1,96(v0)
483a5916:	e840      	jalr	s0
483a5918:	6f03      	li	a3,3
483a591a:	b719      	lw	a3,483a597c <com_tts_state_play_init+0xd4>

    //初始化创建线程的参数
    tts_thread.pthread_param.start_rtn = (void *) tts_play_loop;
483a591c:	b219      	lw	v0,483a5980 <com_tts_state_play_init+0xd8>
    tts_thread.pthread_param.arg = NULL;
    tts_thread.pthread_param.ptos = (void *) AP_BACK_HIGH_STK_POS;
483a591e:	6e00      	li	a2,0
483a5920:	f4a0 6d10 	li	a1,1200
    tts_thread.stk_size = AP_BACK_HIGH_STK_SIZE;
483a5924:	679d      	move	a0,sp
483a5926:	b311      	lw	v1,483a5968 <com_tts_state_play_init+0xc0>

    if (libc_pthread_create(&tts_thread, AP_BACK_HIGH_PRIO, CREATE_NOT_MAIN_THREAD) < 0)
483a5928:	ccae      	sh	a1,28(a0)
483a592a:	d704      	sw	a3,16(sp)
483a592c:	d605      	sw	a2,20(sp)
483a592e:	d206      	sw	v0,24(sp)
483a5930:	0404      	addiu	a0,sp,16
483a5932:	6d03      	li	a1,3
483a5934:	6eff      	li	a2,255
483a5936:	eb40      	jalr	v1
483a5938:	6f4a      	li	a3,74
483a593a:	6a01      	li	v0,1
    {
    }

    return TRUE;
483a593c:	6476      	restore	48,ra,s0-s1
}
483a593e:	e8a0      	jrc	ra
483a5940:	493c      	addiu	s1,60
483a5942:	203e      	beqz	s0,483a59c0 <tts_fifo_out+0x10>
483a5944:	7474      	cmpi	a0,116
483a5946:	2073      	beqz	s0,483a5a2e <com_tts_state_play_loop+0x16>
483a5948:	6e65      	li	a2,101
483a594a:	6574      	move	s3,a0
483a594c:	3a72      	ld	v1,144(v0)
483a594e:	0000      	addiu	s0,sp,0
483a5950:	453c      	daddiu	s1,a1,-4
483a5952:	203e      	beqz	s0,483a59d0 <tts_fifo_out+0x20>
483a5954:	7474      	cmpi	a0,116
483a5956:	2073      	beqz	s0,483a5a3e <com_tts_state_play_loop+0x26>
483a5958:	6e69      	li	a2,105
483a595a:	7469      	cmpi	a0,105
483a595c:	6620      	0x6620
483a595e:	6961      	li	s1,97
483a5960:	006c      	addiu	s0,sp,432
483a5962:	0000      	addiu	s0,sp,0
483a5964:	a1f4      	lbu	a3,20(s1)
483a5966:	9fc1      	lw	a2,4(a3)
483a5968:	e901      	sdbbp	8
483a596a:	bfc1      	lwu	a2,4(a3)
483a596c:	5b6d      	sltiu	v1,109
483a596e:	485a      	addiu	s0,90
483a5970:	999c      	lw	a0,112(s1)
483a5972:	9fc1      	lw	a2,4(a3)
483a5974:	5e65      	sltiu	a2,101
483a5976:	4846      	addiu	s0,70
483a5978:	e90d      	or	s1,s0
483a597a:	bfc1      	lwu	a2,4(a3)
483a597c:	5f51      	sltiu	a3,81
483a597e:	483a      	addiu	s0,58
483a5980:	bdf0      	lwu	a3,64(a1)
483a5982:	9fc1      	lw	a2,4(a3)

483a5984 <com_tts_state_play_exit>:
483a5984:	64f4      	save	32,ra,s0-s1

void com_tts_state_play_exit(uint16 tts_mode)
{
483a5986:	6724      	move	s1,a0
483a5988:	6d00      	li	a1,0
    //TTS线程和DSP调频
    adjust_freq_set_level(AP_BACK_HIGH_PRIO, FREQ_NULL, FREQ_NULL);
483a598a:	6c03      	li	a0,3
483a598c:	b008      	lw	s0,483a59ac <com_tts_state_play_exit+0x28>
483a598e:	67c5      	move	a2,a1
483a5990:	e840      	jalr	s0
483a5992:	67e4      	move	a3,a0
483a5994:	6c00      	li	a0,0
    adjust_freq_add_value(0, 0);
483a5996:	67a4      	move	a1,a0
483a5998:	6e01      	li	a2,1
483a599a:	6f03      	li	a3,3
483a599c:	e840      	jalr	s0
483a599e:	e931      	zeh	s1
483a59a0:	19d0 97b8 	jal	483a5ee0 <tts_play_exit>

    tts_play_exit(tts_mode);
483a59a4:	6791      	move	a0,s1
483a59a6:	6474      	restore	32,ra,s0-s1
483a59a8:	e8a0      	jrc	ra
483a59aa:	0000      	addiu	s0,sp,0
483a59ac:	e90d      	or	s1,s0
483a59ae:	bfc1      	lwu	a2,4(a3)

483a59b0 <tts_fifo_out>:
483a59b0:	64f4      	save	32,ra,s0-s1

    PRINT_DBG("tts exit");
}

tts_play_ret_e com_tts_state_play_wait(void)
{
    tts_play_ret_e ret_val = TTS_PLAY_RET_NORMAL;

    if (g_tts_play_info.status != TTS_STATUS_IDLE)
    {
        ret_val = com_tts_state_play_loop(g_tts_play_info.cur_mode);

        com_tts_state_play_exit(g_tts_play_info.cur_mode);
    }

    return ret_val;
}

tts_play_ret_e com_tts_state_play_loop(uint16 tts_mode)
{
    tts_play_ret_e ret_val = TTS_PLAY_RET_NORMAL;
    app_result_e result;

    while ((g_tts_play_info.status == TTS_STATUS_READY) || (g_tts_play_info.status == TTS_STATUS_PLAYING))
    {
        //纯粹TTS，不需要理会所有事件
        if ((tts_mode & TTS_MODE_NORECV_ALL_EV_MASK) == TTS_MODE_NORECV_ALL_EV_YES)
        {
            sys_os_time_dly(1);
            continue;
        }

        if (g_app_timer_count > 0)
        {
            handle_timers(g_app_timer_vector, g_app_timer_count);
        }
        handle_timers(g_com_app_timer_vct, COM_APP_TIMER_MAX);

        if ((tts_mode & TTS_MODE_KEY_OPTION_MASK) != TTS_MODE_KEY_NORECV)
        {
            input_gui_msg_t ui_msg;

            if (get_gui_msg(&ui_msg) == TRUE)
            {
                if ((tts_mode & TTS_MODE_KEY_OPTION_MASK) == TTS_MODE_KEY_BREAK_REDEAL)
                {
                    libc_memcpy(&g_buffer_gui_msg, &ui_msg, sizeof(input_gui_msg_t)); //redeal
                    g_tts_play_info.option |= (uint8) FORCE_STOP_TTS;
                    ret_val = TTS_PLAY_RET_BY_KEY;
                    PRINT_INFO("tts force stop by key!");
                    break;
                }
                else if ((tts_mode & TTS_MODE_KEY_OPTION_MASK) == TTS_MODE_KEY_BREAK_FILTER)
                {
                    com_filter_key_hold();
                    g_tts_play_info.option |= (uint8) FORCE_STOP_TTS;
                    ret_val = TTS_PLAY_RET_BY_KEY;
                    PRINT_INFO("tts force stop by key!");
                    break;
                }
                else
                {
                    com_filter_key_hold();
                }
            }
        }

        if ((tts_mode & TTS_MODE_SYS_OPTION_MASK) != TTS_MODE_SYS_NORECV)
        {
            private_msg_t pri_msg;

            if (get_app_msg(&pri_msg) == TRUE)
            {
                result = com_view_loop_sys(&pri_msg, TRUE);
                if (result > RESULT_COMMON_RESERVE)
                {
                    libc_memcpy(&g_buffer_app_msg, &pri_msg, sizeof(private_msg_t)); //redeal
                    g_tts_play_info.option |= (uint8) FORCE_STOP_TTS;
                    ret_val = TTS_PLAY_RET_BY_SYS;
                    PRINT_INFO("tts force stop by sys!");
                    break;
                }
            }
        }

        if ((tts_mode & TTS_MODE_RCP_OPTION_MASK) != TTS_MODE_RCP_NORECV)
        {
            if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
            {
                result = com_btmanager_loop(TRUE);
                if (result > RESULT_COMMON_RESERVE)
                {
                    g_tts_play_info.option |= (uint8) FORCE_STOP_TTS;
                    ret_val = TTS_PLAY_RET_BY_BTEV;
                    PRINT_INFO("tts stop by btstack!");
                    break;
                }
            }
        }

        sys_os_time_dly(1);
    }

    //FORCE_STOP_TTS后等待TTS结束
    while ((g_tts_play_info.status == TTS_STATUS_READY) || (g_tts_play_info.status == TTS_STATUS_PLAYING))
    {
        sys_os_time_dly(1);
    }

    return ret_val;
}

tts_play_ret_e com_tts_state_play(uint16 tts_mode, void *tts_info)
{
    tts_play_ret_e ret_val = TTS_PLAY_RET_NORMAL;
    uint8 tmp_tts_sec_ids[TTS_SECTIONS_MAX];

    if (need_tts_state_play(tts_mode, tts_info, tmp_tts_sec_ids) == FALSE)
    {
        return ret_val;
    }

    if ((tts_mode & TTS_MODE_FIFO_OPTION_MASK) == TTS_MODE_USEFIFO)
    {
        tts_mode &= (uint16) (~TTS_MODE_FIFO_OPTION_MASK);
        tts_fifo_in(tts_mode, tmp_tts_sec_ids);
        PRINT_DBG_INT("tts fifo:", g_tts_play_info.count);
        return ret_val;
    }

    //等待非阻塞TTS播放完毕
    while (g_tts_play_info.status != TTS_STATUS_IDLE)
    {
        if (g_tts_play_info.status == TTS_STATUS_PLAYOVER)
        {
            com_tts_state_play_exit(g_tts_play_info.cur_mode);
        }
    }

    g_tts_play_info.cur_mode = tts_mode;
    libc_memcpy(g_tts_play_info.section_ids, tmp_tts_sec_ids, TTS_SECTIONS_MAX);

    if (com_tts_state_play_init(g_tts_play_info.cur_mode, g_tts_play_info.tts_str) == FALSE)
    {
        return TTS_PLAY_RET_NORMAL;
    }

    if ((tts_mode & TTS_MODE_BLOCK_OPTION_MASK) == TTS_MODE_NOBLOCK)
    {
        return ret_val;
    }

    ret_val = com_tts_state_play_loop(g_tts_play_info.cur_mode);

    com_tts_state_play_exit(g_tts_play_info.cur_mode);

    return ret_val;
}

uint8 tts_fifo_out(uint16 *tts_mode, uint8 *tts_sections)
{
483a59b2:	b018      	lw	s0,483a5a10 <tts_fifo_out+0x60>
    uint8 i;

    if (g_tts_play_info.count == 0)
483a59b4:	651d      	move	t8,a1
483a59b6:	a042      	lbu	v0,2(s0)
483a59b8:	6bff      	li	v1,255
    {
        return -1;
483a59ba:	2226      	beqz	v0,483a5a08 <tts_fifo_out+0x58>
483a59bc:	a8bb      	lhu	a1,54(s0)
    }

    *tts_mode = g_tts_play_info.tts_mode[0];
483a59be:	b116      	lw	s1,483a5a14 <tts_fifo_out+0x64>
    libc_memcpy(tts_sections, g_tts_play_info.tts_fifo[0], TTS_SECTIONS_MAX);
483a59c0:	cca0      	sh	a1,0(a0)
483a59c2:	67b0      	move	a1,s0
483a59c4:	6798      	move	a0,t8
483a59c6:	4d15      	addiu	a1,21
483a59c8:	6e10      	li	a2,16
483a59ca:	e940      	jalr	s1
483a59cc:	6f00      	li	a3,0
483a59ce:	a082      	lbu	a0,2(s0)
    g_tts_play_info.count--;
483a59d0:	6900      	li	s1,0

    for (i = 0; i < g_tts_play_info.count; i++)
483a59d2:	446f      	addiu	v1,a0,-1
483a59d4:	c062      	sb	v1,2(s0)
483a59d6:	eb11      	zeb	v1
483a59d8:	2316      	beqz	v1,483a5a06 <tts_fifo_out+0x56>
483a59da:	b00e      	lw	s0,483a5a10 <tts_fifo_out+0x60>
    {
        g_tts_play_info.tts_mode[i] = g_tts_play_info.tts_mode[i + 1];
483a59dc:	3224      	sll	v0,s1,1
483a59de:	e215      	addu	a1,v0,s0
483a59e0:	adfc      	lhu	a3,56(a1)
483a59e2:	6790      	move	a0,s0
        libc_memcpy(g_tts_play_info.tts_fifo[i], g_tts_play_info.tts_fifo[i + 1], TTS_SECTIONS_MAX);
483a59e4:	6770      	move	v1,s0
483a59e6:	3630      	sll	a2,s1,4
483a59e8:	4b25      	addiu	v1,37
483a59ea:	4c15      	addiu	a0,21
483a59ec:	b20a      	lw	v0,483a5a14 <tts_fifo_out+0x64>
483a59ee:	cdfb      	sh	a3,54(a1)
483a59f0:	e691      	addu	a0,a2,a0
483a59f2:	e675      	addu	a1,a2,v1
483a59f4:	6f00      	li	a3,0
483a59f6:	ea40      	jalr	v0
483a59f8:	6e10      	li	a2,16
483a59fa:	41e1      	addiu	a3,s1,1
483a59fc:	6727      	move	s1,a3
483a59fe:	a0c2      	lbu	a2,2(s0)
483a5a00:	e911      	zeb	s1
483a5a02:	e9c3      	sltu	s1,a2
483a5a04:	61ea      	btnez	483a59da <tts_fifo_out+0x2a>
483a5a06:	6b00      	li	v1,0
    }

    return 0;
483a5a08:	6743      	move	v0,v1
}
483a5a0a:	6474      	restore	32,ra,s0-s1
483a5a0c:	e8a0      	jrc	ra
483a5a0e:	0000      	addiu	s0,sp,0
483a5a10:	a1f4      	lbu	a3,20(s1)
483a5a12:	9fc1      	lw	a2,4(a3)
483a5a14:	e905      	break	8
483a5a16:	bfc1      	lwu	a2,4(a3)

483a5a18 <com_tts_state_play_loop>:
483a5a18:	64f8      	save	64,ra,s0-s1
483a5a1a:	ec31      	zeh	a0
483a5a1c:	6a00      	li	v0,0
483a5a1e:	d40a      	sw	a0,40(sp)
483a5a20:	d20b      	sw	v0,44(sp)
483a5a22:	b55f      	lw	a1,483a5b9c <.LBE6+0xb4>
483a5a24:	a584      	lbu	a0,4(a1)
483a5a26:	446f      	addiu	v1,a0,-1
483a5a28:	eb11      	zeb	v1
483a5a2a:	5b02      	sltiu	v1,2
483a5a2c:	607f      	bteqz	483a5b2c <.LBE6+0x44>
483a5a2e:	910a      	lw	s1,40(sp)
483a5a30:	6c40      	li	a0,64
483a5a32:	e98c      	and	s1,a0
483a5a34:	4cc1      	addiu	a0,-63
483a5a36:	2974      	bnez	s1,483a5b20 <.LBE6+0x38>
483a5a38:	b65b      	lw	a2,483a5ba4 <.LBE6+0xbc>
483a5a3a:	a6a0      	lbu	a1,0(a2)
483a5a3c:	2504      	beqz	a1,483a5a46 <com_tts_state_play_loop+0x2e>
483a5a3e:	b75b      	lw	a3,483a5ba8 <.LBE6+0xc0>
483a5a40:	b05b      	lw	s0,483a5bac <.LBE6+0xc4>
483a5a42:	e840      	jalr	s0
483a5a44:	9f80      	lw	a0,0(a3)
483a5a46:	b45b      	lw	a0,483a5bb0 <.LBE6+0xc8>
483a5a48:	b359      	lw	v1,483a5bac <.LBE6+0xc4>
483a5a4a:	eb40      	jalr	v1
483a5a4c:	6d08      	li	a1,8
483a5a4e:	920a      	lw	v0,40(sp)
483a5a50:	f401 6800 	li	s0,3072
483a5a54:	e84c      	and	s0,v0
483a5a56:	f401 7000 	cmpi	s0,3072
483a5a5a:	6024      	bteqz	483a5aa4 <.LBE5>

483a5a5c <.LBB5>:
483a5a5c:	b256      	lw	v0,483a5bb4 <.LBE6+0xcc>
483a5a5e:	ea40      	jalr	v0
483a5a60:	0404      	addiu	a0,sp,16
483a5a62:	7201      	cmpi	v0,1
483a5a64:	611f      	btnez	483a5aa4 <.LBE5>
483a5a66:	280f      	bnez	s0,483a5a86 <.LBB5+0x2a>
483a5a68:	b454      	lw	a0,483a5bb8 <.LBE6+0xd0>
483a5a6a:	b255      	lw	v0,483a5bbc <.LBE6+0xd4>
483a5a6c:	0504      	addiu	a1,sp,16
483a5a6e:	6e05      	li	a2,5
483a5a70:	ea40      	jalr	v0
483a5a72:	67f0      	move	a3,s0
483a5a74:	b54a      	lw	a1,483a5b9c <.LBE6+0xb4>
483a5a76:	6c01      	li	a0,1
483a5a78:	a5c3      	lbu	a2,3(a1)
483a5a7a:	6f40      	li	a3,64
483a5a7c:	eeed      	or	a2,a3
483a5a7e:	d40b      	sw	a0,44(sp)
483a5a80:	0c32      	la	a0,483a5b48 <.LBE6+0x60>
483a5a82:	c5c3      	sb	a2,3(a1)
483a5a84:	1046      	b	483a5b12 <.LBE6+0x2a>
483a5a86:	f400 7000 	cmpi	s0,1024
483a5a8a:	b24e      	lw	v0,483a5bc0 <.LBE6+0xd8>
483a5a8c:	610a      	btnez	483a5aa2 <.LBB5+0x46>
483a5a8e:	eac0      	jalrc	v0
483a5a90:	b543      	lw	a1,483a5b98 <.LBE6+0xb0>
483a5a92:	6c40      	li	a0,64
483a5a94:	a5c3      	lbu	a2,3(a1)
483a5a96:	6b01      	li	v1,1
483a5a98:	ee8d      	or	a2,a0
483a5a9a:	0c2c      	la	a0,483a5b48 <.LBE6+0x60>
483a5a9c:	c5c3      	sb	a2,3(a1)
483a5a9e:	d30b      	sw	v1,44(sp)
483a5aa0:	1020      	b	483a5ae2 <.LBB6+0x34>
483a5aa2:	eac0      	jalrc	v0

483a5aa4 <.LBE5>:
483a5aa4:	900a      	lw	s0,40(sp)
483a5aa6:	f200 6900 	li	s1,512
483a5aaa:	e90c      	and	s1,s0
483a5aac:	291d      	bnez	s1,483a5ae8 <.LBE6>

483a5aae <.LBB6>:
483a5aae:	0006      	addiu	s0,sp,24
483a5ab0:	b245      	lw	v0,483a5bc4 <.LBE6+0xdc>
483a5ab2:	ea40      	jalr	v0
483a5ab4:	6790      	move	a0,s0
483a5ab6:	7201      	cmpi	v0,1
483a5ab8:	6117      	btnez	483a5ae8 <.LBE6>
483a5aba:	b244      	lw	v0,483a5bc8 <.LBE6+0xe0>
483a5abc:	6790      	move	a0,s0
483a5abe:	ea40      	jalr	v0
483a5ac0:	6d01      	li	a1,1
483a5ac2:	5a21      	sltiu	v0,33
483a5ac4:	6111      	btnez	483a5ae8 <.LBE6>
483a5ac6:	b442      	lw	a0,483a5bcc <.LBE6+0xe4>
483a5ac8:	b23d      	lw	v0,483a5bbc <.LBE6+0xd4>
483a5aca:	67b0      	move	a1,s0
483a5acc:	6e10      	li	a2,16
483a5ace:	ea40      	jalr	v0
483a5ad0:	67f1      	move	a3,s1
483a5ad2:	b533      	lw	a1,483a5b9c <.LBE6+0xb4>
483a5ad4:	6b40      	li	v1,64
483a5ad6:	a5c3      	lbu	a2,3(a1)
483a5ad8:	6f02      	li	a3,2
483a5ada:	ee6d      	or	a2,v1
483a5adc:	c5c3      	sb	a2,3(a1)
483a5ade:	d70b      	sw	a3,44(sp)
483a5ae0:	0c21      	la	a0,483a5b64 <.LBE6+0x7c>
483a5ae2:	67b1      	move	a1,s1
483a5ae4:	67d1      	move	a2,s1
483a5ae6:	1017      	b	483a5b16 <.LBE6+0x2e>

483a5ae8 <.LBE6>:
483a5ae8:	68ff      	li	s0,255
483a5aea:	940a      	lw	a0,40(sp)
483a5aec:	4001      	addiu	s0,s0,1
483a5aee:	e88c      	and	s0,a0
483a5af0:	2816      	bnez	s0,483a5b1e <.LBE6+0x36>
483a5af2:	b538      	lw	a1,483a5bd0 <.LBE6+0xe8>
483a5af4:	a5ec      	lbu	a3,12(a1)
483a5af6:	2713      	beqz	a3,483a5b1e <.LBE6+0x36>
483a5af8:	b237      	lw	v0,483a5bd4 <.LBE6+0xec>
483a5afa:	ea40      	jalr	v0
483a5afc:	6c01      	li	a0,1
483a5afe:	5a21      	sltiu	v0,33
483a5b00:	610e      	btnez	483a5b1e <.LBE6+0x36>
483a5b02:	b427      	lw	a0,483a5b9c <.LBE6+0xb4>
483a5b04:	6b40      	li	v1,64
483a5b06:	a4e3      	lbu	a3,3(a0)
483a5b08:	6e03      	li	a2,3
483a5b0a:	ef6d      	or	a3,v1
483a5b0c:	c4e3      	sb	a3,3(a0)
483a5b0e:	d60b      	sw	a2,44(sp)
483a5b10:	0c1c      	la	a0,483a5b80 <.LBE6+0x98>
483a5b12:	67b0      	move	a1,s0
483a5b14:	67d0      	move	a2,s0
483a5b16:	6f4b      	li	a3,75
483a5b18:	b222      	lw	v0,483a5ba0 <.LBE6+0xb8>
483a5b1a:	eac0      	jalrc	v0
483a5b1c:	1007      	b	483a5b2c <.LBE6+0x44>
483a5b1e:	6c01      	li	a0,1
483a5b20:	6d00      	li	a1,0
483a5b22:	b220      	lw	v0,483a5ba0 <.LBE6+0xb8>
483a5b24:	67c5      	move	a2,a1
483a5b26:	ea40      	jalr	v0
483a5b28:	6f31      	li	a3,49
483a5b2a:	177b      	b	483a5a22 <com_tts_state_play_loop+0xa>
483a5b2c:	b41c      	lw	a0,483a5b9c <.LBE6+0xb4>
483a5b2e:	a4c4      	lbu	a2,4(a0)
483a5b30:	46af      	addiu	a1,a2,-1
483a5b32:	ed11      	zeb	a1
483a5b34:	5d02      	sltiu	a1,2
483a5b36:	6005      	bteqz	483a5b42 <.LBE6+0x5a>
483a5b38:	6d00      	li	a1,0
483a5b3a:	6c01      	li	a0,1
483a5b3c:	67c5      	move	a2,a1
483a5b3e:	6f31      	li	a3,49
483a5b40:	17eb      	b	483a5b18 <.LBE6+0x30>
483a5b42:	920b      	lw	v0,44(sp)
483a5b44:	6478      	restore	64,ra,s0-s1
483a5b46:	e8a0      	jrc	ra
483a5b48:	493c      	addiu	s1,60
483a5b4a:	203e      	beqz	s0,483a5bc8 <.LBE6+0xe0>
483a5b4c:	7474      	cmpi	a0,116
483a5b4e:	2073      	beqz	s0,483a5c36 <com_tts_state_play_deal+0x3a>
483a5b50:	6f66      	li	a3,102
483a5b52:	6372      	addiu	sp,912
483a5b54:	2065      	beqz	s0,483a5c20 <com_tts_state_play_deal+0x24>
483a5b56:	7473      	cmpi	a0,115
483a5b58:	706f      	cmpi	s0,111
483a5b5a:	6220      	sw	ra,128(sp)
483a5b5c:	2079      	beqz	s0,483a5c50 <com_tts_state_play_deal+0x54>
483a5b5e:	656b      	move	t3,v1
483a5b60:	2179      	beqz	s1,483a5c54 <tts_fifo_in>
483a5b62:	0000      	addiu	s0,sp,0
483a5b64:	493c      	addiu	s1,60
483a5b66:	203e      	beqz	s0,483a5be4 <com_tts_state_play_wait+0xc>
483a5b68:	7474      	cmpi	a0,116
483a5b6a:	2073      	beqz	s0,483a5c52 <com_tts_state_play_deal+0x56>
483a5b6c:	6f66      	li	a3,102
483a5b6e:	6372      	addiu	sp,912
483a5b70:	2065      	beqz	s0,483a5c3c <com_tts_state_play_deal+0x40>
483a5b72:	7473      	cmpi	a0,115
483a5b74:	706f      	cmpi	s0,111
483a5b76:	6220      	sw	ra,128(sp)
483a5b78:	2079      	beqz	s0,483a5c6c <tts_fifo_in+0x18>
483a5b7a:	7973      	sd	v1,152(s1)
483a5b7c:	2173      	beqz	s1,483a5c64 <tts_fifo_in+0x10>
483a5b7e:	0000      	addiu	s0,sp,0
483a5b80:	493c      	addiu	s1,60
483a5b82:	203e      	beqz	s0,483a5c00 <com_tts_state_play_deal+0x4>
483a5b84:	7474      	cmpi	a0,116
483a5b86:	2073      	beqz	s0,483a5c6e <tts_fifo_in+0x1a>
483a5b88:	7473      	cmpi	a0,115
483a5b8a:	706f      	cmpi	s0,111
483a5b8c:	6220      	sw	ra,128(sp)
483a5b8e:	2079      	beqz	s0,483a5c82 <tts_fifo_in+0x2e>
483a5b90:	7462      	cmpi	a0,98
483a5b92:	7473      	cmpi	a0,115
483a5b94:	6361      	addiu	sp,776
483a5b96:	216b      	beqz	s1,483a5c6e <tts_fifo_in+0x1a>
483a5b98:	0000      	addiu	s0,sp,0
483a5b9a:	0000      	addiu	s0,sp,0
483a5b9c:	a1f4      	lbu	a3,20(s1)
483a5b9e:	9fc1      	lw	a2,4(a3)
483a5ba0:	e901      	sdbbp	8
483a5ba2:	bfc1      	lwu	a2,4(a3)
483a5ba4:	9998      	lw	a0,96(s1)
483a5ba6:	9fc1      	lw	a2,4(a3)
483a5ba8:	9988      	lw	a0,32(s1)
483a5baa:	9fc1      	lw	a2,4(a3)
483a5bac:	e925      	break	9
483a5bae:	bfc1      	lwu	a2,4(a3)
483a5bb0:	a104      	lbu	s0,4(s1)
483a5bb2:	9fc1      	lw	a2,4(a3)
483a5bb4:	ead9      	multu	v0,a2
483a5bb6:	bfc1      	lwu	a2,4(a3)
483a5bb8:	a0ec      	lbu	a3,12(s0)
483a5bba:	9fc1      	lw	a2,4(a3)
483a5bbc:	e905      	break	8
483a5bbe:	bfc1      	lwu	a2,4(a3)
483a5bc0:	5e11      	sltiu	a2,17
483a5bc2:	484e      	addiu	s0,78
483a5bc4:	ea75      	0xea75
483a5bc6:	bfc1      	lwu	a2,4(a3)
483a5bc8:	5e1d      	sltiu	a2,29
483a5bca:	487a      	addiu	s0,122
483a5bcc:	a0f4      	lbu	a3,20(s0)
483a5bce:	9fc1      	lw	a2,4(a3)
483a5bd0:	a080      	lbu	a0,0(s0)
483a5bd2:	9fc1      	lw	a2,4(a3)
483a5bd4:	0909      	la	s1,483a5bf8 <com_tts_state_play_wait+0x20>
483a5bd6:	bfc1      	lwu	a2,4(a3)

483a5bd8 <com_tts_state_play_wait>:
483a5bd8:	64f4      	save	32,ra,s0-s1
483a5bda:	b008      	lw	s0,483a5bf8 <com_tts_state_play_wait+0x20>
483a5bdc:	6900      	li	s1,0
483a5bde:	a044      	lbu	v0,4(s0)
483a5be0:	2207      	beqz	v0,483a5bf0 <com_tts_state_play_wait+0x18>
483a5be2:	19d0 9686 	jal	483a5a18 <com_tts_state_play_loop>
483a5be6:	a880      	lhu	a0,0(s0)
483a5be8:	a880      	lhu	a0,0(s0)
483a5bea:	19d0 9661 	jal	483a5984 <com_tts_state_play_exit>
483a5bee:	6722      	move	s1,v0
483a5bf0:	6751      	move	v0,s1
483a5bf2:	6474      	restore	32,ra,s0-s1
483a5bf4:	e8a0      	jrc	ra
483a5bf6:	0000      	addiu	s0,sp,0
483a5bf8:	a1f4      	lbu	a3,20(s1)
483a5bfa:	9fc1      	lw	a2,4(a3)

483a5bfc <com_tts_state_play_deal>:
483a5bfc:	64f4      	save	32,ra,s0-s1
483a5bfe:	b015      	lw	s0,483a5c50 <com_tts_state_play_deal+0x54>
483a5c00:	6900      	li	s1,0
483a5c02:	a064      	lbu	v1,4(s0)
483a5c04:	6791      	move	a0,s1
483a5c06:	434f      	addiu	v0,v1,-1
483a5c08:	ea11      	zeb	v0
483a5c0a:	5a02      	sltiu	v0,2
483a5c0c:	611e      	btnez	483a5c4a <com_tts_state_play_deal+0x4e>
483a5c0e:	2b15      	bnez	v1,483a5c3a <com_tts_state_play_deal+0x3e>
483a5c10:	a062      	lbu	v1,2(s0)
483a5c12:	2313      	beqz	v1,483a5c3a <com_tts_state_play_deal+0x3e>
483a5c14:	6790      	move	a0,s0
483a5c16:	19d0 966c 	jal	483a59b0 <tts_fifo_out>
483a5c1a:	40a5      	addiu	a1,s0,5
483a5c1c:	a880      	lhu	a0,0(s0)
483a5c1e:	19d0 962a 	jal	483a58a8 <com_tts_state_play_init>
483a5c22:	98af      	lw	a1,60(s0)
483a5c24:	6791      	move	a0,s1
483a5c26:	2211      	beqz	v0,483a5c4a <com_tts_state_play_deal+0x4e>
483a5c28:	a880      	lhu	a0,0(s0)
483a5c2a:	f002 6d00 	li	a1,4096
483a5c2e:	ed8c      	and	a1,a0
483a5c30:	2d04      	bnez	a1,483a5c3a <com_tts_state_play_deal+0x3e>
483a5c32:	19d0 9686 	jal	483a5a18 <com_tts_state_play_loop>
483a5c36:	6500      	nop
483a5c38:	6722      	move	s1,v0
483a5c3a:	b306      	lw	v1,483a5c50 <com_tts_state_play_deal+0x54>
483a5c3c:	a384      	lbu	a0,4(v1)
483a5c3e:	7403      	cmpi	a0,3
483a5c40:	6103      	btnez	483a5c48 <com_tts_state_play_deal+0x4c>
483a5c42:	19d0 9661 	jal	483a5984 <com_tts_state_play_exit>
483a5c46:	ab80      	lhu	a0,0(v1)
483a5c48:	6791      	move	a0,s1
483a5c4a:	6744      	move	v0,a0
483a5c4c:	6474      	restore	32,ra,s0-s1
483a5c4e:	e8a0      	jrc	ra
483a5c50:	a1f4      	lbu	a3,20(s1)
483a5c52:	9fc1      	lw	a2,4(a3)

483a5c54 <tts_fifo_in>:
483a5c54:	64e3      	save	24,ra,s0

uint8 tts_fifo_in(uint16 tts_mode, uint8 *tts_sections)
{
483a5c56:	b00c      	lw	s0,483a5c84 <tts_fifo_in+0x30>
    if (g_tts_play_info.count >= TTS_FIFO_DEPTH)
483a5c58:	ec31      	zeh	a0
483a5c5a:	a062      	lbu	v1,2(s0)
483a5c5c:	6aff      	li	v0,255
    {
        return -1;
483a5c5e:	5b02      	sltiu	v1,2
483a5c60:	600f      	bteqz	483a5c80 <tts_fifo_in+0x2c>
483a5c62:	3264      	sll	v0,v1,1
    }

    g_tts_play_info.tts_mode[g_tts_play_info.count] = tts_mode;
483a5c64:	e21d      	addu	a3,v0,s0
483a5c66:	cf9b      	sh	a0,54(a3)
483a5c68:	6790      	move	a0,s0
    libc_memcpy(g_tts_play_info.tts_fifo[g_tts_play_info.count], tts_sections, TTS_SECTIONS_MAX);
483a5c6a:	3670      	sll	a2,v1,4
483a5c6c:	4c15      	addiu	a0,21
483a5c6e:	b207      	lw	v0,483a5c88 <tts_fifo_in+0x34>
483a5c70:	e691      	addu	a0,a2,a0
483a5c72:	6f00      	li	a3,0
483a5c74:	ea40      	jalr	v0
483a5c76:	6e10      	li	a2,16
483a5c78:	a062      	lbu	v1,2(s0)
    g_tts_play_info.count++;
483a5c7a:	4341      	addiu	v0,v1,1
483a5c7c:	c042      	sb	v0,2(s0)
483a5c7e:	6a00      	li	v0,0

    return 0;
483a5c80:	6463      	restore	24,ra,s0
}
483a5c82:	e8a0      	jrc	ra
483a5c84:	a1f4      	lbu	a3,20(s1)
483a5c86:	9fc1      	lw	a2,4(a3)
483a5c88:	e905      	break	8
483a5c8a:	bfc1      	lwu	a2,4(a3)

483a5c8c <com_tts_state_play>:
483a5c8c:	64f7      	save	56,ra,s0-s1
483a5c8e:	ec31      	zeh	a0
483a5c90:	0604      	addiu	a2,sp,16
483a5c92:	6900      	li	s1,0
483a5c94:	19d0 9600 	jal	483a5800 <need_tts_state_play>
483a5c98:	d408      	sw	a0,32(sp)
483a5c9a:	6771      	move	v1,s1
483a5c9c:	2237      	beqz	v0,483a5d0c <com_tts_state_play+0x80>
483a5c9e:	677d      	move	v1,sp
483a5ca0:	ab50      	lhu	v0,32(v1)
483a5ca2:	eab1      	seh	v0
483a5ca4:	ea22      	slt	v0,s1
483a5ca6:	6008      	bteqz	483a5cb8 <com_tts_state_play+0x2c>
483a5ca8:	9408      	lw	a0,32(sp)
483a5caa:	f7ef 6d1f 	li	a1,32767
483a5cae:	ecac      	and	a0,a1
483a5cb0:	19d0 9715 	jal	483a5c54 <tts_fifo_in>
483a5cb4:	0504      	addiu	a1,sp,16
483a5cb6:	1029      	b	483a5d0a <com_tts_state_play+0x7e>
483a5cb8:	b417      	lw	a0,483a5d14 <com_tts_state_play+0x88>
483a5cba:	a444      	lbu	v0,4(a0)
483a5cbc:	2209      	beqz	v0,483a5cd0 <com_tts_state_play+0x44>
483a5cbe:	b016      	lw	s0,483a5d14 <com_tts_state_play+0x88>
483a5cc0:	a0c4      	lbu	a2,4(s0)
483a5cc2:	7603      	cmpi	a2,3
483a5cc4:	6103      	btnez	483a5ccc <com_tts_state_play+0x40>
483a5cc6:	19d0 9661 	jal	483a5984 <com_tts_state_play_exit>
483a5cca:	a880      	lhu	a0,0(s0)
483a5ccc:	a044      	lbu	v0,4(s0)
483a5cce:	17f6      	b	483a5cbc <com_tts_state_play+0x30>
483a5cd0:	677d      	move	v1,sp
483a5cd2:	b011      	lw	s0,483a5d14 <com_tts_state_play+0x88>
483a5cd4:	abf0      	lhu	a3,32(v1)
483a5cd6:	b211      	lw	v0,483a5d18 <com_tts_state_play+0x8c>
483a5cd8:	c8e0      	sh	a3,0(s0)
483a5cda:	4085      	addiu	a0,s0,5
483a5cdc:	0504      	addiu	a1,sp,16
483a5cde:	6e10      	li	a2,16
483a5ce0:	ea40      	jalr	v0
483a5ce2:	6f00      	li	a3,0
483a5ce4:	a880      	lhu	a0,0(s0)
483a5ce6:	19d0 962a 	jal	483a58a8 <com_tts_state_play_init>
483a5cea:	98af      	lw	a1,60(s0)
483a5cec:	6762      	move	v1,v0
483a5cee:	220e      	beqz	v0,483a5d0c <com_tts_state_play+0x80>
483a5cf0:	9408      	lw	a0,32(sp)
483a5cf2:	f002 6d00 	li	a1,4096
483a5cf6:	ed8c      	and	a1,a0
483a5cf8:	6b00      	li	v1,0
483a5cfa:	2d08      	bnez	a1,483a5d0c <com_tts_state_play+0x80>
483a5cfc:	19d0 9686 	jal	483a5a18 <com_tts_state_play_loop>
483a5d00:	a880      	lhu	a0,0(s0)
483a5d02:	a880      	lhu	a0,0(s0)
483a5d04:	19d0 9661 	jal	483a5984 <com_tts_state_play_exit>
483a5d08:	6722      	move	s1,v0
483a5d0a:	6771      	move	v1,s1
483a5d0c:	6743      	move	v0,v1
483a5d0e:	6477      	restore	56,ra,s0-s1
483a5d10:	e8a0      	jrc	ra
483a5d12:	0000      	addiu	s0,sp,0
483a5d14:	a1f4      	lbu	a3,20(s1)
483a5d16:	9fc1      	lw	a2,4(a3)
483a5d18:	e905      	break	8
483a5d1a:	bfc1      	lwu	a2,4(a3)

483a5d1c <com_tts_state_play_control>:
483a5d1c:	ec11      	zeb	a0

void com_tts_state_play_control(tts_control_opr_e opr)
{
483a5d1e:	7401      	cmpi	a0,1
    switch (opr)
483a5d20:	600e      	bteqz	483a5d3e <com_tts_state_play_control+0x22>
483a5d22:	5402      	slti	a0,2
483a5d24:	6002      	bteqz	483a5d2a <com_tts_state_play_control+0xe>
483a5d26:	2406      	beqz	a0,483a5d34 <com_tts_state_play_control+0x18>
483a5d28:	e8a0      	jrc	ra
483a5d2a:	7402      	cmpi	a0,2
483a5d2c:	600e      	bteqz	483a5d4a <com_tts_state_play_control+0x2e>
483a5d2e:	7403      	cmpi	a0,3
483a5d30:	6011      	bteqz	483a5d54 <com_tts_state_play_control+0x38>
483a5d32:	e8a0      	jrc	ra
483a5d34:	b20b      	lw	v0,483a5d5c <com_tts_state_play_control+0x40>
    {
        case TTS_CTRL_IGNORE:
        g_tts_play_info.option |= (uint8) IGNORE_PLAY_TTS;
483a5d36:	6c80      	li	a0,128
483a5d38:	a263      	lbu	v1,3(v0)
483a5d3a:	ec8b      	neg	a0
483a5d3c:	1009      	b	483a5d50 <com_tts_state_play_control+0x34>
483a5d3e:	b209      	lw	v0,483a5d60 <com_tts_state_play_control+0x44>
        break;

        case TTS_CTRL_CANCEL_IGNORE:
        g_tts_play_info.option &= (uint8) (~IGNORE_PLAY_TTS);
483a5d40:	6c7f      	li	a0,127
483a5d42:	a263      	lbu	v1,3(v0)
483a5d44:	eb8c      	and	v1,a0
483a5d46:	e820      	jr	ra
        break;
483a5d48:	c263      	sb	v1,3(v0)
483a5d4a:	b206      	lw	v0,483a5d60 <com_tts_state_play_control+0x44>

        case TTS_CTRL_FORCE_STOP:
        g_tts_play_info.option |= (uint8) FORCE_STOP_TTS;
483a5d4c:	6c40      	li	a0,64
483a5d4e:	a263      	lbu	v1,3(v0)
483a5d50:	eb8d      	or	v1,a0
483a5d52:	17f9      	b	483a5d46 <com_tts_state_play_control+0x2a>
483a5d54:	b203      	lw	v0,483a5d60 <com_tts_state_play_control+0x44>
        break;

        case TTS_CTRL_CANCEL_FORCE_STOP:
        g_tts_play_info.option &= (uint8) (~FORCE_STOP_TTS);
483a5d56:	6d41      	li	a1,65
483a5d58:	a263      	lbu	v1,3(v0)
483a5d5a:	ecab      	neg	a0,a1
483a5d5c:	17f3      	b	483a5d44 <com_tts_state_play_control+0x28>
483a5d5e:	0000      	addiu	s0,sp,0
483a5d60:	a1f4      	lbu	a3,20(s1)
483a5d62:	9fc1      	lw	a2,4(a3)

483a5d64 <com_tts_state_sync>:
483a5d64:	64e5      	save	40,ra,s0
 * \note
 * \li
 *******************************************************************************/
bool com_tts_state_sync(uint16 tts_mode, bool start_or_stop)
{
483a5d66:	6a80      	li	v0,128
    msg_apps_t msg;
    msg_reply_t reply;
    bool bret = TRUE;

    if ((tts_mode & TTS_MODE_PB_OPTION_MASK) == TTS_MODE_PB_PLAY)
483a5d68:	ea8c      	and	v0,a0
483a5d6a:	ed11      	zeb	a1
483a5d6c:	6b01      	li	v1,1
483a5d6e:	2203      	beqz	v0,483a5d76 <com_tts_state_sync+0x12>
483a5d70:	675d      	move	v0,sp
    {
        msg.content.data[0] = TRUE;
483a5d72:	c274      	sb	v1,20(v0)
483a5d74:	1002      	b	483a5d7a <com_tts_state_sync+0x16>
483a5d76:	679d      	move	a0,sp
    }
    else
    {
        msg.content.data[0] = FALSE;
483a5d78:	c454      	sb	v0,20(a0)
483a5d7a:	7501      	cmpi	a1,1
    }

    if (start_or_stop == TRUE)
483a5d7c:	67b8      	move	a1,t8
483a5d7e:	5d01      	sltiu	a1,1
483a5d80:	6718      	move	s0,t8
483a5d82:	6af2      	li	v0,242
    {
        msg.type = MSG_TTS_START_SYNC;
483a5d84:	2801      	bnez	s0,483a5d88 <.LBB2>
483a5d86:	6af3      	li	v0,243

483a5d88 <.LBB2>:
    }
    else
    {
        msg.type = MSG_TTS_STOP_SYNC;
483a5d88:	b70b      	lw	a3,483a5db4 <.LBE2+0x2a>

483a5d8a <.LBE2>:
483a5d8a:	d204      	sw	v0,16(sp)
483a5d8c:	a7c0      	lbu	a2,0(a3)
483a5d8e:	260f      	beqz	a2,483a5dae <.LBE2+0x24>
483a5d90:	b20a      	lw	v0,483a5db8 <.LBE2+0x2e>
    }

    //发送同步消息
    if (get_engine_type() != ENGINE_NULL)
    {
        bret = (bool) (send_sync_msg(APP_ID_THEENGINE, &msg, &reply, 0) == ERR_NO_ERR);
483a5d92:	6c80      	li	a0,128
483a5d94:	0504      	addiu	a1,sp,16
483a5d96:	0606      	addiu	a2,sp,24
483a5d98:	ea40      	jalr	v0
483a5d9a:	6f00      	li	a3,0
483a5d9c:	5a01      	sltiu	v0,1
    }
    else
    {
        return bret;
    }

    if (bret == TRUE)
483a5d9e:	6778      	move	v1,t8
483a5da0:	2a06      	bnez	v0,483a5dae <.LBE2+0x24>
483a5da2:	2005      	beqz	s0,483a5dae <.LBE2+0x24>
    {
        if ((start_or_stop == TRUE) && (reply.type != MSG_REPLY_SUCCESS))
483a5da4:	679d      	move	a0,sp
483a5da6:	a4b8      	lbu	a1,24(a0)
483a5da8:	7501      	cmpi	a1,1
483a5daa:	6001      	bteqz	483a5dae <.LBE2+0x24>
483a5dac:	6b00      	li	v1,0
        {
            bret = FALSE;
483a5dae:	6743      	move	v0,v1
        }
    }

    return bret;
}
483a5db0:	6465      	restore	40,ra,s0
483a5db2:	e8a0      	jrc	ra
483a5db4:	a094      	lbu	a0,20(s0)
483a5db6:	9fc1      	lw	a2,4(a3)
483a5db8:	5a65      	sltiu	v0,101
483a5dba:	482e      	addiu	s0,46

483a5dbc <tts_play_init>:
483a5dbc:	f008 64f5 	save	a0-a1,40,ra,s0-s1

bool tts_play_init(uint16 tts_mode, void* tts_ptr)
{
483a5dc0:	6a01      	li	v0,1
    bool ret = TRUE;
483a5dc2:	ec31      	zeh	a0
483a5dc4:	67a2      	move	a1,v0
    uint8 section_cnt;
    int install_ret;
    uint8 dac_chan;
    uint8 system_vol = 0;
    
    //TTS开始播报，返回不允许播报
    if (com_tts_state_sync(tts_mode, TRUE) == FALSE)
483a5dc6:	d205      	sw	v0,20(sp)
483a5dc8:	6900      	li	s1,0
483a5dca:	19d0 9759 	jal	483a5d64 <com_tts_state_sync>
483a5dce:	d404      	sw	a0,16(sp)
483a5dd0:	2218      	beqz	v0,483a5e02 <tts_play_init+0x46>
483a5dd2:	b33e      	lw	v1,483a5ec8 <.L15+0x58>
    {
        ret = FALSE;
        goto tts_ret;
    }

    //install tts driver
    sys_os_sched_lock();
483a5dd4:	6791      	move	a0,s1
483a5dd6:	67b1      	move	a1,s1
483a5dd8:	67d1      	move	a2,s1
483a5dda:	eb40      	jalr	v1
483a5ddc:	6f33      	li	a3,51
483a5dde:	b43c      	lw	a0,483a5ecc <.L15+0x5c>
    dac_chan = (uint8)((g_keytone_infor.dac_chan == DAF0_EN)? DAF1_EN : DAF0_EN); //可能与按键音冲突，后续必须与按键音互斥
483a5de0:	b03a      	lw	s0,483a5ec8 <.L15+0x58>
    install_ret = sys_drv_install(DRV_GROUP_TTS, dac_chan, "tts_play.drv");
483a5de2:	a4a1      	lbu	a1,1(a0)
483a5de4:	0e2a      	la	a2,483a5e8c <.L15+0x1c>
483a5de6:	5d01      	sltiu	a1,1
483a5de8:	67b8      	move	a1,t8
483a5dea:	6c0b      	li	a0,11
483a5dec:	e840      	jalr	s0
483a5dee:	6f0a      	li	a3,10
483a5df0:	6702      	move	s0,v0
483a5df2:	b336      	lw	v1,483a5ec8 <.L15+0x58>
    sys_os_sched_unlock();
483a5df4:	6791      	move	a0,s1
483a5df6:	67b1      	move	a1,s1
483a5df8:	67d1      	move	a2,s1
483a5dfa:	6f34      	li	a3,52
483a5dfc:	eb40      	jalr	v1
483a5dfe:	e80f      	not	s0
483a5e00:	2802      	bnez	s0,483a5e06 <tts_play_init+0x4a>
    if (install_ret == -1)
483a5e02:	d105      	sw	s1,20(sp)
    {
        ret = FALSE;
483a5e04:	1035      	b	483a5e70 <.L15>
        goto tts_ret;
483a5e06:	9604      	lw	a2,16(sp)
    }

    if ((tts_mode & TTS_MODE_TYPE_MASK) == TTS_MODE_STRING)
483a5e08:	6f03      	li	a3,3
483a5e0a:	eeec      	and	a2,a3
483a5e0c:	7602      	cmpi	a2,2
483a5e0e:	9005      	lw	s0,20(sp)
    {
        section_cnt = 1;
483a5e10:	601b      	bteqz	483a5e48 <tts_play_init+0x8c>
483a5e12:	b730      	lw	a3,483a5ed0 <.L15+0x60>
483a5e14:	b630      	lw	a2,483a5ed4 <.L15+0x64>
483a5e16:	6711      	move	s0,s1
    }
    else
    {
        section_cnt = 0;
483a5e18:	e0f5      	addu	a1,s0,a3
        while (1)
        {
            if (g_tts_play_info.section_ids[section_cnt] == 0xff)
483a5e1a:	a545      	lbu	v0,5(a1)
483a5e1c:	72ff      	cmpi	v0,255
483a5e1e:	600b      	bteqz	483a5e36 <tts_play_init+0x7a>
483a5e20:	4081      	addiu	a0,s0,1
            {
                break;
            }
            if ((section_cnt + 1) >= TTS_SECTIONS_MAX)
483a5e22:	5410      	slti	a0,16
483a5e24:	6008      	bteqz	483a5e36 <tts_play_init+0x7a>
483a5e26:	9e60      	lw	v1,0(a2)
            {
                break;
            }

            g_tts_play_info.section_ids[section_cnt] = g_tts_play_info.section_ids[section_cnt] * TTS_LANGUAGE_TOTAL
483a5e28:	3044      	sll	s0,v0,1
483a5e2a:	a377      	lbu	v1,23(v1)
483a5e2c:	e069      	addu	v0,s0,v1
483a5e2e:	6704      	move	s0,a0
                    + sys_comval->tts_language;
            section_cnt++;
483a5e30:	e811      	zeb	s0
483a5e32:	c545      	sb	v0,5(a1)
483a5e34:	17f1      	b	483a5e18 <tts_play_init+0x5c>
483a5e36:	2808      	bnez	s0,483a5e48 <tts_play_init+0x8c>
        }
    }

    if (section_cnt == 0)
483a5e38:	b224      	lw	v0,483a5ec8 <.L15+0x58>
    {
        PRINT_WARNING("tts secti zero");
483a5e3a:	0c19      	la	a0,483a5e9c <.L15+0x2c>
483a5e3c:	67b0      	move	a1,s0
483a5e3e:	67d0      	move	a2,s0
483a5e40:	ea40      	jalr	v0
483a5e42:	6f4b      	li	a3,75
483a5e44:	d005      	sw	s0,20(sp)
        ret = FALSE;
483a5e46:	1014      	b	483a5e70 <.L15>
        goto tts_ret;
483a5e48:	b122      	lw	s1,483a5ed0 <.L15+0x60>
    }

    if (tts_status_play_init(g_tts_play_info.section_ids, section_cnt, tts_ptr) == -1)
483a5e4a:	960b      	lw	a2,44(sp)
483a5e4c:	b223      	lw	v0,483a5ed8 <.L15+0x68>
483a5e4e:	67b0      	move	a1,s0
483a5e50:	4185      	addiu	a0,s1,5
483a5e52:	ea40      	jalr	v0
483a5e54:	6f00      	li	a3,0
483a5e56:	ed4f      	not	a1,v0
483a5e58:	2d09      	bnez	a1,483a5e6c <tts_play_init+0xb0>
483a5e5a:	6d00      	li	a1,0
    {
        PRINT_WARNING("tts play init fail");
483a5e5c:	b21b      	lw	v0,483a5ec8 <.L15+0x58>
483a5e5e:	0c15      	la	a0,483a5eb0 <.L15+0x40>
483a5e60:	67c5      	move	a2,a1
483a5e62:	ea40      	jalr	v0
483a5e64:	6f4b      	li	a3,75
483a5e66:	6c00      	li	a0,0
        ret = FALSE;
483a5e68:	d405      	sw	a0,20(sp)
483a5e6a:	1002      	b	483a5e70 <.L15>
        goto tts_ret;
483a5e6c:	6e02      	li	a2,2
    }

    g_tts_play_info.status = TTS_STATUS_PLAYING;
483a5e6e:	c1c4      	sb	a2,4(s1)

483a5e70 <.L15>:
483a5e70:	9705      	lw	a3,20(sp)

    tts_ret:
    
    if (ret == TRUE)
483a5e72:	7701      	cmpi	a3,1
483a5e74:	6108      	btnez	483a5e86 <.L15+0x16>
483a5e76:	b118      	lw	s1,483a5ed4 <.L15+0x64>
    {
        //DAE模式切换时必须保证按键音已播完
        //keytone_play_deal_wait();

        //com_set_dae_onoff(FALSE);

        system_vol = sys_comval->volume_current;
483a5e78:	9960      	lw	v1,0(s1)
483a5e7a:	a33b      	lbu	s1,27(v1)
483a5e7c:	5908      	sltiu	s1,8
        if (system_vol < TTS_MIN_VOL)
483a5e7e:	6003      	bteqz	483a5e86 <.L15+0x16>
483a5e80:	b217      	lw	v0,483a5edc <.L15+0x6c>
        {
            system_vol = TTS_MIN_VOL;
            com_set_phy_volume(system_vol); 
483a5e82:	ea40      	jalr	v0
483a5e84:	6c08      	li	a0,8
483a5e86:	9205      	lw	v0,20(sp)
        }
    }
    
    return ret;
}
483a5e88:	6475      	restore	40,ra,s0-s1
483a5e8a:	e8a0      	jrc	ra
483a5e8c:	7474      	cmpi	a0,116
483a5e8e:	5f73      	sltiu	a3,115
483a5e90:	6c70      	li	a0,112
483a5e92:	7961      	sd	v1,8(s1)
483a5e94:	642e      	restore	112,s0
483a5e96:	7672      	cmpi	a2,114
483a5e98:	0000      	addiu	s0,sp,0
483a5e9a:	0000      	addiu	s0,sp,0
483a5e9c:	573c      	slti	a3,60
483a5e9e:	203e      	beqz	s0,483a5f1c <tts_play_exit+0x3c>
483a5ea0:	7474      	cmpi	a0,116
483a5ea2:	2073      	beqz	s0,483a5f8a <tts_play_loop+0x3a>
483a5ea4:	6573      	move	s3,v1
483a5ea6:	7463      	cmpi	a0,99
483a5ea8:	2069      	beqz	s0,483a5f7c <tts_play_loop+0x2c>
483a5eaa:	657a      	move	k1,v0
483a5eac:	6f72      	li	a3,114
483a5eae:	0000      	addiu	s0,sp,0
483a5eb0:	573c      	slti	a3,60
483a5eb2:	203e      	beqz	s0,483a5f30 <tts_play_exit+0x50>
483a5eb4:	7474      	cmpi	a0,116
483a5eb6:	2073      	beqz	s0,483a5f9e <tts_play_loop+0x4e>
483a5eb8:	6c70      	li	a0,112
483a5eba:	7961      	sd	v1,8(s1)
483a5ebc:	6920      	li	s1,32
483a5ebe:	696e      	li	s1,110
483a5ec0:	2074      	beqz	s0,483a5faa <tts_play_loop+0x5a>
483a5ec2:	6166      	btnez	483a5f90 <tts_play_loop+0x40>
483a5ec4:	6c69      	li	a0,105
483a5ec6:	0000      	addiu	s0,sp,0
483a5ec8:	e901      	sdbbp	8
483a5eca:	bfc1      	lwu	a2,4(a3)
483a5ecc:	a234      	lbu	s1,20(v0)
483a5ece:	9fc1      	lw	a2,4(a3)
483a5ed0:	a1f4      	lbu	a3,20(s1)
483a5ed2:	9fc1      	lw	a2,4(a3)
483a5ed4:	999c      	lw	a0,112(s1)
483a5ed6:	9fc1      	lw	a2,4(a3)
483a5ed8:	e915      	0xe915
483a5eda:	bfc1      	lwu	a2,4(a3)
483a5edc:	5855      	sltiu	s0,85
483a5ede:	4836      	addiu	s0,54

483a5ee0 <tts_play_exit>:
483a5ee0:	64f4      	save	32,ra,s0-s1

void tts_play_exit(uint16 tts_mode)
{
483a5ee2:	6724      	move	s1,a0
483a5ee4:	b415      	lw	a0,483a5f38 <tts_play_exit+0x58>
    //不在这里卸载dsp库等资源是由于TTS播报允许重入，假设第一个TTS播报过程中
    //第二个TTS开始播放，那么第二个要等待第一个播完才能播放，第一个会被第二个
    //主动调一次tts_play_exit,那么等第二个播放完，第一个回到退出的地方又会再
    //调一次，由于资源已释放造成问题，因此资源释放放到TTS子线程中处理
    //tts_status_play_exit();
    uint8 system_vol = 0;
    
    g_tts_play_info.status = TTS_STATUS_IDLE;
483a5ee6:	6f41      	li	a3,65

    g_tts_play_info.option &= (~FORCE_STOP_TTS); //表示终止tts
483a5ee8:	a4a3      	lbu	a1,3(a0)
483a5eea:	eeeb      	neg	a2,a3
483a5eec:	6800      	li	s0,0
483a5eee:	edcc      	and	a1,a2
483a5ef0:	c4a3      	sb	a1,3(a0)
483a5ef2:	c404      	sb	s0,4(a0)
483a5ef4:	b212      	lw	v0,483a5f3c <tts_play_exit+0x5c>
    
    //tts exit close dsp
    sys_drv_uninstall(DRV_GROUP_TTS);
483a5ef6:	6c0b      	li	a0,11
483a5ef8:	67e4      	move	a3,a0
483a5efa:	67b0      	move	a1,s0
483a5efc:	ea40      	jalr	v0
483a5efe:	67d0      	move	a2,s0
483a5f00:	b210      	lw	v0,483a5f40 <tts_play_exit+0x60>
    
    //DAE模式切换时必须保证按键音已播完
    keytone_play_deal_wait();
483a5f02:	ea40      	jalr	v0
483a5f04:	e931      	zeh	s1
483a5f06:	b310      	lw	v1,483a5f44 <tts_play_exit+0x64>
    
    //恢复播报TTS之前的音效开关状态
    if (FALSE == sys_comval->bypass_temp)     //TTS播报之前音效是打开的状态
483a5f08:	6c01      	li	a0,1
    {
        com_set_dae_onoff(TRUE);              //打开音效 
483a5f0a:	9b40      	lw	v0,0(v1)
483a5f0c:	f020 a253 	lbu	v0,51(v0)
483a5f10:	2203      	beqz	v0,483a5f18 <tts_play_exit+0x38>
483a5f12:	7201      	cmpi	v0,1
    }
    else if (TRUE == sys_comval->bypass_temp) //TTS播报之前音效是关闭的状态
483a5f14:	6103      	btnez	483a5f1c <tts_play_exit+0x3c>
483a5f16:	6790      	move	a0,s0
    {
        com_set_dae_onoff(FALSE);             //关闭音效
483a5f18:	b20c      	lw	v0,483a5f48 <tts_play_exit+0x68>
483a5f1a:	eac0      	jalrc	v0
483a5f1c:	b40a      	lw	a0,483a5f40 <tts_play_exit+0x60>
    }

    system_vol = sys_comval->volume_current; 
483a5f1e:	9c60      	lw	v1,0(a0)
483a5f20:	a39b      	lbu	a0,27(v1)
483a5f22:	5c08      	sltiu	a0,8

    if (system_vol < TTS_MIN_VOL)
483a5f24:	6002      	bteqz	483a5f2a <tts_play_exit+0x4a>
483a5f26:	b20a      	lw	v0,483a5f4c <tts_play_exit+0x6c>
    {
        com_set_phy_volume(system_vol);
483a5f28:	eac0      	jalrc	v0
483a5f2a:	6791      	move	a0,s1
    }
 
    //TTS播报完成
    com_tts_state_sync(tts_mode, FALSE);
483a5f2c:	19d0 9759 	jal	483a5d64 <com_tts_state_sync>
483a5f30:	6d00      	li	a1,0
483a5f32:	6474      	restore	32,ra,s0-s1
483a5f34:	e8a0      	jrc	ra
483a5f36:	0000      	addiu	s0,sp,0
483a5f38:	a1f4      	lbu	a3,20(s1)
483a5f3a:	9fc1      	lw	a2,4(a3)
483a5f3c:	e901      	sdbbp	8
483a5f3e:	bfc1      	lwu	a2,4(a3)
483a5f40:	5b6d      	sltiu	v1,109
483a5f42:	485a      	addiu	s0,90
483a5f44:	999c      	lw	a0,112(s1)
483a5f46:	9fc1      	lw	a2,4(a3)
483a5f48:	5e65      	sltiu	a2,101
483a5f4a:	4846      	addiu	s0,70
483a5f4c:	5855      	sltiu	s0,85
483a5f4e:	4836      	addiu	s0,54

483a5f50 <tts_play_loop>:
483a5f50:	64f4      	save	32,ra,s0-s1
}

void tts_play_loop(void)
{
483a5f52:	b31f      	lw	v1,483a5fcc <tts_play_loop+0x7c>
    uint8 delay_time;
    uint8 dac_chan = (uint8)((g_keytone_infor.dac_chan == DAF0_EN)? DAF1_EN : DAF0_EN);
483a5f54:	a341      	lbu	v0,1(v1)
483a5f56:	5a01      	sltiu	v0,1
483a5f58:	6738      	move	s1,t8
483a5f5a:	b51e      	lw	a1,483a5fd0 <tts_play_loop+0x80>

    while (1)
    {
        if ((g_tts_play_info.option & FORCE_STOP_TTS) != 0)
483a5f5c:	6c40      	li	a0,64
483a5f5e:	a503      	lbu	s0,3(a1)
483a5f60:	e88c      	and	s0,a0
483a5f62:	280f      	bnez	s0,483a5f82 <tts_play_loop+0x32>
483a5f64:	b21c      	lw	v0,483a5fd4 <tts_play_loop+0x84>
        { //强制终止tts，退出
            break;
        }

        if (tts_status_play_frame() == -1)
483a5f66:	67d0      	move	a2,s0
483a5f68:	6790      	move	a0,s0
483a5f6a:	67b0      	move	a1,s0
483a5f6c:	ea40      	jalr	v0
483a5f6e:	6f02      	li	a3,2
483a5f70:	ee4f      	not	a2,v0
483a5f72:	2607      	beqz	a2,483a5f82 <tts_play_loop+0x32>
483a5f74:	67b0      	move	a1,s0
        {
            break;
        }

        sys_os_time_dly(1);
483a5f76:	67d0      	move	a2,s0
483a5f78:	b018      	lw	s0,483a5fd8 <tts_play_loop+0x88>
483a5f7a:	6c01      	li	a0,1
483a5f7c:	e840      	jalr	s0
483a5f7e:	6f31      	li	a3,49
483a5f80:	17ec      	b	483a5f5a <tts_play_loop+0xa>
483a5f82:	6800      	li	s0,0
    }

    //等待TTS播放结束
    delay_time = 0;
483a5f84:	2902      	bnez	s1,483a5f8a <tts_play_loop+0x3a>
    while (1)
    {
        if (dac_chan == DAF0_EN)
483a5f86:	b216      	lw	v0,483a5fdc <tts_play_loop+0x8c>
        {
            if ((act_readl(ASRC_OUT0_IP) & (1 << ASRC_OUT0_IP_PCMFIFOEmpty)) != 0)
483a5f88:	1001      	b	483a5f8c <tts_play_loop+0x3c>
483a5f8a:	b216      	lw	v0,483a5fe0 <tts_play_loop+0x90>
            {
                break;
            }
        }
        else
        {
            if ((act_readl(ASRC_OUT1_IP) & (1 << ASRC_OUT1_IP_PCMFIFOEmpty)) != 0)
483a5f8c:	9ae0      	lw	a3,0(v0)
483a5f8e:	6b08      	li	v1,8
483a5f90:	ef6c      	and	a3,v1
483a5f92:	2f0b      	bnez	a3,483a5faa <tts_play_loop+0x5a>
483a5f94:	6d00      	li	a1,0
            {
                break;
            }
        }

        sys_os_time_dly(1);
483a5f96:	b211      	lw	v0,483a5fd8 <tts_play_loop+0x88>
483a5f98:	6c01      	li	a0,1
483a5f9a:	67c5      	move	a2,a1
483a5f9c:	ea40      	jalr	v0
483a5f9e:	6f31      	li	a3,49
483a5fa0:	4081      	addiu	a0,s0,1

        delay_time++;
483a5fa2:	6704      	move	s0,a0
483a5fa4:	e811      	zeb	s0
483a5fa6:	5815      	sltiu	s0,21
        if (delay_time > 20)
483a5fa8:	61ed      	btnez	483a5f84 <tts_play_loop+0x34>
483a5faa:	6c00      	li	a0,0
        {
            break;
        }
    }

    tts_status_play_exit();
483a5fac:	b20a      	lw	v0,483a5fd4 <tts_play_loop+0x84>
483a5fae:	67a4      	move	a1,a0
483a5fb0:	67c4      	move	a2,a0
483a5fb2:	ea40      	jalr	v0
483a5fb4:	6f01      	li	a3,1
483a5fb6:	b507      	lw	a1,483a5fd0 <tts_play_loop+0x80>

    g_tts_play_info.status = TTS_STATUS_PLAYOVER;
483a5fb8:	6c00      	li	a0,0

    libc_pthread_exit();
483a5fba:	6e03      	li	a2,3
483a5fbc:	b20a      	lw	v0,483a5fe4 <tts_play_loop+0x94>
483a5fbe:	c5c4      	sb	a2,4(a1)
483a5fc0:	6f0c      	li	a3,12
483a5fc2:	67a4      	move	a1,a0
483a5fc4:	ea40      	jalr	v0
483a5fc6:	67c4      	move	a2,a0
483a5fc8:	6474      	restore	32,ra,s0-s1
483a5fca:	e8a0      	jrc	ra
483a5fcc:	a234      	lbu	s1,20(v0)
483a5fce:	9fc1      	lw	a2,4(a3)
483a5fd0:	a1f4      	lbu	a3,20(s1)
483a5fd2:	9fc1      	lw	a2,4(a3)
483a5fd4:	e915      	0xe915
483a5fd6:	bfc1      	lwu	a2,4(a3)
483a5fd8:	e901      	sdbbp	8
483a5fda:	bfc1      	lwu	a2,4(a3)
483a5fdc:	0050      	addiu	s0,sp,320
483a5fde:	c016      	sb	s0,22(s0)
483a5fe0:	0080      	addiu	s0,sp,512
483a5fe2:	c016      	sb	s0,22(s0)
483a5fe4:	e905      	break	8
483a5fe6:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_15:

483e5800 <com_get_cfg_func_index>:
483e5800:	b509      	lw	a1,483e5824 <com_get_cfg_func_index+0x24>
//app_func_id的值型如：APP_FUNC_xxx
//返回：app_func_id在ap_switch_info数组里面的下标
//      如果没找到，就返回0
static uint8 com_get_cfg_func_index(uint8 app_func_id)
{
483e5802:	6b00      	li	v1,0
    uint8 i;

    for (i = 0; i < AP_SWITCH_INFO_COUNT; i++)
483e5804:	376c      	sll	a3,v1,3
    {
        if (ap_switch_info[i].app_func_id == app_func_id)
483e5806:	e7b9      	addu	a2,a3,a1
483e5808:	a646      	lbu	v0,6(a2)
483e580a:	ea8e      	xor	v0,a0
483e580c:	2205      	beqz	v0,483e5818 <com_get_cfg_func_index+0x18>
483e580e:	4341      	addiu	v0,v1,1
483e5810:	6762      	move	v1,v0
483e5812:	eb11      	zeb	v1
483e5814:	5b1a      	sltiu	v1,26
483e5816:	61f6      	btnez	483e5804 <com_get_cfg_func_index+0x4>
483e5818:	5b1a      	sltiu	v1,26
        {
            break;
        }
    }
    if (i >= AP_SWITCH_INFO_COUNT)
483e581a:	6101      	btnez	483e581e <com_get_cfg_func_index+0x1e>
483e581c:	6b00      	li	v1,0
    {
        i = 0;
483e581e:	e820      	jr	ra
    }

    return i;
}
483e5820:	6743      	move	v0,v1
483e5822:	0000      	addiu	s0,sp,0
483e5824:	5d80      	sltiu	a1,128
483e5826:	483e      	addiu	s0,62

483e5828 <com_get_switch_seq_index>:
483e5828:	b508      	lw	a1,483e5848 <com_get_switch_seq_index+0x20>

//返回：app_func_id是“config.txt的SETTING_APP_SWITCH_SEQUENCE项”中的第几个
static uint8 com_get_switch_seq_index(uint8 app_func_id)
{
483e582a:	6b00      	li	v1,0
    uint8 i;

    for (i = 0; i < MAX_FUNCTON_CYCLE; i++)
483e582c:	e3b9      	addu	a2,v1,a1
    {
        if (g_ap_switch_var.app_switch_seq[i] == app_func_id)
483e582e:	a644      	lbu	v0,4(a2)
483e5830:	ea8e      	xor	v0,a0
483e5832:	2a02      	bnez	v0,483e5838 <com_get_switch_seq_index+0x10>
483e5834:	e820      	jr	ra
        {
            return i;
483e5836:	6743      	move	v0,v1
483e5838:	43e1      	addiu	a3,v1,1
483e583a:	6767      	move	v1,a3
483e583c:	eb11      	zeb	v1
483e583e:	5b07      	sltiu	v1,7
483e5840:	61f5      	btnez	483e582c <com_get_switch_seq_index+0x4>
483e5842:	e820      	jr	ra
        }
    }

    return 0xff;
}
483e5844:	6aff      	li	v0,255
483e5846:	0000      	addiu	s0,sp,0
483e5848:	a19c      	lbu	a0,28(s1)
483e584a:	9fc1      	lw	a2,4(a3)

483e584c <com_check_function_in>:
483e584c:	64f4      	save	32,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:当前功能项硬件是否ok，能否进入
 *\ check cur app function hardware is ready and can realy enter
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      common_func
 * \note
 *******************************************************************************/

static bool com_check_function_in(uint8 func_id)
{
483e584e:	7402      	cmpi	a0,2
    //check if hard ware is not ready
    switch (func_id)
483e5850:	600a      	bteqz	483e5866 <com_check_function_in+0x1a>
483e5852:	5403      	slti	a0,3
483e5854:	6003      	bteqz	483e585c <com_check_function_in+0x10>
483e5856:	7401      	cmpi	a0,1
483e5858:	6008      	bteqz	483e586a <com_check_function_in+0x1e>
483e585a:	1039      	b	483e58ce <.LBE4+0x10>
483e585c:	7403      	cmpi	a0,3
483e585e:	6010      	bteqz	483e5880 <com_check_function_in+0x34>
483e5860:	7405      	cmpi	a0,5
483e5862:	602c      	bteqz	483e58bc <.LBB4>
483e5864:	1034      	b	483e58ce <.LBE4+0x10>
483e5866:	6c02      	li	a0,2
    {
        case APP_FUNC_PLAYUHOST:
        //u 盘不存在
        if ((int8) sys_detect_disk(DRV_GROUP_STG_UHOST) == -1)
483e5868:	1001      	b	483e586c <com_check_function_in+0x20>
483e586a:	6c01      	li	a0,1
        {
            return FALSE;
        }
        break;

        case APP_FUNC_PLAYCARD:
        //卡不存在
        if ((int8) sys_detect_disk(DRV_GROUP_STG_CARD) == -1)
483e586c:	6d00      	li	a1,0
483e586e:	b21e      	lw	v0,483e58e4 <.LBE4+0x26>
483e5870:	67c5      	move	a2,a1
483e5872:	ea40      	jalr	v0
483e5874:	6f09      	li	a3,9
483e5876:	ea91      	seb	v0
483e5878:	ea4f      	not	v0
483e587a:	6c00      	li	a0,0
        {
            return FALSE;
483e587c:	2229      	beqz	v0,483e58d0 <.LBE4+0x12>
483e587e:	1027      	b	483e58ce <.LBE4+0x10>
483e5880:	b31b      	lw	v1,483e58ec <.LBE4+0x2e>
        }
        break;

        case APP_FUNC_PLAYLINEIN:
        //linein不在
#ifndef ENABLE_TRUE_WIRELESS_STEREO
        if (get_linein_state() != LINEIN_STATE_LINEIN_IN)
#else

#if (SUPPORT_AUX_DETECT == DETECT_NO_SUPPORT)
        g_tws_m_linein_flag = 1;
#endif
	      if (g_bt_stack_cur_info.dev_role == NORMAL_DEV)
483e5882:	b11a      	lw	s1,483e58e8 <.LBE4+0x2a>
483e5884:	f020 a30e 	lbu	s0,46(v1)
483e5888:	6c01      	li	a0,1
483e588a:	c180      	sb	a0,0(s1)
483e588c:	2807      	bnez	s0,483e589c <.LBB2>
483e588e:	b216      	lw	v0,483e58e4 <.LBE4+0x26>
	      {
	      	libc_print("c line flag",0,0);
483e5890:	0c12      	la	a0,483e58d8 <.LBE4+0x1a>
483e5892:	67b0      	move	a1,s0
483e5894:	67d0      	move	a2,s0
483e5896:	ea40      	jalr	v0
483e5898:	6f4b      	li	a3,75
483e589a:	c100      	sb	s0,0(s1)

483e589c <.LBB2>:
	      	g_tws_m_linein_flag = 0;
483e589c:	b615      	lw	a2,483e58f0 <.LBE4+0x32>

483e589e <.LBE2>:
483e589e:	a6a6      	lbu	a1,6(a2)
483e58a0:	7501      	cmpi	a1,1
483e58a2:	6003      	bteqz	483e58aa <.LBE2+0xc>
483e58a4:	a1e0      	lbu	a3,0(s1)
483e58a6:	2708      	beqz	a3,483e58b8 <.LBE2+0x1a>
483e58a8:	1012      	b	483e58ce <.LBE4+0x10>
483e58aa:	a160      	lbu	v1,0(s1)
483e58ac:	2b10      	bnez	v1,483e58ce <.LBE4+0x10>
483e58ae:	b210      	lw	v0,483e58ec <.LBE4+0x2e>
483e58b0:	f020 a28e 	lbu	a0,46(v0)
483e58b4:	7402      	cmpi	a0,2
483e58b6:	610b      	btnez	483e58ce <.LBE4+0x10>
483e58b8:	6c00      	li	a0,0
	      }
	      		      
	      if ( ((get_linein_state() != LINEIN_STATE_LINEIN_IN) && (g_tws_m_linein_flag == 0))
	      	   || ((get_linein_state() == LINEIN_STATE_LINEIN_IN)&& (g_tws_m_linein_flag == 0)
	               &&(g_bt_stack_cur_info.dev_role == TWS_SLAVE)) )
#endif        	
        {
            return FALSE;
483e58ba:	100a      	b	483e58d0 <.LBE4+0x12>

483e58bc <.LBB4>:
483e58bc:	b30d      	lw	v1,483e58f0 <.LBE4+0x32>

483e58be <.LBE4>:
483e58be:	6c00      	li	a0,0
        }
        break;

        case APP_FUNC_USOUND:
        //当前无USB线插入
        if (get_cable_state() != CABLE_STATE_CABLE_IN)
        {
            return FALSE;
483e58c0:	a3a7      	lbu	a1,7(v1)
483e58c2:	7501      	cmpi	a1,1
483e58c4:	6105      	btnez	483e58d0 <.LBE4+0x12>
483e58c6:	a3cc      	lbu	a2,12(v1)
        }

        if (g_app_info_state.stub_tools_type != 0)
483e58c8:	6f7f      	li	a3,127
483e58ca:	eeec      	and	a2,a3
483e58cc:	2e01      	bnez	a2,483e58d0 <.LBE4+0x12>
483e58ce:	6c01      	li	a0,1
        {
            return FALSE;
        }
        break;

        default:
        break;
    }

    return TRUE;
483e58d0:	6744      	move	v0,a0
}
483e58d2:	6474      	restore	32,ra,s0-s1
483e58d4:	e8a0      	jrc	ra
483e58d6:	0000      	addiu	s0,sp,0
483e58d8:	2063      	beqz	s0,483e59a0 <.LBE6+0x6>
483e58da:	696c      	li	s1,108
483e58dc:	656e      	move	t3,a2
483e58de:	6620      	0x6620
483e58e0:	616c      	btnez	483e59ba <.LBE8+0xa>
483e58e2:	0067      	addiu	s0,sp,412
483e58e4:	e901      	sdbbp	8
483e58e6:	bfc1      	lwu	a2,4(a3)
483e58e8:	a35c      	lbu	v0,28(v1)
483e58ea:	9fc1      	lw	a2,4(a3)
483e58ec:	a2fc      	lbu	a3,28(v0)
483e58ee:	9fc1      	lw	a2,4(a3)
483e58f0:	a0c0      	lbu	a2,0(s0)
483e58f2:	9fc1      	lw	a2,4(a3)

483e58f4 <com_app_switch_next_function>:
483e58f4:	64f4      	save	32,ra,s0-s1

//根据config.txt切换到下一个APP_FUNC
//返回：该APP_FUNC在ap_switch_info数组里面的下标
//last_index: 在ap_switch_info数组里面的下标
static uint8 com_app_switch_next_function(uint8 last_index)
{
483e58f6:	5c07      	sltiu	a0,7
    uint8 last_switch_seq_index;
    uint8 tmp_func_id;

    if (last_index >= MAX_FUNCTON_CYCLE)
483e58f8:	6744      	move	v0,a0
483e58fa:	6104      	btnez	483e5904 <com_app_switch_next_function+0x10>
483e58fc:	b220      	lw	v0,483e597c <.L44+0x40>
    {
        last_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
483e58fe:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5902:	a28b      	lbu	a0,11(v0)
483e5904:	b11f      	lw	s1,483e5980 <.L44+0x44>
    }

    //是“config.txt的SETTING_APP_SWITCH_SEQUENCE项”中的第几个
    last_switch_seq_index = com_get_switch_seq_index(ap_switch_info[last_index].app_func_id);
483e5906:	344c      	sll	a0,v0,3
483e5908:	e42d      	addu	v1,a0,s1
483e590a:	19f0 960a 	jal	483e5828 <com_get_switch_seq_index>
483e590e:	a386      	lbu	a0,6(v1)
483e5910:	72ff      	cmpi	v0,255
    if (last_switch_seq_index == 0xff)
483e5912:	6702      	move	s0,v0
483e5914:	6113      	btnez	483e593c <.L44>
483e5916:	b71a      	lw	a3,483e597c <.L44+0x40>
    {
        last_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
483e5918:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e591c:	a78b      	lbu	a0,11(a3)
483e591e:	364c      	sll	a2,v0,3
        last_switch_seq_index = com_get_switch_seq_index(ap_switch_info[last_index].app_func_id);
483e5920:	e635      	addu	a1,a2,s1
483e5922:	19f0 960a 	jal	483e5828 <com_get_switch_seq_index>
483e5926:	a586      	lbu	a0,6(a1)
483e5928:	72ff      	cmpi	v0,255
        if (last_switch_seq_index == 0xff)
483e592a:	6702      	move	s0,v0
483e592c:	6107      	btnez	483e593c <.L44>
483e592e:	6d00      	li	a1,0
        {
            PRINT_ERR("ap swi er!");
483e5930:	b015      	lw	s0,483e5984 <.L44+0x48>
483e5932:	0c0f      	la	a0,483e596c <.L44+0x30>
483e5934:	67c5      	move	a2,a1
483e5936:	e840      	jalr	s0
483e5938:	6f4b      	li	a3,75
483e593a:	17ff      	b	483e593a <com_app_switch_next_function+0x46>

483e593c <.L44>:
            while (1)
483e593c:	4021      	addiu	s1,s0,1
            {
                ; //nothing for QAC
            }
        }
    }

    find_next_index:
    //按照config.txt切到下一个APP_FUNC
    last_switch_seq_index++;
483e593e:	6711      	move	s0,s1
483e5940:	e811      	zeb	s0
483e5942:	5807      	sltiu	s0,7

    if (last_switch_seq_index >= MAX_FUNCTON_CYCLE)
483e5944:	6101      	btnez	483e5948 <.L44+0xc>
483e5946:	6800      	li	s0,0
    {
        last_switch_seq_index = 0;
483e5948:	b40d      	lw	a0,483e597c <.L44+0x40>
    }

    tmp_func_id = g_ap_switch_var.app_switch_seq[last_switch_seq_index];
483e594a:	6b01      	li	v1,1
    if (((g_ap_switch_var.app_func_support & (uint32) (1 << tmp_func_id)) == 0)
483e594c:	e095      	addu	a1,s0,a0
483e594e:	a524      	lbu	s1,4(a1)
483e5950:	9c40      	lw	v0,0(a0)
483e5952:	e964      	sllv	v1,s1
483e5954:	ea6c      	and	v0,v1
483e5956:	22f2      	beqz	v0,483e593c <.L44>
483e5958:	19f0 9613 	jal	483e584c <com_check_function_in>
483e595c:	6791      	move	a0,s1
483e595e:	22ee      	beqz	v0,483e593c <.L44>
483e5960:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
            || (com_check_function_in(tmp_func_id) == FALSE))
    {
        goto find_next_index;
    }

    //返回该APP_FUNC在ap_switch_info数组里面的下标
    return com_get_cfg_func_index(tmp_func_id);
483e5964:	6791      	move	a0,s1
483e5966:	6474      	restore	32,ra,s0-s1
}
483e5968:	e8a0      	jrc	ra
483e596a:	0000      	addiu	s0,sp,0
483e596c:	453c      	daddiu	s1,a1,-4
483e596e:	203e      	beqz	s0,483e59ec <.LBB10>
483e5970:	7061      	cmpi	s0,97
483e5972:	7320      	cmpi	v1,32
483e5974:	6977      	li	s1,119
483e5976:	6520      	move	at,s0
483e5978:	2172      	beqz	s1,483e5a5e <.LBB10+0x72>
483e597a:	0000      	addiu	s0,sp,0
483e597c:	a19c      	lbu	a0,28(s1)
483e597e:	9fc1      	lw	a2,4(a3)
483e5980:	5d80      	sltiu	a1,128
483e5982:	483e      	addiu	s0,62
483e5984:	e901      	sdbbp	8
483e5986:	bfc1      	lwu	a2,4(a3)

483e5988 <com_ap_switch_next_index>:
483e5988:	64f5      	save	40,ra,s0-s1

//cur_index是ap_switch_info数组里面的下标
//这里做了一些检查
//返回值仍然是ap_switch_info数组里面的下标
static uint8 com_app_switch_any_function(uint8 cur_index)
{
    uint8 cur_switch_seq_index;

    if (cur_index >= AP_SWITCH_INFO_COUNT)
    {
        cur_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
    }

    if ((g_ap_switch_var.app_func_support & (uint32) (1 << ap_switch_info[cur_index].app_func_id)) == 0)
    {
        cur_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
    }

    if (cur_index < MAX_FUNCTON_CYCLE)
    {
        //cur_switch_seq_index表示config.txt里面的第几个APP_FUNC
        cur_switch_seq_index = com_get_switch_seq_index(ap_switch_info[cur_index].app_func_id);
        if (cur_switch_seq_index == 0xff)
        {
            cur_switch_seq_index = com_get_switch_seq_index(g_ap_switch_var.app_default_func_id);
            cur_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
        }

        if (((g_ap_switch_var.app_func_support & (uint32) (1 << ap_switch_info[cur_index].app_func_id)) == 0)
                || (com_check_function_in(g_ap_switch_var.app_switch_seq[cur_switch_seq_index]) == FALSE))
        {
            cur_switch_seq_index = com_app_switch_next_function(cur_index);
        }

        //cur_index是ap_switch_info数组里面的下标
        cur_index = com_get_cfg_func_index(g_ap_switch_var.app_switch_seq[cur_switch_seq_index]);
    }

    return cur_index;
}

/*! \cond COMMON_API */

/******************************************************************************/
/*!
 * \par  Description:发送消息给manager
 *\ check cur app function hardware is ready and can realy enter
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      common_func
 * \note
 *******************************************************************************/
static void com_send_msg_to_manager(uint32 msg_type, uint8 param1, uint8 param2, bool synch_flag)
{
    msg_apps_t msg;

    //message type
    msg.type = msg_type;
    //param
    msg.content.data[0] = param1;

    msg.content.data[1] = param2;
    //whether sych message
    if (synch_flag == TRUE)
    {
        //发送同步消息
        send_sync_msg(APP_ID_MANAGER, &msg, NULL, 0);
    }
    else
    {
        //msg.content.data[1] = param2;
        //发送异步消息
        send_async_msg(APP_ID_MANAGER, &msg);
    }
}

//返回即将切换到哪个INDEX
static uint8 com_ap_switch_next_index(app_result_e app_result)
{
483e598a:	b13e      	lw	s1,483e5a80 <.LBE10+0x8>
    uint8 cur_index; //ap_func_table[cur_index]即要切入的APP_FUNC 的ID
    //(只在最后,cur_index变成了ap_switch_info的下标)
    uint8 last_index; //对应到ap_func_table的下标
    uint8 default_index = 0; //对应到ap_func_table数组的下标

    //得到缺省APP_FUNC在ap_switch_info数组中的下标
    default_index = com_get_cfg_func_index(g_ap_switch_var.app_default_func_id);
483e598c:	6704      	move	s0,a0
483e598e:	a18b      	lbu	a0,11(s1)
483e5990:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5994:	e831      	zeh	s0
483e5996:	67a2      	move	a1,v0

483e5998 <.LBB6>:
483e5998:	b23b      	lw	v0,483e5a84 <.LBE10+0xc>

483e599a <.LBE6>:
483e599a:	f120 7008 	cmpi	s0,296

    //当前的index 作为上一次的保存
    last_index = get_cur_func_index();

    if (app_result == RESULT_ESD_RESTART)
483e599e:	a292      	lbu	a0,18(v0)
483e59a0:	6103      	btnez	483e59a8 <.LBE6+0xe>
483e59a2:	b33a      	lw	v1,483e5a88 <.LBE10+0x10>
    {
        //del  cur_index = (uint8) ((act_readl(RTC_BAK0) & (0xff << MY_RTC_FUNC_INDEX)) >> MY_RTC_FUNC_INDEX);
        cur_index = g_config_var.ap_id;
483e59a4:	a343      	lbu	v0,3(v1)
483e59a6:	106a      	b	483e5a7c <.LBE10+0x4>
        return cur_index;
483e59a8:	f100 7015 	cmpi	s0,277
    }

    if (app_result == RESULT_LASTPLAY)
483e59ac:	6108      	btnez	483e59be <.LBE8+0xe>

483e59ae <.LBB8>:
483e59ae:	b538      	lw	a1,483e5a8c <.LBE10+0x14>

483e59b0 <.LBE8>:
483e59b0:	a581      	lbu	a0,1(a1)
483e59b2:	5c07      	sltiu	a0,7
    {
        //上一次的apindex
        cur_index = get_last_func_index();
        if (cur_index >= MAX_FUNCTON_CYCLE)
483e59b4:	611b      	btnez	483e59ec <.LBB10>
483e59b6:	19f0 960a 	jal	483e5828 <com_get_switch_seq_index>
        {
            cur_index = com_get_switch_seq_index(g_ap_switch_var.app_default_func_id);
483e59ba:	a18b      	lbu	a0,11(s1)
483e59bc:	1006      	b	483e59ca <.LBE8+0x1a>
483e59be:	f100 7016 	cmpi	s0,278
        }
    }
    else if (app_result == RESULT_NEXT_FUNCTION)
483e59c2:	6105      	btnez	483e59ce <.LBE8+0x1e>
483e59c4:	19f0 963d 	jal	483e58f4 <com_app_switch_next_function>
    {
        //进入下一个应用
        //cur_index是按照config.txt切换APP_FUNC后，这个APP_FUNC在ap_switch_info数组里面的下标
        cur_index = com_app_switch_next_function(last_index);
483e59c8:	6500      	nop
483e59ca:	6782      	move	a0,v0
483e59cc:	100f      	b	483e59ec <.LBB10>
483e59ce:	b331      	lw	v1,483e5a90 <.LBE10+0x18>
483e59d0:	6c00      	li	a0,0
    }
    else
    {
        //根据返回值确定索引值
        for (cur_index = 0; cur_index < AP_SWITCH_INFO_COUNT; cur_index++)
483e59d2:	328c      	sll	v0,a0,3
        {
            //check enter which one
            if (ap_switch_info[cur_index].result_val == app_result)
483e59d4:	e27d      	addu	a3,v0,v1
483e59d6:	afc2      	lhu	a2,4(a3)
483e59d8:	ee0e      	xor	a2,s0
483e59da:	2605      	beqz	a2,483e59e6 <.LBE8+0x36>
483e59dc:	44c1      	addiu	a2,a0,1
483e59de:	6786      	move	a0,a2
483e59e0:	ec11      	zeb	a0
483e59e2:	5c1a      	sltiu	a0,26
483e59e4:	61f6      	btnez	483e59d2 <.LBE8+0x22>
483e59e6:	5c1a      	sltiu	a0,26
            {
                break;
            }
        }

        if (cur_index >= AP_SWITCH_INFO_COUNT)
483e59e8:	6101      	btnez	483e59ec <.LBB10>
483e59ea:	6785      	move	a0,a1

483e59ec <.LBB10>:
        {
            cur_index = default_index;
483e59ec:	5c1a      	sltiu	a0,26
483e59ee:	6704      	move	s0,a0
483e59f0:	6105      	btnez	483e59fc <.LBB10+0x10>
483e59f2:	b024      	lw	s0,483e5a80 <.LBE10+0x8>
483e59f4:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e59f8:	a08b      	lbu	a0,11(s0)
483e59fa:	6702      	move	s0,v0
483e59fc:	b525      	lw	a1,483e5a90 <.LBE10+0x18>
483e59fe:	360c      	sll	a2,s0,3
483e5a00:	e6a9      	addu	v0,a2,a1
483e5a02:	a2e6      	lbu	a3,6(v0)
483e5a04:	6c01      	li	a0,1
483e5a06:	d404      	sw	a0,16(sp)
483e5a08:	ef84      	sllv	a0,a3
483e5a0a:	6764      	move	v1,a0
483e5a0c:	b41d      	lw	a0,483e5a80 <.LBE10+0x8>
483e5a0e:	9ca0      	lw	a1,0(a0)
483e5a10:	ed6c      	and	a1,v1
483e5a12:	2d04      	bnez	a1,483e5a1c <.LBB10+0x30>
483e5a14:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5a18:	a48b      	lbu	a0,11(a0)
483e5a1a:	6702      	move	s0,v0
483e5a1c:	5807      	sltiu	s0,7
483e5a1e:	602c      	bteqz	483e5a78 <.LBE10>
483e5a20:	b31c      	lw	v1,483e5a90 <.LBE10+0x18>
483e5a22:	340c      	sll	a0,s0,3
483e5a24:	e465      	addu	s1,a0,v1
483e5a26:	19f0 960a 	jal	483e5828 <com_get_switch_seq_index>
483e5a2a:	a186      	lbu	a0,6(s1)
483e5a2c:	72ff      	cmpi	v0,255
483e5a2e:	6722      	move	s1,v0
483e5a30:	610a      	btnez	483e5a46 <.LBB10+0x5a>
483e5a32:	b714      	lw	a3,483e5a80 <.LBE10+0x8>
483e5a34:	19f0 960a 	jal	483e5828 <com_get_switch_seq_index>
483e5a38:	a78b      	lbu	a0,11(a3)
483e5a3a:	b012      	lw	s0,483e5a80 <.LBE10+0x8>
483e5a3c:	6722      	move	s1,v0
483e5a3e:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5a42:	a08b      	lbu	a0,11(s0)
483e5a44:	6702      	move	s0,v0
483e5a46:	b413      	lw	a0,483e5a90 <.LBE10+0x18>
483e5a48:	370c      	sll	a3,s0,3
483e5a4a:	e78d      	addu	v1,a3,a0
483e5a4c:	b40d      	lw	a0,483e5a80 <.LBE10+0x8>
483e5a4e:	a3a6      	lbu	a1,6(v1)
483e5a50:	9604      	lw	a2,16(sp)
483e5a52:	9c40      	lw	v0,0(a0)
483e5a54:	edc4      	sllv	a2,a1
483e5a56:	eacc      	and	v0,a2
483e5a58:	2205      	beqz	v0,483e5a64 <.LBB10+0x78>
483e5a5a:	e189      	addu	v0,s1,a0
483e5a5c:	19f0 9613 	jal	483e584c <com_check_function_in>
483e5a60:	a284      	lbu	a0,4(v0)
483e5a62:	2a04      	bnez	v0,483e5a6c <.LBB10+0x80>
483e5a64:	19f0 963d 	jal	483e58f4 <com_app_switch_next_function>
483e5a68:	6790      	move	a0,s0
483e5a6a:	6722      	move	s1,v0
483e5a6c:	b605      	lw	a2,483e5a80 <.LBE10+0x8>
483e5a6e:	e1c1      	addu	s0,s1,a2
483e5a70:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5a74:	a084      	lbu	a0,4(s0)
483e5a76:	6702      	move	s0,v0

483e5a78 <.LBE10>:
483e5a78:	6750      	move	v0,s0
483e5a7a:	ea11      	zeb	v0
483e5a7c:	6475      	restore	40,ra,s0-s1
        }
    }

    //找一些检查，如果不行，cur_index就会变成下一个满足条件的，
    //但cur_index仍然是ap_switch_info数组里面的下标
    cur_index = com_app_switch_any_function(cur_index);

    return cur_index;
}
483e5a7e:	e8a0      	jrc	ra
483e5a80:	a19c      	lbu	a0,28(s1)
483e5a82:	9fc1      	lw	a2,4(a3)
483e5a84:	a0c0      	lbu	a2,0(s0)
483e5a86:	9fc1      	lw	a2,4(a3)
483e5a88:	a1c4      	lbu	a2,4(s1)
483e5a8a:	9fc1      	lw	a2,4(a3)
483e5a8c:	a184      	lbu	a0,4(s1)
483e5a8e:	9fc1      	lw	a2,4(a3)
483e5a90:	5d80      	sltiu	a1,128
483e5a92:	483e      	addiu	s0,62

483e5a94 <com_ap_switch_ask_next_func>:
483e5a94:	64f4      	save	32,ra,s0-s1
483e5a96:	b20a      	lw	v0,483e5abc <com_ap_switch_ask_next_func+0x28>
483e5a98:	6704      	move	s0,a0
483e5a9a:	a28b      	lbu	a0,11(v0)
483e5a9c:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5aa0:	e831      	zeh	s0
483e5aa2:	6790      	move	a0,s0
483e5aa4:	19f0 9662 	jal	483e5988 <com_ap_switch_next_index>
483e5aa8:	6722      	move	s1,v0
483e5aaa:	5a1a      	sltiu	v0,26
483e5aac:	6101      	btnez	483e5ab0 <com_ap_switch_ask_next_func+0x1c>
483e5aae:	6751      	move	v0,s1
483e5ab0:	b304      	lw	v1,483e5ac0 <com_ap_switch_ask_next_func+0x2c>
483e5ab2:	354c      	sll	a1,v0,3
483e5ab4:	e571      	addu	a0,a1,v1
483e5ab6:	a446      	lbu	v0,6(a0)
483e5ab8:	6474      	restore	32,ra,s0-s1
483e5aba:	e8a0      	jrc	ra
483e5abc:	a19c      	lbu	a0,28(s1)
483e5abe:	9fc1      	lw	a2,4(a3)
483e5ac0:	5d80      	sltiu	a1,128
483e5ac2:	483e      	addiu	s0,62

483e5ac4 <com_send_msg_to_manager>:
483e5ac4:	64c4      	save	32,ra
483e5ac6:	675d      	move	v0,sp
483e5ac8:	7701      	cmpi	a3,1
483e5aca:	d404      	sw	a0,16(sp)
483e5acc:	c2b4      	sb	a1,20(v0)
483e5ace:	c2d5      	sb	a2,21(v0)
483e5ad0:	6107      	btnez	483e5ae0 <com_send_msg_to_manager+0x1c>
483e5ad2:	6e00      	li	a2,0
483e5ad4:	b206      	lw	v0,483e5aec <com_send_msg_to_manager+0x28>
483e5ad6:	6c0b      	li	a0,11
483e5ad8:	0504      	addiu	a1,sp,16
483e5ada:	ea40      	jalr	v0
483e5adc:	67e6      	move	a3,a2
483e5ade:	1004      	b	483e5ae8 <com_send_msg_to_manager+0x24>
483e5ae0:	b204      	lw	v0,483e5af0 <com_send_msg_to_manager+0x2c>
483e5ae2:	6c0b      	li	a0,11
483e5ae4:	ea40      	jalr	v0
483e5ae6:	0504      	addiu	a1,sp,16
483e5ae8:	6444      	restore	32,ra
483e5aea:	e8a0      	jrc	ra
483e5aec:	5a65      	sltiu	v0,101
483e5aee:	482e      	addiu	s0,46
483e5af0:	5c25      	sltiu	a0,37
483e5af2:	482e      	addiu	s0,46

483e5af4 <com_ap_switch_deal>:
483e5af4:	f040 64fc 	save	608,ra,s0-s1
483e5af8:	ec31      	zeh	a0
483e5afa:	6a00      	li	v0,0
483e5afc:	f120 7406 	cmpi	a0,294
483e5b00:	d490      	sw	a0,576(sp)
483e5b02:	d292      	sw	v0,584(sp)
483e5b04:	6144      	btnez	483e5b8e <.LBE13+0x20>

483e5b06 <.LBB13>:
483e5b06:	b576      	lw	a1,483e5cdc <.L84+0x30>

//恢复 app_info_state_t 和 app_last_state_t
static void restore_global_status(void)
{
    uint8 temp_data[512];
    
    app_info_state_t tmp_app_info_state;
    app_last_state_t tmp_app_last_state;

    sys_vm_read(temp_data, VM_S3BT_APP_GLOBAL, sizeof(app_info_state_t) + sizeof(app_last_state_t));
483e5b08:	b276      	lw	v0,483e5ce0 <.L84+0x34>
483e5b0a:	0404      	addiu	a0,sp,16
483e5b0c:	6e1c      	li	a2,28
483e5b0e:	ea40      	jalr	v0
483e5b10:	6f12      	li	a3,18
483e5b12:	b075      	lw	s0,483e5ce4 <.L84+0x38>

    libc_memcpy(&tmp_app_info_state, temp_data, sizeof(app_info_state_t));
483e5b14:	9792      	lw	a3,584(sp)
483e5b16:	0484      	addiu	a0,sp,528
483e5b18:	0504      	addiu	a1,sp,16
483e5b1a:	e840      	jalr	s0
483e5b1c:	6e18      	li	a2,24
483e5b1e:	9792      	lw	a3,584(sp)
    libc_memcpy(&tmp_app_last_state, temp_data + sizeof(app_info_state_t), sizeof(app_last_state_t));
483e5b20:	048a      	addiu	a0,sp,552
483e5b22:	050a      	addiu	a1,sp,40
483e5b24:	e840      	jalr	s0
483e5b26:	6e04      	li	a2,4
483e5b28:	677d      	move	v1,sp

    g_app_info_state.card_state = tmp_app_info_state.card_state;
483e5b2a:	b470      	lw	a0,483e5ce8 <.L84+0x3c>
483e5b2c:	f200 a3f4 	lbu	a3,532(v1)
483e5b30:	f200 a3b9 	lbu	a1,537(v1)
    g_app_info_state.uhost_state = tmp_app_info_state.uhost_state;
    g_app_info_state.linein_state = tmp_app_info_state.linein_state;
    g_app_info_state.cable_state = tmp_app_info_state.cable_state;
    g_app_info_state.hp_state = tmp_app_info_state.hp_state;
    g_app_info_state.charge_state = tmp_app_info_state.charge_state;
483e5b34:	f200 a3d7 	lbu	a2,535(v1)
483e5b38:	f200 a335 	lbu	s1,533(v1)
483e5b3c:	c4e4      	sb	a3,4(a0)
483e5b3e:	c4a9      	sb	a1,9(a0)
483e5b40:	f200 a3fa 	lbu	a3,538(v1)
    g_app_info_state.bat_value = tmp_app_info_state.bat_value;
483e5b44:	67bd      	move	a1,sp
    g_app_info_state.cur_func_index = tmp_app_info_state.cur_func_index;
    g_app_info_state.cur_func_id = tmp_app_info_state.cur_func_id;
483e5b46:	f200 a316 	lbu	s0,534(v1)
483e5b4a:	f200 a358 	lbu	v0,536(v1)
483e5b4e:	c4c7      	sb	a2,7(a0)
483e5b50:	f220 a5c5 	lbu	a2,549(a1)
    g_app_info_state.apk_status = tmp_app_info_state.apk_status;
    g_app_info_state.verification_status = tmp_app_info_state.verification_status;
483e5b54:	c425      	sb	s1,5(a0)
483e5b56:	c4ea      	sb	a3,10(a0)
483e5b58:	f220 a523 	lbu	s1,547(a1)
483e5b5c:	f220 a3e2 	lbu	a3,546(v1)
483e5b60:	c406      	sb	s0,6(a0)
483e5b62:	c448      	sb	v0,8(a0)
483e5b64:	f220 a504 	lbu	s0,548(a1)
483e5b68:	c4d5      	sb	a2,21(a0)
483e5b6a:	f220 a546 	lbu	v0,550(a1)

483e5b6e <.LBE13>:
    g_app_info_state.need_update_playlist = tmp_app_info_state.need_update_playlist;
483e5b6e:	b661      	lw	a2,483e5cf0 <.L84+0x44>
483e5b70:	c433      	sb	s1,19(a0)
483e5b72:	f220 a529 	lbu	s1,553(a1)

    g_app_last_state.last_func_index = tmp_app_last_state.last_func_index;
483e5b76:	35ec      	sll	a1,a3,3
483e5b78:	c414      	sb	s0,20(a0)
483e5b7a:	c4f2      	sb	a3,18(a0)
483e5b7c:	c456      	sb	v0,22(a0)
483e5b7e:	e5d1      	addu	a0,a1,a2
483e5b80:	a4c1      	lbu	a2,1(a0)
483e5b82:	b05b      	lw	s0,483e5cec <.L84+0x40>
483e5b84:	6b80      	li	v1,128
483e5b86:	a4a0      	lbu	a1,0(a0)
483e5b88:	ee6d      	or	a2,v1
483e5b8a:	c021      	sb	s1,1(s0)
483e5b8c:	108f      	b	483e5cac <.L84>
483e5b8e:	b05a      	lw	s0,483e5cf4 <.L84+0x48>
483e5b90:	19f0 9600 	jal	483e5800 <com_get_cfg_func_index>
483e5b94:	a08b      	lbu	a0,11(s0)

483e5b96 <.LBB23>:
483e5b96:	b555      	lw	a1,483e5ce8 <.L84+0x3c>

483e5b98 <.LBE23>:
483e5b98:	9490      	lw	a0,576(sp)
483e5b9a:	a572      	lbu	v1,18(a1)
483e5b9c:	f120 7408 	cmpi	a0,296
483e5ba0:	d292      	sw	v0,584(sp)
483e5ba2:	d391      	sw	v1,580(sp)
483e5ba4:	610c      	btnez	483e5bbe <.LBE23+0x26>
483e5ba6:	b455      	lw	a0,483e5cf8 <.L84+0x4c>
483e5ba8:	b252      	lw	v0,483e5cf0 <.L84+0x44>
483e5baa:	a423      	lbu	s1,3(a0)
483e5bac:	302c      	sll	s0,s1,3
483e5bae:	e05d      	addu	a3,s0,v0
483e5bb0:	a7c6      	lbu	a2,6(a3)
483e5bb2:	7607      	cmpi	a2,7
483e5bb4:	615a      	btnez	483e5c6a <.L88>
483e5bb6:	b552      	lw	a1,483e5cfc <.L84+0x50>
483e5bb8:	6b01      	li	v1,1
483e5bba:	c560      	sb	v1,0(a1)
483e5bbc:	1056      	b	483e5c6a <.L88>
483e5bbe:	9190      	lw	s1,576(sp)
483e5bc0:	6a01      	li	v0,1
483e5bc2:	f100 7108 	cmpi	s1,264
483e5bc6:	6005      	bteqz	483e5bd2 <.LBE23+0x3a>
483e5bc8:	a0cc      	lbu	a2,12(s0)
483e5bca:	6a02      	li	v0,2
483e5bcc:	7601      	cmpi	a2,1
483e5bce:	6001      	bteqz	483e5bd2 <.LBE23+0x3a>
483e5bd0:	6a00      	li	v0,0
483e5bd2:	9490      	lw	a0,576(sp)
483e5bd4:	19f0 9662 	jal	483e5988 <com_ap_switch_next_index>
483e5bd8:	c04c      	sb	v0,12(s0)
483e5bda:	5a1a      	sltiu	v0,26
483e5bdc:	6722      	move	s1,v0
483e5bde:	6102      	btnez	483e5be4 <.LBE23+0x4c>
483e5be0:	9192      	lw	s1,584(sp)
483e5be2:	d191      	sw	s1,580(sp)
483e5be4:	b443      	lw	a0,483e5cf0 <.L84+0x44>
483e5be6:	322c      	sll	v0,s1,3
483e5be8:	e281      	addu	s0,v0,a0
483e5bea:	a0e2      	lbu	a3,2(s0)
483e5bec:	7701      	cmpi	a3,1
483e5bee:	610f      	btnez	483e5c0e <.LBE25+0x1c>

483e5bf0 <.LBB25>:
483e5bf0:	b344      	lw	v1,483e5d00 <.L84+0x54>

483e5bf2 <.LBE25>:
483e5bf2:	a3a0      	lbu	a1,0(v1)
483e5bf4:	250c      	beqz	a1,483e5c0e <.LBE25+0x1c>
483e5bf6:	9790      	lw	a3,576(sp)
483e5bf8:	6e00      	li	a2,0
483e5bfa:	f120 7705 	cmpi	a3,293
483e5bfe:	6101      	btnez	483e5c02 <.LBE25+0x10>
483e5c00:	46c1      	addiu	a2,a2,1
483e5c02:	f180 6c05 	li	a0,389
483e5c06:	6d80      	li	a1,128
483e5c08:	19f0 96b1 	jal	483e5ac4 <com_send_msg_to_manager>
483e5c0c:	6f01      	li	a3,1
483e5c0e:	9690      	lw	a2,576(sp)
483e5c10:	f120 7605 	cmpi	a2,293
483e5c14:	612a      	btnez	483e5c6a <.L88>

483e5c16 <.LBB27>:
483e5c16:	b034      	lw	s0,483e5ce4 <.L84+0x38>
483e5c18:	b43b      	lw	a0,483e5d04 <.L84+0x58>
483e5c1a:	6d00      	li	a1,0
483e5c1c:	f200 6e00 	li	a2,512
483e5c20:	e840      	jalr	s0
483e5c22:	6f01      	li	a3,1
483e5c24:	b438      	lw	a0,483e5d04 <.L84+0x58>
483e5c26:	b531      	lw	a1,483e5ce8 <.L84+0x3c>
483e5c28:	6e18      	li	a2,24
483e5c2a:	e840      	jalr	s0
483e5c2c:	6f00      	li	a3,0
483e5c2e:	b437      	lw	a0,483e5d08 <.L84+0x5c>
483e5c30:	b52f      	lw	a1,483e5cec <.L84+0x40>
483e5c32:	6e04      	li	a2,4
483e5c34:	e840      	jalr	s0
483e5c36:	6f00      	li	a3,0
483e5c38:	b433      	lw	a0,483e5d04 <.L84+0x58>
483e5c3a:	b02a      	lw	s0,483e5ce0 <.L84+0x34>
483e5c3c:	b528      	lw	a1,483e5cdc <.L84+0x30>
483e5c3e:	6e1c      	li	a2,28
483e5c40:	e840      	jalr	s0
483e5c42:	6f13      	li	a3,19
483e5c44:	b232      	lw	v0,483e5d0c <.L84+0x60>
483e5c46:	b433      	lw	a0,483e5d10 <.L84+0x64>
483e5c48:	a203      	lbu	s0,3(v0)
483e5c4a:	2809      	bnez	s0,483e5c5e <.LBB29>

483e5c4c <.LBB28>:
483e5c4c:	9c40      	lw	v0,0(a0)
483e5c4e:	f70f 6f01 	li	a3,32513
483e5c52:	ebeb      	neg	v1,a3
483e5c54:	ea6c      	and	v0,v1
483e5c56:	f110 6d00 	li	a1,33024
483e5c5a:	eaad      	or	v0,a1
483e5c5c:	1005      	b	483e5c68 <.LBB29+0xa>

483e5c5e <.LBB29>:
483e5c5e:	9c40      	lw	v0,0(a0)
483e5c60:	f010 6e01 	li	a2,32769
483e5c64:	eecb      	neg	a2
483e5c66:	eacc      	and	v0,a2
483e5c68:	dc40      	sw	v0,0(a0)

483e5c6a <.L88>:
483e5c6a:	67fd      	move	a3,sp
483e5c6c:	f240 a764 	lbu	v1,580(a3)
483e5c70:	b51f      	lw	a1,483e5cec <.L84+0x40>

483e5c72 <.LBB32>:
483e5c72:	b21e      	lw	v0,483e5ce8 <.L84+0x3c>

483e5c74 <.LBE32>:
483e5c74:	c561      	sb	v1,1(a1)
483e5c76:	a28c      	lbu	a0,12(v0)
483e5c78:	687f      	li	s0,127
483e5c7a:	ec0c      	and	a0,s0
483e5c7c:	c232      	sb	s1,18(v0)
483e5c7e:	6771      	move	v1,s1
483e5c80:	2401      	beqz	a0,483e5c84 <.LBE32+0x10>
483e5c82:	6b3f      	li	v1,63
483e5c84:	b41d      	lw	a0,483e5cf8 <.L84+0x4c>
483e5c86:	b524      	lw	a1,483e5d14 <.L84+0x68>
483e5c88:	c463      	sb	v1,3(a0)
483e5c8a:	b316      	lw	v1,483e5ce0 <.L84+0x34>
483e5c8c:	6e06      	li	a2,6
483e5c8e:	eb40      	jalr	v1
483e5c90:	6f13      	li	a3,19

483e5c92 <.LBB38>:
483e5c92:	b018      	lw	s0,483e5cf0 <.L84+0x44>
483e5c94:	342c      	sll	a0,s1,3
483e5c96:	e405      	addu	s1,a0,s0
483e5c98:	a1a6      	lbu	a1,6(s1)
483e5c9a:	b614      	lw	a2,483e5ce8 <.L84+0x3c>

483e5c9c <.LBE38>:
483e5c9c:	b311      	lw	v1,483e5ce0 <.L84+0x34>
483e5c9e:	c6b3      	sb	a1,19(a2)
483e5ca0:	0c0b      	la	a0,483e5ccc <.L84+0x20>
483e5ca2:	6e02      	li	a2,2
483e5ca4:	eb40      	jalr	v1
483e5ca6:	6f4b      	li	a3,75
483e5ca8:	a1a0      	lbu	a1,0(s1)
483e5caa:	a1c1      	lbu	a2,1(s1)

483e5cac <.L84>:
483e5cac:	b112      	lw	s1,483e5cf4 <.L84+0x48>
483e5cae:	6800      	li	s0,0
483e5cb0:	c110      	sb	s0,16(s1)
483e5cb2:	f180 6c01 	li	a0,385
483e5cb6:	19f0 96b1 	jal	483e5ac4 <com_send_msg_to_manager>
483e5cba:	6f00      	li	a3,0
483e5cbc:	f020 c100 	sb	s0,32(s1)
483e5cc0:	f020 c101 	sb	s0,33(s1)
483e5cc4:	f040 647c 	restore	608,ra,s0-s1
483e5cc8:	e8a0      	jrc	ra
483e5cca:	0000      	addiu	s0,sp,0
483e5ccc:	493c      	addiu	s1,60
483e5cce:	203e      	beqz	s0,483e5d4c <.L110+0x10>
483e5cd0:	7061      	cmpi	s0,97
483e5cd2:	7320      	cmpi	v1,32
483e5cd4:	6977      	li	s1,119
483e5cd6:	6620      	0x6620
483e5cd8:	6375      	addiu	sp,936
483e5cda:	003a      	addiu	s0,sp,232
483e5cdc:	0000      	addiu	s0,sp,0
483e5cde:	0010      	addiu	s0,sp,64
483e5ce0:	e901      	sdbbp	8
483e5ce2:	bfc1      	lwu	a2,4(a3)
483e5ce4:	e905      	break	8
483e5ce6:	bfc1      	lwu	a2,4(a3)
483e5ce8:	a0c0      	lbu	a2,0(s0)
483e5cea:	9fc1      	lw	a2,4(a3)
483e5cec:	a184      	lbu	a0,4(s1)
483e5cee:	9fc1      	lw	a2,4(a3)
483e5cf0:	5d80      	sltiu	a1,128
483e5cf2:	483e      	addiu	s0,62
483e5cf4:	a19c      	lbu	a0,28(s1)
483e5cf6:	9fc1      	lw	a2,4(a3)
483e5cf8:	a1c4      	lbu	a2,4(s1)
483e5cfa:	9fc1      	lw	a2,4(a3)
483e5cfc:	a1ca      	lbu	a2,10(s1)
483e5cfe:	9fc1      	lw	a2,4(a3)
483e5d00:	a094      	lbu	a0,20(s0)
483e5d02:	9fc1      	lw	a2,4(a3)
483e5d04:	5800      	sltiu	s0,0
483e5d06:	9fc3      	lw	a2,12(a3)
483e5d08:	5818      	sltiu	s0,24
483e5d0a:	9fc3      	lw	a2,12(a3)
483e5d0c:	a2fc      	lbu	a3,28(v0)
483e5d0e:	9fc1      	lw	a2,4(a3)
483e5d10:	0048      	addiu	s0,sp,288
483e5d12:	c002      	sb	s0,2(s0)
483e5d14:	0000      	addiu	s0,sp,0
483e5d16:	0004      	addiu	s0,sp,16

483e5d18 <com_check_ap_func_index_valid>:
483e5d18:	64f4      	save	32,ra,s0-s1
}

uint32 com_check_ap_func_index_valid(void)
{
483e5d1a:	b217      	lw	v0,483e5d74 <.L110+0x38>
    uint32 cur_index;
    uint32 next_ap_id;
    
    //del  cur_index = ((act_readl(RTC_BAK0) & (0xff << MY_RTC_FUNC_INDEX)) >> MY_RTC_FUNC_INDEX);
    cur_index = g_config_var.ap_id;
483e5d1c:	a223      	lbu	s1,3(v0)
483e5d1e:	591a      	sltiu	s1,26
    if(cur_index >= sizeof(ap_switch_info) / sizeof(ap_switch_info_t))
483e5d20:	600d      	bteqz	483e5d3c <.L110>
483e5d22:	b316      	lw	v1,483e5d78 <.L110+0x3c>
    {
        goto err_index;    
    }

    next_ap_id = ap_switch_info[cur_index].ap_id;
483e5d24:	352c      	sll	a1,s1,3
483e5d26:	e571      	addu	a0,a1,v1
483e5d28:	a400      	lbu	s0,0(a0)
483e5d2a:	b215      	lw	v0,483e5d7c <.L110+0x40>

    libc_print("ESD next ap id: ", next_ap_id, 2);
483e5d2c:	0c09      	la	a0,483e5d50 <.L110+0x14>
483e5d2e:	67b0      	move	a1,s0
483e5d30:	6e02      	li	a2,2
483e5d32:	ea40      	jalr	v0
483e5d34:	6f4b      	li	a3,75
483e5d36:	700a      	cmpi	s0,10

    //过滤config ap的ESD处理流程
    if(next_ap_id == APP_ID_CONFIG)
483e5d38:	6a01      	li	v0,1
    {
        goto err_index;
    }

    return TRUE;
483e5d3a:	6107      	btnez	483e5d4a <.L110+0xe>

483e5d3c <.L110>:
483e5d3c:	b210      	lw	v0,483e5d7c <.L110+0x40>
    
err_index:
    PRINT_INFO_INT("err index", cur_index);
483e5d3e:	0c0a      	la	a0,483e5d64 <.L110+0x28>
483e5d40:	67b1      	move	a1,s1
483e5d42:	6e02      	li	a2,2
483e5d44:	ea40      	jalr	v0
483e5d46:	6f4b      	li	a3,75
483e5d48:	6a00      	li	v0,0

    return FALSE;
483e5d4a:	6474      	restore	32,ra,s0-s1
}
483e5d4c:	e8a0      	jrc	ra
483e5d4e:	0000      	addiu	s0,sp,0
483e5d50:	5345      	slti	v1,69
483e5d52:	2044      	beqz	s0,483e5ddc <ap_switch_info+0x5c>
483e5d54:	656e      	move	t3,a2
483e5d56:	7478      	cmpi	a0,120
483e5d58:	6120      	btnez	483e5d9a <ap_switch_info+0x1a>
483e5d5a:	2070      	beqz	s0,483e5e3c <ap_switch_info+0xbc>
483e5d5c:	6469      	restore	72,ra,s0
483e5d5e:	203a      	beqz	s0,483e5dd4 <ap_switch_info+0x54>
483e5d60:	0000      	addiu	s0,sp,0
483e5d62:	0000      	addiu	s0,sp,0
483e5d64:	493c      	addiu	s1,60
483e5d66:	203e      	beqz	s0,483e5de4 <ap_switch_info+0x64>
483e5d68:	7265      	cmpi	v0,101
483e5d6a:	2072      	beqz	s0,483e5e50 <com_battery_charge_change_deal>
483e5d6c:	6e69      	li	a2,105
483e5d6e:	6564      	move	v1,a0
483e5d70:	0078      	addiu	s0,sp,480
483e5d72:	0000      	addiu	s0,sp,0
483e5d74:	a1c4      	lbu	a2,4(s1)
483e5d76:	9fc1      	lw	a2,4(a3)
483e5d78:	5d80      	sltiu	a1,128
483e5d7a:	483e      	addiu	s0,62
483e5d7c:	e901      	sdbbp	8
483e5d7e:	bfc1      	lwu	a2,4(a3)

483e5d80 <ap_switch_info>:
483e5d80:	0002 0001 0106 0000 0a00 0001 0102 0001     ................
483e5d90:	0900 0001 0103 0002 0001 0001 0104 0003     ................
483e5da0:	0004 0001 0105 0004 0005 0001 0109 0005     ................
483e5db0:	0014 0001 012a 001f 010a 0001 010a 0006     ....*...........
483e5dc0:	020a 0001 010b 0006 030a 0001 0125 0006     ............%...
483e5dd0:	040a 0001 0129 0006 0006 0001 010c 0007     ....)...........
483e5de0:	0016 0001 0119 0008 0116 0001 011c 0008     ................
483e5df0:	0103 0001 0108 000e 000c 0001 0117 000f     ................
483e5e00:	0507 0001 010f 000b 0307 0000 0110 000c     ................
483e5e10:	0707 0001 0111 000d 0607 0001 0112 0013     ................
483e5e20:	0407 0000 0113 0014 0807 0001 0114 0015     ................
483e5e30:	0b00 0001 010d 000a 0c00 0001 010e 0009     ................
483e5e40:	0003 0001 0123 000e 0015 0001 00a1 000f     ....#...........

483e5e50 <com_battery_charge_change_deal>:
483e5e50:	64f7      	save	56,ra,s0-s1
483e5e52:	6724      	move	s1,a0
483e5e54:	e911      	zeb	s1
483e5e56:	7101      	cmpi	s1,1
483e5e58:	ed11      	zeb	a1
483e5e5a:	6758      	move	v0,t8
483e5e5c:	d507      	sw	a1,28(sp)
483e5e5e:	d208      	sw	v0,32(sp)
483e5e60:	220e      	beqz	v0,483e5e7e <com_battery_charge_change_deal+0x2e>
483e5e62:	b436      	lw	a0,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5e64:	a469      	lbu	v1,9(a0)
483e5e66:	7301      	cmpi	v1,1
483e5e68:	6113      	btnez	483e5e90 <com_battery_charge_change_deal+0x40>
483e5e6a:	6d00      	li	a1,0
483e5e6c:	b034      	lw	s0,483e5f3c <com_battery_charge_change_deal+0xec>
483e5e6e:	67c5      	move	a2,a1
483e5e70:	e840      	jalr	s0
483e5e72:	6c01      	li	a0,1
483e5e74:	6c00      	li	a0,0
483e5e76:	6d01      	li	a1,1
483e5e78:	e840      	jalr	s0
483e5e7a:	67c4      	move	a2,a0
483e5e7c:	1009      	b	483e5e90 <com_battery_charge_change_deal+0x40>
483e5e7e:	b62f      	lw	a2,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5e80:	a6a9      	lbu	a1,9(a2)
483e5e82:	7501      	cmpi	a1,1
483e5e84:	6005      	bteqz	483e5e90 <com_battery_charge_change_deal+0x40>
483e5e86:	6c01      	li	a0,1
483e5e88:	b22d      	lw	v0,483e5f3c <com_battery_charge_change_deal+0xec>
483e5e8a:	67a4      	move	a1,a0
483e5e8c:	ea40      	jalr	v0
483e5e8e:	6e00      	li	a2,0
483e5e90:	291b      	bnez	s1,483e5ec8 <com_battery_charge_change_deal+0x78>
483e5e92:	9707      	lw	a3,28(sp)
483e5e94:	5f02      	sltiu	a3,2
483e5e96:	6048      	bteqz	483e5f28 <com_battery_charge_change_deal+0xd8>
483e5e98:	b328      	lw	v1,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5e9a:	a389      	lbu	a0,9(v1)
483e5e9c:	2c04      	bnez	a0,483e5ea6 <com_battery_charge_change_deal+0x56>
483e5e9e:	a3aa      	lbu	a1,10(v1)
483e5ea0:	9307      	lw	v1,28(sp)
483e5ea2:	eba3      	sltu	v1,a1
483e5ea4:	6041      	bteqz	483e5f28 <com_battery_charge_change_deal+0xd8>
483e5ea6:	b527      	lw	a1,483e5f40 <com_battery_charge_change_deal+0xf0>
483e5ea8:	67dd      	move	a2,sp
483e5eaa:	6c01      	li	a0,1
483e5eac:	ec8b      	neg	a0
483e5eae:	6b74      	li	v1,116
483e5eb0:	f1e0 6f14 	li	a3,500
483e5eb4:	f3a1 6a18 	li	v0,3000
483e5eb8:	c690      	sb	a0,16(a2)
483e5eba:	cd64      	sh	v1,8(a1)
483e5ebc:	cee9      	sh	a3,18(a2)
483e5ebe:	ce4a      	sh	v0,20(a2)
483e5ec0:	6c01      	li	a0,1
483e5ec2:	6d02      	li	a1,2
483e5ec4:	0604      	addiu	a2,sp,16
483e5ec6:	102e      	b	483e5f24 <com_battery_charge_change_deal+0xd4>
483e5ec8:	7102      	cmpi	s1,2
483e5eca:	6108      	btnez	483e5edc <com_battery_charge_change_deal+0x8c>
483e5ecc:	b21b      	lw	v0,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5ece:	a2c9      	lbu	a2,9(v0)
483e5ed0:	7602      	cmpi	a2,2
483e5ed2:	602a      	bteqz	483e5f28 <com_battery_charge_change_deal+0xd8>
483e5ed4:	b71b      	lw	a3,483e5f40 <com_battery_charge_change_deal+0xf0>
483e5ed6:	6c00      	li	a0,0
483e5ed8:	cf82      	sh	a0,4(a3)
483e5eda:	1026      	b	483e5f28 <com_battery_charge_change_deal+0xd8>
483e5edc:	9508      	lw	a1,32(sp)
483e5ede:	2d24      	bnez	a1,483e5f28 <com_battery_charge_change_deal+0xd8>
483e5ee0:	b616      	lw	a2,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5ee2:	a669      	lbu	v1,9(a2)
483e5ee4:	7301      	cmpi	v1,1
483e5ee6:	6020      	bteqz	483e5f28 <com_battery_charge_change_deal+0xd8>
483e5ee8:	b417      	lw	a0,483e5f44 <com_battery_charge_change_deal+0xf4>
483e5eea:	6f0a      	li	a3,10
483e5eec:	9c40      	lw	v0,0(a0)
483e5eee:	a201      	lbu	s0,1(v0)
483e5ef0:	e8ee      	xor	s0,a3
483e5ef2:	5801      	sltiu	s0,1
483e5ef4:	6718      	move	s0,t8
483e5ef6:	2818      	bnez	s0,483e5f28 <com_battery_charge_change_deal+0xd8>
483e5ef8:	b614      	lw	a2,483e5f48 <com_battery_charge_change_deal+0xf8>
483e5efa:	b315      	lw	v1,483e5f4c <com_battery_charge_change_deal+0xfc>
483e5efc:	9ea0      	lw	a1,0(a2)
483e5efe:	6a09      	li	v0,9
483e5f00:	ed6c      	and	a1,v1
483e5f02:	dea0      	sw	a1,0(a2)
483e5f04:	9ee0      	lw	a3,0(a2)
483e5f06:	ec4b      	neg	a0,v0
483e5f08:	ef8c      	and	a3,a0
483e5f0a:	6b84      	li	v1,132
483e5f0c:	67bd      	move	a1,sp
483e5f0e:	b211      	lw	v0,483e5f50 <com_battery_charge_change_deal+0x100>
483e5f10:	dee0      	sw	a3,0(a2)
483e5f12:	cd6c      	sh	v1,24(a1)
483e5f14:	6c05      	li	a0,5
483e5f16:	0506      	addiu	a1,sp,24
483e5f18:	67d8      	move	a2,t8
483e5f1a:	ea40      	jalr	v0
483e5f1c:	6f18      	li	a3,24
483e5f1e:	6c01      	li	a0,1
483e5f20:	67a4      	move	a1,a0
483e5f22:	67d0      	move	a2,s0
483e5f24:	b206      	lw	v0,483e5f3c <com_battery_charge_change_deal+0xec>
483e5f26:	eac0      	jalrc	v0
483e5f28:	679d      	move	a0,sp
483e5f2a:	b604      	lw	a2,483e5f38 <com_battery_charge_change_deal+0xe8>
483e5f2c:	a4fc      	lbu	a3,28(a0)
483e5f2e:	c629      	sb	s1,9(a2)
483e5f30:	c6ea      	sb	a3,10(a2)
483e5f32:	6477      	restore	56,ra,s0-s1
483e5f34:	e8a0      	jrc	ra
483e5f36:	0000      	addiu	s0,sp,0
483e5f38:	a0c0      	lbu	a2,0(s0)
483e5f3a:	9fc1      	lw	a2,4(a3)
483e5f3c:	5885      	sltiu	s0,133
483e5f3e:	485e      	addiu	s0,94
483e5f40:	a0dc      	lbu	a2,28(s0)
483e5f42:	9fc1      	lw	a2,4(a3)
483e5f44:	9990      	lw	a0,64(s1)
483e5f46:	9fc1      	lw	a2,4(a3)
483e5f48:	001c      	addiu	s0,sp,112
483e5f4a:	c005      	sb	s0,5(s0)
483e5f4c:	ffff      	daddiu	a3,sp,124
483e5f4e:	ff0f      	daddiu	s0,sp,60
483e5f50:	e901      	sdbbp	8
483e5f52:	bfc1      	lwu	a2,4(a3)

483e5f54 <com_battery_charge_full_check>:
483e5f54:	64c4      	save	32,ra
483e5f56:	b312      	lw	v1,483e5f9c <com_battery_charge_full_check+0x48>
483e5f58:	aba2      	lhu	a1,4(v1)
483e5f5a:	4541      	addiu	v0,a1,1
483e5f5c:	cb42      	sh	v0,4(v1)
483e5f5e:	ea31      	zeh	v0
483e5f60:	5a05      	sltiu	v0,5
483e5f62:	610a      	btnez	483e5f78 <com_battery_charge_full_check+0x24>
483e5f64:	5c0a      	sltiu	a0,10
483e5f66:	6008      	bteqz	483e5f78 <com_battery_charge_full_check+0x24>
483e5f68:	6c00      	li	a0,0
483e5f6a:	cb82      	sh	a0,4(v1)
483e5f6c:	b20d      	lw	v0,483e5fa0 <com_battery_charge_full_check+0x4c>
483e5f6e:	6c00      	li	a0,0
483e5f70:	67a4      	move	a1,a0
483e5f72:	67c4      	move	a2,a0
483e5f74:	ea40      	jalr	v0
483e5f76:	67e4      	move	a3,a0
483e5f78:	b309      	lw	v1,483e5f9c <com_battery_charge_full_check+0x48>
483e5f7a:	abc2      	lhu	a2,4(v1)
483e5f7c:	5e78      	sltiu	a2,120
483e5f7e:	610b      	btnez	483e5f96 <com_battery_charge_full_check+0x42>
483e5f80:	6d00      	li	a1,0
483e5f82:	cba2      	sh	a1,4(v1)
483e5f84:	6ff0      	li	a3,240
483e5f86:	677d      	move	v1,sp
483e5f88:	b207      	lw	v0,483e5fa4 <com_battery_charge_full_check+0x50>
483e5f8a:	cbe8      	sh	a3,16(v1)
483e5f8c:	6c05      	li	a0,5
483e5f8e:	0504      	addiu	a1,sp,16
483e5f90:	6e00      	li	a2,0
483e5f92:	ea40      	jalr	v0
483e5f94:	6f18      	li	a3,24
483e5f96:	6444      	restore	32,ra
483e5f98:	e8a0      	jrc	ra
483e5f9a:	0000      	addiu	s0,sp,0
483e5f9c:	a0dc      	lbu	a2,28(s0)
483e5f9e:	9fc1      	lw	a2,4(a3)
483e5fa0:	e90d      	or	s1,s0
483e5fa2:	bfc1      	lwu	a2,4(a3)
483e5fa4:	e901      	sdbbp	8
483e5fa6:	bfc1      	lwu	a2,4(a3)

483e5fa8 <com_btmanager_call_back_auto_connect>:
483e5fa8:	e8a0      	jrc	ra
	...

483e5fac <send_cmd_to_other>:

#ifdef ENABLE_TRUE_WIRELESS_STEREO
//tws下退出打电话，主箱回连副箱
void __section__(".call_auto_conn") com_btmanager_call_back_auto_connect(void)
{
483e5fac:	64c4      	save	32,ra
#if 0	
    uint8 i;

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
    {
        if (libc_memcmp(&g_bt_stack_cur_info.rmt_dev[i].addr.bytes[3],
            &g_bt_auto_connect_ctrl.dev_info[i].remote_addr.bytes[3], 3) == 0)
        {
            g_bt_auto_connect_ctrl.need_auto_connect = 0x01;
            g_bt_auto_connect_ctrl.auto_connect_type = AUTO_CONNECT_TYPE_TIMEOUT;
            g_bt_auto_connect_ctrl.connect_tick_cnt=40;
            //PRINT_DATA(g_bt_auto_connect_ctrl.dev_info[i].remote_addr.bytes,6);
            PRINT_INFO("auto 1");
            g_bt_auto_connect_ctrl.dev_info[i].conn_flag = 1; 
        }	

    }
#endif
}

void __section__(".call_auto_conn") send_cmd_to_other(uint8 op)
{
483e5fae:	677d      	move	v1,sp
     msg_apps_t msg;
     msg.type = MSG_BTSTACK_TWS_SUB_MODE_FLAG;
     msg.content.data[0] = op;
483e5fb0:	c394      	sb	a0,20(v1)
483e5fb2:	f0a1 6d06 	li	a1,2214
483e5fb6:	6c00      	li	a0,0
     send_sync_msg_btmanager(NULL, &msg, NULL, 0);
483e5fb8:	b204      	lw	v0,483e5fc8 <send_cmd_to_other+0x1c>
483e5fba:	d504      	sw	a1,16(sp)
483e5fbc:	67c4      	move	a2,a0
483e5fbe:	0504      	addiu	a1,sp,16
483e5fc0:	ea40      	jalr	v0
483e5fc2:	67e4      	move	a3,a0
483e5fc4:	6444      	restore	32,ra
483e5fc6:	e8a0      	jrc	ra
483e5fc8:	0d15      	la	a1,483e6018 <send_mod_flag_to_other+0x4c>
483e5fca:	bfc1      	lwu	a2,4(a3)

483e5fcc <send_mod_flag_to_other>:
483e5fcc:	64c3      	save	24,ra
483e5fce:	6d00      	li	a1,0
483e5fd0:	b208      	lw	v0,483e5ff0 <send_mod_flag_to_other+0x24>
483e5fd2:	67c5      	move	a2,a1
483e5fd4:	0c06      	la	a0,483e5fec <send_mod_flag_to_other+0x20>
483e5fd6:	ea40      	jalr	v0
483e5fd8:	6f4b      	li	a3,75
483e5fda:	b307      	lw	v1,483e5ff4 <send_mod_flag_to_other+0x28>
483e5fdc:	eb40      	jalr	v1
483e5fde:	6c01      	li	a0,1
483e5fe0:	b306      	lw	v1,483e5ff8 <send_mod_flag_to_other+0x2c>
483e5fe2:	a380      	lbu	a0,0(v1)
483e5fe4:	4441      	addiu	v0,a0,1
483e5fe6:	c340      	sb	v0,0(v1)
483e5fe8:	6443      	restore	24,ra
483e5fea:	e8a0      	jrc	ra
483e5fec:	6223      	sw	ra,140(sp)
483e5fee:	0031      	addiu	s0,sp,196
483e5ff0:	e901      	sdbbp	8
483e5ff2:	bfc1      	lwu	a2,4(a3)
483e5ff4:	5fad      	sltiu	a3,173
483e5ff6:	483e      	addiu	s0,62
483e5ff8:	a35e      	lbu	v0,30(v1)
483e5ffa:	9fc1      	lw	a2,4(a3)
483e5ffc:	0000      	addiu	s0,sp,0
	...
Disassembly of section BANK_UI_1_16:

48425800 <com_rcp_dispatch_invalid>:
48425800:	64c3      	save	24,ra

/*RCP 远程控制数据包解析处理*/
app_result_e com_rcp_dispatch_bank(rmt_ctrl_pkg_t *p_rcp)
{
    rmt_ctrl_pkg_t cur_rcp, dispatch_rcp;
    uint16 cur_len, head_len;
    rcp_state_e cur_rcp_state;
    bool dispatch_rcp_flag = FALSE;
    app_result_e result = RESULT_NULL;
    int cmp_ret;

    //音箱端验证APK/APP
    dispatch_again:
    if (g_app_info_state.verification_status == VERIFICATION_PASS)
    {
        if ((g_rcp_long_buffer_flag == FALSE) && (p_rcp->rcp_len < 4))//RCP_COMMAND_HEAD_SIZE
        {
            com_btmanager_sppble_read(g_rcp_long_buffer, p_rcp->rcp_len);
            //非法包，直接丢弃；直通模式需要在这里处理
            com_rcp_dispatch_invalid(g_rcp_long_buffer, p_rcp->rcp_len, p_rcp->rcp_flag);
            goto rcp_deal_ok;
        }
    }
    else
    {
        #if 1
        if ((g_bt_stack_cur_info.spp_con_flag != 0)
            && ((uint8) com_get_config_default(BTMANAGER_VERIFICATION_APK_ENABLE) == 0))       
        #else
        if (((g_bt_stack_cur_info.rmt_dev[0].serv_conn & SPP_CONNECTED) != 0)
            && ((uint8) com_get_config_default(BTMANAGER_VERIFICATION_APK_ENABLE) == 0))        
        #endif
        {
            g_app_info_state.verification_status = VERIFICATION_PASS;
            PRINT_INFO("RCP VERIFICATION NEEDN'T");
            goto dispatch_again;
        }

        //如果验证失败，就忽略后续RCP，并且后台引擎会自动断开APK/APP
        if (g_app_info_state.verification_status == VERIFICATION_FAIL)
        {
            com_btmanager_sppble_read(g_rcp_long_buffer, p_rcp->rcp_len);
        }
        else //正在验证
        {
            if (p_rcp->rcp_len >= 8)
            {
                com_btmanager_sppble_read(g_rcp_long_buffer, 8);

                sys_os_sched_lock();
                cmp_ret = libc_memcmp(g_rcp_long_buffer, "01234567", 8);
                sys_os_sched_unlock();
                if (cmp_ret == 0)
                {
                    g_app_info_state.verification_status = VERIFICATION_PASS;
                    PRINT_INFO("RCP VERIFICATION PASS");

                    if (p_rcp->rcp_len > 8)
                    {
                        PRINT_INFO("RCP VERIFICATION AFTER");
                        p_rcp->rcp_data = (void *) ((uint8 *) p_rcp->rcp_data + 8);
                        p_rcp->rcp_len = p_rcp->rcp_len - 8;
                        goto dispatch_again;
                    }
                }
                else
                {
                    PRINT_INFO("RCP VERIFICATION INVALID"); //只要求在验证超时之前接收到验证包即可，允许收到非法包

                    if (p_rcp->rcp_len > 8)
                    {
                        com_btmanager_sppble_read(g_rcp_long_buffer + 8, p_rcp->rcp_len - 8);
                    }
                }
            }
            else
            {
                com_btmanager_sppble_read(g_rcp_long_buffer, p_rcp->rcp_len);
            }
        }

        //非法包，直接丢弃；直通模式需要在这里处理
        com_rcp_dispatch_invalid(g_rcp_long_buffer, p_rcp->rcp_len, p_rcp->rcp_flag);
        goto rcp_deal_ok;
    }

    cur_rcp.rcp_data = p_rcp->rcp_data;
    cur_rcp.rcp_len = p_rcp->rcp_len;
    //APK可能将多个命令合并为一个 RCP 发送过来
    while (cur_rcp.rcp_len > 0)
    {
        //正在缓冲RCP包
        if (g_rcp_long_buffer_flag == TRUE)
        {
            if ((g_rcp_long_index + cur_rcp.rcp_len) >= g_rcp_long_length)
            {
                cur_len = g_rcp_long_length - g_rcp_long_index;
                dispatch_rcp_flag = TRUE;
            }
            else
            {
                cur_len = cur_rcp.rcp_len;
            }

            com_btmanager_sppble_read(g_rcp_long_buffer + g_rcp_long_index, cur_len);
            //在缓存命令时，如果丢掉一包数据，会用有用命令填补，这里为了防止丢失有用命令
            if (cur_rcp.rcp_len == RCP_COMMAND_HEAD_SIZE)
            {             
                head_len = RCP_COMMAND_HEAD_SIZE;
                cur_rcp_state = com_check_valid_rcp(g_rcp_long_buffer + g_rcp_long_index, head_len);
                if (cur_rcp_state == RCP_STATE_OK)
                {
                    
                    libc_memcpy(g_rcp_long_buffer, g_rcp_long_buffer + g_rcp_long_index, head_len);
                    g_rcp_long_length = COMMAND_LENGTH(g_rcp_long_buffer);
                    dispatch_rcp_flag = TRUE;
                }              
            }     
            g_rcp_long_index += cur_len;
        }
        else
        {
            //检验是否合法 RCP  少于8字节的无用命令丢弃 
            if (cur_rcp.rcp_len >= RCP_COMMAND_HEAD_SIZE)
            {
                head_len = RCP_COMMAND_HEAD_SIZE;
            }
            else
            {
                head_len = cur_rcp.rcp_len;
            }
            com_btmanager_sppble_read(g_rcp_long_buffer, head_len);

            check_again:

            if (cur_rcp.rcp_len < 8)
            {
                cur_len = cur_rcp.rcp_len;
                goto drop_tail_package;
            }

            cur_rcp_state = com_check_valid_rcp(g_rcp_long_buffer, cur_rcp.rcp_len);
            if (cur_rcp_state == RCP_STATE_OK)
            {
                g_rcp_long_length = COMMAND_LENGTH(g_rcp_long_buffer);
                if (g_rcp_long_length > head_len)
                {
                    com_btmanager_sppble_read(g_rcp_long_buffer + head_len, g_rcp_long_length - head_len);
                }
                cur_len = g_rcp_long_length;
                dispatch_rcp_flag = TRUE;
            }
            else
            {
                if (cur_rcp_state == RCP_STATE_INVALID)
                {
                    //有可能是验证包+其他正常命令包，这时就需要将验证包过滤掉，继续处理正常包
                    sys_os_sched_lock();
                    cmp_ret = libc_memcmp(g_rcp_long_buffer, "01234567", 8);
                    sys_os_sched_unlock();
                    if (cmp_ret == 0)
                    {
                        PRINT_INFO("RCP VERIFICATION AFTER");
                        libc_memcpy(g_rcp_long_buffer, g_rcp_long_buffer + 8, 8);

                        cur_rcp.rcp_data = (void *) ((uint8 *) cur_rcp.rcp_data + 8);
                        cur_rcp.rcp_len = cur_rcp.rcp_len - 8;
                        head_len = RCP_COMMAND_HEAD_SIZE - 8;
                        goto check_again;
                    }
                }

                if (cur_rcp.rcp_len > head_len)
                {
                    com_btmanager_sppble_read(g_rcp_long_buffer + head_len, cur_rcp.rcp_len - head_len);
                }
                cur_len = cur_rcp.rcp_len;

                if (cur_rcp_state == RCP_STATE_HEAD)
                { //分段传输段首
                    g_rcp_long_length = COMMAND_LENGTH(g_rcp_long_buffer);
                    g_rcp_long_index = cur_len;
                    g_rcp_long_buffer_flag = TRUE;
                }
                else
                { //非法包，直接丢弃；直通模式需要在这里处理
                    drop_tail_package:
                    com_rcp_dispatch_invalid(g_rcp_long_buffer, p_rcp->rcp_len, p_rcp->rcp_flag);
                }
            }
        }

        if (dispatch_rcp_flag == TRUE)
        {
            dispatch_rcp.rcp_data = g_rcp_long_buffer;
            dispatch_rcp.rcp_len = g_rcp_long_length;

            //分发给RCP命令解析
            result = com_rcp_cmd_dispatch(&dispatch_rcp);

            g_rcp_long_buffer_flag = FALSE;
            dispatch_rcp_flag = FALSE;
        }

        //去掉当前命令，看看是否还有多余数据，如果有则接着处理
        cur_rcp.rcp_data = (void *) ((uint8 *) cur_rcp.rcp_data + cur_len);
        cur_rcp.rcp_len = cur_rcp.rcp_len - cur_len;
    }
    
    if (g_rcp_long_buffer_flag == 1)
    {
        result= RESULT_RCP_LC_WAIT;
    }

    rcp_deal_ok:

    return result;
}

//非法包，直接丢弃；直通模式需要在这里处理
//void com_rcp_dispatch_invalid(uint8 *rcp_data, uint16 rcp_len)
void com_rcp_dispatch_invalid(uint8 *rcp_data, uint16 rcp_len, uint8 rcp_serv)
{
48425802:	ee11      	zeb	a2
48425804:	464f      	addiu	v0,a2,-1
#if 0
    PRINT_INFO_INT("invalid rcp : ", rcp_serv);
    PRINT_DATA(rcp_data, rcp_len);
#endif
    if ( (rcp_serv < RCP_SERVICE_MAX) &&(rcp_serv!=RCP_ACT_SERV_FLAG)&& (g_app_ext_serv_cb[rcp_serv] != NULL) )
48425806:	5a0e      	sltiu	v0,14
48425808:	ed31      	zeh	a1
4842580a:	6006      	bteqz	48425818 <com_rcp_dispatch_invalid+0x18>
4842580c:	b304      	lw	v1,4842581c <com_rcp_dispatch_invalid+0x1c>
4842580e:	32c8      	sll	v0,a2,2
48425810:	e27d      	addu	a3,v0,v1
48425812:	9f40      	lw	v0,0(a3)
48425814:	2201      	beqz	v0,48425818 <com_rcp_dispatch_invalid+0x18>
48425816:	eac0      	jalrc	v0
    {
        g_app_ext_serv_cb[rcp_serv](rcp_data, rcp_len, rcp_serv);
48425818:	6443      	restore	24,ra
    }
}
4842581a:	e8a0      	jrc	ra
4842581c:	a254      	lbu	v0,20(v0)
4842581e:	9fc1      	lw	a2,4(a3)

48425820 <com_rcp_dispatch_bank>:
48425820:	f004 64f8 	save	a0,64,ra,s0-s1
48425824:	6a00      	li	v0,0
48425826:	d20a      	sw	v0,40(sp)
48425828:	d209      	sw	v0,36(sp)

4842582a <.L4>:
4842582a:	b0d8      	lw	s0,48425b88 <.L7+0x8c>
4842582c:	a075      	lbu	v1,21(s0)
4842582e:	7302      	cmpi	v1,2
48425830:	610d      	btnez	4842584c <.L4+0x22>
48425832:	b5d7      	lw	a1,48425b8c <.L7+0x90>
48425834:	a580      	lbu	a0,0(a1)
48425836:	2c72      	bnez	a0,4842591c <.L4+0xf2>
48425838:	9610      	lw	a2,64(sp)
4842583a:	aea2      	lhu	a1,4(a2)
4842583c:	5d04      	sltiu	a1,4
4842583e:	606e      	bteqz	4842591c <.L4+0xf2>
48425840:	b0d4      	lw	s0,48425b90 <.L7+0x94>
48425842:	b2d5      	lw	v0,48425b94 <.L7+0x98>
48425844:	ea40      	jalr	v0
48425846:	9880      	lw	a0,0(s0)
48425848:	9880      	lw	a0,0(s0)
4842584a:	1062      	b	48425910 <.L4+0xe6>
4842584c:	b3d4      	lw	v1,48425b9c <.L7+0xa0>
4842584e:	f020 a3ec 	lbu	a3,44(v1)
48425852:	270f      	beqz	a3,48425872 <.L4+0x48>
48425854:	6cff      	li	a0,255
48425856:	b2d3      	lw	v0,48425ba0 <.L7+0xa4>
48425858:	ea40      	jalr	v0
4842585a:	4c4b      	addiu	a0,75
4842585c:	67c2      	move	a2,v0
4842585e:	ee11      	zeb	a2
48425860:	2e08      	bnez	a2,48425872 <.L4+0x48>
48425862:	6c02      	li	a0,2
48425864:	c095      	sb	a0,21(s0)
48425866:	b0d0      	lw	s0,48425ba4 <.L7+0xa8>
48425868:	0ca7      	la	a0,48425b04 <.L7+0x8>
4842586a:	67a6      	move	a1,a2
4842586c:	e840      	jalr	s0
4842586e:	6f4b      	li	a3,75
48425870:	17dc      	b	4842582a <.L4>
48425872:	b7c6      	lw	a3,48425b88 <.L7+0x8c>
48425874:	9610      	lw	a2,64(sp)
48425876:	a7b5      	lbu	a1,21(a3)
48425878:	7503      	cmpi	a1,3
4842587a:	aea2      	lhu	a1,4(a2)
4842587c:	6103      	btnez	48425884 <.L4+0x5a>
4842587e:	b3c5      	lw	v1,48425b90 <.L7+0x94>
48425880:	9b80      	lw	a0,0(v1)
48425882:	1042      	b	48425908 <.L4+0xde>
48425884:	b2c3      	lw	v0,48425b90 <.L7+0x94>
48425886:	5d08      	sltiu	a1,8
48425888:	9a80      	lw	a0,0(v0)
4842588a:	613e      	btnez	48425908 <.L4+0xde>
4842588c:	b1c2      	lw	s1,48425b94 <.L7+0x98>
4842588e:	6d08      	li	a1,8
48425890:	e940      	jalr	s1
48425892:	6702      	move	s0,v0
48425894:	6c00      	li	a0,0
48425896:	b1c4      	lw	s1,48425ba4 <.L7+0xa8>
48425898:	67a4      	move	a1,a0
4842589a:	67c4      	move	a2,a0
4842589c:	e940      	jalr	s1
4842589e:	6f33      	li	a3,51
484258a0:	9880      	lw	a0,0(s0)
484258a2:	b2c2      	lw	v0,48425ba8 <.L7+0xac>
484258a4:	0da0      	la	a1,48425b24 <.L7+0x28>
484258a6:	6e08      	li	a2,8
484258a8:	ea40      	jalr	v0
484258aa:	6f02      	li	a3,2
484258ac:	6c00      	li	a0,0
484258ae:	6702      	move	s0,v0
484258b0:	67a4      	move	a1,a0
484258b2:	67c4      	move	a2,a0
484258b4:	e940      	jalr	s1
484258b6:	6f34      	li	a3,52
484258b8:	2819      	bnez	s0,484258ec <.L4+0xc2>
484258ba:	b5b4      	lw	a1,48425b88 <.L7+0x8c>
484258bc:	6f02      	li	a3,2
484258be:	c5f5      	sb	a3,21(a1)
484258c0:	0c9c      	la	a0,48425b30 <.L7+0x34>
484258c2:	67d0      	move	a2,s0
484258c4:	67b0      	move	a1,s0
484258c6:	e940      	jalr	s1
484258c8:	6f4b      	li	a3,75
484258ca:	9610      	lw	a2,64(sp)
484258cc:	ae82      	lhu	a0,4(a2)
484258ce:	5c09      	sltiu	a0,9
484258d0:	611d      	btnez	4842590c <.L4+0xe2>
484258d2:	0c9f      	la	a0,48425b4c <.L7+0x50>
484258d4:	67b0      	move	a1,s0
484258d6:	67d0      	move	a2,s0
484258d8:	e940      	jalr	s1
484258da:	6f4b      	li	a3,75
484258dc:	9310      	lw	v1,64(sp)
484258de:	9b80      	lw	a0,0(v1)
484258e0:	ab02      	lhu	s0,4(v1)
484258e2:	4c08      	addiu	a0,8
484258e4:	4048      	addiu	v0,s0,-8
484258e6:	db80      	sw	a0,0(v1)
484258e8:	cb42      	sh	v0,4(v1)
484258ea:	179f      	b	4842582a <.L4>
484258ec:	6d00      	li	a1,0
484258ee:	67c5      	move	a2,a1
484258f0:	0c9e      	la	a0,48425b68 <.L7+0x6c>
484258f2:	e940      	jalr	s1
484258f4:	6f4b      	li	a3,75
484258f6:	9610      	lw	a2,64(sp)
484258f8:	aea2      	lhu	a1,4(a2)
484258fa:	5d09      	sltiu	a1,9
484258fc:	6107      	btnez	4842590c <.L4+0xe2>
484258fe:	b7a5      	lw	a3,48425b90 <.L7+0x94>
48425900:	45a8      	addiu	a1,a1,-8
48425902:	9f80      	lw	a0,0(a3)
48425904:	ed31      	zeh	a1
48425906:	4c08      	addiu	a0,8
48425908:	b3a3      	lw	v1,48425b94 <.L7+0x98>
4842590a:	ebc0      	jalrc	v1
4842590c:	b5a1      	lw	a1,48425b8c <.L7+0x90>
4842590e:	9d80      	lw	a0,0(a1)
48425910:	9710      	lw	a3,64(sp)
48425912:	b2a2      	lw	v0,48425b98 <.L7+0x9c>
48425914:	afa2      	lhu	a1,4(a3)
48425916:	ea40      	jalr	v0
48425918:	a7c6      	lbu	a2,6(a3)
4842591a:	10f0      	b	48425afc <.L7>
4842591c:	9610      	lw	a2,64(sp)
4842591e:	679d      	move	a0,sp
48425920:	9e60      	lw	v1,0(a2)
48425922:	ae42      	lhu	v0,4(a2)
48425924:	d304      	sw	v1,16(sp)
48425926:	cc4a      	sh	v0,20(a0)
48425928:	f0e0 2202 	beqz	v0,48425af0 <.L30+0x44>
4842592c:	b298      	lw	v0,48425b8c <.L7+0x90>
4842592e:	671d      	move	s0,sp
48425930:	a2a0      	lbu	a1,0(v0)
48425932:	7501      	cmpi	a1,1
48425934:	a8aa      	lhu	a1,20(s0)
48425936:	613f      	btnez	484259b6 <.L4+0x18c>
48425938:	b39d      	lw	v1,48425bac <.L7+0xb0>
4842593a:	b09e      	lw	s0,48425bb0 <.L7+0xb4>
4842593c:	ab80      	lhu	a0,0(v1)
4842593e:	67c4      	move	a2,a0
48425940:	ee31      	zeh	a2
48425942:	e6bd      	addu	a3,a2,a1
48425944:	a8c0      	lhu	a2,0(s0)
48425946:	6705      	move	s0,a1
48425948:	6726      	move	s1,a2
4842594a:	e931      	zeh	s1
4842594c:	ef22      	slt	a3,s1
4842594e:	6105      	btnez	4842595a <.L4+0x130>
48425950:	e68b      	subu	v0,a2,a0
48425952:	6702      	move	s0,v0
48425954:	6d01      	li	a1,1
48425956:	e831      	zeh	s0
48425958:	d509      	sw	a1,36(sp)
4842595a:	b18e      	lw	s1,48425b90 <.L7+0x94>
4842595c:	6764      	move	v1,a0
4842595e:	99c0      	lw	a2,0(s1)
48425960:	eb31      	zeh	v1
48425962:	b28d      	lw	v0,48425b94 <.L7+0x98>
48425964:	e671      	addu	a0,a2,v1
48425966:	ea40      	jalr	v0
48425968:	67b0      	move	a1,s0
4842596a:	67fd      	move	a3,sp
4842596c:	af8a      	lhu	a0,20(a3)
4842596e:	7410      	cmpi	a0,16
48425970:	611d      	btnez	484259ac <.L4+0x182>
48425972:	b48f      	lw	a0,48425bac <.L7+0xb0>
48425974:	99a0      	lw	a1,0(s1)
48425976:	6e10      	li	a2,16
48425978:	ace0      	lhu	a3,0(a0)
4842597a:	d608      	sw	a2,32(sp)
4842597c:	e5f1      	addu	a0,a1,a3
4842597e:	b28e      	lw	v0,48425bb4 <.L7+0xb8>
48425980:	ea40      	jalr	v0
48425982:	9508      	lw	a1,32(sp)
48425984:	7201      	cmpi	v0,1
48425986:	6112      	btnez	484259ac <.L4+0x182>
48425988:	b489      	lw	a0,48425bac <.L7+0xb0>
4842598a:	99e0      	lw	a3,0(s1)
4842598c:	aca0      	lhu	a1,0(a0)
4842598e:	9608      	lw	a2,32(sp)
48425990:	b286      	lw	v0,48425ba8 <.L7+0xac>
48425992:	6787      	move	a0,a3
48425994:	e7b5      	addu	a1,a3,a1
48425996:	ea40      	jalr	v0
48425998:	6f00      	li	a3,0
4842599a:	99c0      	lw	a2,0(s1)
4842599c:	b585      	lw	a1,48425bb0 <.L7+0xb4>
4842599e:	a667      	lbu	v1,7(a2)
484259a0:	a686      	lbu	a0,6(a2)
484259a2:	3760      	sll	a3,v1,8
484259a4:	e789      	addu	v0,a3,a0
484259a6:	6b01      	li	v1,1
484259a8:	cd40      	sh	v0,0(a1)
484259aa:	d309      	sw	v1,36(sp)
484259ac:	b680      	lw	a2,48425bac <.L7+0xb0>
484259ae:	ae40      	lhu	v0,0(a2)
484259b0:	e04d      	addu	v1,s0,v0
484259b2:	ce60      	sh	v1,0(a2)
484259b4:	1082      	b	48425aba <.L30+0xe>
484259b6:	6810      	li	s0,16
484259b8:	5d10      	sltiu	a1,16
484259ba:	d008      	sw	s0,32(sp)
484259bc:	6001      	bteqz	484259c0 <.L4+0x196>
484259be:	d508      	sw	a1,32(sp)
484259c0:	b574      	lw	a1,48425b90 <.L7+0x94>
484259c2:	b275      	lw	v0,48425b94 <.L7+0x98>
484259c4:	9d80      	lw	a0,0(a1)
484259c6:	ea40      	jalr	v0
484259c8:	9508      	lw	a1,32(sp)

484259ca <.L28>:
484259ca:	67fd      	move	a3,sp
484259cc:	afaa      	lhu	a1,20(a3)
484259ce:	5d08      	sltiu	a1,8
484259d0:	6002      	bteqz	484259d6 <.L28+0xc>
484259d2:	6705      	move	s0,a1
484259d4:	106b      	b	48425aac <.L30>
484259d6:	b66f      	lw	a2,48425b90 <.L7+0x94>
484259d8:	b177      	lw	s1,48425bb4 <.L7+0xb8>
484259da:	e940      	jalr	s1
484259dc:	9e80      	lw	a0,0(a2)
484259de:	7201      	cmpi	v0,1
484259e0:	6722      	move	s1,v0
484259e2:	6116      	btnez	48425a10 <.L28+0x46>
484259e4:	b66b      	lw	a2,48425b90 <.L7+0x94>
484259e6:	b073      	lw	s0,48425bb0 <.L7+0xb4>
484259e8:	9e80      	lw	a0,0(a2)
484259ea:	a4a7      	lbu	a1,7(a0)
484259ec:	a466      	lbu	v1,6(a0)
484259ee:	37a0      	sll	a3,a1,8
484259f0:	e775      	addu	a1,a3,v1
484259f2:	6745      	move	v0,a1
484259f4:	9308      	lw	v1,32(sp)
484259f6:	ea31      	zeh	v0
484259f8:	eb43      	sltu	v1,v0
484259fa:	c8a0      	sh	a1,0(s0)
484259fc:	6005      	bteqz	48425a08 <.L28+0x3e>
484259fe:	e577      	subu	a1,v1
48425a00:	b265      	lw	v0,48425b94 <.L7+0x98>
48425a02:	e471      	addu	a0,v1
48425a04:	ea40      	jalr	v0
48425a06:	ed31      	zeh	a1
48425a08:	a800      	lhu	s0,0(s0)
48425a0a:	6c01      	li	a0,1
48425a0c:	d409      	sw	a0,36(sp)
48425a0e:	1055      	b	48425aba <.L30+0xe>
48425a10:	2a2d      	bnez	v0,48425a6c <.L28+0xa2>
48425a12:	b365      	lw	v1,48425ba4 <.L7+0xa8>
48425a14:	6782      	move	a0,v0
48425a16:	67a2      	move	a1,v0
48425a18:	67c2      	move	a2,v0
48425a1a:	eb40      	jalr	v1
48425a1c:	6f33      	li	a3,51
48425a1e:	b75d      	lw	a3,48425b90 <.L7+0x94>
48425a20:	b062      	lw	s0,48425ba8 <.L7+0xac>
48425a22:	9f80      	lw	a0,0(a3)
48425a24:	0d40      	la	a1,48425b24 <.L7+0x28>
48425a26:	6e08      	li	a2,8
48425a28:	e840      	jalr	s0
48425a2a:	6f02      	li	a3,2
48425a2c:	b35e      	lw	v1,48425ba4 <.L7+0xa8>
48425a2e:	6702      	move	s0,v0
48425a30:	6791      	move	a0,s1
48425a32:	67b1      	move	a1,s1
48425a34:	67d1      	move	a2,s1
48425a36:	eb40      	jalr	v1
48425a38:	6f34      	li	a3,52
48425a3a:	2818      	bnez	s0,48425a6c <.L28+0xa2>
48425a3c:	b05a      	lw	s0,48425ba4 <.L7+0xa8>
48425a3e:	0c44      	la	a0,48425b4c <.L7+0x50>
48425a40:	67b1      	move	a1,s1
48425a42:	67d1      	move	a2,s1
48425a44:	e840      	jalr	s0
48425a46:	6f4b      	li	a3,75
48425a48:	b752      	lw	a3,48425b90 <.L7+0x94>
48425a4a:	b358      	lw	v1,48425ba8 <.L7+0xac>
48425a4c:	9fa0      	lw	a1,0(a3)
48425a4e:	6e08      	li	a2,8
48425a50:	6785      	move	a0,a1
48425a52:	67f1      	move	a3,s1
48425a54:	eb40      	jalr	v1
48425a56:	4d08      	addiu	a1,8
48425a58:	67dd      	move	a2,sp
48425a5a:	9004      	lw	s0,16(sp)
48425a5c:	ae8a      	lhu	a0,20(a2)
48425a5e:	4808      	addiu	s0,8
48425a60:	4448      	addiu	v0,a0,-8
48425a62:	6d08      	li	a1,8
48425a64:	d004      	sw	s0,16(sp)
48425a66:	ce4a      	sh	v0,20(a2)
48425a68:	d508      	sw	a1,32(sp)
48425a6a:	17af      	b	484259ca <.L28>
48425a6c:	675d      	move	v0,sp
48425a6e:	aaaa      	lhu	a1,20(v0)
48425a70:	9308      	lw	v1,32(sp)
48425a72:	67c5      	move	a2,a1
48425a74:	ee31      	zeh	a2
48425a76:	ebc3      	sltu	v1,a2
48425a78:	6007      	bteqz	48425a88 <.L28+0xbe>
48425a7a:	b746      	lw	a3,48425b90 <.L7+0x94>
48425a7c:	e577      	subu	a1,v1
48425a7e:	9f80      	lw	a0,0(a3)
48425a80:	b045      	lw	s0,48425b94 <.L7+0x98>
48425a82:	e471      	addu	a0,v1
48425a84:	e840      	jalr	s0
48425a86:	ed31      	zeh	a1
48425a88:	67bd      	move	a1,sp
48425a8a:	7102      	cmpi	s1,2
48425a8c:	ad0a      	lhu	s0,20(a1)
48425a8e:	610e      	btnez	48425aac <.L30>
48425a90:	b440      	lw	a0,48425b90 <.L7+0x94>
48425a92:	9c60      	lw	v1,0(a0)
48425a94:	b447      	lw	a0,48425bb0 <.L7+0xb4>
48425a96:	a347      	lbu	v0,7(v1)
48425a98:	a3c6      	lbu	a2,6(v1)
48425a9a:	3540      	sll	a1,v0,8
48425a9c:	e5dd      	addu	a3,a1,a2
48425a9e:	b244      	lw	v0,48425bac <.L7+0xb0>
48425aa0:	b63b      	lw	a2,48425b8c <.L7+0x90>
48425aa2:	6b01      	li	v1,1
48425aa4:	cce0      	sh	a3,0(a0)
48425aa6:	ca00      	sh	s0,0(v0)
48425aa8:	c660      	sb	v1,0(a2)
48425aaa:	1007      	b	48425aba <.L30+0xe>

48425aac <.L30>:
48425aac:	b539      	lw	a1,48425b90 <.L7+0x94>
48425aae:	9710      	lw	a3,64(sp)
48425ab0:	9d80      	lw	a0,0(a1)
48425ab2:	a7c6      	lbu	a2,6(a3)
48425ab4:	b339      	lw	v1,48425b98 <.L7+0x9c>
48425ab6:	eb40      	jalr	v1
48425ab8:	afa2      	lhu	a1,4(a3)
48425aba:	9609      	lw	a2,36(sp)
48425abc:	2610      	beqz	a2,48425ade <.L30+0x32>
48425abe:	b335      	lw	v1,48425b90 <.L7+0x94>
48425ac0:	b63c      	lw	a2,48425bb0 <.L7+0xb4>
48425ac2:	9b80      	lw	a0,0(v1)
48425ac4:	aea0      	lhu	a1,0(a2)
48425ac6:	67fd      	move	a3,sp
48425ac8:	b23c      	lw	v0,48425bb8 <.L7+0xbc>
48425aca:	d406      	sw	a0,24(sp)
48425acc:	cfae      	sh	a1,28(a3)
48425ace:	ea40      	jalr	v0
48425ad0:	0406      	addiu	a0,sp,24
48425ad2:	b42f      	lw	a0,48425b8c <.L7+0x90>
48425ad4:	d20a      	sw	v0,40(sp)
48425ad6:	6b00      	li	v1,0
48425ad8:	6a00      	li	v0,0
48425ada:	c460      	sb	v1,0(a0)
48425adc:	d209      	sw	v0,36(sp)
48425ade:	67fd      	move	a3,sp
48425ae0:	af4a      	lhu	v0,20(a3)
48425ae2:	9604      	lw	a2,16(sp)
48425ae4:	e20b      	subu	v0,s0
48425ae6:	e615      	addu	a1,a2,s0
48425ae8:	cf4a      	sh	v0,20(a3)
48425aea:	ea31      	zeh	v0
48425aec:	d504      	sw	a1,16(sp)
48425aee:	171c      	b	48425928 <.L4+0xfe>
48425af0:	b327      	lw	v1,48425b8c <.L7+0x90>
48425af2:	a380      	lbu	a0,0(v1)
48425af4:	7401      	cmpi	a0,1
48425af6:	6102      	btnez	48425afc <.L7>
48425af8:	6f03      	li	a3,3
48425afa:	d70a      	sw	a3,40(sp)

48425afc <.L7>:
48425afc:	920a      	lw	v0,40(sp)
48425afe:	6478      	restore	64,ra,s0-s1
48425b00:	e8a0      	jrc	ra
48425b02:	0000      	addiu	s0,sp,0
48425b04:	493c      	addiu	s1,60
48425b06:	203e      	beqz	s0,48425b84 <.L7+0x88>
48425b08:	4352      	daddiu	v0,v1,2
48425b0a:	2050      	beqz	s0,48425bac <.L7+0xb0>
48425b0c:	4556      	daddiu	v0,a1,6
48425b0e:	4952      	addiu	s1,82
48425b10:	4946      	addiu	s1,70
48425b12:	4143      	addiu	v0,s1,3
48425b14:	4954      	addiu	s1,84
48425b16:	4e4f      	addiu	a2,79
48425b18:	4e20      	addiu	a2,32
48425b1a:	4545      	addiu	v0,a1,5
48425b1c:	4e44      	addiu	a2,68
48425b1e:	5427      	slti	a0,39
48425b20:	0000      	addiu	s0,sp,0
48425b22:	0000      	addiu	s0,sp,0
48425b24:	3130      	sll	s1,4
48425b26:	3332      	srl	v1,s1,4
48425b28:	3534      	sll	a1,s1,5
48425b2a:	3736      	srl	a3,s1,5
48425b2c:	0000      	addiu	s0,sp,0
48425b2e:	0000      	addiu	s0,sp,0
48425b30:	493c      	addiu	s1,60
48425b32:	203e      	beqz	s0,48425bb0 <.L7+0xb4>
48425b34:	4352      	daddiu	v0,v1,2
48425b36:	2050      	beqz	s0,48425bd8 <com_rcp_ble_serv_send+0x1c>
48425b38:	4556      	daddiu	v0,a1,6
48425b3a:	4952      	addiu	s1,82
48425b3c:	4946      	addiu	s1,70
48425b3e:	4143      	addiu	v0,s1,3
48425b40:	4954      	addiu	s1,84
48425b42:	4e4f      	addiu	a2,79
48425b44:	5020      	slti	s0,32
48425b46:	5341      	slti	v1,65
48425b48:	0053      	addiu	s0,sp,332
48425b4a:	0000      	addiu	s0,sp,0
48425b4c:	493c      	addiu	s1,60
48425b4e:	203e      	beqz	s0,48425bcc <com_rcp_ble_serv_send+0x10>
48425b50:	4352      	daddiu	v0,v1,2
48425b52:	2050      	beqz	s0,48425bf4 <com_rcp_ble_serv_send+0x38>
48425b54:	4556      	daddiu	v0,a1,6
48425b56:	4952      	addiu	s1,82
48425b58:	4946      	addiu	s1,70
48425b5a:	4143      	addiu	v0,s1,3
48425b5c:	4954      	addiu	s1,84
48425b5e:	4e4f      	addiu	a2,79
48425b60:	4120      	addiu	s1,s1,0
48425b62:	5446      	slti	a0,70
48425b64:	5245      	slti	v0,69
48425b66:	0000      	addiu	s0,sp,0
48425b68:	493c      	addiu	s1,60
48425b6a:	203e      	beqz	s0,48425be8 <com_rcp_ble_serv_send+0x2c>
48425b6c:	4352      	daddiu	v0,v1,2
48425b6e:	2050      	beqz	s0,48425c10 <com_rcp_cmd_dispatch_ap_switch+0x10>
48425b70:	4556      	daddiu	v0,a1,6
48425b72:	4952      	addiu	s1,82
48425b74:	4946      	addiu	s1,70
48425b76:	4143      	addiu	v0,s1,3
48425b78:	4954      	addiu	s1,84
48425b7a:	4e4f      	addiu	a2,79
48425b7c:	4920      	addiu	s1,32
48425b7e:	564e      	slti	a2,78
48425b80:	4c41      	addiu	a0,65
48425b82:	4449      	addiu	v0,a0,-7
48425b84:	0000      	addiu	s0,sp,0
48425b86:	0000      	addiu	s0,sp,0
48425b88:	a0c0      	lbu	a2,0(s0)
48425b8a:	9fc1      	lw	a2,4(a3)
48425b8c:	a2a0      	lbu	a1,0(v0)
48425b8e:	9fc1      	lw	a2,4(a3)
48425b90:	a298      	lbu	a0,24(v0)
48425b92:	9fc1      	lw	a2,4(a3)
48425b94:	0c69      	la	a0,48425d38 <com_rcp_cmd_find_cb+0x4>
48425b96:	bfc1      	lwu	a2,4(a3)
48425b98:	5801      	sltiu	s0,1
48425b9a:	4842      	addiu	s0,66
48425b9c:	a2fc      	lbu	a3,28(v0)
48425b9e:	9fc1      	lw	a2,4(a3)
48425ba0:	5ac5      	sltiu	v0,197
48425ba2:	4846      	addiu	s0,70
48425ba4:	e901      	sdbbp	8
48425ba6:	bfc1      	lwu	a2,4(a3)
48425ba8:	e905      	break	8
48425baa:	bfc1      	lwu	a2,4(a3)
48425bac:	a29e      	lbu	a0,30(v0)
48425bae:	9fc1      	lw	a2,4(a3)
48425bb0:	a29c      	lbu	a0,28(v0)
48425bb2:	9fc1      	lw	a2,4(a3)
48425bb4:	0b6d      	la	v1,48425d68 <com_rcp_cmd_find_cb+0x34>
48425bb6:	bfc1      	lwu	a2,4(a3)
48425bb8:	0ba9      	la	v1,48425e5c <com_rcp_cmd_cb_tbl+0xb8>
48425bba:	bfc1      	lwu	a2,4(a3)

48425bbc <com_rcp_ble_serv_send>:
48425bbc:	64c5      	save	40,ra

//检查RCP命令是否需要中断TTS
//NOTE!! 对于多个命令放到同一个RCP包的情况，有一定的风险漏掉了关键命令？该怎么办？ //TODO
bool __section__(".bank.check_for_tts") com_rcp_check_for_tts(rmt_ctrl_pkg_t *p_rcp)
{
    uint8 cmd_type;
    uint8 cmd_id;
    uint8 check_valid;
    //还没验证或者验证失败，RCP包都会丢弃，所以就返回FALSE，在TTS中直接处理掉
    if (g_app_info_state.verification_status != VERIFICATION_PASS)
    {
        return FALSE;
    }

    sys_os_sched_lock();

    //TODO 需要增加一个接口从堆中获取当前命令类型和ID
    cmd_type = g_p_rcp_in_data_ctl->raw_data[(g_p_rcp_in_data_ctl->read_ptr + 4) % g_p_rcp_in_data_ctl->capacity];
    cmd_id = g_p_rcp_in_data_ctl->raw_data[(g_p_rcp_in_data_ctl->read_ptr + 5) % g_p_rcp_in_data_ctl->capacity];

    sys_os_sched_unlock();

    if (cmd_type == RCP_CMD_APSWITCH)
    {
        check_valid = com_check_valid_rcp(&g_p_rcp_in_data_ctl->raw_data[g_p_rcp_in_data_ctl->read_ptr \
            % g_p_rcp_in_data_ctl->capacity], RCP_COMMAND_HEAD_SIZE);
        if(check_valid == RCP_STATE_OK)
        {
            return TRUE;
        }
        libc_print("cmd_id_1",cmd_id,2);
        PRINTD_DATA(&g_p_rcp_in_data_ctl->raw_data[g_p_rcp_in_data_ctl->read_ptr  % g_p_rcp_in_data_ctl->capacity],16);
        //return TRUE;
    }

    if (com_rcp_cmd_find_cb(cmd_type, cmd_id) == NULL)
    {
        return FALSE;
    }

    if (cmd_type == RCP_CMD_CONTROL)
    {
        return TRUE;
    }
    else if ((cmd_type == RCP_CMD_QUERY) || (cmd_type == RCP_CMD_SIMKEY))
    {
        return FALSE;
    }
    else if (cmd_type == RCP_CMD_SETTING)
    {
        if ((cmd_id == SETTING_ID_SYSTEM_SETTING)
                || (cmd_id == SETTING_ID_SYSTEM_STATUS)
                || (cmd_id == SETTING_ID_DEVICE_NAME)
                || (cmd_id == SETTING_ID_MUSIC_SETTING)
                || (cmd_id == SETTING_ID_OTA_CONNECT_SETTING)
                || (cmd_id == SETTING_ID_OTA_RECIEVE_DATA)
                || (cmd_id == SETTING_ID_OTA_RESTAT_UD)
                || (cmd_id == SETTING_ID_OTA_RESTAT_CD)
                || (cmd_id == SETTING_ID_SEND_COMPLETE)
                || (cmd_id == SETTING_ID_OTA_RECIEVE_VRAM_DATA))
                
        {
            return FALSE;
        }
    }
    else //非法RCP命令包，可能是验证命令包
    {
        return FALSE;
    }

    return TRUE;
}

int com_rcp_ble_serv_send(void *data, uint16 data_len, uint8 serv_flag)
{
48425bbe:	b20f      	lw	v0,48425bf8 <com_rcp_ble_serv_send+0x3c>
#if (SUPPORT_RCP_FUNC == 1)
    msg_apps_t rcp_msg;
    rmt_ctrl_pkg_t tmp_rcp;

    tmp_rcp.rcp_data = data;
    tmp_rcp.rcp_len = data_len;
    
    tmp_rcp.rcp_flag = serv_flag;
    
    tmp_rcp.rcp_remote = (uint8)(g_rcp_remote_number | 0x80);
48425bc0:	d406      	sw	a0,24(sp)
48425bc2:	679d      	move	a0,sp
48425bc4:	c4de      	sb	a2,30(a0)
48425bc6:	6b80      	li	v1,128
48425bc8:	a2c0      	lbu	a2,0(v0)
48425bca:	ccae      	sh	a1,28(a0)
48425bcc:	ef6b      	neg	a3,v1
48425bce:	f001 6c07 	li	a0,2055

    rcp_msg.type = MSG_BTSTACK_RCP_SEND_SYNC;
48425bd2:	eeed      	or	a2,a3
48425bd4:	0306      	addiu	v1,sp,24
    rcp_msg.content.addr = &tmp_rcp;
48425bd6:	67bd      	move	a1,sp
48425bd8:	d404      	sw	a0,16(sp)
48425bda:	b209      	lw	v0,48425bfc <com_rcp_ble_serv_send+0x40>
    if (send_sync_msg_btmanager(NULL, &rcp_msg, NULL, 0) == ERR_NO_ERR)
48425bdc:	6c00      	li	a0,0
48425bde:	c5df      	sb	a2,31(a1)
48425be0:	d305      	sw	v1,20(sp)
48425be2:	0504      	addiu	a1,sp,16
48425be4:	67c4      	move	a2,a0
48425be6:	ea40      	jalr	v0
48425be8:	67e4      	move	a3,a0
48425bea:	6762      	move	v1,v0
    {
        return 0;
48425bec:	2202      	beqz	v0,48425bf2 <com_rcp_ble_serv_send+0x36>
48425bee:	6d01      	li	a1,1
    }
    else
    {
        return -1;
48425bf0:	ebab      	neg	v1,a1
48425bf2:	6743      	move	v0,v1
    }
#else
    return 0;
#endif
}
48425bf4:	6445      	restore	40,ra
48425bf6:	e8a0      	jrc	ra
48425bf8:	a249      	lbu	v0,9(v0)
48425bfa:	9fc1      	lw	a2,4(a3)
48425bfc:	0d15      	la	a1,48425c50 <com_rcp_cmd_dispatch_bank+0x20>
48425bfe:	bfc1      	lwu	a2,4(a3)

48425c00 <com_rcp_cmd_dispatch_ap_switch>:
48425c00:	64e4      	save	32,ra,s0
48425c02:	b209      	lw	v0,48425c24 <com_rcp_cmd_dispatch_ap_switch+0x24>
48425c04:	6704      	move	s0,a0
48425c06:	ea40      	jalr	v0
48425c08:	e811      	zeb	s0
48425c0a:	b408      	lw	a0,48425c28 <com_rcp_cmd_dispatch_ap_switch+0x28>
48425c0c:	3004      	sll	s0,1
48425c0e:	e081      	addu	s0,a0
48425c10:	a860      	lhu	v1,0(s0)
48425c12:	b207      	lw	v0,48425c2c <com_rcp_cmd_dispatch_ap_switch+0x2c>
48425c14:	d304      	sw	v1,16(sp)
48425c16:	0404      	addiu	a0,sp,16
48425c18:	ea40      	jalr	v0
48425c1a:	6d01      	li	a1,1
48425c1c:	6a00      	li	v0,0
48425c1e:	6464      	restore	32,ra,s0
48425c20:	e8a0      	jrc	ra
48425c22:	0000      	addiu	s0,sp,0
48425c24:	5d79      	sltiu	a1,121
48425c26:	4842      	addiu	s0,66
48425c28:	5e7c      	sltiu	a2,124
48425c2a:	4842      	addiu	s0,66
48425c2c:	5d21      	sltiu	a1,33
48425c2e:	482e      	addiu	s0,46

48425c30 <com_rcp_cmd_dispatch_bank>:
48425c30:	64f5      	save	40,ra,s0-s1
48425c32:	b73a      	lw	a3,48425d18 <.L12+0x1c>
48425c34:	6a00      	li	v0,0
48425c36:	a760      	lbu	v1,0(a3)
48425c38:	d204      	sw	v0,16(sp)
48425c3a:	4a0c      	addiu	v0,12
48425c3c:	eb4c      	and	v1,v0
48425c3e:	6724      	move	s1,a0
48425c40:	6705      	move	s0,a1
48425c42:	231b      	beqz	v1,48425c7a <com_rcp_cmd_dispatch_bank+0x4a>
48425c44:	b436      	lw	a0,48425d1c <.L12+0x20>
48425c46:	a4a0      	lbu	a1,0(a0)
48425c48:	2d0c      	bnez	a1,48425c62 <com_rcp_cmd_dispatch_bank+0x32>
48425c4a:	7304      	cmpi	v1,4
48425c4c:	b335      	lw	v1,48425d20 <.L12+0x24>
48425c4e:	6106      	btnez	48425c5c <com_rcp_cmd_dispatch_bank+0x2c>
48425c50:	675d      	move	v0,sp
48425c52:	a2d0      	lbu	a2,16(v0)
48425c54:	c3c0      	sb	a2,0(v1)
48425c56:	6b01      	li	v1,1
48425c58:	c460      	sb	v1,0(a0)
48425c5a:	1003      	b	48425c62 <com_rcp_cmd_dispatch_bank+0x32>
48425c5c:	6c01      	li	a0,1
48425c5e:	ec8b      	neg	a0
48425c60:	c380      	sb	a0,0(v1)
48425c62:	b630      	lw	a2,48425d20 <.L12+0x24>
48425c64:	a761      	lbu	v1,1(a3)
48425c66:	a680      	lbu	a0,0(a2)
48425c68:	6d0f      	li	a1,15
48425c6a:	6744      	move	v0,a0
48425c6c:	ebac      	and	v1,a1
48425c6e:	ea11      	zeb	v0
48425c70:	eb4e      	xor	v1,v0
48425c72:	2b44      	bnez	v1,48425cfc <.L12>
48425c74:	4461      	addiu	v1,a0,1
48425c76:	ed6c      	and	a1,v1
48425c78:	c6a0      	sb	a1,0(a2)
48425c7a:	a760      	lbu	v1,0(a3)
48425c7c:	6f0c      	li	a3,12
48425c7e:	ebec      	and	v1,a3
48425c80:	ebea      	cmp	v1,a3
48425c82:	6001      	bteqz	48425c86 <com_rcp_cmd_dispatch_bank+0x56>
48425c84:	2b03      	bnez	v1,48425c8c <com_rcp_cmd_dispatch_bank+0x5c>
48425c86:	b526      	lw	a1,48425d1c <.L12+0x20>
48425c88:	6e00      	li	a2,0
48425c8a:	c5c0      	sb	a2,0(a1)
48425c8c:	a144      	lbu	v0,4(s1)
48425c8e:	7250      	cmpi	v0,80
48425c90:	600a      	bteqz	48425ca6 <com_rcp_cmd_dispatch_bank+0x76>
48425c92:	5251      	slti	v0,81
48425c94:	6003      	bteqz	48425c9c <com_rcp_cmd_dispatch_bank+0x6c>
48425c96:	7243      	cmpi	v0,67
48425c98:	600e      	bteqz	48425cb6 <.LBB2>
48425c9a:	1030      	b	48425cfc <.L12>
48425c9c:	7251      	cmpi	v0,81
48425c9e:	6018      	bteqz	48425cd0 <.LBB3>
48425ca0:	7253      	cmpi	v0,83
48425ca2:	601f      	bteqz	48425ce2 <.LBB4>
48425ca4:	102b      	b	48425cfc <.L12>
48425ca6:	b220      	lw	v0,48425d24 <.L12+0x28>
48425ca8:	ea40      	jalr	v0
48425caa:	a185      	lbu	a0,5(s1)
48425cac:	d204      	sw	v0,16(sp)
48425cae:	b21f      	lw	v0,48425d28 <.L12+0x2c>
48425cb0:	ea40      	jalr	v0
48425cb2:	6c00      	li	a0,0
48425cb4:	1023      	b	48425cfc <.L12>

48425cb6 <.LBB2>:
48425cb6:	b01e      	lw	s0,48425d2c <.L12+0x30>
48425cb8:	a1a5      	lbu	a1,5(s1)
48425cba:	e840      	jalr	s0
48425cbc:	6c43      	li	a0,67
48425cbe:	6702      	move	s0,v0
48425cc0:	221d      	beqz	v0,48425cfc <.L12>
48425cc2:	b31a      	lw	v1,48425d28 <.L12+0x2c>
48425cc4:	eb40      	jalr	v1
48425cc6:	6c00      	li	a0,0
48425cc8:	9982      	lw	a0,8(s1)
48425cca:	e840      	jalr	s0
48425ccc:	99a3      	lw	a1,12(s1)
48425cce:	1015      	b	48425cfa <.LBB4+0x18>

48425cd0 <.LBB3>:
48425cd0:	a1a5      	lbu	a1,5(s1)
48425cd2:	b217      	lw	v0,48425d2c <.L12+0x30>
48425cd4:	ea40      	jalr	v0
48425cd6:	6c51      	li	a0,81
48425cd8:	2211      	beqz	v0,48425cfc <.L12>
48425cda:	9982      	lw	a0,8(s1)
48425cdc:	ea40      	jalr	v0
48425cde:	99a3      	lw	a1,12(s1)
48425ce0:	100c      	b	48425cfa <.LBB4+0x18>

48425ce2 <.LBB4>:
48425ce2:	a1a5      	lbu	a1,5(s1)
48425ce4:	b212      	lw	v0,48425d2c <.L12+0x30>
48425ce6:	ea40      	jalr	v0
48425ce8:	6c53      	li	a0,83
48425cea:	2208      	beqz	v0,48425cfc <.L12>
48425cec:	a9e3      	lhu	a3,6(s1)
48425cee:	9982      	lw	a0,8(s1)
48425cf0:	4ff0      	addiu	a3,-16
48425cf2:	99a3      	lw	a1,12(s1)
48425cf4:	67d0      	move	a2,s0
48425cf6:	ea40      	jalr	v0
48425cf8:	ef31      	zeh	a3
48425cfa:	d204      	sw	v0,16(sp)

48425cfc <.L12>:
48425cfc:	a182      	lbu	a0,2(s1)
48425cfe:	6f10      	li	a3,16
48425d00:	ecec      	and	a0,a3
48425d02:	2406      	beqz	a0,48425d10 <.L12+0x14>
48425d04:	a1a4      	lbu	a1,4(s1)
48425d06:	7551      	cmpi	a1,81
48425d08:	6003      	bteqz	48425d10 <.L12+0x14>
48425d0a:	b30a      	lw	v1,48425d30 <.L12+0x34>
48425d0c:	eb40      	jalr	v1
48425d0e:	6c00      	li	a0,0
48425d10:	9204      	lw	v0,16(sp)
48425d12:	6475      	restore	40,ra,s0-s1
48425d14:	e8a0      	jrc	ra
48425d16:	0000      	addiu	s0,sp,0
48425d18:	a290      	lbu	a0,16(v0)
48425d1a:	9fc1      	lw	a2,4(a3)
48425d1c:	a294      	lbu	a0,20(v0)
48425d1e:	9fc1      	lw	a2,4(a3)
48425d20:	a293      	lbu	a0,19(v0)
48425d22:	9fc1      	lw	a2,4(a3)
48425d24:	5c01      	sltiu	a0,1
48425d26:	4842      	addiu	s0,66
48425d28:	5d65      	sltiu	a1,101
48425d2a:	485a      	addiu	s0,90
48425d2c:	5d35      	sltiu	a1,53
48425d2e:	4842      	addiu	s0,66
48425d30:	5811      	sltiu	s0,17
48425d32:	48aa      	addiu	s0,-86

48425d34 <com_rcp_cmd_find_cb>:
48425d34:	b20f      	lw	v0,48425d70 <com_rcp_cmd_find_cb+0x3c>
48425d36:	ec11      	zeb	a0
48425d38:	9a40      	lw	v0,0(v0)
48425d3a:	ed11      	zeb	a1
48425d3c:	220a      	beqz	v0,48425d52 <com_rcp_cmd_find_cb+0x1e>
48425d3e:	6762      	move	v1,v0
48425d40:	a340      	lbu	v0,0(v1)
48425d42:	2207      	beqz	v0,48425d52 <com_rcp_cmd_find_cb+0x1e>
48425d44:	ea8e      	xor	v0,a0
48425d46:	2a03      	bnez	v0,48425d4e <com_rcp_cmd_find_cb+0x1a>
48425d48:	a3c1      	lbu	a2,1(v1)
48425d4a:	eeae      	xor	a2,a1
48425d4c:	260a      	beqz	a2,48425d62 <com_rcp_cmd_find_cb+0x2e>
48425d4e:	4b08      	addiu	v1,8
48425d50:	17f7      	b	48425d40 <com_rcp_cmd_find_cb+0xc>
48425d52:	b309      	lw	v1,48425d74 <com_rcp_cmd_find_cb+0x40>
48425d54:	a340      	lbu	v0,0(v1)
48425d56:	2209      	beqz	v0,48425d6a <com_rcp_cmd_find_cb+0x36>
48425d58:	ea8e      	xor	v0,a0
48425d5a:	2a05      	bnez	v0,48425d66 <com_rcp_cmd_find_cb+0x32>
48425d5c:	a3e1      	lbu	a3,1(v1)
48425d5e:	efae      	xor	a3,a1
48425d60:	2f02      	bnez	a3,48425d66 <com_rcp_cmd_find_cb+0x32>
48425d62:	e820      	jr	ra
48425d64:	9b41      	lw	v0,4(v1)
48425d66:	4b08      	addiu	v1,8
48425d68:	17f5      	b	48425d54 <com_rcp_cmd_find_cb+0x20>
48425d6a:	e820      	jr	ra
48425d6c:	6a00      	li	v0,0
48425d6e:	0000      	addiu	s0,sp,0
48425d70:	a24c      	lbu	v0,12(v0)
48425d72:	9fc1      	lw	a2,4(a3)
48425d74:	5da4      	sltiu	a1,164
48425d76:	4842      	addiu	s0,66

48425d78 <com_apswitch_hook>:
48425d78:	64e3      	save	24,ra,s0
48425d7a:	b008      	lw	s0,48425d98 <.LBE2+0x12>
48425d7c:	a050      	lbu	v0,16(s0)
48425d7e:	7201      	cmpi	v0,1
48425d80:	6109      	btnez	48425d94 <.LBE2+0xe>

48425d82 <.LBB2>:
48425d82:	a0b1      	lbu	a1,17(s0)
48425d84:	b406      	lw	a0,48425d9c <.LBE2+0x16>

48425d86 <.LBE2>:
48425d86:	b207      	lw	v0,48425da0 <.LBE2+0x1a>
48425d88:	c4b3      	sb	a1,19(a0)
48425d8a:	9885      	lw	a0,20(s0)
48425d8c:	ea40      	jalr	v0
48425d8e:	98a6      	lw	a1,24(s0)
48425d90:	6b00      	li	v1,0
48425d92:	c070      	sb	v1,16(s0)
48425d94:	6463      	restore	24,ra,s0
48425d96:	e8a0      	jrc	ra
48425d98:	a19c      	lbu	a0,28(s1)
48425d9a:	9fc1      	lw	a2,4(a3)
48425d9c:	a0c0      	lbu	a2,0(s0)
48425d9e:	9fc1      	lw	a2,4(a3)
48425da0:	58a9      	sltiu	s0,169
48425da2:	48b2      	addiu	s0,-78

48425da4 <com_rcp_cmd_cb_tbl>:
48425da4:	0053 0000 5895 48aa 0153 0000 5971 48aa     S....X.HS...qY.H
48425db4:	0253 0000 597d 48aa 8053 0000 5975 48b2     S...}Y.HS...uY.H
48425dc4:	3053 0000 5a29 4866 3153 0000 5a99 4866     S0..)ZfHS1...ZfH
48425dd4:	3253 0000 5b0d 4866 7053 0000 5819 48a2     S2...[fHSp...X.H
48425de4:	7153 0000 5d29 48a2 7553 0000 5d95 48a2     Sq..)].HSu...].H
48425df4:	7453 0000 58cd 48a6 7253 0000 5801 48a6     St...X.HSr...X.H
48425e04:	7353 0000 5839 48a6 0051 0000 0c4d bfc1     Ss..9X.HQ...M...
48425e14:	0251 0000 58e9 48b2 8051 0000 5941 48b2     Q....X.HQ...AY.H
48425e24:	3051 0000 5975 4866 3151 0000 5ced 4866     Q0..uYfHQ1...\fH
48425e34:	3251 0000 5b79 4866 3351 0000 5ad1 4866     Q2..y[fHQ3...ZfH
48425e44:	7051 0000 5f29 48a2 7151 0000 5df9 48a2     Qp..)_.HQq...].H
48425e54:	7251 0000 5e61 48a2 1243 0000 59b9 48aa     Qr..a^.HC....Y.H
48425e64:	2c43 0000 5d05 4866 2d43 0000 5d15 4866     C,...]fHC-...]fH
	...

48425e7c <rcp_cmd_apswitch_event>:
	...
48425e90:	0001 0002 0003 0004 0005 0006 0007 0008     ................
48425ea0:	0009 000a 000b 000c 0000 0000 0000 0000     ................
	...
Disassembly of section BANK_UI_1_17:

48465800 <com_setting_comval_init>:
48465800:	64f4      	save	32,ra,s0-s1
 * \ingroup      misc_func
 * \note
 *******************************************************************************/
void com_setting_comval_init(comval_t *setting_comval)
{
48465802:	6724      	move	s1,a0
48465804:	b467      	lw	a0,484659a0 <com_setting_comval_init+0x1a0>
    sys_comval = setting_comval;
48465806:	b568      	lw	a1,484659a4 <com_setting_comval_init+0x1a4>

    sys_vm_read(setting_comval, VM_AP_SETTING, sizeof(comval_t));
48465808:	b368      	lw	v1,484659a8 <com_setting_comval_init+0x1a8>
4846580a:	dc20      	sw	s1,0(a0)
4846580c:	f1a0 6e0c 	li	a2,428
48465810:	6791      	move	a0,s1
48465812:	eb40      	jalr	v1
48465814:	6f12      	li	a3,18
48465816:	a940      	lhu	v0,0(s1)

    if (setting_comval->magic == VRAM_MAGIC(VM_AP_SETTING))
48465818:	f5aa 720c 	cmpi	v0,21932
4846581c:	6113      	btnez	48465844 <com_setting_comval_init+0x44>
4846581e:	b564      	lw	a1,484659ac <com_setting_comval_init+0x1ac>
    {
        if(g_app_info_state.stub_tools_type != 0)
48465820:	6c7f      	li	a0,127
48465822:	a5cc      	lbu	a2,12(a1)
48465824:	ee8c      	and	a2,a0
48465826:	f0a0 2618 	beqz	a2,4846599a <com_setting_comval_init+0x19a>
4846582a:	6a00      	li	v0,0
        {
            //调试模式不支持led显示
            setting_comval->support_led_display = FALSE;
4846582c:	6b00      	li	v1,0

            //调试模式不保存setting VRAM，每次都从配置项读取
            setting_comval->magic = 0x0;
4846582e:	f020 c145 	sb	v0,37(s1)
48465832:	c960      	sh	v1,0(s1)
48465834:	a5ec      	lbu	a3,12(a1)
            
            if(g_app_info_state.stub_tools_type == STUB_PC_TOOL_ATT_MODE)
48465836:	ef8c      	and	a3,a0
48465838:	7704      	cmpi	a3,4
4846583a:	f0a0 610e 	btnez	4846599a <com_setting_comval_init+0x19a>
4846583e:	f040 c16c 	sb	v1,76(s1)
            {
                setting_comval->dae_cfg.enable = FALSE;  
48465842:	10ab      	b	4846599a <com_setting_comval_init+0x19a>
            }        
        }

        return;
48465844:	f5aa 680c 	li	s0,21932
    }

    setting_comval->magic = VRAM_MAGIC(VM_AP_SETTING);
48465848:	c900      	sh	s0,0(s1)
4846584a:	b05a      	lw	s0,484659b0 <com_setting_comval_init+0x1b0>

    //应用配置
    setting_comval->support_cardplay = (uint8) com_get_config_default(SETTING_APP_SUPPORT_CARDPLAY);
4846584c:	e840      	jalr	s0
4846584e:	6c00      	li	a0,0
48465850:	c142      	sb	v0,2(s1)
48465852:	e840      	jalr	s0
    setting_comval->support_uhostplay = (uint8) com_get_config_default(SETTING_APP_SUPPORT_UHOSTPLAY);
48465854:	6c01      	li	a0,1
48465856:	c143      	sb	v0,3(s1)
48465858:	e840      	jalr	s0
    setting_comval->support_linein = (uint8) com_get_config_default(SETTING_APP_SUPPORT_LINEIN);
4846585a:	6c02      	li	a0,2
4846585c:	c144      	sb	v0,4(s1)
4846585e:	e840      	jalr	s0
    setting_comval->support_fmradio = (uint8) com_get_config_default(SETTING_APP_SUPPORT_FMRADIO);
48465860:	6c03      	li	a0,3
48465862:	c145      	sb	v0,5(s1)
48465864:	e840      	jalr	s0
    setting_comval->support_bt_inback = (uint8) com_get_config_default(SETTING_APP_SUPPORT_BT_INBACK);
48465866:	6c04      	li	a0,4
48465868:	c146      	sb	v0,6(s1)
4846586a:	e840      	jalr	s0
    setting_comval->support_btplay = (uint8) com_get_config_default(SETTING_APP_SUPPORT_BTPLAY);
4846586c:	6c05      	li	a0,5
4846586e:	c147      	sb	v0,7(s1)
48465870:	e840      	jalr	s0
    setting_comval->support_btcall = (uint8) com_get_config_default(SETTING_APP_SUPPORT_BTCALL);
48465872:	6c06      	li	a0,6
48465874:	c148      	sb	v0,8(s1)
48465876:	e840      	jalr	s0
    setting_comval->support_usbbox = (uint8) com_get_config_default(SETTING_APP_SUPPORT_USBBOX);
48465878:	6c07      	li	a0,7
4846587a:	c149      	sb	v0,9(s1)
4846587c:	e840      	jalr	s0
    setting_comval->support_usbmsc = (uint8) com_get_config_default(SETTING_APP_SUPPORT_USBMSC);
4846587e:	6c08      	li	a0,8
48465880:	b34a      	lw	v1,484659a8 <com_setting_comval_init+0x1a8>
    //setting_comval->support_ota = (uint8) com_get_config_default(SETTING_APP_SUPPORT_OTA);
    sys_get_fw_info(&setting_comval->support_ota, FW_INFO_OTA_MODE_ADDR, FW_INFO_OTA_MODE_LEN);
48465882:	6791      	move	a0,s1
48465884:	6e01      	li	a2,1
48465886:	6f1b      	li	a3,27
48465888:	f1c0 6d18 	li	a1,472
4846588c:	4c0b      	addiu	a0,11
4846588e:	eb40      	jalr	v1
48465890:	c14a      	sb	v0,10(s1)
48465892:	e840      	jalr	s0
    
    setting_comval->support_ota_song_test = (uint8) com_get_config_default(SETTING_APP_SUPPORT_OTA_SONG_TEST);
48465894:	6c0c      	li	a0,12
48465896:	c14c      	sb	v0,12(s1)
48465898:	e840      	jalr	s0

    

    //低功耗和省电关机
    setting_comval->lowpower_mode  = (uint8) com_get_config_default(SETTING_ONOFF_LOWPOWER_MODE);
4846589a:	6c14      	li	a0,20
4846589c:	c14d      	sb	v0,13(s1)
4846589e:	e840      	jalr	s0
    setting_comval->lowpower_timer = (uint8) com_get_config_default(SETTING_ONOFF_LOWPOWER_TIMER);
484658a0:	6c15      	li	a0,21
484658a2:	c14e      	sb	v0,14(s1)
484658a4:	e840      	jalr	s0
    setting_comval->poweroff_timer = (uint8) com_get_config_default(SETTING_ONOFF_POWEROFF_TIMER);
484658a6:	6c16      	li	a0,22
484658a8:	c14f      	sb	v0,15(s1)
484658aa:	e840      	jalr	s0
    setting_comval->poweroff_bt_waitpair_timer = (uint8) com_get_config_default(
484658ac:	6c17      	li	a0,23
484658ae:	c150      	sb	v0,16(s1)
484658b0:	e840      	jalr	s0
            SETTING_ONOFF_POWEROFF_BT_WAITPAIR_TIMER);

    //双击按键
    setting_comval->double_click_enable = (uint8) com_get_config_default(SETTING_INPUT_ENABLE_DOUBLE_CLICK);
484658b2:	6c23      	li	a0,35
484658b4:	c151      	sb	v0,17(s1)
484658b6:	e840      	jalr	s0
    setting_comval->double_click_delay = (uint16) com_get_config_default(SETTING_INPUT_DOUBLE_CLICK_DELAY_TIMER);
484658b8:	6c24      	li	a0,36
484658ba:	c949      	sh	v0,18(s1)
484658bc:	e840      	jalr	s0

    //按键音配置项
    setting_comval->key_tone = (uint8) com_get_config_default(SETTING_SOUND_ENABLE_KEYTONE);
484658be:	6c32      	li	a0,50
484658c0:	c154      	sb	v0,20(s1)
484658c2:	e840      	jalr	s0
    setting_comval->key_tone_overlay = (uint8) com_get_config_default(SETTING_SOUND_ENABLE_KEYTONE_OVERLAY);
484658c4:	6c33      	li	a0,51
484658c6:	c155      	sb	v0,21(s1)
484658c8:	e840      	jalr	s0
    //TTS配置项
    setting_comval->tts_enable = (uint8) com_get_config_default(SETTING_SOUND_ENABLE_TTS);
484658ca:	6c34      	li	a0,52
484658cc:	c156      	sb	v0,22(s1)
484658ce:	e840      	jalr	s0
    setting_comval->tts_language = (uint8) com_get_config_default(SETTING_SOUND_TTS_LANGUAGE);
484658d0:	6c35      	li	a0,53
484658d2:	c157      	sb	v0,23(s1)
484658d4:	e840      	jalr	s0
    setting_comval->kt_tts_min_volume = (uint8) com_get_config_default(SETTING_SOUND_KT_TTS_MIN_VOLUME);
484658d6:	6c3e      	li	a0,62
484658d8:	c158      	sb	v0,24(s1)
484658da:	e840      	jalr	s0
    setting_comval->kt_tts_max_volume = (uint8) com_get_config_default(SETTING_SOUND_KT_TTS_MAX_VOLUME);
484658dc:	6c3f      	li	a0,63
484658de:	c159      	sb	v0,25(s1)
484658e0:	e840      	jalr	s0

    //音量配置项
    setting_comval->volume[VOLUME_MODE_NORMAL] = (uint8) com_get_config_default(SETTING_SOUND_DEFAULT_MAIN_VOLUME);
484658e2:	6c39      	li	a0,57
484658e4:	c15e      	sb	v0,30(s1)
484658e6:	e840      	jalr	s0
    setting_comval->volume[VOLUME_MODE_CALL] = (uint8) com_get_config_default(SETTING_SOUND_DEFAULT_CALL_VOLUME);
484658e8:	6c3a      	li	a0,58
484658ea:	a1be      	lbu	a1,30(s1)
    setting_comval->volume_mode = VOLUME_MODE_NORMAL;
    setting_comval->volume_current = setting_comval->volume[VOLUME_MODE_NORMAL];
484658ec:	6c00      	li	a0,0
484658ee:	c1bb      	sb	a1,27(s1)
484658f0:	c19d      	sb	a0,29(s1)
484658f2:	c15f      	sb	v0,31(s1)
484658f4:	e840      	jalr	s0
    setting_comval->volume_gain = (uint8) com_get_config_default(SETTING_SOUND_MAIN_VOLUME_GAIN);
484658f6:	6c40      	li	a0,64
484658f8:	f020 c140 	sb	v0,32(s1)
484658fc:	e840      	jalr	s0

    //显示配置项
    setting_comval->support_led_display = (uint8) com_get_config_default(SETTING_DISPLAY_SUPPORT_LED_SEGMENT);
484658fe:	6c46      	li	a0,70
48465900:	f020 c145 	sb	v0,37(s1)
48465904:	e840      	jalr	s0
    setting_comval->light_timer = (uint8) com_get_config_default(SETTING_DISPLAY_LED_SEGMENT_LIGHT_TIMER);
48465906:	6c47      	li	a0,71
48465908:	f020 c146 	sb	v0,38(s1)
4846590c:	e840      	jalr	s0

    //电池充电
    setting_comval->bat_charge_mode = (uint8) com_get_config_default(SETTING_BAT_CHARGE_MODE);
4846590e:	6c50      	li	a0,80
48465910:	f020 c147 	sb	v0,39(s1)
48465914:	e840      	jalr	s0
    setting_comval->bat_charge_full_tts = (uint8) com_get_config_default(SETTING_BAT_CHARGE_FULL_TTS);
48465916:	6c53      	li	a0,83
48465918:	f020 c148 	sb	v0,40(s1)
4846591c:	e840      	jalr	s0

    setting_comval->snooze_timer = (uint8) com_get_config_default(SETTING_TIMEALARM_SNOOZE_TIMER);
4846591e:	6c5a      	li	a0,90
48465920:	f020 c149 	sb	v0,41(s1)
48465924:	e840      	jalr	s0
    setting_comval->snooze_max = (uint8) com_get_config_default(SETTING_TIMEALARM_SNOOZE_MAX_TIMES);
48465926:	6c5b      	li	a0,91
48465928:	f020 c14a 	sb	v0,42(s1)
4846592c:	e840      	jalr	s0
    setting_comval->alarm_overtime = (uint8) com_get_config_default(SETTING_TIMEALARM_ALARM_OVERTIME);
4846592e:	6c5c      	li	a0,92
48465930:	f020 c14b 	sb	v0,43(s1)
48465934:	e840      	jalr	s0

    setting_comval->hard_support_card = (uint8) com_get_config_default(SETTING_HARDWARE_SUPPORT_CARD);
48465936:	6c6f      	li	a0,111
48465938:	f020 c14c 	sb	v0,44(s1)
4846593c:	e840      	jalr	s0
    setting_comval->hard_support_uhost = (uint8) com_get_config_default(SETTING_HARDWARE_SUPPORT_UHOST);
4846593e:	6c70      	li	a0,112
48465940:	f020 c14d 	sb	v0,45(s1)
48465944:	e840      	jalr	s0
    setting_comval->hard_support_headphone = (uint8) com_get_config_default(SETTING_HARDWARE_SUPPORT_HEADPHONE);
48465946:	6c71      	li	a0,113
48465948:	f020 c14e 	sb	v0,46(s1)
4846594c:	e840      	jalr	s0
    setting_comval->stub_enable = (uint8) com_get_config_default(SETTING_STUB_TEST_DEBUG_ENABLE);
4846594e:	6c78      	li	a0,120
48465950:	f020 c14f 	sb	v0,47(s1)
48465954:	e840      	jalr	s0
    setting_comval->stub_print = (uint8) com_get_config_default(SETTING_STUB_PRINT_ENABLE);
48465956:	6c7b      	li	a0,123
48465958:	f020 c150 	sb	v0,48(s1)
4846595c:	f1c0 6c05 	li	a0,453

    setting_comval->default_vbass_enable = (uint8) com_get_config_default(DAE_VIRTUAL_BASS_ENABLE);
48465960:	e8c0      	jalrc	s0
48465962:	f020 c158 	sb	v0,56(s1)
48465966:	b214      	lw	v0,484659b4 <com_setting_comval_init+0x1b4>
    
    //setting_comval->bt_play = 0;
    //DAE配置项
    com_load_dae_config(setting_comval);
48465968:	ea40      	jalr	v0
4846596a:	6791      	move	a0,s1
4846596c:	b510      	lw	a1,484659ac <com_setting_comval_init+0x1ac>

    if(g_app_info_state.stub_tools_type != 0)
4846596e:	6c7f      	li	a0,127
48465970:	a56c      	lbu	v1,12(a1)
48465972:	eb8c      	and	v1,a0
48465974:	230b      	beqz	v1,4846598c <com_setting_comval_init+0x18c>
48465976:	6f00      	li	a3,0
    {
        //调试模式不支持led显示
        setting_comval->support_led_display = FALSE;
48465978:	6b00      	li	v1,0

        //调试模式不保存setting VRAM，每次都从配置项读取
        setting_comval->magic = 0x0;
4846597a:	f020 c1e5 	sb	a3,37(s1)
4846597e:	c960      	sh	v1,0(s1)
48465980:	a5cc      	lbu	a2,12(a1)
        
        if(g_app_info_state.stub_tools_type == STUB_PC_TOOL_ATT_MODE)
48465982:	ee8c      	and	a2,a0
48465984:	7604      	cmpi	a2,4
48465986:	6102      	btnez	4846598c <com_setting_comval_init+0x18c>
48465988:	f040 c16c 	sb	v1,76(s1)
        {
            setting_comval->dae_cfg.enable = FALSE;  
4846598c:	b506      	lw	a1,484659a4 <com_setting_comval_init+0x1a4>
        }        
    }  

    //用config.bin的默认值写VRAM
    sys_vm_write(setting_comval, VM_AP_SETTING, sizeof(comval_t));
4846598e:	b207      	lw	v0,484659a8 <com_setting_comval_init+0x1a8>
48465990:	6791      	move	a0,s1
48465992:	f1a0 6e0c 	li	a2,428
48465996:	ea40      	jalr	v0
48465998:	6f13      	li	a3,19
4846599a:	6474      	restore	32,ra,s0-s1
}
4846599c:	e8a0      	jrc	ra
4846599e:	0000      	addiu	s0,sp,0
484659a0:	999c      	lw	a0,112(s1)
484659a2:	9fc1      	lw	a2,4(a3)
484659a4:	0000      	addiu	s0,sp,0
484659a6:	0002      	addiu	s0,sp,8
484659a8:	e901      	sdbbp	8
484659aa:	bfc1      	lwu	a2,4(a3)
484659ac:	a0c0      	lbu	a2,0(s0)
484659ae:	9fc1      	lw	a2,4(a3)
484659b0:	5ac5      	sltiu	v0,197
484659b2:	4846      	addiu	s0,70
484659b4:	58f1      	sltiu	s0,241
484659b6:	489a      	addiu	s0,-102

484659b8 <com_enable_jtag_function>:
484659b8:	7403      	cmpi	a0,3

void com_enable_jtag_function(uint32 group_number)
{
    if(group_number == 3)
484659ba:	610a      	btnez	484659d0 <com_enable_jtag_function+0x18>
484659bc:	b40e      	lw	a0,484659f4 <com_enable_jtag_function+0x3c>
    {
        //for ATS2825,默认第三组    
        act_writel(act_readl(MFP_CTL2) & (~0x30000000), MFP_CTL2); 
484659be:	b60f      	lw	a2,484659f8 <com_enable_jtag_function+0x40>
484659c0:	9ca0      	lw	a1,0(a0)
484659c2:	b30f      	lw	v1,484659fc <com_enable_jtag_function+0x44>
        act_writel(act_readl(MFP_CTL2) | (0xa0000000), MFP_CTL2); 
484659c4:	edcc      	and	a1,a2
484659c6:	dca0      	sw	a1,0(a0)
484659c8:	9c40      	lw	v0,0(a0)
484659ca:	ea6d      	or	v0,v1
484659cc:	dc40      	sw	v0,0(a0)
484659ce:	e8a0      	jrc	ra
484659d0:	7404      	cmpi	a0,4
    }
    else if(group_number == 4)
484659d2:	610f      	btnez	484659f2 <com_enable_jtag_function+0x3a>
484659d4:	b60b      	lw	a2,48465a00 <com_enable_jtag_function+0x48>
    {
        //for ATS2823,默认第四组
        act_writel(act_readl(AD_Select1) & (~0x06), AD_Select1);
484659d6:	6a07      	li	v0,7
484659d8:	9ee0      	lw	a3,0(a2)
484659da:	ec4b      	neg	a0,v0
484659dc:	ef8c      	and	a3,a0
484659de:	dee0      	sw	a3,0(a2)
484659e0:	b705      	lw	a3,484659f4 <com_enable_jtag_function+0x3c>
        act_writel(act_readl(MFP_CTL2) & (~0x30000000), MFP_CTL2);
484659e2:	b306      	lw	v1,484659f8 <com_enable_jtag_function+0x40>
484659e4:	9fa0      	lw	a1,0(a3)
484659e6:	b208      	lw	v0,48465a04 <com_enable_jtag_function+0x4c>
        act_writel(act_readl(MFP_CTL2) | (0xb0000000), MFP_CTL2); 
484659e8:	ed6c      	and	a1,v1
484659ea:	dfa0      	sw	a1,0(a3)
484659ec:	9f80      	lw	a0,0(a3)
484659ee:	ec4d      	or	a0,v0
484659f0:	df80      	sw	a0,0(a3)
484659f2:	e8a0      	jrc	ra
484659f4:	005c      	addiu	s0,sp,368
484659f6:	c009      	sb	s0,9(s0)
484659f8:	ffff      	daddiu	a3,sp,124
484659fa:	cfff      	sh	a3,62(a3)
484659fc:	0000      	addiu	s0,sp,0
484659fe:	a000      	lbu	s0,0(s0)
48465a00:	00a4      	addiu	s0,sp,656
48465a02:	c009      	sb	s0,9(s0)
48465a04:	0000      	addiu	s0,sp,0
48465a06:	b000      	lw	s0,48465a04 <com_enable_jtag_function+0x4c>

48465a08 <com_open_config_file>:
48465a08:	64e5      	save	40,ra,s0
 * \li  该接口只在 manager ap的 globe_data_init 中调用一次，也就是说在系统启动时
 *      进行一次打开初始化，之后任何地方读取应用配置项时都无须打开。
 *******************************************************************************/
bool com_open_config_file(const char* config_file)
{
48465a0a:	6d00      	li	a1,0
    uint8 head[16];

    config_fp = sys_sd_fopen(config_file);
48465a0c:	b011      	lw	s0,48465a50 <com_open_config_file+0x48>
48465a0e:	67c5      	move	a2,a1
48465a10:	e840      	jalr	s0
48465a12:	6f0d      	li	a3,13
48465a14:	6782      	move	a0,v0
48465a16:	b20e      	lw	v0,48465a4c <com_open_config_file+0x44>
48465a18:	6764      	move	v1,a0
    if (config_fp == NULL)
    {
        return FALSE;
48465a1a:	da80      	sw	a0,0(v0)
48465a1c:	2413      	beqz	a0,48465a44 <com_open_config_file+0x3c>
48465a1e:	0504      	addiu	a1,sp,16
    }

    if (sys_sd_fread(config_fp, head, 16) == -1)
48465a20:	6e10      	li	a2,16
48465a22:	e840      	jalr	s0
48465a24:	6f11      	li	a3,17
48465a26:	ec4f      	not	a0,v0
48465a28:	6b00      	li	v1,0
    {
        return FALSE;
48465a2a:	240c      	beqz	a0,48465a44 <com_open_config_file+0x3c>
48465a2c:	677d      	move	v1,sp
    }

    if ((head[0] != 'c') || (head[1] != 'f') || (head[2] != 'g'))
48465a2e:	a3b0      	lbu	a1,16(v1)
48465a30:	7563      	cmpi	a1,99
48465a32:	6107      	btnez	48465a42 <com_open_config_file+0x3a>
48465a34:	a3d1      	lbu	a2,17(v1)
48465a36:	7666      	cmpi	a2,102
48465a38:	6104      	btnez	48465a42 <com_open_config_file+0x3a>
48465a3a:	a3f2      	lbu	a3,18(v1)
48465a3c:	6b01      	li	v1,1
    {
        return FALSE;
    }

    return TRUE;
48465a3e:	7767      	cmpi	a3,103
48465a40:	6001      	bteqz	48465a44 <com_open_config_file+0x3c>
48465a42:	6b00      	li	v1,0
48465a44:	6743      	move	v0,v1
}
48465a46:	6465      	restore	40,ra,s0
48465a48:	e8a0      	jrc	ra
48465a4a:	0000      	addiu	s0,sp,0
48465a4c:	a090      	lbu	a0,16(s0)
48465a4e:	9fc1      	lw	a2,4(a3)
48465a50:	e901      	sdbbp	8
48465a52:	bfc1      	lwu	a2,4(a3)

48465a54 <com_get_config_struct>:
48465a54:	f008 64f6 	save	a0-a1,48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    关闭应用配置脚本文件。
 * \param[in]    none
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 关闭应用配置脚本成功。
 * \retval           FALSE 关闭应用配置脚本失败。
 * \ingroup      common_func
 * \note
 *******************************************************************************/
#if 0
bool com_close_config_file(void)
{
    if (sys_sd_fclose(config_fp) == -1)
    {
        return FALSE;
    }

    return TRUE;
}
#endif

/******************************************************************************/
/*!
 * \par  Description:
 *    读取应用配置项。
 * \param[in]    config_id 配置参数ID
 * \param[in]    buf_len 参数输出缓冲区大小
 * \param[out]   buf 参数输出缓冲区
 * \return       bool
 * \retval           TRUE 读取配置项成功。
 * \retval           FALSE 读取配置项失败。
 * \ingroup      common_func
 * \ingroup      common_func
 * \par          exmaple code
 * \code
 例子1：获取背光亮度时间参数结构体
 if(com_get_config_struct(CONFIG_ID_LIGHT_TIME, config_buf, CONFIG_BUF_LEN) == TRUE)
 {
 config_nonlinear_t *config_param;

 config_param = (config_nonlinear_t *)config_buf;
 然后就可以对 config_param 按 config_nonlinear_t 结构进行访问
 }
 else
 {
 没有找到该应用配置项
 }
 * \endcode
 * \note
 * \li  取可变长的 config_string_t 和 config_nonlinear_t，必须先根据使用场合申请最大
 *      的config参数的 uint8 缓冲区并读取数据，读取成功后把该缓冲区强制转换为
 *      config_string_t 或 config_nonlinear_t 类型指针，然后就可以按照 config_string_t
 *      和 config_nonlinear_t类型进行访问。
 *******************************************************************************/
bool com_get_config_struct(uint16 config_id, uint8 *buf, uint16 buf_len)
{
48465a58:	67a4      	move	a1,a0
48465a5a:	ed31      	zeh	a1
48465a5c:	b118      	lw	s1,48465abc <com_get_config_struct+0x68>
    config_index_t temp_index;

    //读取配置项索引结构体
    if (sys_sd_fseek(config_fp, SEEK_SET, 16 + config_id * sizeof(config_index_t)) == -1)
48465a5e:	33ac      	sll	v1,a1,3
48465a60:	ee31      	zeh	a2
48465a62:	d606      	sw	a2,24(sp)
48465a64:	9980      	lw	a0,0(s1)
48465a66:	67c3      	move	a2,v1
48465a68:	b016      	lw	s0,48465ac0 <com_get_config_struct+0x6c>
48465a6a:	6d00      	li	a1,0
48465a6c:	4e10      	addiu	a2,16
48465a6e:	e840      	jalr	s0
48465a70:	6f0f      	li	a3,15
48465a72:	ea4f      	not	v0
48465a74:	6b00      	li	v1,0
    {
        return FALSE;
48465a76:	221f      	beqz	v0,48465ab6 <com_get_config_struct+0x62>
48465a78:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &temp_index, sizeof(config_index_t)) == -1)
48465a7a:	0504      	addiu	a1,sp,16
48465a7c:	6e08      	li	a2,8
48465a7e:	e840      	jalr	s0
48465a80:	6f11      	li	a3,17
48465a82:	ec4f      	not	a0,v0
48465a84:	6b00      	li	v1,0
    {
        return FALSE;
48465a86:	2417      	beqz	a0,48465ab6 <com_get_config_struct+0x62>
48465a88:	9604      	lw	a2,16(sp)
    }

    //读取配置项内容
    if (sys_sd_fseek(config_fp, SEEK_SET, temp_index.offset) == -1)
48465a8a:	9980      	lw	a0,0(s1)
48465a8c:	67a3      	move	a1,v1
48465a8e:	e840      	jalr	s0
48465a90:	6f0f      	li	a3,15
48465a92:	ee4f      	not	a2,v0
48465a94:	6b00      	li	v1,0
    {
        return FALSE;
48465a96:	260f      	beqz	a2,48465ab6 <com_get_config_struct+0x62>
48465a98:	9605      	lw	a2,20(sp)
    }
    if (temp_index.length > buf_len)
48465a9a:	9206      	lw	v0,24(sp)
48465a9c:	9980      	lw	a0,0(s1)
48465a9e:	eac3      	sltu	v0,a2
48465aa0:	6003      	bteqz	48465aa8 <com_get_config_struct+0x54>
48465aa2:	950d      	lw	a1,52(sp)
    {
        if (sys_sd_fread(config_fp, buf, buf_len) == -1)
48465aa4:	67c2      	move	a2,v0
48465aa6:	1001      	b	48465aaa <com_get_config_struct+0x56>
48465aa8:	950d      	lw	a1,52(sp)
        {
            return FALSE;
        }
    }
    else
    {
        if (sys_sd_fread(config_fp, buf, temp_index.length) == -1)
48465aaa:	e840      	jalr	s0
48465aac:	6f11      	li	a3,17
48465aae:	ef4f      	not	a3,v0
48465ab0:	6b00      	li	v1,0
        {
            return FALSE;
48465ab2:	2701      	beqz	a3,48465ab6 <com_get_config_struct+0x62>
48465ab4:	6b01      	li	v1,1
        }
    }

    return TRUE;
48465ab6:	6743      	move	v0,v1
}
48465ab8:	6476      	restore	48,ra,s0-s1
48465aba:	e8a0      	jrc	ra
48465abc:	a090      	lbu	a0,16(s0)
48465abe:	9fc1      	lw	a2,4(a3)
48465ac0:	e901      	sdbbp	8
48465ac2:	bfc1      	lwu	a2,4(a3)

48465ac4 <com_get_config_default>:
48465ac4:	64f6      	save	48,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    读取应用配置项默认值。
 * \param[in]    config_id 配置参数ID
 * \param[out]   none
 * \return       uint16
 * \retval           返回读取到的应用配置项默认值。
 * \ingroup      common_func
 * \ingroup      common_func
 * \par          exmaple code
 * \code
 例子1：获取背光亮度时间默认值
 light_time = com_get_config_default(CONFIG_ID_LIGHT_TIME);
 * \endcode
 * \note
 * \li  仅用于数值型参数，并由用户保证 config_id 正确，若找不到配置项则返回0。
 *******************************************************************************/
uint16 com_get_config_default(uint16 config_id)
{
48465ac6:	67c4      	move	a2,a0
48465ac8:	b115      	lw	s1,48465b1c <com_get_config_default+0x58>
    config_index_t temp_index;
    uint16 default_value;

    //读取配置项索引结构体
    if (sys_sd_fseek(config_fp, SEEK_SET, 16 + config_id * sizeof(config_index_t)) == -1)
48465aca:	ee31      	zeh	a2
48465acc:	36cc      	sll	a2,3
48465ace:	9980      	lw	a0,0(s1)
48465ad0:	b014      	lw	s0,48465b20 <com_get_config_default+0x5c>
48465ad2:	6d00      	li	a1,0
48465ad4:	4e10      	addiu	a2,16
48465ad6:	e840      	jalr	s0
48465ad8:	6f0f      	li	a3,15
48465ada:	ea4f      	not	v0
48465adc:	6b00      	li	v1,0
    {
        return 0;
48465ade:	221a      	beqz	v0,48465b14 <com_get_config_default+0x50>
48465ae0:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &temp_index, sizeof(config_index_t)) == -1)
48465ae2:	0504      	addiu	a1,sp,16
48465ae4:	6e08      	li	a2,8
48465ae6:	e840      	jalr	s0
48465ae8:	6f11      	li	a3,17
48465aea:	ec4f      	not	a0,v0
48465aec:	6b00      	li	v1,0
    {
        return 0;
48465aee:	2412      	beqz	a0,48465b14 <com_get_config_default+0x50>
48465af0:	9980      	lw	a0,0(s1)
    }

    //读取配置项内容
    if (sys_sd_fseek(config_fp, SEEK_SET, temp_index.offset) == -1)
48465af2:	9604      	lw	a2,16(sp)
48465af4:	67a3      	move	a1,v1
48465af6:	e840      	jalr	s0
48465af8:	6f0f      	li	a3,15
48465afa:	ed4f      	not	a1,v0
48465afc:	6b00      	li	v1,0
    {
        return 0;
48465afe:	250a      	beqz	a1,48465b14 <com_get_config_default+0x50>
48465b00:	9980      	lw	a0,0(s1)
    }
    if (sys_sd_fread(config_fp, &default_value, sizeof(uint16)) == -1)
48465b02:	6f11      	li	a3,17
48465b04:	0506      	addiu	a1,sp,24
48465b06:	e840      	jalr	s0
48465b08:	6e02      	li	a2,2
48465b0a:	ef4f      	not	a3,v0
48465b0c:	6b00      	li	v1,0
    {
        return 0;
48465b0e:	2702      	beqz	a3,48465b14 <com_get_config_default+0x50>
48465b10:	675d      	move	v0,sp
    }

    return default_value;
48465b12:	aa6c      	lhu	v1,24(v0)
48465b14:	6743      	move	v0,v1
}
48465b16:	6476      	restore	48,ra,s0-s1
48465b18:	e8a0      	jrc	ra
48465b1a:	0000      	addiu	s0,sp,0
48465b1c:	a090      	lbu	a0,16(s0)
48465b1e:	9fc1      	lw	a2,4(a3)
48465b20:	e901      	sdbbp	8
48465b22:	bfc1      	lwu	a2,4(a3)

48465b24 <dialog_overtime>:
48465b24:	b202      	lw	v0,48465b2c <dialog_overtime+0x8>
};

void dialog_overtime(void)
{
    g_dialog_overtime_flag = TRUE;
48465b26:	6b01      	li	v1,1
48465b28:	e820      	jr	ra
48465b2a:	c260      	sb	v1,0(v0)
48465b2c:	a241      	lbu	v0,1(v0)
48465b2e:	9fc1      	lw	a2,4(a3)

48465b30 <com_rcp_dialog>:
48465b30:	64f7      	save	56,ra,s0-s1
}

/******************************************************************************/
/*!
 * \par  Description:
 *    与APK配合实现对话框询问和信息提示。
 * \param[in]    type 对话框类型，见 dialog_type_e 定义
 * \param[in]    button_type 按键组合类型，包含几种内建按键组合和自定义按键组合，见 button_type_e 定义
 * \param[in]    desc_id 描述字符串ID，与APK约定要显示什么标题和描述信息
 * \param[in]    active_default 默认按键序号
 * \param[in]    check_cb 检测对话框是否合法，如果返回FALSE则返回 RESULT_DIALOG_CANCEL_AUTO
 * \param[out]   none 
 * \return       app_result_e  正常返回 RESULT_DIALOG_XXX 等
 * \ingroup      common_func
 * \note   
 * \li  按任意按键取消返回，返回值为默认按键。
 *******************************************************************************/
app_result_e com_rcp_dialog(uint8 type, uint8 button_type, uint8 desc_id, uint8 active_default,
        dialog_check_callback check_cb)
{
48465b32:	ef11      	zeb	a3
48465b34:	d706      	sw	a3,24(sp)
48465b36:	b746      	lw	a3,48465c4c <.LBE2+0x96>
    input_gui_msg_t ui_msg;
    app_result_e result = RESULT_NULL;
    int8 dialog_timer_id;
    uint8 last_dialog_state;

    g_dialog_type = type;
48465b38:	b347      	lw	v1,48465c54 <.LBE2+0x9e>
    g_dialog_button_type = button_type;
    g_dialog_desc_id = desc_id;
48465b3a:	c780      	sb	a0,0(a3)
48465b3c:	679d      	move	a0,sp
    g_dialog_active_default = active_default;
48465b3e:	a458      	lbu	v0,24(a0)
48465b40:	c3c0      	sb	a2,0(v1)
48465b42:	6725      	move	s1,a1
48465b44:	b646      	lw	a2,48465c5c <.LBE2+0xa6>
    last_dialog_state = g_dialog_state = DIALOG_STATE_LAUNCH;
48465b46:	b543      	lw	a1,48465c50 <.LBE2+0x9a>
48465b48:	b044      	lw	s0,48465c58 <.LBE2+0xa2>
48465b4a:	b446      	lw	a0,48465c60 <.LBE2+0xaa>

    g_dialog_overtime_flag = FALSE;
48465b4c:	6f01      	li	a3,1
48465b4e:	e911      	zeb	s1
48465b50:	c520      	sb	s1,0(a1)
48465b52:	c040      	sb	v0,0(s0)
48465b54:	c6e0      	sb	a3,0(a2)
48465b56:	6d01      	li	a1,1
48465b58:	6b00      	li	v1,0
48465b5a:	b643      	lw	a2,48465c64 <.LBE2+0xae>
    dialog_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL | (APP_TIMER_TAG_SYS << 8), 2000, dialog_overtime);
48465b5c:	b243      	lw	v0,48465c68 <.LBE2+0xb2>
48465b5e:	d508      	sw	a1,32(sp)
48465b60:	c460      	sb	v1,0(a0)
48465b62:	f7c0 6d10 	li	a1,2000
48465b66:	f71f 6c01 	li	a0,65281
48465b6a:	eac0      	jalrc	v0
48465b6c:	d207      	sw	v0,28(sp)
48465b6e:	b03d      	lw	s0,48465c60 <.LBE2+0xaa>

    while (1)
    {
        if (g_dialog_overtime_flag == TRUE)
48465b70:	a0c0      	lbu	a2,0(s0)
48465b72:	7601      	cmpi	a2,1
48465b74:	6104      	btnez	48465b7e <com_rcp_dialog+0x4e>
48465b76:	b236      	lw	v0,48465c4c <.LBE2+0x96>
        {
            g_dialog_type = DIALOG_TYPE_CANCEL;
48465b78:	6c05      	li	a0,5
48465b7a:	c280      	sb	a0,0(v0)
48465b7c:	1044      	b	48465c06 <.LBE2+0x50>
48465b7e:	9308      	lw	v1,32(sp)
            result = button_result[button_type][active_default];
            break;
        }

        if ((last_dialog_state == DIALOG_STATE_LAUNCH) && (g_dialog_state == DIALOG_STATE_CHOOSING))
48465b80:	7301      	cmpi	v1,1
48465b82:	611a      	btnez	48465bb8 <.LBE2+0x2>
48465b84:	b736      	lw	a3,48465c5c <.LBE2+0xa6>
48465b86:	a7a0      	lbu	a1,0(a3)
48465b88:	7502      	cmpi	a1,2
48465b8a:	6116      	btnez	48465bb8 <.LBE2+0x2>
48465b8c:	b039      	lw	s0,48465c70 <.LBE2+0xba>
        {
            if (g_dialog_overtime == (uint8) (-1))
48465b8e:	a0c0      	lbu	a2,0(s0)
48465b90:	76ff      	cmpi	a2,255
48465b92:	6039      	bteqz	48465c06 <.LBE2+0x50>

48465b94 <.LBB2>:
48465b94:	b238      	lw	v0,48465c74 <.LBE2+0xbe>
            {
                result = button_result[button_type][active_default];
                break;
            }
            else
            {
                uint16 dialog_select_overtime;

                kill_app_timer(dialog_timer_id);
48465b96:	ea40      	jalr	v0
48465b98:	9407      	lw	a0,28(sp)
48465b9a:	a080      	lbu	a0,0(s0)

                dialog_select_overtime = (uint16) g_dialog_overtime * 1000 + 2000;
48465b9c:	f3e0 6a08 	li	v0,1000
48465ba0:	ec58      	mult	a0,v0
48465ba2:	b631      	lw	a2,48465c64 <.LBE2+0xae>
                dialog_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL | (APP_TIMER_TAG_SYS << 8),
48465ba4:	ed12      	mflo	a1
48465ba6:	b031      	lw	s0,48465c68 <.LBE2+0xb2>
48465ba8:	f7c0 4d10 	addiu	a1,2000
48465bac:	f71f 6c01 	li	a0,65281
48465bb0:	e840      	jalr	s0
48465bb2:	ed31      	zeh	a1
48465bb4:	d207      	sw	v0,28(sp)

48465bb6 <.LBE2>:
48465bb6:	100c      	b	48465bd0 <.LBE2+0x1a>
48465bb8:	9308      	lw	v1,32(sp)
                        dialog_select_overtime, dialog_overtime);
            }
        }
        else if ((last_dialog_state == DIALOG_STATE_CHOOSING) && (g_dialog_state == DIALOG_STATE_CONFIRM))
48465bba:	7302      	cmpi	v1,2
48465bbc:	6109      	btnez	48465bd0 <.LBE2+0x1a>
48465bbe:	b728      	lw	a3,48465c5c <.LBE2+0xa6>
48465bc0:	a7a0      	lbu	a1,0(a3)
48465bc2:	7503      	cmpi	a1,3
48465bc4:	6105      	btnez	48465bd0 <.LBE2+0x1a>
48465bc6:	b02d      	lw	s0,48465c78 <.LBE2+0xc2>
        {
            result = button_result[button_type][g_dialog_choosed];
48465bc8:	3624      	sll	a2,s1,1
48465bca:	a060      	lbu	v1,0(s0)
48465bcc:	e629      	addu	v0,a2,s1
48465bce:	101e      	b	48465c0c <.LBE2+0x56>
48465bd0:	b223      	lw	v0,48465c5c <.LBE2+0xa6>
            break;
        }
        else
        {
            //for QAC
        }

        last_dialog_state = g_dialog_state;
48465bd2:	9312      	lw	v1,72(sp)

        //如果对话框非法，自动取消对话框
        if ((check_cb != NULL) && (check_cb() == FALSE))
48465bd4:	a280      	lbu	a0,0(v0)
48465bd6:	d408      	sw	a0,32(sp)
48465bd8:	2308      	beqz	v1,48465bea <.LBE2+0x34>
48465bda:	ebc0      	jalrc	v1
48465bdc:	2a06      	bnez	v0,48465bea <.LBE2+0x34>
48465bde:	b51c      	lw	a1,48465c4c <.LBE2+0x96>
        {
            g_dialog_type = DIALOG_TYPE_CANCEL;
48465be0:	6b05      	li	v1,5
48465be2:	f200 6807 	li	s0,519
            result = RESULT_DIALOG_CANCEL_AUTO;
48465be6:	c560      	sb	v1,0(a1)
48465be8:	1027      	b	48465c38 <.LBE2+0x82>
            break;
48465bea:	b025      	lw	s0,48465c7c <.LBE2+0xc6>
        }

        //获取gui消息
        if (get_gui_msg(&ui_msg) == TRUE) //有gui消息
48465bec:	e840      	jalr	s0
48465bee:	0404      	addiu	a0,sp,16
48465bf0:	7201      	cmpi	v0,1
48465bf2:	6112      	btnez	48465c18 <.LBE2+0x62>
48465bf4:	b716      	lw	a3,48465c4c <.LBE2+0x96>
        { //按任意按键取消返回
            g_dialog_type = DIALOG_TYPE_CANCEL;
48465bf6:	6e05      	li	a2,5
48465bf8:	b422      	lw	a0,48465c80 <.LBE2+0xca>
            libc_memcpy(&g_buffer_gui_msg, &ui_msg, sizeof(input_gui_msg_t)); //备份缓冲消息
48465bfa:	b223      	lw	v0,48465c84 <.LBE2+0xce>
48465bfc:	c7c0      	sb	a2,0(a3)
48465bfe:	0504      	addiu	a1,sp,16
48465c00:	6e05      	li	a2,5
48465c02:	ea40      	jalr	v0
48465c04:	6f00      	li	a3,0
48465c06:	3424      	sll	a0,s1,1
            result = button_result[button_type][active_default];
48465c08:	9306      	lw	v1,24(sp)
48465c0a:	e429      	addu	v0,a0,s1
48465c0c:	e269      	addu	v0,v1
48465c0e:	b318      	lw	v1,48465c6c <.LBE2+0xb6>
48465c10:	3044      	sll	s0,v0,1
48465c12:	e075      	addu	a1,s0,v1
48465c14:	ad00      	lhu	s0,0(a1)
48465c16:	1010      	b	48465c38 <.LBE2+0x82>
            break;
48465c18:	b01c      	lw	s0,48465c88 <.LBE2+0xd2>
        }
        else
        {
            result = com_view_loop();
48465c1a:	e8c0      	jalrc	s0
48465c1c:	5a21      	sltiu	v0,33
            if (result > RESULT_COMMON_RESERVE)
48465c1e:	6702      	move	s0,v0
48465c20:	6104      	btnez	48465c2a <.LBE2+0x74>
48465c22:	b70b      	lw	a3,48465c4c <.LBE2+0x96>
            {
                g_dialog_type = DIALOG_TYPE_CANCEL;
48465c24:	6e05      	li	a2,5
48465c26:	c7c0      	sb	a2,0(a3)
48465c28:	1007      	b	48465c38 <.LBE2+0x82>
                break;
48465c2a:	6d00      	li	a1,0
            }
        }

        //挂起10ms，多任务调度
        sys_os_time_dly(1);
48465c2c:	b218      	lw	v0,48465c8c <.LBE2+0xd6>
48465c2e:	6c01      	li	a0,1
48465c30:	67c5      	move	a2,a1
48465c32:	ea40      	jalr	v0
48465c34:	6f31      	li	a3,49
48465c36:	179b      	b	48465b6e <com_rcp_dialog+0x3e>
48465c38:	b20f      	lw	v0,48465c74 <.LBE2+0xbe>
    }

    kill_app_timer(dialog_timer_id);
48465c3a:	ea40      	jalr	v0
48465c3c:	9407      	lw	a0,28(sp)
48465c3e:	b408      	lw	a0,48465c5c <.LBE2+0xa6>
    g_dialog_state = DIALOG_STATE_NONE;
48465c40:	6d00      	li	a1,0
48465c42:	6750      	move	v0,s0
    return result;
}
48465c44:	c4a0      	sb	a1,0(a0)
48465c46:	6477      	restore	56,ra,s0-s1
48465c48:	e8a0      	jrc	ra
48465c4a:	0000      	addiu	s0,sp,0
48465c4c:	a244      	lbu	v0,4(v0)
48465c4e:	9fc1      	lw	a2,4(a3)
48465c50:	a245      	lbu	v0,5(v0)
48465c52:	9fc1      	lw	a2,4(a3)
48465c54:	a246      	lbu	v0,6(v0)
48465c56:	9fc1      	lw	a2,4(a3)
48465c58:	a247      	lbu	v0,7(v0)
48465c5a:	9fc1      	lw	a2,4(a3)
48465c5c:	a240      	lbu	v0,0(v0)
48465c5e:	9fc1      	lw	a2,4(a3)
48465c60:	a241      	lbu	v0,1(v0)
48465c62:	9fc1      	lw	a2,4(a3)
48465c64:	5b25      	sltiu	v1,37
48465c66:	4846      	addiu	s0,70
48465c68:	5915      	sltiu	s1,21
48465c6a:	488e      	addiu	s0,-114
48465c6c:	5ca4      	sltiu	a0,164
48465c6e:	4846      	addiu	s0,70
48465c70:	a242      	lbu	v0,2(v0)
48465c72:	9fc1      	lw	a2,4(a3)
48465c74:	5b01      	sltiu	v1,1
48465c76:	488e      	addiu	s0,-114
48465c78:	a243      	lbu	v0,3(v0)
48465c7a:	9fc1      	lw	a2,4(a3)
48465c7c:	ead9      	multu	v0,a2
48465c7e:	bfc1      	lwu	a2,4(a3)
48465c80:	a0ec      	lbu	a3,12(s0)
48465c82:	9fc1      	lw	a2,4(a3)
48465c84:	e905      	break	8
48465c86:	bfc1      	lwu	a2,4(a3)
48465c88:	eb7d      	dmultu	v1,v1
48465c8a:	bfc1      	lwu	a2,4(a3)
48465c8c:	e901      	sdbbp	8
48465c8e:	bfc1      	lwu	a2,4(a3)

48465c90 <com_dialog_check_usbdialog>:
48465c90:	b404      	lw	a0,48465ca0 <.LBE3+0xe>

48465c92 <.LBE3>:
48465c92:	6b01      	li	v1,1
48465c94:	a447      	lbu	v0,7(a0)
48465c96:	ea6e      	xor	v0,v1
48465c98:	5a01      	sltiu	v0,1

//检测USB线插入对话框是否合法
bool com_dialog_check_usbdialog(void)
{
    return (get_cable_state() == CABLE_STATE_CABLE_IN);
}
48465c9a:	e820      	jr	ra
48465c9c:	6758      	move	v0,t8
48465c9e:	0000      	addiu	s0,sp,0
48465ca0:	a0c0      	lbu	a2,0(s0)
48465ca2:	9fc1      	lw	a2,4(a3)

48465ca4 <button_result>:
48465ca4:	0200 0201 0000 0202 0203 0204 0205 0206     ................
48465cb4:	0201 0205 0206 0000 0203 0201 0000 0208     ................
48465cc4:	0209 0000 0000 0000 0000 0000               ............

48465cd0 <com_load_share_data>:
48465cd0:	64f5      	save	40,ra,s0-s1
};
const uint8 g_rec_folder_short[] = "RECORD  ";

int com_load_share_data(int data_id, uint8 *data_buf, int data_len, int param)
{
48465cd2:	6764      	move	v1,a0
48465cd4:	6a00      	li	v0,0
    int ret = 0;
48465cd6:	5b05      	sltiu	v1,5

    switch (data_id)
48465cd8:	6785      	move	a0,a1
48465cda:	d204      	sw	v0,16(sp)
48465cdc:	603c      	bteqz	48465d56 <com_load_share_data+0x86>
48465cde:	0804      	la	s0,48465cec <com_load_share_data+0x1c>
48465ce0:	3364      	sll	v1,1
48465ce2:	e309      	addu	v0,v1,s0
48465ce4:	8aa0      	lh	a1,0(v0)
48465ce6:	e50d      	addu	v1,a1,s0
48465ce8:	b020      	lw	s0,48465d68 <com_load_share_data+0x98>
48465cea:	eb80      	jrc	v1
48465cec:	000b      	addiu	s0,sp,44
48465cee:	0017      	addiu	s0,sp,92
48465cf0:	0047      	addiu	s0,sp,284
48465cf2:	0053      	addiu	s0,sp,332
48465cf4:	005b      	addiu	s0,sp,364
48465cf6:	b21d      	lw	v0,48465d68 <com_load_share_data+0x98>
48465cf8:	2f02      	bnez	a3,48465cfe <com_load_share_data+0x2e>
    {
#ifndef MUSIC_SCAN_SHARE_DATA    
        case COM_SHARE_DATA_RING_FLODER_ROOT:
        if (param == 0)
48465cfa:	b51b      	lw	a1,48465d64 <com_load_share_data+0x94>
        {
            libc_memcpy(data_buf, g_ring_folder_root_short, data_len);
48465cfc:	102a      	b	48465d52 <com_load_share_data+0x82>
48465cfe:	b51c      	lw	a1,48465d6c <com_load_share_data+0x9c>
        }
        else
        {
            libc_memcpy(data_buf, g_ring_folder_root_long, data_len);
48465d00:	1027      	b	48465d50 <com_load_share_data+0x80>
48465d02:	f71f 6800 	li	s0,65280
        }
        break;

        case COM_SHARE_DATA_RING_FOLDER_SUB:
        if ((param & 0xff00) == 0)
48465d06:	e8ec      	and	s0,a3
48465d08:	b118      	lw	s1,48465d68 <com_load_share_data+0x98>
48465d0a:	2809      	bnez	s0,48465d1e <com_load_share_data+0x4e>
48465d0c:	6767      	move	v1,a3
        {
            libc_memcpy(data_buf, g_ring_folder_short[param & 0xff], data_len);
48465d0e:	6d0c      	li	a1,12
48465d10:	eb11      	zeb	v1
48465d12:	ebb8      	mult	v1,a1
48465d14:	b717      	lw	a3,48465d70 <com_load_share_data+0xa0>
48465d16:	ea12      	mflo	v0
48465d18:	e2f5      	addu	a1,v0,a3
48465d1a:	67f0      	move	a3,s0
48465d1c:	1008      	b	48465d2e <com_load_share_data+0x5e>
48465d1e:	6767      	move	v1,a3
        }
        else
        {
            libc_memcpy(data_buf, g_ring_folder_long[param & 0xff], data_len);
48465d20:	6d0c      	li	a1,12
48465d22:	eb11      	zeb	v1
48465d24:	ebb8      	mult	v1,a1
48465d26:	b714      	lw	a3,48465d74 <com_load_share_data+0xa4>
48465d28:	ea12      	mflo	v0
48465d2a:	e2f5      	addu	a1,v0,a3
48465d2c:	6f00      	li	a3,0
48465d2e:	e9c0      	jalrc	s1
48465d30:	1015      	b	48465d5c <com_load_share_data+0x8c>
        }
        break;
48465d32:	6d0c      	li	a1,12

        case COM_SHARE_DATA_RING_BUILDIN:
        libc_memcpy(data_buf, g_sd_ring_file[param], data_len);
48465d34:	efb8      	mult	a3,a1
48465d36:	b711      	lw	a3,48465d78 <com_load_share_data+0xa8>
48465d38:	ea12      	mflo	v0
48465d3a:	e2f5      	addu	a1,v0,a3
48465d3c:	1001      	b	48465d40 <com_load_share_data+0x70>
48465d3e:	b510      	lw	a1,48465d7c <com_load_share_data+0xac>
        break;

        case COM_SHARE_DATA_RING_TYPE:
        libc_memcpy(data_buf, g_ring_floder_type, data_len);
48465d40:	e840      	jalr	s0
48465d42:	6f00      	li	a3,0
48465d44:	100b      	b	48465d5c <com_load_share_data+0x8c>
        break;
48465d46:	b209      	lw	v0,48465d68 <com_load_share_data+0x98>
48465d48:	2f02      	bnez	a3,48465d4e <com_load_share_data+0x7e>
#endif    
        case COM_SHARE_DATA_REC_FOLDER:
        if (param == 0)
48465d4a:	b50e      	lw	a1,48465d80 <com_load_share_data+0xb0>
        {
            libc_memcpy(data_buf, g_rec_folder_short, data_len);
48465d4c:	1002      	b	48465d52 <com_load_share_data+0x82>
48465d4e:	b50e      	lw	a1,48465d84 <com_load_share_data+0xb4>
        }
        else
        {
            libc_memcpy(data_buf, g_rec_folder_long, data_len);
48465d50:	6f00      	li	a3,0
48465d52:	eac0      	jalrc	v0
48465d54:	1003      	b	48465d5c <com_load_share_data+0x8c>
        }
        break;
48465d56:	6e01      	li	a2,1

        default:
        ret = -1;
48465d58:	eccb      	neg	a0,a2
48465d5a:	d404      	sw	a0,16(sp)
48465d5c:	9204      	lw	v0,16(sp)
        break;
    }

    return ret;
}
48465d5e:	6475      	restore	40,ra,s0-s1
48465d60:	e8a0      	jrc	ra
48465d62:	0000      	addiu	s0,sp,0
48465d64:	5e1c      	sltiu	a2,28
48465d66:	4846      	addiu	s0,70
48465d68:	e905      	break	8
48465d6a:	bfc1      	lwu	a2,4(a3)
48465d6c:	5e14      	sltiu	a2,20
48465d6e:	4846      	addiu	s0,70
48465d70:	5db4      	sltiu	a1,180
48465d72:	4846      	addiu	s0,70
48465d74:	5de4      	sltiu	a1,228
48465d76:	4846      	addiu	s0,70
48465d78:	5da4      	sltiu	a1,164
48465d7a:	4846      	addiu	s0,70
48465d7c:	5db0      	sltiu	a1,176
48465d7e:	4846      	addiu	s0,70
48465d80:	5d88      	sltiu	a1,136
48465d82:	4846      	addiu	s0,70
48465d84:	5d94      	sltiu	a1,148
48465d86:	4846      	addiu	s0,70

48465d88 <g_rec_folder_short>:
48465d88:	4552 4f43 4452 2020 0000 0000               RECORD  ....

48465d94 <g_rec_folder_long>:
48465d94:	feff 0052 0045 0043 004f 0052 0044 0000     ..R.E.C.O.R.D...

48465da4 <g_sd_ring_file>:
48465da4:	6c61 7261 316d 6d2e 3370 0000               alarm1.mp3..

48465db0 <g_ring_floder_type>:
48465db0:	0504 0706                                   ....

48465db4 <g_ring_folder_short>:
48465db4:	f0c6 b2b4 0000 0000 0000 0000 d4b3 b9b7     ................
	...
48465dcc:	a7d1 b0cf 0000 0000 0000 0000 afcb f5be     ................
	...

48465de4 <g_ring_folder_long>:
48465de4:	feff 8d77 5e8a 0000 0000 0000 feff 5403     ..w..^.........T
48465df4:	996d 0000 0000 0000 feff 5b66 4e60 0000     m.........f[`N..
48465e04:	0000 0000 feff 7761 89c9 0000 0000 0000     ......aw........

48465e14 <g_ring_folder_root_long>:
48465e14:	feff 95f9 949f 0000                         ........

48465e1c <g_ring_folder_root_short>:
48465e1c:	d6c4 d3d6 0000 0000                         ........

48465e24 <com_set_dae_chan>:
48465e24:	64c3      	save	24,ra
48465e26:	b608      	lw	a2,48465e44 <com_set_dae_chan+0x20>
48465e28:	9e60      	lw	v1,0(a2)
48465e2a:	f020 c39f 	sb	a0,63(v1)
48465e2e:	9e40      	lw	v0,0(a2)
48465e30:	6783      	move	a0,v1
48465e32:	f040 c2a0 	sb	a1,64(v0)
48465e36:	4c4c      	addiu	a0,76
48465e38:	1a50 9765 	jal	484a5d94 <__load_update_set_dae_config>
48465e3c:	6d01      	li	a1,1
48465e3e:	6443      	restore	24,ra
48465e40:	e8a0      	jrc	ra
48465e42:	0000      	addiu	s0,sp,0
48465e44:	999c      	lw	a0,112(s1)
48465e46:	9fc1      	lw	a2,4(a3)

48465e48 <com_set_dae_enable>:
48465e48:	64c3      	save	24,ra
48465e4a:	b306      	lw	v1,48465e60 <com_set_dae_enable+0x18>
48465e4c:	6d01      	li	a1,1
48465e4e:	9b40      	lw	v0,0(v1)
48465e50:	f040 c28c 	sb	a0,76(v0)
48465e54:	6782      	move	a0,v0
48465e56:	1a50 9765 	jal	484a5d94 <__load_update_set_dae_config>
48465e5a:	4c4c      	addiu	a0,76
48465e5c:	6443      	restore	24,ra
48465e5e:	e8a0      	jrc	ra
48465e60:	999c      	lw	a0,112(s1)
48465e62:	9fc1      	lw	a2,4(a3)

48465e64 <com_set_dae_onoff>:
48465e64:	64c3      	save	24,ra
48465e66:	b20c      	lw	v0,48465e94 <com_set_dae_onoff+0x30>
48465e68:	6764      	move	v1,a0
48465e6a:	9a80      	lw	a0,0(v0)
48465e6c:	eb11      	zeb	v1
48465e6e:	4c4c      	addiu	a0,76
48465e70:	2b05      	bnez	v1,48465e7c <com_set_dae_onoff+0x18>
48465e72:	a461      	lbu	v1,1(a0)
48465e74:	6a01      	li	v0,1
48465e76:	7301      	cmpi	v1,1
48465e78:	6106      	btnez	48465e86 <com_set_dae_onoff+0x22>
48465e7a:	1006      	b	48465e88 <com_set_dae_onoff+0x24>
48465e7c:	7301      	cmpi	v1,1
48465e7e:	6104      	btnez	48465e88 <com_set_dae_onoff+0x24>
48465e80:	a4a1      	lbu	a1,1(a0)
48465e82:	2502      	beqz	a1,48465e88 <com_set_dae_onoff+0x24>
48465e84:	6a00      	li	v0,0
48465e86:	c441      	sb	v0,1(a0)
48465e88:	1a50 9765 	jal	484a5d94 <__load_update_set_dae_config>
48465e8c:	6d01      	li	a1,1
48465e8e:	6443      	restore	24,ra
48465e90:	e8a0      	jrc	ra
48465e92:	0000      	addiu	s0,sp,0
48465e94:	999c      	lw	a0,112(s1)
48465e96:	9fc1      	lw	a2,4(a3)

48465e98 <com_set_dae_config>:
48465e98:	64f5      	save	40,ra,s0-s1
48465e9a:	b227      	lw	v0,48465f34 <com_set_dae_config+0x9c>
48465e9c:	6724      	move	s1,a0
48465e9e:	9a00      	lw	s0,0(v0)
48465ea0:	6b01      	li	v1,1
48465ea2:	484c      	addiu	s0,76
48465ea4:	651c      	move	t8,a0
48465ea6:	2443      	beqz	a0,48465f2e <com_set_dae_config+0x96>
48465ea8:	a480      	lbu	a0,0(a0)
48465eaa:	b224      	lw	v0,48465f38 <com_set_dae_config+0xa0>
48465eac:	2c02      	bnez	a0,48465eb2 <com_set_dae_config+0x1a>
48465eae:	eac0      	jalrc	v0
48465eb0:	1039      	b	48465f24 <com_set_dae_config+0x8c>
48465eb2:	6783      	move	a0,v1
48465eb4:	ea40      	jalr	v0
48465eb6:	d304      	sw	v1,16(sp)
48465eb8:	a181      	lbu	a0,1(s1)
48465eba:	b51f      	lw	a1,48465f34 <com_set_dae_config+0x9c>
48465ebc:	9304      	lw	v1,16(sp)
48465ebe:	9dc0      	lw	a2,0(a1)
48465ec0:	6744      	move	v0,a0
48465ec2:	ea6c      	and	v0,v1
48465ec4:	f020 c679 	sb	v1,57(a2)
48465ec8:	2202      	beqz	v0,48465ece <com_set_dae_config+0x36>
48465eca:	c06b      	sb	v1,11(s0)
48465ecc:	1001      	b	48465ed0 <com_set_dae_config+0x38>
48465ece:	c04b      	sb	v0,11(s0)
48465ed0:	6a02      	li	v0,2
48465ed2:	ea8c      	and	v0,a0
48465ed4:	2201      	beqz	v0,48465ed8 <com_set_dae_config+0x40>
48465ed6:	6a01      	li	v0,1
48465ed8:	c04d      	sb	v0,13(s0)
48465eda:	6a04      	li	v0,4
48465edc:	ea8c      	and	v0,a0
48465ede:	2201      	beqz	v0,48465ee2 <com_set_dae_config+0x4a>
48465ee0:	6a01      	li	v0,1
48465ee2:	c04c      	sb	v0,12(s0)
48465ee4:	6a08      	li	v0,8
48465ee6:	ea8c      	and	v0,a0
48465ee8:	2201      	beqz	v0,48465eec <com_set_dae_config+0x54>
48465eea:	6a01      	li	v0,1
48465eec:	c04a      	sb	v0,10(s0)
48465eee:	6a10      	li	v0,16
48465ef0:	ea8c      	and	v0,a0
48465ef2:	2201      	beqz	v0,48465ef6 <com_set_dae_config+0x5e>
48465ef4:	6a01      	li	v0,1
48465ef6:	c049      	sb	v0,9(s0)
48465ef8:	6a20      	li	v0,32
48465efa:	ea8c      	and	v0,a0
48465efc:	2201      	beqz	v0,48465f00 <com_set_dae_config+0x68>
48465efe:	6a01      	li	v0,1
48465f00:	c04e      	sb	v0,14(s0)
48465f02:	b50d      	lw	a1,48465f34 <com_set_dae_config+0x9c>
48465f04:	6a40      	li	v0,64
48465f06:	ea8c      	and	v0,a0
48465f08:	9d60      	lw	v1,0(a1)
48465f0a:	349e      	srl	a0,7
48465f0c:	2201      	beqz	v0,48465f10 <com_set_dae_config+0x78>
48465f0e:	6a01      	li	v0,1
48465f10:	f020 c35b 	sb	v0,59(v1)
48465f14:	9d60      	lw	v1,0(a1)
48465f16:	2404      	beqz	a0,48465f20 <com_set_dae_config+0x88>
48465f18:	6c01      	li	a0,1
48465f1a:	f020 c39c 	sb	a0,60(v1)
48465f1e:	1002      	b	48465f24 <com_set_dae_config+0x8c>
48465f20:	f020 c39c 	sb	a0,60(v1)
48465f24:	6790      	move	a0,s0
48465f26:	1a50 9765 	jal	484a5d94 <__load_update_set_dae_config>
48465f2a:	6d01      	li	a1,1
48465f2c:	651a      	move	t8,v0
48465f2e:	6758      	move	v0,t8
48465f30:	6475      	restore	40,ra,s0-s1
48465f32:	e8a0      	jrc	ra
48465f34:	999c      	lw	a0,112(s1)
48465f36:	9fc1      	lw	a2,4(a3)
48465f38:	5e65      	sltiu	a2,101
48465f3a:	4846      	addiu	s0,70
	...
Disassembly of section BANK_UI_1_18:

484a5800 <com_load_mdrc_config>:
484a5800:	64f5      	save	40,ra,s0-s1
484a5802:	ee11      	zeb	a2
484a5804:	d604      	sw	a2,16(sp)
484a5806:	a44e      	lbu	v0,14(a0)
484a5808:	6724      	move	s1,a0
484a580a:	7201      	cmpi	v0,1
484a580c:	ed11      	zeb	a1
484a580e:	6e00      	li	a2,0
484a5810:	6004      	bteqz	484a581a <com_load_mdrc_config+0x1a>
484a5812:	f120 a471 	lbu	v1,305(a0)
484a5816:	7301      	cmpi	v1,1
484a5818:	6101      	btnez	484a581c <com_load_mdrc_config+0x1c>
484a581a:	6e01      	li	a2,1
484a581c:	a9e0      	lhu	a3,0(s1)
484a581e:	b434      	lw	a0,484a58ec <.LBE2+0x6>
484a5820:	7701      	cmpi	a3,1
484a5822:	9c60      	lw	v1,0(a0)
484a5824:	6c00      	li	a0,0
484a5826:	610a      	btnez	484a583c <com_load_mdrc_config+0x3c>
484a5828:	2e08      	bnez	a2,484a583a <com_load_mdrc_config+0x3a>
484a582a:	f020 a3db 	lbu	a2,59(v1)
484a582e:	7601      	cmpi	a2,1
484a5830:	6004      	bteqz	484a583a <com_load_mdrc_config+0x3a>
484a5832:	f020 a35c 	lbu	v0,60(v1)
484a5836:	7201      	cmpi	v0,1
484a5838:	6101      	btnez	484a583c <com_load_mdrc_config+0x3c>
484a583a:	6c01      	li	a0,1
484a583c:	f040 c381 	sb	a0,65(v1)
484a5840:	a1e0      	lbu	a3,0(s1)
484a5842:	6b01      	li	v1,1
484a5844:	2750      	beqz	a3,484a58e6 <.LBE2>
484a5846:	a181      	lbu	a0,1(s1)
484a5848:	ec6a      	cmp	a0,v1
484a584a:	6105      	btnez	484a5856 <com_load_mdrc_config+0x56>
484a584c:	6d00      	li	a1,0
484a584e:	c1a3      	sb	a1,3(s1)
484a5850:	c1a2      	sb	a1,2(s1)
484a5852:	c1a4      	sb	a1,4(s1)
484a5854:	1048      	b	484a58e6 <.LBE2>
484a5856:	6e01      	li	a2,1
484a5858:	edce      	xor	a1,a2
484a585a:	edc3      	sltu	a1,a2
484a585c:	6718      	move	s0,t8
484a585e:	d005      	sw	s0,20(sp)
484a5860:	2014      	beqz	s0,484a588a <com_load_mdrc_config+0x8a>
484a5862:	a16e      	lbu	v1,14(s1)
484a5864:	b223      	lw	v0,484a58f0 <.LBE2+0xa>
484a5866:	7301      	cmpi	v1,1
484a5868:	6108      	btnez	484a587a <com_load_mdrc_config+0x7a>
484a586a:	f1c0 6c04 	li	a0,452
484a586e:	eac0      	jalrc	v0
484a5870:	c143      	sb	v0,3(s1)
484a5872:	6a00      	li	v0,0
484a5874:	c142      	sb	v0,2(s1)
484a5876:	c144      	sb	v0,4(s1)
484a5878:	1008      	b	484a588a <com_load_mdrc_config+0x8a>
484a587a:	6800      	li	s0,0
484a587c:	f1c0 6c03 	li	a0,451
484a5880:	ea40      	jalr	v0
484a5882:	c103      	sb	s0,3(s1)
484a5884:	c142      	sb	v0,2(s1)
484a5886:	c104      	sb	s0,4(s1)
484a5888:	c108      	sb	s0,8(s1)
484a588a:	9705      	lw	a3,20(sp)
484a588c:	6800      	li	s0,0
484a588e:	c903      	sh	s0,6(s1)
484a5890:	2707      	beqz	a3,484a58a0 <com_load_mdrc_config+0xa0>
484a5892:	b417      	lw	a0,484a58ec <.LBE2+0x6>
484a5894:	b318      	lw	v1,484a58f4 <.LBE2+0xe>
484a5896:	9cc0      	lw	a2,0(a0)
484a5898:	f020 a6bf 	lbu	a1,63(a2)
484a589c:	eb40      	jalr	v1
484a589e:	6791      	move	a0,s1
484a58a0:	9504      	lw	a1,16(sp)
484a58a2:	7501      	cmpi	a1,1
484a58a4:	6120      	btnez	484a58e6 <.LBE2>

484a58a6 <.LBB2>:
484a58a6:	b212      	lw	v0,484a58ec <.LBE2+0x6>
#endif
}


//更新PRECUT系数
static void __update_precut_factor(dae_config_t *p_dae_cfg)
{
    int16 precut_ratio = 0;

    if (p_dae_cfg->mdrc_enable == 1)
    {
        int16 limit_threshold = p_dae_cfg->mdrc_threshold_base_max;

        if (p_dae_cfg->limiter_enable == 1)
        {
            limit_threshold += ((int16) p_dae_cfg->limiter_threshold_diff - p_dae_cfg->limiter_threshold);
        }

        precut_ratio = (int16) 0 - limit_threshold;
        precut_ratio -= (int16) p_dae_cfg->makeup_gain;
        precut_ratio += p_dae_cfg->precut_ratio;
    }

    sys_comval->mdrc_percent = (uint8) com_math_exp_fixed(0 - precut_ratio);
}

//加载mdrc参数
static __section__(".bank") void __load_mdrc_param(dae_config_t *p_dae_cfg, bool aux_flag)
{
    uint16 config_id;
    uint8 i;

    if (p_dae_cfg->mdrc_enable == 0)
    {
        return ;
    }

    sys_comval->dae_mdrc_peak_gain  = (uint8) com_get_config_default(DAE_PRECUT_RATIO);
    if (aux_flag == TRUE)
    {
        config_id = DAE_MDRC_AUX_BANK0_SETTING;
        p_dae_cfg->limiter_threshold_diff = (int16) com_get_config_default(DAE_MDRC_AUX_LIMITER_TH_DIFF);
        sys_comval->mdrc_vol_adjust = (int8) (int16) com_get_config_default(DAE_MDRC_AUX_VOLUME_ADJUST);
        p_dae_cfg->post_precut_ratio = (int8) (int16) com_get_config_default(DAE_MDRC_AUX_SIGNAL_ADJUST);
    }
    else
    {
        config_id = DAE_MDRC_BANK0_SETTING;
        p_dae_cfg->limiter_threshold_diff = (int16) com_get_config_default(DAE_MDRC_LIMITER_TH_DIFF);
        sys_comval->mdrc_vol_adjust = (int8) (int16) com_get_config_default(DAE_MDRC_VOLUME_ADJUST);
        p_dae_cfg->post_precut_ratio = (int8) (int16) com_get_config_default(DAE_MDRC_SIGNAL_ADJUST);
    }

    p_dae_cfg->mdrc_threshold_base_max = -600;
    for (i = 0; i < MAX_MDRC_SEG; i++)
    {
        mdrc_config_t tmp_mdrc_config;

        com_get_config_struct((uint16) (config_id + i), (uint8 *) &tmp_mdrc_config, \
                sizeof(tmp_mdrc_config));

        p_dae_cfg->mdrc_bands[i].threshold = tmp_mdrc_config.mdrc_data.threshold;
        p_dae_cfg->mdrc_bands[i].attack_time = tmp_mdrc_config.mdrc_data.attack_time;
        p_dae_cfg->mdrc_bands[i].release_time = tmp_mdrc_config.mdrc_data.release_time;
        p_dae_cfg->mdrc_bands[i].reserve = 0;

        if ((p_dae_cfg->limiter_enable == 1)
                && (p_dae_cfg->mdrc_bands[i].threshold > (0 - p_dae_cfg->limiter_threshold_diff)))
        {
            p_dae_cfg->mdrc_bands[i].threshold = (0 - p_dae_cfg->limiter_threshold_diff);
        }

        p_dae_cfg->mdrc_threshold_base[i] = p_dae_cfg->mdrc_bands[i].threshold;
        if (p_dae_cfg->mdrc_threshold_base[i] > p_dae_cfg->mdrc_threshold_base_max)
        {
            p_dae_cfg->mdrc_threshold_base_max = p_dae_cfg->mdrc_threshold_base[i];
        }

        if (i < (MAX_MDRC_SEG-1))
        {
            p_dae_cfg->mdrc_crossover_freq[i] = (uint16) tmp_mdrc_config.mdrc_data.crossover_freq;
        }
    }
}

//更新音效增强减弱设置
static void __update_dew_setting(dae_config_t *p_dae_cfg, int16 volume_relative)
{
    dew_config_t tmp_dew_cfg;
    dew_band_t *p_dew_band;
    dew_band_t *p_dew_band_enh, *p_dew_band_wk;
    int16 vol_adjust_gain;
    uint8 i;

    p_dew_band = sys_malloc(sizeof(dew_band_t)*MAX_DEW_SEG);
    if (p_dew_band == NULL)
    {
        PRINT_ERR("dew bands malloc fail!!");
        while (1)
        {
            ; //nothing for QAC
        }
    }

    libc_memset(p_dae_cfg->dew_bands, 0x00, sizeof(p_dae_cfg->dew_bands));

    //动态增强效果处理
    if (sys_comval->dae_enhanced_enable == 1)
    {
        sys_vm_read(p_dew_band, VM_DEW_PARAM_BASE, sizeof(dew_band_t)*MAX_DEW_SEG);

        for (i = 0; i < MAX_DEW_SEG; i++)
        {
            p_dew_band_enh = p_dew_band + i;

            vol_adjust_gain = 0;
            if ((p_dew_band_enh->gain != 0) && (p_dew_band_enh->rel_vol_start > p_dew_band_enh->rel_vol_keep))
            {
                if (i == DEW_BAND_HIGH_PASS)
                {
                    if ((sys_comval->highpass_cutoff != 0) && (sys_comval->highpass_cutoff >= p_dew_band_enh->cutoff))
                    {
                        if (volume_relative < p_dew_band_enh->rel_vol_keep)
                        {
                            p_dae_cfg->dew_bands[i].cutoff = sys_comval->highpass_cutoff - p_dew_band_enh->cutoff;
                            p_dae_cfg->dew_bands[i].gain = 1;
                        }
                        else if (volume_relative < p_dew_band_enh->rel_vol_start)
                        {
                            p_dae_cfg->dew_bands[i].cutoff = (sys_comval->highpass_cutoff - p_dew_band_enh->cutoff)
                                    * (p_dew_band_enh->rel_vol_start - volume_relative)
                                    / (p_dew_band_enh->rel_vol_start - p_dew_band_enh->rel_vol_keep);
                            p_dae_cfg->dew_bands[i].gain = 1;
                        }
                        else
                        {
                            ;//for qac
                        }
                    }
                }
                else
                {
                    if (volume_relative < p_dew_band_enh->rel_vol_keep)
                    {
                        vol_adjust_gain = p_dew_band_enh->gain;
                    }
                    else if (volume_relative < p_dew_band_enh->rel_vol_start)
                    {
                        vol_adjust_gain = p_dew_band_enh->gain
                                * (p_dew_band_enh->rel_vol_start - volume_relative)
                                / (p_dew_band_enh->rel_vol_start - p_dew_band_enh->rel_vol_keep);
                    }
                    else
                    {
                        ;//for qac
                    }

                    if (vol_adjust_gain != 0)
                    {
                        p_dae_cfg->dew_bands[i].cutoff = p_dew_band_enh->cutoff;
                        if (((i == DEW_BAND_LOW_FREQ) || (i == DEW_BAND_HIGH_FREQ))
                                && (p_dew_band_enh->reserve_param == 1))
                        {
                            p_dae_cfg->dew_bands[i].cutoff |= (uint16) 0x8000;
                        }
                        p_dae_cfg->dew_bands[i].gain = vol_adjust_gain;
                    }
                }
            }
        }
    }

    //动态减弱效果处理
    if (sys_comval->dae_weaken_enable == 1)
    {
        sys_vm_read(p_dew_band, VM_DEW_PARAM_BASE + 0x10000, sizeof(dew_band_t)*MAX_DEW_SEG);

        for (i = 0; i < MAX_DEW_SEG; i++)
        {
            if (p_dae_cfg->dew_bands[i].gain != 0)
            {
                break;
            }

            p_dew_band_wk = p_dew_band + i;

            vol_adjust_gain = 0;
            if ((p_dew_band_wk->gain != 0) && (p_dew_band_wk->rel_vol_keep > p_dew_band_wk->rel_vol_start))
            {
                if (i == DEW_BAND_HIGH_PASS)
                {
                    if ((sys_comval->highpass_cutoff != 0) && (p_dew_band_wk->cutoff >= sys_comval->highpass_cutoff))
                    {
                        if (volume_relative > p_dew_band_wk->rel_vol_keep)
                        {
                            p_dae_cfg->dew_bands[i].cutoff = p_dew_band_wk->cutoff - sys_comval->highpass_cutoff;
                            p_dae_cfg->dew_bands[i].gain = -1;
                        }
                        else if (volume_relative > p_dew_band_wk->rel_vol_start)
                        {
                            p_dae_cfg->dew_bands[i].cutoff = (p_dew_band_wk->cutoff - sys_comval->highpass_cutoff)
                                    * (volume_relative - p_dew_band_wk->rel_vol_start)
                                    / (p_dew_band_wk->rel_vol_keep - p_dew_band_wk->rel_vol_start);
                            p_dae_cfg->dew_bands[i].gain = -1;
                        }
                        else
                        {
                            ;//for qac
                        }
                    }
                }
                else
                {
                    if (volume_relative > p_dew_band_wk->rel_vol_keep)
                    {
                        vol_adjust_gain = p_dew_band_wk->gain;
                    }
                    else if (volume_relative > p_dew_band_wk->rel_vol_start)
                    {
                        vol_adjust_gain = p_dew_band_wk->gain
                                * (volume_relative - p_dew_band_wk->rel_vol_start)
                                / (p_dew_band_wk->rel_vol_keep - p_dew_band_wk->rel_vol_start);
                    }
                    else
                    {
                        ;//for qac
                    }

                    if (vol_adjust_gain != 0)
                    {
                        p_dae_cfg->dew_bands[i].cutoff = p_dew_band_wk->cutoff;
                        if (((i == DEW_BAND_LOW_FREQ) || (i == DEW_BAND_HIGH_FREQ))
                                && (p_dew_band_wk->reserve_param == 1))
                        {
                            p_dae_cfg->dew_bands[i].cutoff |= (uint16) 0x8000;
                        }
                        p_dae_cfg->dew_bands[i].gain = vol_adjust_gain;
                    }
                }
            }
        }
    }

#if 0
    for (i =0; i < MAX_DEW_SEG; i++)
    {
        PRINT_INFO_INT("cutoff",p_dae_cfg->dew_bands[i].cutoff);
        PRINT_INFO_INT("gain",p_dae_cfg->dew_bands[i].gain);
    }
#endif  
  
    sys_free(p_dew_band);
    p_dew_band = NULL;
}

//更新MDRC相关参数，包括mdrc，limiter，precut，makeup gain等
static void __update_mdrc_setting(dae_config_t *p_dae_cfg, int16 volume_relative, \
                                    int16 signal_energy, int16 vol_adjust_gain_max)
{
    int16 volume_absolute = 0 - volume_relative;
    int16 max_add;
    int16 threshold_add;
    int16 volume_compensate_max;
    int16 limiter_threshold_max;
    uint8 i;

    if (p_dae_cfg->limiter_enable == 1)
    {
        int16 limiter_threshold;

        limiter_threshold = p_dae_cfg->mdrc_threshold_base_max + p_dae_cfg->limiter_threshold_diff;

        limiter_threshold_max = p_dae_cfg->limiter_threshold;
        if (limiter_threshold > limiter_threshold_max)
        {
            limiter_threshold_max = limiter_threshold;
        }
        max_add = limiter_threshold_max - limiter_threshold;
    }
    else
    {
        limiter_threshold_max = 0;
        max_add = 0 - p_dae_cfg->mdrc_threshold_base_max;
    }

    if (volume_absolute >= max_add)
    {
        threshold_add = max_add;
    }
    else if (volume_absolute > 0)
    {
        threshold_add = volume_absolute;
    }
    else
    {
        threshold_add = 0;
    }

    //动态调整Makeup gain
    p_dae_cfg->makeup_gain = (uint16)(max_add - threshold_add);

    //动态调高limiter阈值
    if (p_dae_cfg->limiter_enable == 1)
    {
        p_dae_cfg->limiter_threshold = limiter_threshold_max;
    }
    //动态调高MDRC阈值
    for (i = 0; i < MAX_MDRC_SEG; i++)
    {
        p_dae_cfg->mdrc_bands[i].threshold = p_dae_cfg->mdrc_threshold_base[i] + threshold_add;
    }

    //动态precut，需要通过音量补偿
    if (p_dae_cfg->limiter_enable == 1)
    {
        p_dae_cfg->mdrc_precut_ratio = (uint8)(p_dae_cfg->limiter_threshold_diff + \
            ((int16) 0 - p_dae_cfg->limiter_threshold));
    }
    else
    {
        p_dae_cfg->mdrc_precut_ratio = 0;
    }

    volume_absolute -= threshold_add;

    volume_compensate_max = (int16)(sys_comval->dae_mdrc_peak_gain - p_dae_cfg->equivalent_gain);

    if ((vol_adjust_gain_max > 0) && (vol_adjust_gain_max > (0 - signal_energy)))
    {
        volume_compensate_max += vol_adjust_gain_max - (0 - signal_energy);
    }

    //动态precut，需要通过音量补偿
    p_dae_cfg->precut_ratio = 0;
    if (volume_absolute > 0)
    {
        if (volume_absolute > volume_compensate_max)
        {
            p_dae_cfg->precut_ratio = (uint8)volume_compensate_max;
        }
        else
        {
            p_dae_cfg->precut_ratio = (uint8)volume_absolute;
        }
    }
}

bool __set_dae_config(dae_config_t *p_dae_cfg)
{
    msg_apps_t seteq_msg;
    dae_config_t *p_dae_cfg_shm;
    engine_type_e engine_type;
    bool bret = TRUE;

    //更新DAE配置参数到共享内存
    p_dae_cfg_shm = (dae_config_t *) sys_shm_mount(SHARE_MEM_ID_DAECFG);
    if (p_dae_cfg_shm == NULL)
    {
        PRINT_ERR("dae_cfg shm not exist!!");
        while (1)
        {
            ; //nothing for QAC
        }
    }

#ifdef SUPPORT_ASET_TEST
    if ((g_app_info_state.stub_tools_type == STUB_PC_TOOL_ASET_EQ_MODE) 
        && (g_aset_sync_volume == 0)
        && (g_app_info_vector[APP_TYPE_GUI].app_id != APP_ID_CONFIG))
    {
        //同步当前ASET工具的PEQ设置
        aset_test_set_dae_init();
    }
#endif

    sys_os_sched_lock();
    libc_memcpy(p_dae_cfg_shm, p_dae_cfg, sizeof(dae_config_t));
    sys_os_sched_unlock();

    //发送消息给引擎
    engine_type = get_engine_type();
    if ((engine_type != ENGINE_NULL) && (engine_type != ENGINE_BTCALL))
    {
        seteq_msg.type = MSG_SET_DAE_CFG_SYNC;
        bret = (bool) (send_sync_msg(APP_ID_THEENGINE, &seteq_msg, NULL, 0) == ERR_NO_ERR);
    }

    return bret;
}

static bool __load_update_set_dae_config(dae_config_t *p_dae_cfg, bool need_load)
{
    bool bret = TRUE;

    if (need_load == TRUE)
    {
        com_load_mdrc_config(p_dae_cfg, TRUE, TRUE);
    }

    if (sys_comval->dae_inited_flag == FALSE)
    {
        return bret;
    }

    com_update_dae_config(p_dae_cfg);
    bret = __set_dae_config(p_dae_cfg);

    return bret;
}

static void __set_signal_variable_mode(bool variable_mode)
{
484a58a8:	9a60      	lw	v1,0(v0)

484a58aa <.LBB3>:
484a58aa:	f040 a382 	lbu	a0,66(v1)
    dae_config_t *p_dae_cfg = &(sys_comval->dae_cfg);

    if (sys_comval->signal_energy_enable == 0)
484a58ae:	67a3      	move	a1,v1

484a58b0 <.LBE3>:
484a58b0:	f040 a340 	lbu	v0,64(v1)

484a58b4 <.LBB4>:
484a58b4:	4d4c      	addiu	a1,76
484a58b6:	2c03      	bnez	a0,484a58be <.LBB4+0xa>
484a58b8:	6744      	move	v0,a0
    {
        variable_mode = 0;
484a58ba:	f040 cb86 	sh	a0,70(v1)
        sys_comval->signal_energy = 0; 
484a58be:	7201      	cmpi	v0,1
    }

#if (SUPPORT_DETECT_ENERGY == 1)
    if (variable_mode == 1)
484a58c0:	610b      	btnez	484a58d8 <.LBB4+0x24>
484a58c2:	6e3c      	li	a2,60
    {
        sys_comval->signal_energy = SIGNAL_ENERGY_DEFAULT;
484a58c4:	eecb      	neg	a2
484a58c6:	6f01      	li	a3,1
        sys_comval->signal_energy_used = SIGNAL_ENERGY_DEFAULT;

        p_dae_cfg->signal_energy_init = SIGNAL_ENERGY_DEFAULT;
        p_dae_cfg->energy_detect_enable = 1;
484a58c8:	f040 cbc6 	sh	a2,70(v1)
484a58cc:	f040 cbc4 	sh	a2,68(v1)
484a58d0:	f100 cddc 	sh	a2,284(a1)
484a58d4:	c5f0      	sb	a3,16(a1)
484a58d6:	1007      	b	484a58e6 <.LBE2>
484a58d8:	f040 cb06 	sh	s0,70(v1)
    }
    else
#endif
    {
        sys_comval->signal_energy = 0;
484a58dc:	f040 cb04 	sh	s0,68(v1)
        sys_comval->signal_energy_used = 0;
484a58e0:	f100 cd1c 	sh	s0,284(a1)

        p_dae_cfg->signal_energy_init = 0;
484a58e4:	c510      	sb	s0,16(a1)

484a58e6 <.LBE2>:
        p_dae_cfg->energy_detect_enable = 0;
484a58e6:	6743      	move	v0,v1
484a58e8:	6475      	restore	40,ra,s0-s1
484a58ea:	e8a0      	jrc	ra
484a58ec:	999c      	lw	a0,112(s1)
484a58ee:	9fc1      	lw	a2,4(a3)
484a58f0:	5ac5      	sltiu	v0,197
484a58f2:	4846      	addiu	s0,70
484a58f4:	5e11      	sltiu	a2,17
484a58f6:	489a      	addiu	s0,-102

484a58f8 <com_update_dae_config>:
484a58f8:	64f8      	save	64,ra,s0-s1
484a58fa:	b3ee      	lw	v1,484a5cb0 <.LBE14+0x50>
484a58fc:	6724      	move	s1,a0
484a58fe:	9ba0      	lw	a1,0(v1)
484a5900:	8d71      	lh	v1,34(a1)
484a5902:	f040 8d84 	lh	a0,68(a1)
484a5906:	d308      	sw	v1,32(sp)
484a5908:	d409      	sw	a0,36(sp)
484a590a:	a140      	lbu	v0,0(s1)
484a590c:	f180 2209 	beqz	v0,484a5c22 <.L58>
484a5910:	a1c1      	lbu	a2,1(s1)
484a5912:	7601      	cmpi	a2,1
484a5914:	f180 6005 	bteqz	484a5c22 <.L58>
484a5918:	b0e7      	lw	s0,484a5cb4 <.LBE14+0x54>
484a591a:	67a3      	move	a1,v1
484a591c:	0cd4      	la	a0,484a5c6c <.LBE14+0xc>
484a591e:	6e02      	li	a2,2
484a5920:	e840      	jalr	s0
484a5922:	6f4b      	li	a3,75
484a5924:	9509      	lw	a1,36(sp)
484a5926:	0cd7      	la	a0,484a5c80 <.LBE14+0x20>
484a5928:	6e02      	li	a2,2
484a592a:	e840      	jalr	s0
484a592c:	6f4b      	li	a3,75

484a592e <.LBB8>:
484a592e:	9408      	lw	a0,32(sp)
484a5930:	9209      	lw	v0,36(sp)

484a5932 <.LBB9>:
484a5932:	6d04      	li	a1,4

484a5934 <.LBE9>:
484a5934:	e45d      	addu	a3,a0,v0
484a5936:	efb1      	seh	a3
484a5938:	d70a      	sw	a3,40(sp)

484a593a <.LBB10>:
484a593a:	6c3c      	li	a0,60
484a593c:	6e00      	li	a2,0
484a593e:	e840      	jalr	s0
484a5940:	6f16      	li	a3,22
484a5942:	d20b      	sw	v0,44(sp)
484a5944:	2a06      	bnez	v0,484a5952 <.LBB10+0x18>
484a5946:	0cd4      	la	a0,484a5c94 <.LBE14+0x34>
484a5948:	67a2      	move	a1,v0
484a594a:	67c2      	move	a2,v0
484a594c:	e840      	jalr	s0
484a594e:	6f4b      	li	a3,75
484a5950:	17ff      	b	484a5950 <.LBB10+0x16>
484a5952:	b2da      	lw	v0,484a5cb8 <.LBE14+0x58>
484a5954:	6d00      	li	a1,0
484a5956:	f0f0 418e 	addiu	a0,s1,254
484a595a:	6e18      	li	a2,24
484a595c:	ea40      	jalr	v0
484a595e:	6f01      	li	a3,1
484a5960:	b3d4      	lw	v1,484a5cb0 <.LBE14+0x50>
484a5962:	9ba0      	lw	a1,0(v1)
484a5964:	f020 a51b 	lbu	s0,59(a1)
484a5968:	7001      	cmpi	s0,1
484a596a:	6163      	btnez	484a5a32 <.LBB10+0xf8>
484a596c:	b0d2      	lw	s0,484a5cb4 <.LBE14+0x54>
484a596e:	940b      	lw	a0,44(sp)
484a5970:	b5d3      	lw	a1,484a5cbc <.LBE14+0x5c>
484a5972:	6e3c      	li	a2,60
484a5974:	e840      	jalr	s0
484a5976:	6f12      	li	a3,18
484a5978:	b6ce      	lw	a2,484a5cb0 <.LBE14+0x50>
484a597a:	6800      	li	s0,0
484a597c:	653e      	move	t9,a2
484a597e:	6d0a      	li	a1,10
484a5980:	e8b8      	mult	s0,a1
484a5982:	940b      	lw	a0,44(sp)
484a5984:	ef12      	mflo	a3
484a5986:	e4f9      	addu	a2,a0,a3
484a5988:	8e64      	lh	v1,8(a2)
484a598a:	234e      	beqz	v1,484a5a28 <.LBB10+0xee>
484a598c:	8e82      	lh	a0,4(a2)
484a598e:	8ee3      	lh	a3,6(a2)
484a5990:	ef82      	slt	a3,a0
484a5992:	604a      	bteqz	484a5a28 <.LBB10+0xee>
484a5994:	2827      	bnez	s0,484a59e4 <.LBB10+0xaa>
484a5996:	6759      	move	v0,t9
484a5998:	9a60      	lw	v1,0(v0)
484a599a:	f020 a35d 	lbu	v0,61(v1)
484a599e:	6762      	move	v1,v0
484a59a0:	eb11      	zeb	v1
484a59a2:	2342      	beqz	v1,484a5a28 <.LBB10+0xee>
484a59a4:	67a2      	move	a1,v0
484a59a6:	ae40      	lhu	v0,0(a2)
484a59a8:	ed11      	zeb	a1
484a59aa:	67c2      	move	a2,v0
484a59ac:	ee31      	zeh	a2
484a59ae:	ed43      	sltu	a1,v0
484a59b0:	65fe      	move	ra,a2
484a59b2:	613a      	btnez	484a5a28 <.LBB10+0xee>
484a59b4:	960a      	lw	a2,40(sp)
484a59b6:	eee2      	slt	a2,a3
484a59b8:	6004      	bteqz	484a59c2 <.LBB10+0x88>
484a59ba:	e55f      	subu	a3,a1,v0
484a59bc:	f0e0 c9fe 	sh	a3,254(s1)
484a59c0:	100d      	b	484a59dc <.LBB10+0xa2>
484a59c2:	920a      	lw	v0,40(sp)
484a59c4:	ea82      	slt	v0,a0
484a59c6:	6030      	bteqz	484a5a28 <.LBB10+0xee>
484a59c8:	67bf      	move	a1,ra
484a59ca:	e3bb      	subu	a2,v1,a1
484a59cc:	e44b      	subu	v0,a0,v0
484a59ce:	ee58      	mult	a2,v0
484a59d0:	e4f7      	subu	a1,a0,a3
484a59d2:	eb12      	mflo	v1
484a59d4:	ebba      	div	zero,v1,a1
484a59d6:	ec12      	mflo	a0
484a59d8:	f0e0 c99e 	sh	a0,254(s1)
484a59dc:	6f01      	li	a3,1
484a59de:	f100 c9e0 	sh	a3,256(s1)
484a59e2:	1022      	b	484a5a28 <.LBB10+0xee>
484a59e4:	920a      	lw	v0,40(sp)
484a59e6:	67a3      	move	a1,v1
484a59e8:	eae2      	slt	v0,a3
484a59ea:	610a      	btnez	484a5a00 <.LBB10+0xc6>
484a59ec:	920a      	lw	v0,40(sp)
484a59ee:	ea82      	slt	v0,a0
484a59f0:	601b      	bteqz	484a5a28 <.LBB10+0xee>
484a59f2:	e44b      	subu	v0,a0,v0
484a59f4:	eb58      	mult	v1,v0
484a59f6:	e4f7      	subu	a1,a0,a3
484a59f8:	ec12      	mflo	a0
484a59fa:	ecba      	div	zero,a0,a1
484a59fc:	ed12      	mflo	a1
484a59fe:	edb1      	seh	a1
484a5a00:	2513      	beqz	a1,484a5a28 <.LBB10+0xee>
484a5a02:	3408      	sll	a0,s0,2
484a5a04:	e42d      	addu	v1,a0,s1
484a5a06:	40ef      	addiu	a3,s0,-1
484a5a08:	ae80      	lhu	a0,0(a2)
484a5a0a:	5f02      	sltiu	a3,2
484a5a0c:	f0e0 cb9e 	sh	a0,254(v1)
484a5a10:	6009      	bteqz	484a5a24 <.LBB10+0xea>
484a5a12:	8e41      	lh	v0,2(a2)
484a5a14:	7201      	cmpi	v0,1
484a5a16:	6106      	btnez	484a5a24 <.LBB10+0xea>
484a5a18:	f010 6e00 	li	a2,32768
484a5a1c:	eecb      	neg	a2
484a5a1e:	ee8d      	or	a2,a0
484a5a20:	f0e0 cbde 	sh	a2,254(v1)
484a5a24:	f100 cba0 	sh	a1,256(v1)
484a5a28:	4061      	addiu	v1,s0,1
484a5a2a:	6703      	move	s0,v1
484a5a2c:	e811      	zeb	s0
484a5a2e:	5806      	sltiu	s0,6
484a5a30:	61a6      	btnez	484a597e <.LBB10+0x44>
484a5a32:	b0a0      	lw	s0,484a5cb0 <.LBE14+0x50>
484a5a34:	98e0      	lw	a3,0(s0)
484a5a36:	f020 a7bc 	lbu	a1,60(a3)
484a5a3a:	7501      	cmpi	a1,1
484a5a3c:	6168      	btnez	484a5b0e <.LBB10+0x1d4>
484a5a3e:	940b      	lw	a0,44(sp)
484a5a40:	b5a0      	lw	a1,484a5cc0 <.LBE14+0x60>
484a5a42:	b29d      	lw	v0,484a5cb4 <.LBE14+0x54>
484a5a44:	6e3c      	li	a2,60
484a5a46:	ea40      	jalr	v0
484a5a48:	6f12      	li	a3,18
484a5a4a:	6c00      	li	a0,0
484a5a4c:	653c      	move	t9,a0
484a5a4e:	65f8      	move	ra,s0
484a5a50:	67b9      	move	a1,t9
484a5a52:	36a8      	sll	a2,a1,2
484a5a54:	e621      	addu	s0,a2,s1
484a5a56:	f100 8840 	lh	v0,256(s0)
484a5a5a:	2a59      	bnez	v0,484a5b0e <.LBB10+0x1d4>
484a5a5c:	4a0a      	addiu	v0,10
484a5a5e:	ed58      	mult	a1,v0
484a5a60:	970b      	lw	a3,44(sp)
484a5a62:	eb12      	mflo	v1
484a5a64:	e779      	addu	a2,a3,v1
484a5a66:	8e64      	lh	v1,8(a2)
484a5a68:	234c      	beqz	v1,484a5b02 <.LBB10+0x1c8>
484a5a6a:	8ee3      	lh	a3,6(a2)
484a5a6c:	8e82      	lh	a0,4(a2)
484a5a6e:	ece2      	slt	a0,a3
484a5a70:	6048      	bteqz	484a5b02 <.LBB10+0x1c8>
484a5a72:	2d26      	bnez	a1,484a5ac0 <.LBB10+0x186>
484a5a74:	67bf      	move	a1,ra
484a5a76:	9d00      	lw	s0,0(a1)
484a5a78:	f020 a05d 	lbu	v0,61(s0)
484a5a7c:	6762      	move	v1,v0
484a5a7e:	eb11      	zeb	v1
484a5a80:	2340      	beqz	v1,484a5b02 <.LBB10+0x1c8>
484a5a82:	67a2      	move	a1,v0
484a5a84:	ae40      	lhu	v0,0(a2)
484a5a86:	ed11      	zeb	a1
484a5a88:	67c2      	move	a2,v0
484a5a8a:	eaa3      	sltu	v0,a1
484a5a8c:	ee31      	zeh	a2
484a5a8e:	6139      	btnez	484a5b02 <.LBB10+0x1c8>
484a5a90:	900a      	lw	s0,40(sp)
484a5a92:	ef02      	slt	a3,s0
484a5a94:	6004      	bteqz	484a5a9e <.LBB10+0x164>
484a5a96:	e2b3      	subu	a0,v0,a1
484a5a98:	f0e0 c99e 	sh	a0,254(s1)
484a5a9c:	100c      	b	484a5ab6 <.LBB10+0x17c>
484a5a9e:	920a      	lw	v0,40(sp)
484a5aa0:	ec42      	slt	a0,v0
484a5aa2:	602f      	bteqz	484a5b02 <.LBB10+0x1c8>
484a5aa4:	e663      	subu	s0,a2,v1
484a5aa6:	e297      	subu	a1,v0,a0
484a5aa8:	e8b8      	mult	s0,a1
484a5aaa:	e79b      	subu	a2,a3,a0
484a5aac:	eb12      	mflo	v1
484a5aae:	ebda      	div	zero,v1,a2
484a5ab0:	ea12      	mflo	v0
484a5ab2:	f0e0 c95e 	sh	v0,254(s1)
484a5ab6:	6f01      	li	a3,1
484a5ab8:	efeb      	neg	a3
484a5aba:	f100 c9e0 	sh	a3,256(s1)
484a5abe:	1021      	b	484a5b02 <.LBB10+0x1c8>
484a5ac0:	920a      	lw	v0,40(sp)
484a5ac2:	67a3      	move	a1,v1
484a5ac4:	ef42      	slt	a3,v0
484a5ac6:	610a      	btnez	484a5adc <.LBB10+0x1a2>
484a5ac8:	920a      	lw	v0,40(sp)
484a5aca:	ec42      	slt	a0,v0
484a5acc:	601a      	bteqz	484a5b02 <.LBB10+0x1c8>
484a5ace:	e28b      	subu	v0,a0
484a5ad0:	eb58      	mult	v1,v0
484a5ad2:	e797      	subu	a1,a3,a0
484a5ad4:	ec12      	mflo	a0
484a5ad6:	ecba      	div	zero,a0,a1
484a5ad8:	ed12      	mflo	a1
484a5ada:	edb1      	seh	a1
484a5adc:	2512      	beqz	a1,484a5b02 <.LBB10+0x1c8>
484a5ade:	6799      	move	a0,t9
484a5ae0:	ae60      	lhu	v1,0(a2)
484a5ae2:	44ef      	addiu	a3,a0,-1
484a5ae4:	5f02      	sltiu	a3,2
484a5ae6:	f0e0 c87e 	sh	v1,254(s0)
484a5aea:	6009      	bteqz	484a5afe <.LBB10+0x1c4>
484a5aec:	8e41      	lh	v0,2(a2)
484a5aee:	7201      	cmpi	v0,1
484a5af0:	6106      	btnez	484a5afe <.LBB10+0x1c4>
484a5af2:	f010 6e00 	li	a2,32768
484a5af6:	eecb      	neg	a2
484a5af8:	ee6d      	or	a2,v1
484a5afa:	f0e0 c8de 	sh	a2,254(s0)
484a5afe:	f100 c8a0 	sh	a1,256(s0)
484a5b02:	6719      	move	s0,t9
484a5b04:	4061      	addiu	v1,s0,1
484a5b06:	eb11      	zeb	v1
484a5b08:	5b06      	sltiu	v1,6
484a5b0a:	653b      	move	t9,v1
484a5b0c:	61a1      	btnez	484a5a50 <.LBB10+0x116>
484a5b0e:	940b      	lw	a0,44(sp)
484a5b10:	b269      	lw	v0,484a5cb4 <.LBE14+0x54>
484a5b12:	6d04      	li	a1,4
484a5b14:	6e00      	li	a2,0
484a5b16:	ea40      	jalr	v0
484a5b18:	6f17      	li	a3,23
484a5b1a:	6c00      	li	a0,0

484a5b1c <.LBE10>:
484a5b1c:	6b01      	li	v1,1
484a5b1e:	3768      	sll	a3,v1,2
484a5b20:	e735      	addu	a1,a3,s1
484a5b22:	f100 8d40 	lh	v0,256(a1)
484a5b26:	ec42      	slt	a0,v0
484a5b28:	6001      	bteqz	484a5b2c <.LBE10+0x10>
484a5b2a:	6782      	move	a0,v0
484a5b2c:	43c1      	addiu	a2,v1,1
484a5b2e:	6766      	move	v1,a2
484a5b30:	eb11      	zeb	v1
484a5b32:	5b06      	sltiu	v1,6
484a5b34:	61f4      	btnez	484a5b1e <.LBE10+0x2>
484a5b36:	b75f      	lw	a3,484a5cb0 <.LBE14+0x50>
484a5b38:	680a      	li	s0,10
484a5b3a:	9fa0      	lw	a1,0(a3)
484a5b3c:	653f      	move	t9,a3
484a5b3e:	f020 a55e 	lbu	v0,62(a1)
484a5b42:	ec58      	mult	a0,v0
484a5b44:	a18e      	lbu	a0,14(s1)
484a5b46:	eb12      	mflo	v1
484a5b48:	7401      	cmpi	a0,1
484a5b4a:	eb1a      	div	zero,v1,s0
484a5b4c:	ef12      	mflo	a3
484a5b4e:	efb1      	seh	a3
484a5b50:	615b      	btnez	484a5c08 <.LBE11>

484a5b52 <.LBB11>:
484a5b52:	9608      	lw	a2,32(sp)
484a5b54:	f120 a984 	lhu	a0,292(s1)
484a5b58:	e8cb      	neg	s0,a2
484a5b5a:	67d0      	move	a2,s0
484a5b5c:	a10f      	lbu	s0,15(s1)
484a5b5e:	eeb1      	seh	a2
484a5b60:	7001      	cmpi	s0,1
484a5b62:	610b      	btnez	484a5b7a <.LBE13>

484a5b64 <.LBB13>:
484a5b64:	f120 a966 	lhu	v1,294(s1)
484a5b68:	e469      	addu	v0,a0,v1
484a5b6a:	f0e0 8978 	lh	v1,248(s1)
484a5b6e:	eab1      	seh	v0
484a5b70:	eb42      	slt	v1,v0
484a5b72:	6001      	bteqz	484a5b76 <.LBB13+0x12>
484a5b74:	6762      	move	v1,v0
484a5b76:	e34b      	subu	v0,v1,v0
484a5b78:	1002      	b	484a5b7e <.LBE13+0x4>

484a5b7a <.LBE13>:
484a5b7a:	6b00      	li	v1,0
484a5b7c:	ea8b      	neg	v0,a0
484a5b7e:	eab1      	seh	v0
484a5b80:	ee42      	slt	a2,v0
484a5b82:	67a2      	move	a1,v0
484a5b84:	6004      	bteqz	484a5b8e <.LBE13+0x14>
484a5b86:	5601      	slti	a2,1
484a5b88:	67a6      	move	a1,a2
484a5b8a:	6001      	bteqz	484a5b8e <.LBE13+0x14>
484a5b8c:	6d00      	li	a1,0
484a5b8e:	e2b3      	subu	a0,v0,a1
484a5b90:	7001      	cmpi	s0,1
484a5b92:	c983      	sh	a0,6(s1)
484a5b94:	6102      	btnez	484a5b9a <.LBE13+0x20>
484a5b96:	f0e0 c978 	sh	v1,248(s1)
484a5b9a:	6c00      	li	a0,0
484a5b9c:	3284      	sll	v0,a0,1
484a5b9e:	e229      	addu	v0,s1
484a5ba0:	f100 aa5e 	lhu	v0,286(v0)
484a5ba4:	338c      	sll	v1,a0,3
484a5ba6:	e549      	addu	v0,a1,v0
484a5ba8:	e321      	addu	s0,v1,s1
484a5baa:	f0e0 c840 	sh	v0,224(s0)
484a5bae:	4441      	addiu	v0,a0,1
484a5bb0:	6782      	move	a0,v0
484a5bb2:	ec11      	zeb	a0
484a5bb4:	5c03      	sltiu	a0,3
484a5bb6:	61f2      	btnez	484a5b9c <.LBE13+0x22>
484a5bb8:	a18f      	lbu	a0,15(s1)
484a5bba:	6a00      	li	v0,0
484a5bbc:	7401      	cmpi	a0,1
484a5bbe:	6105      	btnez	484a5bca <.LBE13+0x50>
484a5bc0:	f120 a106 	lbu	s0,294(s1)
484a5bc4:	f0e0 a178 	lbu	v1,248(s1)
484a5bc8:	e06b      	subu	v0,s0,v1
484a5bca:	c144      	sb	v0,4(s1)
484a5bcc:	6779      	move	v1,t9
484a5bce:	9b40      	lw	v0,0(v1)
484a5bd0:	e6a3      	subu	s0,a2,a1
484a5bd2:	6790      	move	a0,s0
484a5bd4:	f020 a2b6 	lbu	a1,54(v0)
484a5bd8:	a103      	lbu	s0,3(s1)
484a5bda:	5701      	slti	a3,1
484a5bdc:	e51b      	subu	a2,a1,s0
484a5bde:	67a6      	move	a1,a2
484a5be0:	ecb1      	seh	a0
484a5be2:	edb1      	seh	a1
484a5be4:	6108      	btnez	484a5bf6 <.LBE13+0x7c>
484a5be6:	9609      	lw	a2,36(sp)
484a5be8:	eacb      	neg	v0,a2
484a5bea:	eae2      	slt	v0,a3
484a5bec:	6004      	bteqz	484a5bf6 <.LBE13+0x7c>
484a5bee:	e7cd      	addu	v1,a3,a2
484a5bf0:	e57d      	addu	a3,a1,v1
484a5bf2:	67a7      	move	a1,a3
484a5bf4:	edb1      	seh	a1
484a5bf6:	6e00      	li	a2,0
484a5bf8:	5401      	slti	a0,1
484a5bfa:	c1c2      	sb	a2,2(s1)
484a5bfc:	6105      	btnez	484a5c08 <.LBE11>
484a5bfe:	ed82      	slt	a1,a0
484a5c00:	6002      	bteqz	484a5c06 <.LBE13+0x8c>
484a5c02:	c1a2      	sb	a1,2(s1)
484a5c04:	1001      	b	484a5c08 <.LBE11>
484a5c06:	c182      	sb	a0,2(s1)

484a5c08 <.LBE11>:
484a5c08:	f120 a193 	lbu	a0,307(s1)
484a5c0c:	7401      	cmpi	a0,1
484a5c0e:	6109      	btnez	484a5c22 <.L58>
484a5c10:	b22d      	lw	v0,484a5cc4 <.LBE14+0x64>
484a5c12:	687f      	li	s0,127
484a5c14:	a2ac      	lbu	a1,12(v0)
484a5c16:	ed0c      	and	a1,s0
484a5c18:	7503      	cmpi	a1,3
484a5c1a:	6003      	bteqz	484a5c22 <.L58>
484a5c1c:	19f1 9650 	jal	48be5940 <update_dae_vol_table>
484a5c20:	6500      	nop

484a5c22 <.L58>:
484a5c22:	a1ee      	lbu	a3,14(s1)
484a5c24:	6c00      	li	a0,0
484a5c26:	7701      	cmpi	a3,1
484a5c28:	6114      	btnez	484a5c52 <.LBE16>

484a5c2a <.LBB16>:
484a5c2a:	a16f      	lbu	v1,15(s1)
484a5c2c:	f120 8984 	lh	a0,292(s1)
484a5c30:	7301      	cmpi	v1,1
484a5c32:	6108      	btnez	484a5c44 <.LBB16+0x1a>
484a5c34:	f120 a906 	lhu	s0,294(s1)
484a5c38:	f0e0 a958 	lhu	v0,248(s1)
484a5c3c:	e057      	subu	a1,s0,v0
484a5c3e:	e4b9      	addu	a2,a0,a1
484a5c40:	6786      	move	a0,a2
484a5c42:	ecb1      	seh	a0
484a5c44:	a9a3      	lhu	a1,6(s1)
484a5c46:	ee8b      	neg	a2,a0
484a5c48:	a162      	lbu	v1,2(s1)
484a5c4a:	e6b3      	subu	a0,a2,a1
484a5c4c:	e47d      	addu	a3,a0,v1
484a5c4e:	6787      	move	a0,a3
484a5c50:	ecb1      	seh	a0

484a5c52 <.LBE16>:
484a5c52:	b718      	lw	a3,484a5cb0 <.LBE14+0x50>
484a5c54:	b21d      	lw	v0,484a5cc8 <.LBE14+0x68>
484a5c56:	9f00      	lw	s0,0(a3)
484a5c58:	ea40      	jalr	v0
484a5c5a:	ec8b      	neg	a0
484a5c5c:	f020 c055 	sb	v0,53(s0)

484a5c60 <.LBE14>:
484a5c60:	19f1 9600 	jal	48be5800 <__calc_dae_freq>
484a5c64:	6791      	move	a0,s1
484a5c66:	6478      	restore	64,ra,s0-s1
484a5c68:	e8a0      	jrc	ra
484a5c6a:	0000      	addiu	s0,sp,0
484a5c6c:	493c      	addiu	s1,60
484a5c6e:	203e      	beqz	s0,484a5cec <__set_dae_config+0x20>
484a5c70:	6f76      	li	a3,118
484a5c72:	756c      	cmpi	a1,108
484a5c74:	656d      	move	t3,a1
484a5c76:	725f      	cmpi	v0,95
484a5c78:	6c65      	li	a0,101
484a5c7a:	7461      	cmpi	a0,97
484a5c7c:	7669      	cmpi	a2,105
484a5c7e:	0065      	addiu	s0,sp,404
484a5c80:	493c      	addiu	s1,60
484a5c82:	203e      	beqz	s0,484a5d00 <__set_dae_config+0x34>
484a5c84:	6973      	li	s1,115
484a5c86:	6e67      	li	a2,103
484a5c88:	6c61      	li	a0,97
484a5c8a:	655f      	move	k0,a3
484a5c8c:	656e      	move	t3,a2
484a5c8e:	6772      	move	v1,s2
484a5c90:	0079      	addiu	s0,sp,484
484a5c92:	0000      	addiu	s0,sp,0
484a5c94:	453c      	daddiu	s1,a1,-4
484a5c96:	203e      	beqz	s0,484a5d14 <__set_dae_config+0x48>
484a5c98:	6564      	move	v1,a0
484a5c9a:	2077      	beqz	s0,484a5d8a <.LBE17+0x56>
484a5c9c:	6162      	btnez	484a5d62 <.LBE17+0x2e>
484a5c9e:	646e      	restore	112,ra,s0
484a5ca0:	2073      	beqz	s0,484a5d88 <.LBE17+0x54>
484a5ca2:	616d      	btnez	484a5d7e <.LBE17+0x4a>
484a5ca4:	6c6c      	li	a0,108
484a5ca6:	636f      	addiu	sp,888
484a5ca8:	6620      	0x6620
484a5caa:	6961      	li	s1,97
484a5cac:	216c      	beqz	s1,484a5d86 <.LBE17+0x52>
484a5cae:	0021      	addiu	s0,sp,132
484a5cb0:	999c      	lw	a0,112(s1)
484a5cb2:	9fc1      	lw	a2,4(a3)
484a5cb4:	e901      	sdbbp	8
484a5cb6:	bfc1      	lwu	a2,4(a3)
484a5cb8:	e905      	break	8
484a5cba:	bfc1      	lwu	a2,4(a3)
484a5cbc:	0000      	addiu	s0,sp,0
484a5cbe:	0013      	addiu	s0,sp,76
484a5cc0:	0000      	addiu	s0,sp,0
484a5cc2:	0014      	addiu	s0,sp,80
484a5cc4:	a0c0      	lbu	a2,0(s0)
484a5cc6:	9fc1      	lw	a2,4(a3)
484a5cc8:	5de9      	sltiu	a1,233
484a5cca:	484a      	addiu	s0,74

484a5ccc <__set_dae_config>:
484a5ccc:	f004 64f6 	save	a0,48,ra,s0-s1
484a5cd0:	6a01      	li	v0,1
484a5cd2:	6d00      	li	a1,0
484a5cd4:	b028      	lw	s0,484a5d74 <.LBE17+0x40>
484a5cd6:	d206      	sw	v0,24(sp)
484a5cd8:	6c03      	li	a0,3
484a5cda:	67c5      	move	a2,a1
484a5cdc:	e840      	jalr	s0
484a5cde:	6f49      	li	a3,73
484a5ce0:	6722      	move	s1,v0
484a5ce2:	2a06      	bnez	v0,484a5cf0 <__set_dae_config+0x24>
484a5ce4:	0c1d      	la	a0,484a5d58 <.LBE17+0x24>
484a5ce6:	67a2      	move	a1,v0
484a5ce8:	67c2      	move	a2,v0
484a5cea:	e840      	jalr	s0
484a5cec:	6f4b      	li	a3,75
484a5cee:	17ff      	b	484a5cee <__set_dae_config+0x22>
484a5cf0:	b522      	lw	a1,484a5d78 <.LBE17+0x44>
484a5cf2:	6b7f      	li	v1,127
484a5cf4:	a58c      	lbu	a0,12(a1)
484a5cf6:	ec6c      	and	a0,v1
484a5cf8:	7403      	cmpi	a0,3
484a5cfa:	6109      	btnez	484a5d0e <__set_dae_config+0x42>
484a5cfc:	b720      	lw	a3,484a5d7c <.LBE17+0x48>
484a5cfe:	a7c0      	lbu	a2,0(a3)
484a5d00:	2e06      	bnez	a2,484a5d0e <__set_dae_config+0x42>
484a5d02:	b220      	lw	v0,484a5d80 <.LBE17+0x4c>
484a5d04:	a205      	lbu	s0,5(v0)
484a5d06:	700a      	cmpi	s0,10
484a5d08:	6002      	bteqz	484a5d0e <__set_dae_config+0x42>
484a5d0a:	b31f      	lw	v1,484a5d84 <.LBE17+0x50>
484a5d0c:	ebc0      	jalrc	v1
484a5d0e:	6c00      	li	a0,0
484a5d10:	b019      	lw	s0,484a5d74 <.LBE17+0x40>
484a5d12:	67a4      	move	a1,a0
484a5d14:	67c4      	move	a2,a0
484a5d16:	e840      	jalr	s0
484a5d18:	6f33      	li	a3,51
484a5d1a:	950c      	lw	a1,48(sp)
484a5d1c:	6eff      	li	a2,255
484a5d1e:	b21b      	lw	v0,484a5d88 <.LBE17+0x54>
484a5d20:	6791      	move	a0,s1
484a5d22:	4e61      	addiu	a2,97
484a5d24:	ea40      	jalr	v0
484a5d26:	6f00      	li	a3,0
484a5d28:	6c00      	li	a0,0
484a5d2a:	67a4      	move	a1,a0
484a5d2c:	67c4      	move	a2,a0
484a5d2e:	e840      	jalr	s0
484a5d30:	6f34      	li	a3,52

484a5d32 <.LBB17>:
484a5d32:	b417      	lw	a0,484a5d8c <.LBE17+0x58>

484a5d34 <.LBE17>:
484a5d34:	a440      	lbu	v0,0(a0)
484a5d36:	220d      	beqz	v0,484a5d52 <.LBE17+0x1e>
484a5d38:	7205      	cmpi	v0,5
484a5d3a:	600b      	bteqz	484a5d52 <.LBE17+0x1e>
484a5d3c:	6ef6      	li	a2,246
484a5d3e:	d604      	sw	a2,16(sp)
484a5d40:	b214      	lw	v0,484a5d90 <.LBE17+0x5c>
484a5d42:	6e00      	li	a2,0
484a5d44:	0504      	addiu	a1,sp,16
484a5d46:	6c80      	li	a0,128
484a5d48:	ea40      	jalr	v0
484a5d4a:	67e6      	move	a3,a2
484a5d4c:	5a01      	sltiu	v0,1
484a5d4e:	67b8      	move	a1,t8
484a5d50:	d506      	sw	a1,24(sp)
484a5d52:	9206      	lw	v0,24(sp)
484a5d54:	6476      	restore	48,ra,s0-s1
484a5d56:	e8a0      	jrc	ra
484a5d58:	453c      	daddiu	s1,a1,-4
484a5d5a:	203e      	beqz	s0,484a5dd8 <com_set_dae_config_dynamic+0x8>
484a5d5c:	6164      	btnez	484a5e26 <com_math_exp_fixed+0x3e>
484a5d5e:	5f65      	sltiu	a3,101
484a5d60:	6663      	0x6663
484a5d62:	2067      	beqz	s0,484a5e32 <com_math_exp_fixed+0x4a>
484a5d64:	6873      	li	s0,115
484a5d66:	206d      	beqz	s0,484a5e42 <com_math_exp_fixed+0x5a>
484a5d68:	6f6e      	li	a3,110
484a5d6a:	2074      	beqz	s0,484a5e54 <com_math_exp_fixed+0x6c>
484a5d6c:	7865      	sd	v1,40(s0)
484a5d6e:	7369      	cmpi	v1,105
484a5d70:	2174      	beqz	s1,484a5e5a <com_math_exp_fixed+0x72>
484a5d72:	0021      	addiu	s0,sp,132
484a5d74:	e901      	sdbbp	8
484a5d76:	bfc1      	lwu	a2,4(a3)
484a5d78:	a0c0      	lbu	a2,0(s0)
484a5d7a:	9fc1      	lw	a2,4(a3)
484a5d7c:	a2a5      	lbu	a1,5(v0)
484a5d7e:	9fc1      	lw	a2,4(a3)
484a5d80:	a080      	lbu	a0,0(s0)
484a5d82:	9fc1      	lw	a2,4(a3)
484a5d84:	5b05      	sltiu	v1,5
484a5d86:	4856      	addiu	s0,86
484a5d88:	e905      	break	8
484a5d8a:	bfc1      	lwu	a2,4(a3)
484a5d8c:	a094      	lbu	a0,20(s0)
484a5d8e:	9fc1      	lw	a2,4(a3)
484a5d90:	5a65      	sltiu	v0,101
484a5d92:	482e      	addiu	s0,46

484a5d94 <__load_update_set_dae_config>:
484a5d94:	64e3      	save	24,ra,s0
484a5d96:	7501      	cmpi	a1,1
484a5d98:	6704      	move	s0,a0
484a5d9a:	6104      	btnez	484a5da4 <__load_update_set_dae_config+0x10>
484a5d9c:	6d01      	li	a1,1
484a5d9e:	b20a      	lw	v0,484a5dc4 <__load_update_set_dae_config+0x30>
484a5da0:	ea40      	jalr	v0
484a5da2:	67c5      	move	a2,a1
484a5da4:	b509      	lw	a1,484a5dc8 <__load_update_set_dae_config+0x34>
484a5da6:	9d60      	lw	v1,0(a1)
484a5da8:	f020 a397 	lbu	a0,55(v1)
484a5dac:	6b01      	li	v1,1
484a5dae:	2407      	beqz	a0,484a5dbe <__load_update_set_dae_config+0x2a>
484a5db0:	b207      	lw	v0,484a5dcc <__load_update_set_dae_config+0x38>
484a5db2:	ea40      	jalr	v0
484a5db4:	6790      	move	a0,s0
484a5db6:	1a50 9733 	jal	484a5ccc <__set_dae_config>
484a5dba:	6790      	move	a0,s0
484a5dbc:	6762      	move	v1,v0
484a5dbe:	6743      	move	v0,v1
484a5dc0:	6463      	restore	24,ra,s0
484a5dc2:	e8a0      	jrc	ra
484a5dc4:	5801      	sltiu	s0,1
484a5dc6:	484a      	addiu	s0,74
484a5dc8:	999c      	lw	a0,112(s1)
484a5dca:	9fc1      	lw	a2,4(a3)
484a5dcc:	58f9      	sltiu	s0,249
484a5dce:	484a      	addiu	s0,74

484a5dd0 <com_set_dae_config_dynamic>:
484a5dd0:	64c3      	save	24,ra
484a5dd2:	b205      	lw	v0,484a5de4 <com_set_dae_config_dynamic+0x14>
484a5dd4:	6d00      	li	a1,0
484a5dd6:	9a80      	lw	a0,0(v0)
484a5dd8:	1a50 9765 	jal	484a5d94 <__load_update_set_dae_config>
484a5ddc:	4c4c      	addiu	a0,76
484a5dde:	6443      	restore	24,ra
484a5de0:	e8a0      	jrc	ra
484a5de2:	0000      	addiu	s0,sp,0
484a5de4:	999c      	lw	a0,112(s1)
484a5de6:	9fc1      	lw	a2,4(a3)

484a5de8 <com_math_exp_fixed>:
484a5de8:	f004 64b3 	save	a0,24,s0-s1

/*db单位为0.1db*/
/*为了计算方便，将结果转换为百分数，返回分子*/
int com_math_exp_fixed(int db)
{
484a5dec:	b541      	lw	a1,484a5ef0 <com_math_exp_fixed+0x108>
    int i;
    int temp = 32768;
    long long sum = 4398046511104L;
    int xin;
    int percent;
    int count = 0;

    xin = (db*75451)/200;
484a5dee:	9606      	lw	a2,24(sp)
484a5df0:	6ac8      	li	v0,200
484a5df2:	eeb8      	mult	a2,a1
484a5df4:	b03d      	lw	s0,484a5ee8 <com_math_exp_fixed+0x100>
484a5df6:	eb12      	mflo	v1
484a5df8:	d000      	sw	s0,0(sp)
484a5dfa:	eb5a      	div	zero,v1,v0
484a5dfc:	b73c      	lw	a3,484a5eec <com_math_exp_fixed+0x104>
484a5dfe:	f010 6c00 	li	a0,32768
484a5e02:	d701      	sw	a3,4(sp)
484a5e04:	6900      	li	s1,0
484a5e06:	e812      	mflo	s0
484a5e08:	f010 5000 	slti	s0,-32768

    while (xin < -32768)
    {
        xin += 32768;
        count ++;
484a5e0c:	6006      	bteqz	484a5e1a <com_math_exp_fixed+0x32>
484a5e0e:	6744      	move	v0,a0
484a5e10:	e041      	addu	s0,v0
484a5e12:	f010 5000 	slti	s0,-32768
484a5e16:	4121      	addiu	s1,s1,1
484a5e18:	61fb      	btnez	484a5e10 <com_math_exp_fixed+0x28>
484a5e1a:	f010 6a00 	li	v0,32768
    }

    while (xin > 32768)
    {
        xin -= 32768;
        count ++;
484a5e1e:	ea02      	slt	v0,s0
484a5e20:	6004      	bteqz	484a5e2a <com_math_exp_fixed+0x42>
484a5e22:	f010 4800 	addiu	s0,-32768
484a5e26:	4121      	addiu	s1,s1,1
484a5e28:	17fa      	b	484a5e1e <com_math_exp_fixed+0x36>
484a5e2a:	b333      	lw	v1,484a5ef4 <com_math_exp_fixed+0x10c>
484a5e2c:	6a05      	li	v0,5
484a5e2e:	d302      	sw	v1,8(sp)
484a5e30:	653a      	move	t9,v0
484a5e32:	ec18      	mult	a0,s0
    }

    for (i = 0; i < 6; i++)
    {
        temp = MUL32_32_RS15(temp,xin);
484a5e34:	eb10      	mfhi	v1
484a5e36:	ea12      	mflo	v0
484a5e38:	f440 3560 	sll	a1,v1,17
484a5e3c:	9302      	lw	v1,8(sp)
        sum += MUL32_32(temp, exp_taylor_coeff[i]);
484a5e3e:	3642      	srl	a2,v0,8
484a5e40:	34de      	srl	a0,a2,7
484a5e42:	67e5      	move	a3,a1
484a5e44:	9bc0      	lw	a2,0(v1)
484a5e46:	ef8d      	or	a3,a0
484a5e48:	efd8      	mult	a3,a2
484a5e4a:	6787      	move	a0,a3
484a5e4c:	ea12      	mflo	v0
484a5e4e:	9700      	lw	a3,0(sp)
484a5e50:	9501      	lw	a1,4(sp)
484a5e52:	e759      	addu	a2,a3,v0
484a5e54:	eb10      	mfhi	v1
484a5e56:	eee3      	sltu	a2,a3
484a5e58:	6758      	move	v0,t8
484a5e5a:	e57d      	addu	a3,a1,v1
484a5e5c:	6779      	move	v1,t9
484a5e5e:	9502      	lw	a1,8(sp)
484a5e60:	e2fd      	addu	a3,v0,a3
484a5e62:	434f      	addiu	v0,v1,-1
484a5e64:	45a4      	addiu	a1,a1,4
484a5e66:	5200      	slti	v0,0
484a5e68:	d600      	sw	a2,0(sp)
484a5e6a:	d701      	sw	a3,4(sp)
484a5e6c:	653a      	move	t9,v0
484a5e6e:	d502      	sw	a1,8(sp)
484a5e70:	60e0      	bteqz	484a5e32 <com_math_exp_fixed+0x4a>
484a5e72:	35f4      	sll	a1,a3,5
    }

    percent = (int)(sum>>27);
484a5e74:	f6c0 34c2 	srl	a0,a2,27
484a5e78:	67e5      	move	a3,a1
484a5e7a:	ef8d      	or	a3,a0
484a5e7c:	5101      	slti	s1,1

    if (count > 0)
484a5e7e:	6767      	move	v1,a3
484a5e80:	6128      	btnez	484a5ed2 <com_math_exp_fixed+0xea>
484a5e82:	9606      	lw	a2,24(sp)
    {
        if (db < 0)
484a5e84:	5600      	slti	a2,0
484a5e86:	6013      	bteqz	484a5eae <com_math_exp_fixed+0xc6>
484a5e88:	6a00      	li	v0,0
        {
            for (i = 0; i < count; i++)
484a5e8a:	ea22      	slt	v0,s1
484a5e8c:	6022      	bteqz	484a5ed2 <com_math_exp_fixed+0xea>
484a5e8e:	b71b      	lw	a3,484a5ef8 <com_math_exp_fixed+0x110>
484a5e90:	67d1      	move	a2,s1
484a5e92:	651f      	move	t8,a3
484a5e94:	6758      	move	v0,t8
            {
                percent = MUL32_32_RS(percent,INV_EE,27);
484a5e96:	eb58      	mult	v1,v0
484a5e98:	46cf      	addiu	a2,a2,-1
484a5e9a:	ef10      	mfhi	a3
484a5e9c:	ed12      	mflo	a1
484a5e9e:	34f4      	sll	a0,a3,5
484a5ea0:	f6c0 33a2 	srl	v1,a1,27
484a5ea4:	6744      	move	v0,a0
484a5ea6:	ea6d      	or	v0,v1
484a5ea8:	6762      	move	v1,v0
484a5eaa:	2ef4      	bnez	a2,484a5e94 <com_math_exp_fixed+0xac>
484a5eac:	1012      	b	484a5ed2 <com_math_exp_fixed+0xea>
484a5eae:	6e00      	li	a2,0
            }
        }
        else
        {
            for (i = 0; i < count; i++)
484a5eb0:	ee22      	slt	a2,s1
484a5eb2:	600f      	bteqz	484a5ed2 <com_math_exp_fixed+0xea>
484a5eb4:	b413      	lw	a0,484a5f00 <com_math_exp_fixed+0x118>
484a5eb6:	67d1      	move	a2,s1
484a5eb8:	651c      	move	t8,a0
484a5eba:	67f8      	move	a3,t8
            {
                percent = MUL32_32_RS(percent,EE,27);
484a5ebc:	ebf8      	mult	v1,a3
484a5ebe:	46cf      	addiu	a2,a2,-1
484a5ec0:	ec10      	mfhi	a0
484a5ec2:	ea12      	mflo	v0
484a5ec4:	3594      	sll	a1,a0,5
484a5ec6:	f6c0 3342 	srl	v1,v0,27
484a5eca:	67e5      	move	a3,a1
484a5ecc:	ef6d      	or	a3,v1
484a5ece:	6767      	move	v1,a3
484a5ed0:	2ef4      	bnez	a2,484a5eba <com_math_exp_fixed+0xd2>
484a5ed2:	6e64      	li	a2,100
            }
        }
    }

    percent = percent*100/32768;
484a5ed4:	ebd8      	mult	v1,a2
484a5ed6:	ea12      	mflo	v0
484a5ed8:	5200      	slti	v0,0
484a5eda:	6002      	bteqz	484a5ee0 <com_math_exp_fixed+0xf8>
484a5edc:	f7ef 4a1f 	addiu	v0,32767
484a5ee0:	3343      	sra	v1,v0,8

    return percent;
}
484a5ee2:	327f      	sra	v0,v1,7
484a5ee4:	6433      	restore	24,s0-s1
484a5ee6:	e8a0      	jrc	ra
484a5ee8:	0000      	addiu	s0,sp,0
484a5eea:	0000      	addiu	s0,sp,0
484a5eec:	0400      	addiu	a0,sp,0
484a5eee:	0000      	addiu	s0,sp,0
484a5ef0:	26bb      	beqz	a2,484a5e68 <com_math_exp_fixed+0x80>
484a5ef2:	0001      	addiu	s0,sp,4
484a5ef4:	5f08      	sltiu	a3,8
484a5ef6:	484a      	addiu	s0,74
484a5ef8:	6ac6      	li	v0,198
484a5efa:	02f1      	addiu	v0,sp,964
484a5efc:	0000      	addiu	s0,sp,0
484a5efe:	0000      	addiu	s0,sp,0
484a5f00:	0a8b      	la	v0,484a612c <exp_taylor_coeff+0x224>
484a5f02:	15bf      	b	484a5a82 <.LBB10+0x148>
484a5f04:	0000      	addiu	s0,sp,0
	...

484a5f08 <exp_taylor_coeff>:
484a5f08:	0000 0800 0000 0400 5555 0155 5555 0055     ........UUU.UUU.
484a5f18:	1111 0011 d82d 0002 0000 0000 0000 0000     ....-...........
	...
Disassembly of section BANK_UI_1_19:

484e5800 <com_phy_key_phy2log>:
484e5800:	a440      	lbu	v0,0(a0)
/*! \cond COMMON_API */

uint8 com_phy_key_phy2log(key_phy_msg_t *p_key_msg)
{
    if (p_key_msg->key_type == KEY_TYPE_KEY)
484e5802:	6b07      	li	v1,7
484e5804:	eb4c      	and	v1,v0
484e5806:	2b08      	bnez	v1,484e5818 <com_phy_key_phy2log+0x18>
484e5808:	a481      	lbu	a0,1(a0)
    {
        if (p_key_msg->key_id == KEY_PHY_PLAY)
484e580a:	6a01      	li	v0,1
        {
            return KEY_PLAY;
484e580c:	7432      	cmpi	a0,50
484e580e:	6029      	bteqz	484e5862 <.LBE2+0xe>
484e5810:	b315      	lw	v1,484e5864 <.LBE2+0x10>
        }

        return g_key_infor.key_val_map[p_key_msg->key_id];
484e5812:	e469      	addu	v0,a0,v1
484e5814:	e820      	jr	ra
484e5816:	a251      	lbu	v0,17(v0)
484e5818:	eb11      	zeb	v1
    }
    else if (p_key_msg->key_type == KEY_TYPE_IR)
484e581a:	7301      	cmpi	v1,1
484e581c:	611b      	btnez	484e5854 <.LBE2>
484e581e:	6f03      	li	a3,3
484e5820:	3256      	srl	v0,5
484e5822:	eaec      	and	v0,a3
484e5824:	4f12      	addiu	a3,18
484e5826:	eaf8      	mult	v0,a3

484e5828 <.LBB2>:
484e5828:	a481      	lbu	a0,1(a0)
    {
        uint8 key_code, key_id;

        key_code = p_key_msg->key_id;
484e582a:	b610      	lw	a2,484e5868 <.LBE2+0x14>
484e582c:	eb12      	mflo	v1
484e582e:	6d00      	li	a1,0
        for (key_id = 0; key_id < IR_KEY_MAX; key_id++)
484e5830:	e3dd      	addu	a3,v1,a2
        {
            if (key_code == IrcKeyValueTab[p_key_msg->key_ir_code][key_id])
484e5832:	e7a9      	addu	v0,a3,a1
484e5834:	a2e0      	lbu	a3,0(v0)
484e5836:	ef8e      	xor	a3,a0
484e5838:	2705      	beqz	a3,484e5844 <.LBB2+0x1c>
484e583a:	4541      	addiu	v0,a1,1
484e583c:	67a2      	move	a1,v0
484e583e:	ed11      	zeb	a1
484e5840:	5d15      	sltiu	a1,21
484e5842:	61f6      	btnez	484e5830 <.LBB2+0x8>
484e5844:	5d15      	sltiu	a1,21
            {
                break;
            }
        }

        if (key_id >= IR_KEY_MAX)
484e5846:	6a00      	li	v0,0
        {
            return KEY_NULL;
484e5848:	600c      	bteqz	484e5862 <.LBE2+0xe>
484e584a:	b709      	lw	a3,484e586c <.LBE2+0x18>
        }

        return IrcKeyMsgTab[p_key_msg->key_ir_code][key_id];
484e584c:	e3f9      	addu	a2,v1,a3
484e584e:	e6b1      	addu	a0,a2,a1
484e5850:	e820      	jr	ra
484e5852:	a440      	lbu	v0,0(a0)

484e5854 <.LBE2>:
484e5854:	7302      	cmpi	v1,2
    }
    else if (p_key_msg->key_type == KEY_TYPE_TK)
484e5856:	6a00      	li	v0,0
    {
        return g_key_infor.tk_key_val_map[p_key_msg->key_id];
    }
    else
    {
        return KEY_NULL;
484e5858:	6104      	btnez	484e5862 <.LBE2+0xe>
484e585a:	a441      	lbu	v0,1(a0)
484e585c:	b302      	lw	v1,484e5864 <.LBE2+0x10>
484e585e:	e275      	addu	a1,v0,v1
484e5860:	a559      	lbu	v0,25(a1)
484e5862:	e8a0      	jrc	ra
    }
}
484e5864:	a1cc      	lbu	a2,12(s1)
484e5866:	9fc1      	lw	a2,4(a3)
484e5868:	5c90      	sltiu	a0,144
484e586a:	484e      	addiu	s0,78
484e586c:	5c3c      	sltiu	a0,60
484e586e:	484e      	addiu	s0,78

484e5870 <com_need_cont_dck_deal>:
484e5870:	64e3      	save	24,ra,s0

bool com_need_cont_dck_deal(uint8 key_count)
{
484e5872:	6704      	move	s0,a0
484e5874:	b212      	lw	v0,484e58bc <com_need_cont_dck_deal+0x4c>
    uint16 tmp_timestamp = (uint16) sys_get_ab_timer();
484e5876:	6c00      	li	a0,0
484e5878:	67a4      	move	a1,a0
484e587a:	67c4      	move	a2,a0
484e587c:	ea40      	jalr	v0
484e587e:	6f1c      	li	a3,28
484e5880:	b410      	lw	a0,484e58c0 <com_need_cont_dck_deal+0x50>
    uint32 tmp_time = tmp_timestamp;

    if (tmp_timestamp < g_key_infor.dck_timestamp)
484e5882:	6762      	move	v1,v0
484e5884:	aca2      	lhu	a1,4(a0)
484e5886:	eb31      	zeh	v1
484e5888:	eba3      	sltu	v1,a1
484e588a:	e811      	zeb	s0
484e588c:	6002      	bteqz	484e5892 <com_need_cont_dck_deal+0x22>
484e588e:	b60e      	lw	a2,484e58c4 <com_need_cont_dck_deal+0x54>
    {
        tmp_time += 0x10000; 
484e5890:	e3cd      	addu	v1,a2
484e5892:	e3bf      	subu	a3,v1,a1
    }

    if ((uint32)( tmp_time - (uint32)g_key_infor.dck_timestamp) > (uint32)300)
484e5894:	f120 5f0d 	sltiu	a3,301
484e5898:	a4ad      	lbu	a1,13(a0)
484e589a:	610a      	btnez	484e58b0 <com_need_cont_dck_deal+0x40>
484e589c:	6b01      	li	v1,1
    {
        g_key_infor.status = KEY_STATUS_NULL;
        g_key_infor.dck_fail = TRUE;
        g_key_infor.count_fail = g_key_infor.count;
        g_key_infor.dck_flag = FALSE;
        g_key_infor.count = 0;
        return TRUE;
484e589e:	6e00      	li	a2,0
484e58a0:	6a01      	li	v0,1
484e58a2:	651b      	move	t8,v1
484e58a4:	c4cc      	sb	a2,12(a0)
484e58a6:	c449      	sb	v0,9(a0)
484e58a8:	c4ab      	sb	a1,11(a0)
484e58aa:	c4ca      	sb	a2,10(a0)
484e58ac:	c4cd      	sb	a2,13(a0)
484e58ae:	1003      	b	484e58b6 <com_need_cont_dck_deal+0x46>
484e58b0:	6785      	move	a0,a1
    }

    if (key_count <= g_key_infor.count)
484e58b2:	ec11      	zeb	a0
484e58b4:	ec03      	sltu	a0,s0
    {
        return FALSE;
484e58b6:	6758      	move	v0,t8
    }

    return TRUE;
}
484e58b8:	6463      	restore	24,ra,s0
484e58ba:	e8a0      	jrc	ra
484e58bc:	e901      	sdbbp	8
484e58be:	bfc1      	lwu	a2,4(a3)
484e58c0:	a1cc      	lbu	a2,12(s1)
484e58c2:	9fc1      	lw	a2,4(a3)
484e58c4:	0000      	addiu	s0,sp,0
484e58c6:	0001      	addiu	s0,sp,4

484e58c8 <com_phy_key_fsm>:
484e58c8:	f004 64f8 	save	a0,64,ra,s0-s1

#define KEYTONE_NOBLOCK        0 //非阻塞模式，默认为非阻塞模式
#define KEYTONE_BLOCK          1 //阻塞模式
extern void com_start_key_tone(uint8 mode) __FAR__;

bool com_phy_key_fsm(input_gui_msg_t *input_msg)
{
484e58cc:	6b00      	li	v1,0
    key_phy_msg_t key_msg;
    uint8 key_log_id = KEY_NULL;
484e58ce:	d307      	sw	v1,28(sp)
484e58d0:	d308      	sw	v1,32(sp)
    key_type_e key_type = KEY_TYPE_NULL;
    bool need_ret_gui = FALSE;
484e58d2:	d309      	sw	v1,36(sp)
    bool need_recv_phy = FALSE;
484e58d4:	d30a      	sw	v1,40(sp)
    bool no_keytone = FALSE;
484e58d6:	b395      	lw	v1,484e5b28 <.LBE3+0x7c>

    if (g_key_infor.status >= KEY_STATUS_DOWN_1ST)
484e58d8:	a34c      	lbu	v0,12(v1)
484e58da:	5a03      	sltiu	v0,3
484e58dc:	b294      	lw	v0,484e5b2c <.LBE3+0x80>
484e58de:	6104      	btnez	484e58e8 <com_phy_key_fsm+0x20>
484e58e0:	a3cd      	lbu	a2,13(v1)
    {
        if (sys_mq_traverse(MQ_ID_GUI, (void *) &key_msg, g_key_infor.count) == -1)
484e58e2:	6c06      	li	a0,6
484e58e4:	0504      	addiu	a1,sp,16
484e58e6:	1003      	b	484e58ee <com_phy_key_fsm+0x26>
484e58e8:	960a      	lw	a2,40(sp)
        {
            return FALSE;
        }
    }
    else
    {
        if (sys_mq_traverse(MQ_ID_GUI, (void *) &key_msg, 0) == -1)
484e58ea:	6c06      	li	a0,6
484e58ec:	0504      	addiu	a1,sp,16
484e58ee:	ea40      	jalr	v0
484e58f0:	6f3f      	li	a3,63
484e58f2:	ec4f      	not	a0,v0
484e58f4:	930a      	lw	v1,40(sp)
        {
            return FALSE;
484e58f6:	f100 240e 	beqz	a0,484e5b16 <.LBE3+0x6a>
484e58fa:	1a70 9600 	jal	484e5800 <com_phy_key_phy2log>
        }
    }

    PRINT_DBG_INT("phykey:", (key_msg.key_status << 16) + key_msg.key_id);

    key_log_id = com_phy_key_phy2log(&key_msg);
484e58fe:	0404      	addiu	a0,sp,16
484e5900:	d206      	sw	v0,24(sp)
484e5902:	6762      	move	v1,v0
    if (key_log_id == KEY_NULL)
    {
        return FALSE;
484e5904:	f100 2207 	beqz	v0,484e5b16 <.LBE3+0x6a>

484e5908 <.L27>:
484e5908:	b088      	lw	s0,484e5b28 <.LBE3+0x7c>
    }

    cont_phy_key_fsm:
    switch (g_key_infor.status)
484e590a:	a06c      	lbu	v1,12(s0)
484e590c:	5b06      	sltiu	v1,6
484e590e:	f0c0 6016 	bteqz	484e5abe <.LBE3+0x12>
484e5912:	0f04      	la	a3,484e5920 <.L27+0x18>
484e5914:	3364      	sll	v1,1
484e5916:	e3e9      	addu	v0,v1,a3
484e5918:	8ac0      	lh	a2,0(v0)
484e591a:	e6f5      	addu	a1,a2,a3
484e591c:	ed80      	jrc	a1
484e591e:	0000      	addiu	s0,sp,0
484e5920:	000d      	addiu	s0,sp,52
484e5922:	0077      	addiu	s0,sp,476
484e5924:	00af      	addiu	s0,sp,700
484e5926:	00f7      	addiu	s0,sp,988
484e5928:	0117      	addiu	s1,sp,92
484e592a:	013f      	addiu	s1,sp,252
484e592c:	a089      	lbu	a0,9(s0)
    {
        case KEY_STATUS_NULL:
        /*刚开始按键*/
        if ((g_key_infor.dck_fail == TRUE) || ((g_key_infor.dck_map & (uint32) (1 << key_log_id)) == 0))
484e592e:	6b01      	li	v1,1
484e5930:	ec6e      	xor	a0,v1
484e5932:	ec63      	sltu	a0,v1
484e5934:	6798      	move	a0,t8
484e5936:	2c06      	bnez	a0,484e5944 <.L27+0x3c>
484e5938:	9606      	lw	a2,24(sp)
484e593a:	98a0      	lw	a1,0(s0)
484e593c:	6723      	move	s1,v1
484e593e:	ee64      	sllv	v1,a2
484e5940:	ed6c      	and	a1,v1
484e5942:	2d17      	bnez	a1,484e5972 <.L27+0x6a>
484e5944:	675d      	move	v0,sp
        { 
            //检测到一个按键，如果其初始的物理状态为抬起，过滤掉该按键消息 
            if (key_msg.key_status == KEY_PHY_UP)
484e5946:	a2f0      	lbu	a3,16(v0)
484e5948:	6b18      	li	v1,24
484e594a:	ef6c      	and	a3,v1
484e594c:	7710      	cmpi	a3,16
484e594e:	6105      	btnez	484e595a <.L27+0x52>
484e5950:	6c00      	li	a0,0
            {  
                need_ret_gui = FALSE;
484e5952:	4be9      	addiu	v1,-23
                need_recv_phy = TRUE;             
484e5954:	d408      	sw	a0,32(sp)
484e5956:	d309      	sw	v1,36(sp)
484e5958:	10b2      	b	484e5abe <.LBE3+0x12>
                break;
484e595a:	6b10      	li	v1,16
            }
            
            //不需要分析双击按键，读取按键消息并返回
            g_key_infor.status = KEY_STATUS_DOWN;
            g_key_infor.count = 1;
            key_type = KEY_TYPE_DOWN;
484e595c:	6d01      	li	a1,1
484e595e:	d307      	sw	v1,28(sp)
484e5960:	6b01      	li	v1,1
            need_ret_gui = TRUE;
484e5962:	c0ac      	sb	a1,12(s0)
484e5964:	c0ad      	sb	a1,13(s0)
484e5966:	d308      	sw	v1,32(sp)
484e5968:	d309      	sw	v1,36(sp)
            need_recv_phy = TRUE;
484e596a:	f0a0 2408 	beqz	a0,484e5abe <.LBE3+0x12>
            if (g_key_infor.dck_fail == TRUE)
484e596e:	d30a      	sw	v1,40(sp)
            {
                no_keytone = TRUE;
484e5970:	10a6      	b	484e5abe <.LBE3+0x12>
484e5972:	6c03      	li	a0,3
            }
        }
        else
        { //需要分析双击按键，直接返回
            g_key_infor.status = KEY_STATUS_DOWN_1ST;
484e5974:	b36f      	lw	v1,484e5b30 <.LBE3+0x84>
            com_start_key_tone(KEYTONE_NOBLOCK); //双击按键音
484e5976:	c08c      	sb	a0,12(s0)
484e5978:	eb40      	jalr	v1
484e597a:	6c00      	li	a0,0
484e597c:	67fd      	move	a3,sp
            g_key_infor.dck_val = key_log_id;
484e597e:	a7d8      	lbu	a2,24(a3)
484e5980:	6c00      	li	a0,0
            g_key_infor.count = 1;
            g_key_infor.dck_timestamp = (uint16) sys_get_ab_timer();
484e5982:	b26b      	lw	v0,484e5b2c <.LBE3+0x80>
484e5984:	c0c8      	sb	a2,8(s0)
484e5986:	c02d      	sb	s1,13(s0)
484e5988:	67a4      	move	a1,a0
484e598a:	67c4      	move	a2,a0
484e598c:	ea40      	jalr	v0
484e598e:	6f1c      	li	a3,28
484e5990:	c842      	sh	v0,4(s0)
484e5992:	c02a      	sb	s1,10(s0)
            g_key_infor.dck_flag = TRUE;
484e5994:	1094      	b	484e5abe <.LBE3+0x12>
        }
        break;
484e5996:	675d      	move	v0,sp

        case KEY_STATUS_DOWN:
        /*已经检测到按键按下*/
        if (key_msg.key_status == KEY_PHY_UP)
484e5998:	a2b0      	lbu	a1,16(v0)
484e599a:	6b18      	li	v1,24
484e599c:	ed6c      	and	a1,v1
484e599e:	7510      	cmpi	a1,16
484e59a0:	6106      	btnez	484e59ae <.L27+0xa6>
484e59a2:	6f00      	li	a3,0
        {
            g_key_infor.status = KEY_STATUS_NULL;
484e59a4:	6e02      	li	a2,2
            key_type = KEY_TYPE_SHORT_UP;
484e59a6:	4be9      	addiu	v1,-23
            need_ret_gui = TRUE;
484e59a8:	c0ec      	sb	a3,12(s0)
484e59aa:	d607      	sw	a2,28(sp)
484e59ac:	100e      	b	484e59ca <.L27+0xc2>
484e59ae:	a04d      	lbu	v0,13(s0)
        }
        else
        {
            if (g_key_infor.count < 5)
484e59b0:	5a05      	sltiu	v0,5
484e59b2:	6003      	bteqz	484e59ba <.L27+0xb2>
484e59b4:	4261      	addiu	v1,v0,1
            {
                g_key_infor.count++;
484e59b6:	c06d      	sb	v1,13(s0)
484e59b8:	102b      	b	484e5a10 <.L27+0x108>
484e59ba:	b65f      	lw	a2,484e5b34 <.LBE3+0x88>
            }
            else
            {
				g_key_hold=0;		
484e59bc:	6a00      	li	v0,0
484e59be:	6d02      	li	a1,2
                g_key_infor.status = KEY_STATUS_HOLD;
484e59c0:	6c08      	li	a0,8
                key_type = KEY_TYPE_LONG;
484e59c2:	c640      	sb	v0,0(a2)
484e59c4:	c0ac      	sb	a1,12(s0)
484e59c6:	d407      	sw	a0,28(sp)
484e59c8:	6b01      	li	v1,1
                need_ret_gui = TRUE;
484e59ca:	d308      	sw	v1,32(sp)
484e59cc:	1021      	b	484e5a10 <.L27+0x108>
484e59ce:	679d      	move	a0,sp
            }
        }
        need_recv_phy = TRUE;
        break;

        case KEY_STATUS_HOLD:
        /*已经检测到按键保持*/
        if (key_msg.key_status == KEY_PHY_UP)
484e59d0:	a4f0      	lbu	a3,16(a0)
484e59d2:	6b18      	li	v1,24
484e59d4:	ef6c      	and	a3,v1
484e59d6:	7710      	cmpi	a3,16
484e59d8:	6106      	btnez	484e59e6 <.L27+0xde>
484e59da:	6d01      	li	a1,1
        {
            g_key_infor.status = KEY_STATUS_NULL;
            key_type = KEY_TYPE_LONG_UP;
484e59dc:	6e00      	li	a2,0
484e59de:	c0cc      	sb	a2,12(s0)
484e59e0:	d507      	sw	a1,28(sp)
484e59e2:	d508      	sw	a1,32(sp)
            need_ret_gui = TRUE;
484e59e4:	1015      	b	484e5a10 <.L27+0x108>
484e59e6:	6801      	li	s0,1
        }
        else
        {
            key_type = KEY_TYPE_HOLD;
            need_ret_gui = TRUE;
484e59e8:	d008      	sw	s0,32(sp)
484e59ea:	b053      	lw	s0,484e5b34 <.LBE3+0x88>
			g_key_hold++;
484e59ec:	6b04      	li	v1,4
484e59ee:	a0e0      	lbu	a3,0(s0)
484e59f0:	b24f      	lw	v0,484e5b2c <.LBE3+0x80>
			libc_print("long hold",g_key_hold,2);
484e59f2:	47a1      	addiu	a1,a3,1
484e59f4:	c0a0      	sb	a1,0(s0)
484e59f6:	d307      	sw	v1,28(sp)
484e59f8:	0c49      	la	a0,484e5b1c <.LBE3+0x70>
484e59fa:	ed11      	zeb	a1
484e59fc:	6e02      	li	a2,2
484e59fe:	ea40      	jalr	v0
484e5a00:	6f4b      	li	a3,75
484e5a02:	a040      	lbu	v0,0(s0)
			if (g_key_hold>46)
484e5a04:	5a2f      	sltiu	v0,47
484e5a06:	6104      	btnez	484e5a10 <.L27+0x108>
484e5a08:	6d00      	li	a1,0
			{
			    g_key_hold=0;
484e5a0a:	6c40      	li	a0,64
			    key_type = KEY_TYPE_LONG_10S;
484e5a0c:	c0a0      	sb	a1,0(s0)
484e5a0e:	d407      	sw	a0,28(sp)
484e5a10:	6e01      	li	a2,1
	            need_ret_gui = TRUE;
			}
        }
        need_recv_phy = TRUE;
484e5a12:	d609      	sw	a2,36(sp)
484e5a14:	1054      	b	484e5abe <.LBE3+0x12>
        break;
484e5a16:	a06d      	lbu	v1,13(s0)

        case KEY_STATUS_DOWN_1ST:
        g_key_infor.count++;
484e5a18:	a048      	lbu	v0,8(s0)
        if (key_log_id == g_key_infor.dck_val)
484e5a1a:	9706      	lw	a3,24(sp)
484e5a1c:	4381      	addiu	a0,v1,1
484e5a1e:	eaee      	xor	v0,a3
484e5a20:	c08d      	sb	a0,13(s0)
484e5a22:	2a45      	bnez	v0,484e5aae <.LBE3+0x2>
484e5a24:	67dd      	move	a2,sp
        {
            if (key_msg.key_status == KEY_PHY_UP)
484e5a26:	a690      	lbu	a0,16(a2)
484e5a28:	6d18      	li	a1,24
484e5a2a:	ecac      	and	a0,a1
484e5a2c:	7410      	cmpi	a0,16
484e5a2e:	6147      	btnez	484e5abe <.LBE3+0x12>
484e5a30:	6a04      	li	v0,4
            {
                g_key_infor.status = KEY_STATUS_UP_1ST;
484e5a32:	c04c      	sb	v0,12(s0)
484e5a34:	100c      	b	484e5a4e <.L27+0x146>
484e5a36:	a0ad      	lbu	a1,13(s0)
                g_key_infor.dck_timestamp = (uint16) sys_get_ab_timer();
            }
        }
        else
        {
            g_key_infor.status = KEY_STATUS_NULL;
            g_key_infor.dck_fail = TRUE;
            g_key_infor.dck_flag = FALSE;
            g_key_infor.count_fail = g_key_infor.count;
            g_key_infor.count = 0;
            goto cont_phy_key_fsm;
        }
        break;

        case KEY_STATUS_UP_1ST:
        g_key_infor.count++;
484e5a38:	a0e8      	lbu	a3,8(s0)
        if (key_log_id == g_key_infor.dck_val)
484e5a3a:	9306      	lw	v1,24(sp)
484e5a3c:	4581      	addiu	a0,a1,1
484e5a3e:	ef6e      	xor	a3,v1
484e5a40:	c08d      	sb	a0,13(s0)
484e5a42:	2f35      	bnez	a3,484e5aae <.LBE3+0x2>
484e5a44:	6c05      	li	a0,5
        {
            g_key_infor.status = KEY_STATUS_DOWN_2ND;
484e5a46:	b23b      	lw	v0,484e5b30 <.LBE3+0x84>
            com_start_key_tone(KEYTONE_NOBLOCK); //双击按键音
484e5a48:	c08c      	sb	a0,12(s0)
484e5a4a:	ea40      	jalr	v0
484e5a4c:	6c00      	li	a0,0
484e5a4e:	6c00      	li	a0,0
            g_key_infor.dck_timestamp = (uint16) sys_get_ab_timer();
484e5a50:	b237      	lw	v0,484e5b2c <.LBE3+0x80>
484e5a52:	67a4      	move	a1,a0
484e5a54:	67c4      	move	a2,a0
484e5a56:	ea40      	jalr	v0
484e5a58:	6f1c      	li	a3,28
484e5a5a:	c842      	sh	v0,4(s0)
484e5a5c:	1030      	b	484e5abe <.LBE3+0x12>
484e5a5e:	a06d      	lbu	v1,13(s0)
        }
        else
        {
            g_key_infor.status = KEY_STATUS_NULL;
            g_key_infor.dck_fail = TRUE;
            g_key_infor.dck_flag = FALSE;
            g_key_infor.count_fail = g_key_infor.count;
            g_key_infor.count = 0;
            goto cont_phy_key_fsm;
        }
        break;

        case KEY_STATUS_DOWN_2ND:
        g_key_infor.count++;
484e5a60:	a0c8      	lbu	a2,8(s0)
        if (key_log_id == g_key_infor.dck_val)
484e5a62:	9706      	lw	a3,24(sp)
484e5a64:	4381      	addiu	a0,v1,1
484e5a66:	eeee      	xor	a2,a3
484e5a68:	c08d      	sb	a0,13(s0)
484e5a6a:	2e21      	bnez	a2,484e5aae <.LBE3+0x2>
484e5a6c:	67fd      	move	a3,sp
        {
            if (key_msg.key_status == KEY_PHY_UP)
484e5a6e:	a750      	lbu	v0,16(a3)
484e5a70:	6e18      	li	a2,24
484e5a72:	eacc      	and	v0,a2
484e5a74:	7210      	cmpi	v0,16
484e5a76:	6123      	btnez	484e5abe <.LBE3+0x12>

484e5a78 <.LBB3>:
484e5a78:	67a4      	move	a1,a0
            {
                uint8 i;

                for (i = 0; i < g_key_infor.count; i++)
484e5a7a:	ed11      	zeb	a1
484e5a7c:	6800      	li	s0,0
484e5a7e:	250d      	beqz	a1,484e5a9a <.LBB3+0x22>
484e5a80:	b22b      	lw	v0,484e5b2c <.LBE3+0x80>
                {
                    sys_mq_receive(MQ_ID_GUI, (void * ) &key_msg);
484e5a82:	6c06      	li	a0,6
484e5a84:	0504      	addiu	a1,sp,16
484e5a86:	6e00      	li	a2,0
484e5a88:	ea40      	jalr	v0
484e5a8a:	6f19      	li	a3,25
484e5a8c:	b327      	lw	v1,484e5b28 <.LBE3+0x7c>
484e5a8e:	4041      	addiu	v0,s0,1
484e5a90:	6702      	move	s0,v0
484e5a92:	a38d      	lbu	a0,13(v1)
484e5a94:	e811      	zeb	s0
484e5a96:	e883      	sltu	s0,a0
484e5a98:	61f3      	btnez	484e5a80 <.LBB3+0x8>
484e5a9a:	b524      	lw	a1,484e5b28 <.LBE3+0x7c>
                }

                g_key_infor.count = 0;
484e5a9c:	6c00      	li	a0,0
484e5a9e:	6f20      	li	a3,32
                g_key_infor.status = KEY_STATUS_NULL;
                g_key_infor.dck_flag = FALSE;
                key_type = KEY_TYPE_DBL_CLICK;
484e5aa0:	6e01      	li	a2,1
                need_ret_gui = TRUE;
484e5aa2:	c58d      	sb	a0,13(a1)
484e5aa4:	c58c      	sb	a0,12(a1)
484e5aa6:	c58a      	sb	a0,10(a1)
484e5aa8:	d707      	sw	a3,28(sp)
484e5aaa:	d608      	sw	a2,32(sp)

484e5aac <.LBE3>:
484e5aac:	1008      	b	484e5abe <.LBE3+0x12>
484e5aae:	6b00      	li	v1,0
            }
        }
        else
        {
            g_key_infor.status = KEY_STATUS_NULL;
484e5ab0:	6a01      	li	v0,1
            g_key_infor.dck_fail = TRUE;
484e5ab2:	c06c      	sb	v1,12(s0)
484e5ab4:	c049      	sb	v0,9(s0)
484e5ab6:	c06a      	sb	v1,10(s0)
            g_key_infor.dck_flag = FALSE;
484e5ab8:	c08b      	sb	a0,11(s0)
            g_key_infor.count_fail = g_key_infor.count;
484e5aba:	c06d      	sb	v1,13(s0)
            g_key_infor.count = 0;
484e5abc:	1725      	b	484e5908 <.L27>
            goto cont_phy_key_fsm;
484e5abe:	b41b      	lw	a0,484e5b28 <.LBE3+0x7c>
        }
        break;

        default:
        break;
    }

    if (g_key_infor.dck_fail == TRUE)
484e5ac0:	a4c9      	lbu	a2,9(a0)
484e5ac2:	7601      	cmpi	a2,1
484e5ac4:	610d      	btnez	484e5ae0 <.LBE3+0x34>
484e5ac6:	a44b      	lbu	v0,11(a0)
    {
        if (g_key_infor.count_fail > 0)
484e5ac8:	2202      	beqz	v0,484e5ace <.LBE3+0x22>
484e5aca:	42ef      	addiu	a3,v0,-1
        {
            g_key_infor.count_fail--;
484e5acc:	c4eb      	sb	a3,11(a0)
484e5ace:	a4ab      	lbu	a1,11(a0)
        }

        if ((g_key_infor.count_fail == 0) && (key_msg.key_status == KEY_PHY_UP))
484e5ad0:	2d07      	bnez	a1,484e5ae0 <.LBE3+0x34>
484e5ad2:	67dd      	move	a2,sp
484e5ad4:	a650      	lbu	v0,16(a2)
484e5ad6:	6b18      	li	v1,24
484e5ad8:	ea6c      	and	v0,v1
484e5ada:	7210      	cmpi	v0,16
484e5adc:	6101      	btnez	484e5ae0 <.LBE3+0x34>
484e5ade:	c4a9      	sb	a1,9(a0)
        {
            g_key_infor.dck_fail = FALSE;
484e5ae0:	9509      	lw	a1,36(sp)
        }
    }

    if (need_recv_phy == TRUE)
484e5ae2:	2506      	beqz	a1,484e5af0 <.LBE3+0x44>
484e5ae4:	b212      	lw	v0,484e5b2c <.LBE3+0x80>
    {
        sys_mq_receive(MQ_ID_GUI, (void * ) &key_msg);
484e5ae6:	6c06      	li	a0,6
484e5ae8:	0504      	addiu	a1,sp,16
484e5aea:	6e00      	li	a2,0
484e5aec:	ea40      	jalr	v0
484e5aee:	6f19      	li	a3,25
484e5af0:	9408      	lw	a0,32(sp)
    }

    if (need_ret_gui == TRUE)
484e5af2:	6b00      	li	v1,0
    {
        input_msg->data.kmsg.val = key_log_id;
        input_msg->data.kmsg.type = key_type;
        input_msg->data.kmsg.option = 0;
        if (no_keytone == TRUE)
        {
            input_msg->data.kmsg.option |= 1;
        }

        PRINT_DBG_INT("logkey:", (key_type << 16) + key_log_id);

        return TRUE;
    }
    else
    {
        return FALSE;
484e5af4:	2410      	beqz	a0,484e5b16 <.LBE3+0x6a>
484e5af6:	67dd      	move	a2,sp
484e5af8:	a6f8      	lbu	a3,24(a2)
484e5afa:	9410      	lw	a0,64(sp)
484e5afc:	675d      	move	v0,sp
484e5afe:	c4e1      	sb	a3,1(a0)
484e5b00:	a27c      	lbu	v1,28(v0)
484e5b02:	9510      	lw	a1,64(sp)
484e5b04:	6e00      	li	a2,0
484e5b06:	c563      	sb	v1,3(a1)
484e5b08:	9310      	lw	v1,64(sp)
484e5b0a:	c3c2      	sb	a2,2(v1)
484e5b0c:	970a      	lw	a3,40(sp)
484e5b0e:	2702      	beqz	a3,484e5b14 <.LBE3+0x68>
484e5b10:	6d01      	li	a1,1
484e5b12:	c3a2      	sb	a1,2(v1)
484e5b14:	6b01      	li	v1,1
484e5b16:	6743      	move	v0,v1
    }
}
484e5b18:	6478      	restore	64,ra,s0-s1
484e5b1a:	e8a0      	jrc	ra
484e5b1c:	6f6c      	li	a3,108
484e5b1e:	676e      	move	v1,t6
484e5b20:	6820      	li	s0,32
484e5b22:	6c6f      	li	a0,111
484e5b24:	0064      	addiu	s0,sp,400
484e5b26:	0000      	addiu	s0,sp,0
484e5b28:	a1cc      	lbu	a2,12(s1)
484e5b2a:	9fc1      	lw	a2,4(a3)
484e5b2c:	e901      	sdbbp	8
484e5b2e:	bfc1      	lwu	a2,4(a3)
484e5b30:	5d65      	sltiu	a1,101
484e5b32:	485a      	addiu	s0,90
484e5b34:	a1f0      	lbu	a3,16(s1)
484e5b36:	9fc1      	lw	a2,4(a3)

484e5b38 <com_filter_keymsg_in_queue>:
484e5b38:	64f6      	save	48,ra,s0-s1

//过滤当前队列中相同“动作”的按键消息
//k_type:KEY_TYPE_SHORT_UP 在DOWN或SHORT_UP响应时，会过滤掉短按动作的DOWN和SHORT_UP消息
//k_type:KEY_TYPE_HOLD 在LONG或HOLD响应时，会过滤掉HOLD消息
//其他暂不支持
void com_filter_keymsg_in_queue(key_value_e k_val, key_type_e k_type)
{
484e5b3a:	ed11      	zeb	a1
484e5b3c:	ec11      	zeb	a0
484e5b3e:	7502      	cmpi	a1,2
    key_phy_msg_t key_msg;
    uint8 key_log_id = KEY_NULL;
    uint8 key_count, i;
    bool filter_flag;

    switch (k_type)
484e5b40:	d406      	sw	a0,24(sp)
484e5b42:	6005      	bteqz	484e5b4e <com_filter_keymsg_in_queue+0x16>
484e5b44:	7504      	cmpi	a1,4
484e5b46:	6049      	bteqz	484e5bda <.L80+0x84>
484e5b48:	106b      	b	484e5c20 <.L80+0xca>
484e5b4a:	6801      	li	s0,1
    {
    case KEY_TYPE_SHORT_UP:
        //当前必须是等待新按键周期
        if ((g_key_infor.status == KEY_STATUS_NULL) || (g_key_infor.status == KEY_STATUS_DOWN))
        {
            filter_again:

            filter_flag = FALSE;
            key_count = 0;
            if (g_key_infor.status == KEY_STATUS_DOWN)
            {
                key_count = g_key_infor.count;
            }
            while (1)
            {
                if (sys_mq_traverse(MQ_ID_GUI, (void *) &key_msg, key_count) == -1)
                {
                    break;
                }

                key_log_id = com_phy_key_phy2log(&key_msg);
                if (key_log_id != k_val)
                {
                    break;
                }

                if ((key_count == 0) && (key_msg.key_status != KEY_PHY_DOWN))
                {
                    //队列中第一个按键，必须是按键周期的第一个按键，否则马上返回
                    break;
                }

                if (key_msg.key_status == KEY_PHY_UP)
                {
                    filter_flag = TRUE;
484e5b4c:	102a      	b	484e5ba2 <.L80+0x4c>
                    break;
484e5b4e:	b33a      	lw	v1,484e5c34 <.L80+0xde>
484e5b50:	a34c      	lbu	v0,12(v1)
484e5b52:	5a02      	sltiu	v0,2
484e5b54:	6065      	bteqz	484e5c20 <.L80+0xca>

484e5b56 <.L80>:
484e5b56:	b338      	lw	v1,484e5c34 <.L80+0xde>
484e5b58:	6900      	li	s1,0
484e5b5a:	a38c      	lbu	a0,12(v1)
484e5b5c:	6711      	move	s0,s1
484e5b5e:	7401      	cmpi	a0,1
484e5b60:	6101      	btnez	484e5b64 <.L80+0xe>
484e5b62:	a32d      	lbu	s1,13(v1)
484e5b64:	b235      	lw	v0,484e5c38 <.L80+0xe2>
484e5b66:	0504      	addiu	a1,sp,16
484e5b68:	6c06      	li	a0,6
484e5b6a:	67d1      	move	a2,s1
484e5b6c:	ea40      	jalr	v0
484e5b6e:	6f3f      	li	a3,63
484e5b70:	ed4f      	not	a1,v0
484e5b72:	2517      	beqz	a1,484e5ba2 <.L80+0x4c>
484e5b74:	1a70 9600 	jal	484e5800 <com_phy_key_phy2log>
484e5b78:	0404      	addiu	a0,sp,16
484e5b7a:	9606      	lw	a2,24(sp)
484e5b7c:	eaca      	cmp	v0,a2
484e5b7e:	6111      	btnez	484e5ba2 <.L80+0x4c>
484e5b80:	2905      	bnez	s1,484e5b8c <.L80+0x36>
484e5b82:	679d      	move	a0,sp
484e5b84:	a4f0      	lbu	a3,16(a0)
484e5b86:	6b18      	li	v1,24
484e5b88:	ef6c      	and	a3,v1
484e5b8a:	2f0b      	bnez	a3,484e5ba2 <.L80+0x4c>
484e5b8c:	67dd      	move	a2,sp
484e5b8e:	a6b0      	lbu	a1,16(a2)
484e5b90:	6a18      	li	v0,24
484e5b92:	ed4c      	and	a1,v0
484e5b94:	7510      	cmpi	a1,16
484e5b96:	60d9      	bteqz	484e5b4a <com_filter_keymsg_in_queue+0x12>
484e5b98:	41e1      	addiu	a3,s1,1
                }

                key_count++;
484e5b9a:	6727      	move	s1,a3
484e5b9c:	e911      	zeb	s1
484e5b9e:	5906      	sltiu	s1,6
                if (key_count > 5) //已经是LONG或HOLD了，马上返回
484e5ba0:	61e1      	btnez	484e5b64 <.L80+0xe>
484e5ba2:	203e      	beqz	s0,484e5c20 <.L80+0xca>
                {
                    break;
                }
            }

            if (filter_flag == TRUE)
484e5ba4:	6d00      	li	a1,0
            {
                PRINT_INFO("filter key");
484e5ba6:	b025      	lw	s0,484e5c38 <.L80+0xe2>
484e5ba8:	0c1f      	la	a0,484e5c24 <.L80+0xce>
484e5baa:	67c5      	move	a2,a1
484e5bac:	e840      	jalr	s0
484e5bae:	6f4b      	li	a3,75
484e5bb0:	4121      	addiu	s1,s1,1

                //过滤所有DOWN和UP物理消息
                for (i = 0; i < (key_count + 1); i++)
484e5bb2:	6800      	li	s0,0
484e5bb4:	e822      	slt	s0,s1
484e5bb6:	600a      	bteqz	484e5bcc <.L80+0x76>
484e5bb8:	b220      	lw	v0,484e5c38 <.L80+0xe2>
                {
                    sys_mq_receive(MQ_ID_GUI, (void * ) &key_msg);
484e5bba:	6c06      	li	a0,6
484e5bbc:	0504      	addiu	a1,sp,16
484e5bbe:	6e00      	li	a2,0
484e5bc0:	ea40      	jalr	v0
484e5bc2:	6f19      	li	a3,25
484e5bc4:	4081      	addiu	a0,s0,1
484e5bc6:	6704      	move	s0,a0
484e5bc8:	e811      	zeb	s0
484e5bca:	17f4      	b	484e5bb4 <.L80+0x5e>
484e5bcc:	b31a      	lw	v1,484e5c34 <.L80+0xde>
                }

                //按键状态改为 KEY_STATUS_NULL
                if (g_key_infor.status == KEY_STATUS_DOWN)
484e5bce:	a32c      	lbu	s1,12(v1)
484e5bd0:	7101      	cmpi	s1,1
484e5bd2:	61c1      	btnez	484e5b56 <.L80>
484e5bd4:	6d00      	li	a1,0
                {
                    g_key_infor.status = KEY_STATUS_NULL;
484e5bd6:	c3ac      	sb	a1,12(v1)
484e5bd8:	17be      	b	484e5b56 <.L80>
                }

                goto filter_again;
484e5bda:	b717      	lw	a3,484e5c34 <.L80+0xde>
            }
        }
        break;

    case KEY_TYPE_HOLD:
        //当前必须是按键保持状态
        if (g_key_infor.status == KEY_STATUS_HOLD)
484e5bdc:	a7cc      	lbu	a2,12(a3)
484e5bde:	7602      	cmpi	a2,2
484e5be0:	611f      	btnez	484e5c20 <.L80+0xca>
484e5be2:	b016      	lw	s0,484e5c38 <.L80+0xe2>
        {
            while (1)
            {
                if (sys_mq_traverse(MQ_ID_GUI, (void *) &key_msg, 0) == -1)
484e5be4:	6c06      	li	a0,6
484e5be6:	0504      	addiu	a1,sp,16
484e5be8:	6e00      	li	a2,0
484e5bea:	e840      	jalr	s0
484e5bec:	6f3f      	li	a3,63
484e5bee:	eb4f      	not	v1,v0
484e5bf0:	2317      	beqz	v1,484e5c20 <.L80+0xca>
484e5bf2:	1a70 9600 	jal	484e5800 <com_phy_key_phy2log>
                {
                    break;
                }

                key_log_id = com_phy_key_phy2log(&key_msg);
484e5bf6:	0404      	addiu	a0,sp,16
484e5bf8:	9406      	lw	a0,24(sp)
                if (key_log_id != k_val)
484e5bfa:	ea8a      	cmp	v0,a0
484e5bfc:	6111      	btnez	484e5c20 <.L80+0xca>
484e5bfe:	67dd      	move	a2,sp
                {
                    break;
                }

                if (key_msg.key_status != KEY_PHY_UP)
484e5c00:	a650      	lbu	v0,16(a2)
484e5c02:	6d18      	li	a1,24
484e5c04:	eaac      	and	v0,a1
484e5c06:	7210      	cmpi	v0,16
484e5c08:	600b      	bteqz	484e5c20 <.L80+0xca>
484e5c0a:	6d00      	li	a1,0
                {
                    PRINT_INFO("filter key");
484e5c0c:	67c5      	move	a2,a1
484e5c0e:	0c06      	la	a0,484e5c24 <.L80+0xce>
484e5c10:	e840      	jalr	s0
484e5c12:	6f4b      	li	a3,75
484e5c14:	6c06      	li	a0,6

                    sys_mq_receive(MQ_ID_GUI, (void * ) &key_msg);
484e5c16:	0504      	addiu	a1,sp,16
484e5c18:	6e00      	li	a2,0
484e5c1a:	e840      	jalr	s0
484e5c1c:	6f19      	li	a3,25
484e5c1e:	17e1      	b	484e5be2 <.L80+0x8c>
484e5c20:	6476      	restore	48,ra,s0-s1
                }
                else
                {
                    break;
                }
            }
        }
        break;

    default:
        break;
    }
}
484e5c22:	e8a0      	jrc	ra
484e5c24:	493c      	addiu	s1,60
484e5c26:	203e      	beqz	s0,484e5ca4 <IrcKeyValueTab+0x14>
484e5c28:	6966      	li	s1,102
484e5c2a:	746c      	cmpi	a0,108
484e5c2c:	7265      	cmpi	v0,101
484e5c2e:	6b20      	li	v1,32
484e5c30:	7965      	sd	v1,40(s1)
484e5c32:	0000      	addiu	s0,sp,0
484e5c34:	a1cc      	lbu	a2,12(s1)
484e5c36:	9fc1      	lw	a2,4(a3)
484e5c38:	e901      	sdbbp	8
484e5c3a:	bfc1      	lwu	a2,4(a3)

484e5c3c <IrcKeyMsgTab>:
484e5c3c:	0b07 020a 0103 0506 1008 0c0d 1211 1413     ................
484e5c4c:	1615 1817 1c19 0107 0b09 080a 0506 0210     ................
484e5c5c:	1103 1312 1514 1716 1918 071c 0901 0a0b     ................
484e5c6c:	0608 1005 0302 1211 1413 1615 1817 1c19     ................
484e5c7c:	030a 0102 0203 0706 1005 1010 1010 1010     ................
484e5c8c:	1010 1010                                   ....

484e5c90 <IrcKeyValueTab>:
484e5c90:	4645 4447 4340 1507 1609 0d19 180c 085e     EFGD@C........^.
484e5ca0:	5a1c 5242 004a 0201 0504 0806 0a09 0d0c     .ZBRJ...........
484e5cb0:	100e 1211 1514 1816 1a19 1a12 011e 0302     ................
484e5cc0:	0504 0706 0908 1b0a 0c1f 0e0d 0f00 2319     ...............#
484e5cd0:	2524 2726 2928 2f2a 002b 0000 0000 0000     $%&'()*/+.......
484e5ce0:	0000 0000                                   ....

484e5ce4 <com_gui_msg_hook>:
484e5ce4:	64f4      	save	32,ra,s0-s1
 * \ingroup      common_func
 * \note
 *******************************************************************************/
bool com_gui_msg_hook(input_gui_msg_t *input_msg)
{
484e5ce6:	a4c1      	lbu	a2,1(a0)
    bool ret;
    key_value_e key_val = input_msg->data.kmsg.val;
484e5ce8:	6724      	move	s1,a0
484e5cea:	a403      	lbu	s0,3(a0)
    key_type_e key_type = input_msg->data.kmsg.type;
484e5cec:	b43e      	lw	a0,484e5de4 <.LBE2+0x32>

    //1.超长按按键后过滤掉后续超长按键（检测到按键抬起，或者其他按键按下，或该按键的新周期，就算过滤完成）
    if (key_val == g_key_infor.filter_key_itself)
484e5cee:	a450      	lbu	v0,16(a0)
484e5cf0:	eace      	xor	v0,a2
484e5cf2:	2a10      	bnez	v0,484e5d14 <com_gui_msg_hook+0x30>
484e5cf4:	7010      	cmpi	s0,16
    {
       if ((key_type == KEY_TYPE_DOWN) //收到该按键的新周期，过滤完成
484e5cf6:	600e      	bteqz	484e5d14 <com_gui_msg_hook+0x30>
484e5cf8:	7020      	cmpi	s0,32
484e5cfa:	600c      	bteqz	484e5d14 <com_gui_msg_hook+0x30>
484e5cfc:	7040      	cmpi	s0,64
               || (key_type == KEY_TYPE_DBL_CLICK))//双击该按键也算新周期，过滤完成 //第二次超长按也算过滤完成
       {
           g_key_infor.filter_key_itself = KEY_NULL;
       }
       else
       {
           //过滤LONG和HOLD按键
           if (key_type == KEY_TYPE_LONG_10S)
484e5cfe:	6a00      	li	v0,0
           {
               return FALSE;
484e5d00:	606f      	bteqz	484e5de0 <.LBE2+0x2e>
484e5d02:	406f      	addiu	v1,s0,-1
           }
           if ((key_type != KEY_TYPE_SHORT_UP)
484e5d04:	5b02      	sltiu	v1,2
484e5d06:	6a00      	li	v0,0
                && (key_type != KEY_TYPE_LONG_UP))                    
          {
              return FALSE;
484e5d08:	606b      	bteqz	484e5de0 <.LBE2+0x2e>
484e5d0a:	b638      	lw	a2,484e5de8 <.LBE2+0x36>
          }
           else //过滤完成，但还是不响应SHORT_UP按键
           {
               this_filter_key_value = KEY_NULL;
484e5d0c:	6d00      	li	a1,0
484e5d0e:	c6a0      	sb	a1,0(a2)
484e5d10:	c4b0      	sb	a1,16(a0)
               g_key_infor.filter_key_itself = KEY_NULL;
484e5d12:	102d      	b	484e5d6e <com_gui_msg_hook+0x8a>
484e5d14:	a4ee      	lbu	a3,14(a0)
               return FALSE;
           }
       }
    }
    else //收到新按键，过滤完成
    {
       g_key_infor.filter_key_itself = KEY_NULL;
    }

    //1.长按按键后过滤掉后续按键（检测到按键抬起，或者其他按键按下，或该按键的新周期，就算过滤完成）
    if (key_val == g_key_infor.filter_key)
484e5d16:	6a00      	li	v0,0
484e5d18:	efce      	xor	a3,a2
484e5d1a:	c450      	sb	v0,16(a0)
484e5d1c:	2f14      	bnez	a3,484e5d46 <com_gui_msg_hook+0x62>
484e5d1e:	7010      	cmpi	s0,16
    {
        //过滤还没完成就收到DOWN消息，表明SHORTUP消息在切换应用时被清除掉了，
        //那么DOWN消息就属于新的按键周期的消息，不应该被过滤
        if ((key_type == KEY_TYPE_DOWN) //收到该按键的新周期，过滤完成
484e5d20:	6012      	bteqz	484e5d46 <com_gui_msg_hook+0x62>
484e5d22:	7020      	cmpi	s0,32
484e5d24:	6010      	bteqz	484e5d46 <com_gui_msg_hook+0x62>
484e5d26:	7040      	cmpi	s0,64
                || (key_type == KEY_TYPE_DBL_CLICK)) //双击该按键也算新周期，过滤完成
        {
            g_key_infor.filter_key = KEY_NULL;
        }
        else
        {
            if(key_type == KEY_TYPE_LONG_10S)
484e5d28:	6105      	btnez	484e5d34 <com_gui_msg_hook+0x50>
484e5d2a:	6b00      	li	v1,0
            {
                g_key_infor.filter_key = KEY_NULL;
484e5d2c:	c46e      	sb	v1,14(a0)
484e5d2e:	b42f      	lw	a0,484e5de8 <.LBE2+0x36>
                this_filter_key_value = KEY_NULL;
484e5d30:	c460      	sb	v1,0(a0)
484e5d32:	1021      	b	484e5d76 <.L15>
                goto LONG10S_DEAL;
484e5d34:	40af      	addiu	a1,s0,-1
            }
            //过滤LONG和HOLD按键
            if ((key_type != KEY_TYPE_SHORT_UP)
484e5d36:	5d02      	sltiu	a1,2
484e5d38:	6a00      	li	v0,0
                    && (key_type != KEY_TYPE_LONG_UP))
            {
                return FALSE;
484e5d3a:	6052      	bteqz	484e5de0 <.LBE2+0x2e>
484e5d3c:	b72b      	lw	a3,484e5de8 <.LBE2+0x36>
            }
            else //过滤完成，但还是不响应SHORT_UP按键
            {
                this_filter_key_value = KEY_NULL;
484e5d3e:	6e00      	li	a2,0
484e5d40:	c7c0      	sb	a2,0(a3)
484e5d42:	c4ce      	sb	a2,14(a0)
                g_key_infor.filter_key = KEY_NULL;
484e5d44:	1014      	b	484e5d6e <com_gui_msg_hook+0x8a>
484e5d46:	a44f      	lbu	v0,15(a0)
                return FALSE;
            }
        }
    }
    else //收到新按键，过滤完成
    {
        g_key_infor.filter_key = KEY_NULL;
    }

    //2.长按按键后过滤掉后续抬起按键（检测到按键抬起，或者其他按键按下，或该按键的新周期，就算过滤完成）
    if (key_val == g_key_infor.filter_key_up)
484e5d48:	6b00      	li	v1,0
484e5d4a:	eace      	xor	v0,a2
484e5d4c:	c46e      	sb	v1,14(a0)
484e5d4e:	67a4      	move	a1,a0
484e5d50:	2a10      	bnez	v0,484e5d72 <com_gui_msg_hook+0x8e>
484e5d52:	7010      	cmpi	s0,16
    {
        //过滤还没完成就收到DOWN消息，表明SHORTUP消息在切换应用时被清除掉了，
        //那么DOWN消息就属于新的按键周期的消息，不应该被过滤
        if ((key_type == KEY_TYPE_DOWN) //收到该按键的新周期，过滤完成
484e5d54:	6002      	bteqz	484e5d5a <com_gui_msg_hook+0x76>
484e5d56:	7020      	cmpi	s0,32
484e5d58:	6103      	btnez	484e5d60 <com_gui_msg_hook+0x7c>
484e5d5a:	6c00      	li	a0,0
                || (key_type == KEY_TYPE_DBL_CLICK)) //双击该按键也算新周期，过滤完成
        {
            g_key_infor.filter_key_up = KEY_NULL;
484e5d5c:	c58f      	sb	a0,15(a1)
484e5d5e:	100b      	b	484e5d76 <.L15>
484e5d60:	40ef      	addiu	a3,s0,-1
        }
        else
        {
            //仅过滤抬起按键
            if ((key_type == KEY_TYPE_SHORT_UP)
484e5d62:	5f02      	sltiu	a3,2
484e5d64:	6008      	bteqz	484e5d76 <.L15>
484e5d66:	b221      	lw	v0,484e5de8 <.LBE2+0x36>
                    || (key_type == KEY_TYPE_LONG_UP))
            {
                this_filter_key_value = KEY_NULL;
484e5d68:	6e00      	li	a2,0
484e5d6a:	c2c0      	sb	a2,0(v0)
484e5d6c:	c4cf      	sb	a2,15(a0)
                g_key_infor.filter_key_up = KEY_NULL;
484e5d6e:	6a00      	li	v0,0
                return FALSE;
484e5d70:	1037      	b	484e5de0 <.LBE2+0x2e>
484e5d72:	6d00      	li	a1,0
            }
        }
    }
    else //收到新按键，过滤完成
    {
        g_key_infor.filter_key_up = KEY_NULL;
484e5d74:	c4af      	sb	a1,15(a0)

484e5d76 <.L15>:
484e5d76:	406f      	addiu	v1,s0,-1
    }

    LONG10S_DEAL:

    //更新当前按键值
    if ((key_type == KEY_TYPE_SHORT_UP) //如果按键已经抬起，那么设置过滤按键无效
484e5d78:	5b02      	sltiu	v1,2
484e5d7a:	b31c      	lw	v1,484e5de8 <.LBE2+0x36>
484e5d7c:	6003      	bteqz	484e5d84 <.L15+0xe>
484e5d7e:	6c00      	li	a0,0
    || (key_type == KEY_TYPE_LONG_UP))
    {
        this_filter_key_value = KEY_NULL;
484e5d80:	c380      	sb	a0,0(v1)
484e5d82:	1001      	b	484e5d86 <.L15+0x10>
484e5d84:	c3c0      	sb	a2,0(v1)
    }
    else
    {
        this_filter_key_value = key_val;
484e5d86:	b61b      	lw	a2,484e5df0 <.LBE2+0x3e>
484e5d88:	b219      	lw	v0,484e5dec <.LBE2+0x3a>
484e5d8a:	a6e0      	lbu	a3,0(a2)
484e5d8c:	6d00      	li	a1,0
    }

    //3.有按键动作要解除静音
    g_ignore_switch_mute = FALSE;
484e5d8e:	7701      	cmpi	a3,1
484e5d90:	c2a0      	sb	a1,0(v0)
484e5d92:	6108      	btnez	484e5da4 <.L15+0x2e>
484e5d94:	6d00      	li	a1,0
    if (get_mute_enable() == TRUE)
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
       com_switch_mute(1,0,NULL);
484e5d96:	b218      	lw	v0,484e5df4 <.LBE2+0x42>
484e5d98:	6c01      	li	a0,1
484e5d9a:	ea40      	jalr	v0
484e5d9c:	67c5      	move	a2,a1
484e5d9e:	b217      	lw	v0,484e5df8 <.LBE2+0x46>
#else
        change_mute_enable(FALSE);
        g_ignore_switch_mute = TRUE;
#endif
        com_reset_sound_volume(0);
484e5da0:	ea40      	jalr	v0
484e5da2:	6c00      	li	a0,0
484e5da4:	7010      	cmpi	s0,16
        
    }

    //4.按键音处理，仅在按键按下时发出按键音
    if ((key_type == KEY_TYPE_DOWN) && (input_msg->data.kmsg.option == 0))
484e5da6:	6104      	btnez	484e5db0 <.LBB2>
484e5da8:	a182      	lbu	a0,2(s1)
484e5daa:	2c02      	bnez	a0,484e5db0 <.LBB2>
484e5dac:	b014      	lw	s0,484e5dfc <.LBE2+0x4a>
    {
        //没音频输出，非静音状态，且按键音使能，才发出按键音
        com_start_key_tone(KEYTONE_NOBLOCK);
484e5dae:	e8c0      	jalrc	s0

484e5db0 <.LBB2>:
484e5db0:	b410      	lw	a0,484e5dec <.LBE2+0x3a>

484e5db2 <.LBE2>:
484e5db2:	b014      	lw	s0,484e5e00 <.LBE2+0x4e>
    }

    ret = TRUE;

    //5.省电关机,屏保计时清0
    g_sys_counter.poweroff_counter = 0;
484e5db4:	a463      	lbu	v1,3(a0)
484e5db6:	6900      	li	s1,0
484e5db8:	7302      	cmpi	v1,2
484e5dba:	c820      	sh	s1,0(s0)
484e5dbc:	c821      	sh	s1,2(s0)
    g_sys_counter.light_counter = 0;
484e5dbe:	6103      	btnez	484e5dc6 <.LBE2+0x14>
484e5dc0:	b211      	lw	v0,484e5e04 <.LBE2+0x52>

    if (get_backlight_state() == BACKLIGHT_STATE_OFF)
    {
        com_set_display_onoff(TRUE);
484e5dc2:	ea40      	jalr	v0
484e5dc4:	6c01      	li	a0,1
484e5dc6:	c02c      	sb	s1,12(s0)
    }

    //6.调高频率
    g_sys_counter.ui_idle_counter = 0;
484e5dc8:	b010      	lw	s0,484e5e08 <.LBE2+0x56>
    if (g_app_info_state_all.ui_status == UI_STATUS_IDLE_LOWFREQ)
484e5dca:	a0e3      	lbu	a3,3(s0)
484e5dcc:	7701      	cmpi	a3,1
484e5dce:	6107      	btnez	484e5dde <.LBE2+0x2c>
484e5dd0:	b20f      	lw	v0,484e5e0c <.LBE2+0x5a>
    {
        adjust_freq_set_level(AP_FRONT_LOW_PRIO, FREQ_LEVEL7, FREQ_NULL);
484e5dd2:	6c0a      	li	a0,10
484e5dd4:	6d07      	li	a1,7
484e5dd6:	6e00      	li	a2,0
484e5dd8:	ea40      	jalr	v0
484e5dda:	6f03      	li	a3,3
484e5ddc:	c023      	sb	s1,3(s0)
        g_app_info_state_all.ui_status = UI_STATUS_IDLE;
484e5dde:	6a01      	li	v0,1
    }

    return ret;
484e5de0:	6474      	restore	32,ra,s0-s1
}
484e5de2:	e8a0      	jrc	ra
484e5de4:	a1cc      	lbu	a2,12(s1)
484e5de6:	9fc1      	lw	a2,4(a3)
484e5de8:	99fc      	lw	a3,112(s1)
484e5dea:	9fc1      	lw	a2,4(a3)
484e5dec:	99ff      	lw	a3,124(s1)
484e5dee:	9fc1      	lw	a2,4(a3)
484e5df0:	a0c0      	lbu	a2,0(s0)
484e5df2:	9fc1      	lw	a2,4(a3)
484e5df4:	5c09      	sltiu	a0,9
484e5df6:	48be      	addiu	s0,-66
484e5df8:	5af9      	sltiu	v0,249
484e5dfa:	48be      	addiu	s0,-66
484e5dfc:	5d65      	sltiu	a1,101
484e5dfe:	485a      	addiu	s0,90
484e5e00:	a0dc      	lbu	a2,28(s0)
484e5e02:	9fc1      	lw	a2,4(a3)
484e5e04:	5b59      	sltiu	v1,89
484e5e06:	4832      	addiu	s0,50
484e5e08:	a094      	lbu	a0,20(s0)
484e5e0a:	9fc1      	lw	a2,4(a3)
484e5e0c:	e90d      	or	s1,s0
484e5e0e:	bfc1      	lwu	a2,4(a3)

484e5e10 <com_filter_key_hold>:
484e5e10:	b404      	lw	a0,484e5e20 <com_filter_key_hold+0x10>

/******************************************************************************/
/*!
 * \par  Description:
 *    过滤掉当前按键后续动作，即相同值按键消息。
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      common_func
 * \note
 * \li  该接口用于过滤当前按键值的后续动作，如需过滤掉任意指定按键，需直接调用
 *      change_filter_key 设置。
 * \li  在检测到当前按键抬起消息或者其他按键消息后，由 com_gui_msg_hook 自动调用解除。
 * \li  如果此时没有按键按下，该接口调用不会产生真正的按键过滤效果。
 *******************************************************************************/
void com_filter_key_hold(void)
{
    g_key_infor.filter_key = this_filter_key_value;
484e5e12:	b203      	lw	v0,484e5e1c <com_filter_key_hold+0xc>
484e5e14:	a460      	lbu	v1,0(a0)
484e5e16:	e820      	jr	ra
484e5e18:	c26e      	sb	v1,14(v0)
484e5e1a:	0000      	addiu	s0,sp,0
484e5e1c:	a1cc      	lbu	a2,12(s1)
484e5e1e:	9fc1      	lw	a2,4(a3)
484e5e20:	99fc      	lw	a3,112(s1)
484e5e22:	9fc1      	lw	a2,4(a3)

484e5e24 <com_filter_key_up>:
484e5e24:	b404      	lw	a0,484e5e34 <com_filter_key_up+0x10>
}

void com_filter_key_up(void)
{
    g_key_infor.filter_key_up = this_filter_key_value;
484e5e26:	b203      	lw	v0,484e5e30 <com_filter_key_up+0xc>
484e5e28:	a460      	lbu	v1,0(a0)
484e5e2a:	e820      	jr	ra
484e5e2c:	c26f      	sb	v1,15(v0)
484e5e2e:	0000      	addiu	s0,sp,0
484e5e30:	a1cc      	lbu	a2,12(s1)
484e5e32:	9fc1      	lw	a2,4(a3)
484e5e34:	99fc      	lw	a3,112(s1)
484e5e36:	9fc1      	lw	a2,4(a3)

484e5e38 <com_filter_key_itself>:
484e5e38:	b404      	lw	a0,484e5e48 <com_filter_key_itself+0x10>
}

void com_filter_key_itself(void)
{
    //libc_print("this_filter_key_value",this_filter_key_value,2);
    g_key_infor.filter_key_itself = this_filter_key_value;
484e5e3a:	b203      	lw	v0,484e5e44 <com_filter_key_itself+0xc>
484e5e3c:	a460      	lbu	v1,0(a0)
484e5e3e:	e820      	jr	ra
484e5e40:	c270      	sb	v1,16(v0)
484e5e42:	0000      	addiu	s0,sp,0
484e5e44:	a1cc      	lbu	a2,12(s1)
484e5e46:	9fc1      	lw	a2,4(a3)
484e5e48:	99fc      	lw	a3,112(s1)
484e5e4a:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_20:

48525800 <aset_read_data>:
48525800:	f00c 64f6 	save	a0-a2,48,ra,s0-s1



int32 aset_read_data(uint16 cmd, void *data_buffer, uint32 data_len)
{
48525804:	ec31      	zeh	a0
48525806:	d406      	sw	a0,24(sp)
48525808:	67dd      	move	a2,sp
    int32 ret_val;

    stub_ext_param_t ext_param;

    uint8 *read_buffer = (uint8 *) data_buffer;

    ext_param.opcode = cmd;
4852580a:	aeec      	lhu	a3,24(a2)
4852580c:	6a00      	li	v0,0
    ext_param.payload_len = 0;
4852580e:	67bd      	move	a1,sp
48525810:	b326      	lw	v1,485258a8 <aset_read_data+0xa8>
    ext_param.rw_buffer = sys_malloc_large_data(256);
48525812:	6cff      	li	a0,255
48525814:	cee8      	sh	a3,16(a2)
48525816:	cd49      	sh	v0,18(a1)
48525818:	4481      	addiu	a0,a0,1
4852581a:	6d20      	li	a1,32
4852581c:	6e00      	li	a2,0
4852581e:	eb40      	jalr	v1
48525820:	6f16      	li	a3,22
48525822:	b123      	lw	s1,485258ac <aset_read_data+0xac>

    ret_val = stub_ext_write(&ext_param);
48525824:	d205      	sw	v0,20(sp)
48525826:	0404      	addiu	a0,sp,16
48525828:	6d01      	li	a1,1
4852582a:	6e00      	li	a2,0
4852582c:	e940      	jalr	s1
4852582e:	6f05      	li	a3,5
48525830:	6702      	move	s0,v0
48525832:	2a27      	bnez	v0,48525882 <aset_read_data+0x82>

    if (ret_val == 0)
48525834:	679d      	move	a0,sp
    {
        ext_param.payload_len = (uint16)data_len;
48525836:	ac7c      	lhu	v1,56(a0)
48525838:	67a2      	move	a1,v0
        ret_val = stub_ext_read(&ext_param);
4852583a:	cc69      	sh	v1,18(a0)
4852583c:	67c2      	move	a2,v0
4852583e:	0404      	addiu	a0,sp,16
48525840:	e940      	jalr	s1
48525842:	6f05      	li	a3,5
48525844:	6702      	move	s0,v0
48525846:	220b      	beqz	v0,4852585e <aset_read_data+0x5e>
        if (ret_val != 0)
48525848:	970e      	lw	a3,56(sp)
        {
            libc_print("aset read err.L&C=",(data_len <<16) + cmd, 2);
4852584a:	9206      	lw	v0,24(sp)
4852584c:	36e0      	sll	a2,a3,8
4852584e:	35c0      	sll	a1,a2,8
48525850:	b316      	lw	v1,485258a8 <aset_read_data+0xa8>
48525852:	0c11      	la	a0,48525894 <aset_read_data+0x94>
48525854:	e555      	addu	a1,v0
48525856:	6e02      	li	a2,2
48525858:	eb40      	jalr	v1
4852585a:	6f4b      	li	a3,75
4852585c:	1012      	b	48525882 <aset_read_data+0x82>
        }
        if (ret_val == 0)
4852585e:	9505      	lw	a1,20(sp)
        {
            libc_memcpy(read_buffer, &(ext_param.rw_buffer[6]), data_len);
48525860:	67e2      	move	a3,v0
48525862:	940d      	lw	a0,52(sp)
48525864:	960e      	lw	a2,56(sp)
48525866:	b213      	lw	v0,485258b0 <aset_read_data+0xb0>
48525868:	ea40      	jalr	v0
4852586a:	45a6      	addiu	a1,a1,6
4852586c:	679d      	move	a0,sp

            //回复ACK
#ifdef WAVES_ASET_TOOLS
			ext_param.opcode = STUB_CMD_WAVES_ASET_ACK;
#else
            ext_param.opcode = STUB_CMD_ASET_ACK;
4852586e:	f3e0 6b1e 	li	v1,1022
48525872:	cc09      	sh	s0,18(a0)
#endif  
            ext_param.payload_len = 0;
48525874:	cc68      	sh	v1,16(a0)
48525876:	67d0      	move	a2,s0
            ret_val = stub_ext_write(&ext_param);
48525878:	0404      	addiu	a0,sp,16
4852587a:	6d01      	li	a1,1
4852587c:	e940      	jalr	s1
4852587e:	6f05      	li	a3,5
48525880:	6702      	move	s0,v0
48525882:	9405      	lw	a0,20(sp)
            //break;
        }
    }

    sys_free_large_data(ext_param.rw_buffer);
48525884:	b209      	lw	v0,485258a8 <aset_read_data+0xa8>
48525886:	6d20      	li	a1,32
48525888:	6e00      	li	a2,0
4852588a:	ea40      	jalr	v0
4852588c:	6f17      	li	a3,23
4852588e:	6750      	move	v0,s0

    return ret_val;
}
48525890:	6476      	restore	48,ra,s0-s1
48525892:	e8a0      	jrc	ra
48525894:	7361      	cmpi	v1,97
48525896:	7465      	cmpi	a0,101
48525898:	7220      	cmpi	v0,32
4852589a:	6165      	btnez	48525966 <.LBE19+0xc>
4852589c:	2064      	beqz	s0,48525966 <.LBE19+0xc>
4852589e:	7265      	cmpi	v0,101
485258a0:	2e72      	bnez	a2,48525986 <.LBE19+0x2c>
485258a2:	264c      	beqz	a2,4852593c <enable_aset_sound_effect+0x28>
485258a4:	3d43      	ld	v0,24(a1)
485258a6:	0000      	addiu	s0,sp,0
485258a8:	e901      	sdbbp	8
485258aa:	bfc1      	lwu	a2,4(a3)
485258ac:	e921      	sdbbp	9
485258ae:	bfc1      	lwu	a2,4(a3)
485258b0:	e905      	break	8
485258b2:	bfc1      	lwu	a2,4(a3)

485258b4 <aset_read_volume>:
485258b4:	64f5      	save	40,ra,s0-s1

int32 aset_read_volume(void)
{
485258b6:	b20c      	lw	v0,485258e4 <.LBE2+0x6>
    int volume;

    int ret_val;

    ret_val = aset_read_data(STUB_CMD_ASET_READ_VOLUME, &volume, sizeof(volume));
485258b8:	f300 6c01 	li	a0,769
485258bc:	0504      	addiu	a1,sp,16
485258be:	ea40      	jalr	v0
485258c0:	6e04      	li	a2,4
485258c2:	6722      	move	s1,v0
485258c4:	2a0c      	bnez	v0,485258de <.LBE2>

485258c6 <.LBB2>:

    if (ret_val == 0)
485258c6:	677d      	move	v1,sp
    {
        //update volume
        uint8 cur_volume = (uint8) volume;//0-31
485258c8:	a390      	lbu	a0,16(v1)
485258ca:	5c20      	sltiu	a0,32

        if (cur_volume > 31)
485258cc:	6101      	btnez	485258d0 <.LBB2+0xa>
485258ce:	6c1f      	li	a0,31
        {
            cur_volume = 31;
485258d0:	b006      	lw	s0,485258e8 <.LBE2+0xa>
        }

        g_aset_sync_volume = 1;
485258d2:	6d01      	li	a1,1
485258d4:	b206      	lw	v0,485258ec <.LBE2+0xe>
        com_set_sound_volume(cur_volume, SET_VOLUME_SYNC_TO_REMOTE);
485258d6:	c0a0      	sb	a1,0(s0)
485258d8:	ea40      	jalr	v0
485258da:	6d01      	li	a1,1
485258dc:	c020      	sb	s1,0(s0)

485258de <.LBE2>:
        g_aset_sync_volume = 0;
485258de:	6a00      	li	v0,0
    }

    return 0;
}
485258e0:	6475      	restore	40,ra,s0-s1
485258e2:	e8a0      	jrc	ra
485258e4:	5801      	sltiu	s0,1
485258e6:	4852      	addiu	s0,82
485258e8:	a2a5      	lbu	a1,5(v0)
485258ea:	9fc1      	lw	a2,4(a3)
485258ec:	5a49      	sltiu	v0,73
485258ee:	48be      	addiu	s0,-66

485258f0 <aset_read_main_switch>:
485258f0:	64c4      	save	32,ra

int32 aset_read_main_switch(void)
{
485258f2:	b207      	lw	v0,4852590c <aset_read_main_switch+0x1c>
    int main_switch;

    int ret_val;

    ret_val = aset_read_data(STUB_CMD_ASET_READ_MAIN_SWITCH, &main_switch, sizeof(main_switch));
485258f4:	f300 6c19 	li	a0,793
485258f8:	0504      	addiu	a1,sp,16
485258fa:	ea40      	jalr	v0
485258fc:	6e04      	li	a2,4
485258fe:	2a03      	bnez	v0,48525906 <aset_read_main_switch+0x16>

    if (ret_val == 0)
48525900:	9304      	lw	v1,16(sp)
    {
        g_aset_main_switch_flag = (bool) main_switch;
48525902:	b404      	lw	a0,48525910 <aset_read_main_switch+0x20>
48525904:	c460      	sb	v1,0(a0)
48525906:	6a00      	li	v0,0
    }

    return 0;
}
48525908:	6444      	restore	32,ra
4852590a:	e8a0      	jrc	ra
4852590c:	5801      	sltiu	s0,1
4852590e:	4852      	addiu	s0,82
48525910:	a2a9      	lbu	a1,9(v0)
48525912:	9fc1      	lw	a2,4(a3)

48525914 <enable_aset_sound_effect>:
48525914:	64f5      	save	40,ra,s0-s1

void __section__(".bank_2") update_peq_point(dae_config_t *p_dae, int8 peq_point_start, \
                                                aset_peq_point_t *peq_points,int8 peq_point_count)
{
    int i;

    for (i = 0; i < peq_point_count; i++)
    {
        if (peq_points[i].enable != 0)
        {
            p_dae->peq_bands[peq_point_start + i].cutoff = (uint16) peq_points[i].freq;
            p_dae->peq_bands[peq_point_start + i].q = (uint16) peq_points[i].Qval;
            p_dae->peq_bands[peq_point_start + i].gain = peq_points[i].gain;
            p_dae->peq_bands[peq_point_start + i].type = (uint16) peq_points[i].type;

            if ((p_dae->peq_bands[peq_point_start + i].type == 2) && (p_dae->peq_bands[peq_point_start + i].gain != 0))
            {
                sys_comval->highpass_cutoff = (uint8)p_dae->peq_bands[peq_point_start + i].cutoff;
            }

            //libc_print("cutoff: ", p_dae->peq_bands[peq_point_start + i].cutoff, 2);
            //libc_print("Qval: ", p_dae->peq_bands[peq_point_start + i].q, 2);
            //libc_print("gain: ", p_dae->peq_bands[peq_point_start + i].gain, 2);
            //libc_print("type: ", p_dae->peq_bands[peq_point_start + i].type, 2);
        }
        else
        {
            p_dae->peq_bands[peq_point_start + i].gain = 0;
        }

        p_dae->peq_band_enable_type[peq_point_start + i] = (uint8)peq_points[i].enable;
    }
}

void __section__(".bank_2") update_peq_value(dae_config_t *p_dae, void *aset_data, uint8 update_mode)
{
    int i;

    sys_os_sched_lock();

    if (update_mode == UPDATE_PEQ_MODE_PEQ)
    {
        aset_peq_data_t *aset_peq_data = (aset_peq_data_t *) aset_data;

        //判断是否使能PEQ
        p_dae->peq_enable = (bool)aset_peq_data->peq_enable;

        //均衡器使能
        if (aset_peq_data->peq_enable == 1)
        {
            update_peq_point(p_dae, 0, aset_peq_data->peq_array, aset_peq_data->nPointTotal);
        }

        if (aset_peq_data->main_gain_enable == 1)
        {
            g_aset_main_gain_value = (uint8)(aset_peq_data->main_gain_value);
            g_aset_equivalent_gain = (uint8)(aset_peq_data->equivalent_gain_value);
            if (p_dae->mdrc_enable == 1)
            {
                p_dae->equivalent_gain = g_aset_equivalent_gain;
                p_dae->precut_ratio = 0;
                p_dae->mdrc_precut_ratio = 0;
                sys_comval->dae_mdrc_peak_gain = g_aset_main_gain_value;
            }
            else
            {
                p_dae->equivalent_gain = 0;
                p_dae->precut_ratio = g_aset_main_gain_value;
                p_dae->mdrc_precut_ratio = 0;
            }

            p_dae->precut_standard_mode = (int8)g_aset_main_gain_value; //标准模式
        }
        else
        {
            p_dae->precut_ratio = 0;
            p_dae->mdrc_precut_ratio = 0;
            p_dae->equivalent_gain = 0;

            p_dae->precut_standard_mode = 0;                            //标准模式
        }
    }
    else if (update_mode == UPDATE_PEQ_MODE_PEQ2)
    {
        aset_peq_data_2_3_t *aset_eq_data_2_3 = (aset_peq_data_2_3_t *) aset_data;

        if (EQMAXPOINTCOUNT_ALL >= (EQMAXPOINTCOUNT*2))
        {
            update_peq_point(p_dae, EQMAXPOINTCOUNT, aset_eq_data_2_3->peq_array, EQMAXPOINTCOUNT);
        }
        else
        {
            update_peq_point(p_dae, EQMAXPOINTCOUNT, aset_eq_data_2_3->peq_array, \
                EQMAXPOINTCOUNT_ALL - EQMAXPOINTCOUNT);
        }
    }
    else if (update_mode == UPDATE_PEQ_MODE_PEQ3)
    {
        aset_peq_data_2_3_t *aset_eq_data_2_3 = (aset_peq_data_2_3_t *) aset_data;

        update_peq_point(p_dae, EQMAXPOINTCOUNT*2, aset_eq_data_2_3->peq_array, \
            EQMAXPOINTCOUNT_ALL - EQMAXPOINTCOUNT*2);
    }
    else if (update_mode == UPDATE_PEQ_MODE_VBASS)
    {
        aset_vbass_data_t *aset_vbass_data = (aset_vbass_data_t *) aset_data;

        p_dae->vbass_enable = (bool)aset_vbass_data->vbass_enable;
        p_dae->vbass_cut_freq = (uint16) aset_vbass_data->cutoff_freq;
        if ((aset_vbass_data->vbass_gain >= 0) && (aset_vbass_data->vbass_gain <= 240))
        {
           p_dae->vbass_ratio = (int16)(aset_vbass_data->vbass_gain) - 120; //虚拟低音增益范围转换成(-12.0dB - 12.0dB)
        }
        else
        {
            p_dae->vbass_ratio = 0;
        }
    }
    else if (update_mode == UPDATE_PEQ_MODE_TREBLE)
    {
        aset_te_data_t *aset_te_data = (aset_te_data_t *) aset_data;

        p_dae->treble_enhance_enable = (bool)aset_te_data->te_enable;
        p_dae->treble_enhance_cut_freq = (uint16) aset_te_data->cutoff_freq;
        p_dae->treble_enhance_ratio = (int16)(aset_te_data->te_gain);
    }
    else if (update_mode == UPDATE_PEQ_MODE_VSURROUND)
    {
        aset_surr_data_t *aset_surr_data = (aset_surr_data_t *) aset_data;

        p_dae->vsurround_angle = (uint8)aset_surr_data->head_angle;
        p_dae->vsurround_ratio = (int8)aset_surr_data->surr_gain;
        p_dae->vsurround_enable = (bool)aset_surr_data->surr_enable;
    }
    else if (update_mode == UPDATE_PEQ_MODE_LIMITER)
    {
        aset_limiter_data_t *aset_limiter_data = (aset_limiter_data_t *) aset_data;

        p_dae->limiter_threshold = aset_limiter_data->threhold;
        p_dae->limiter_attack_time = (uint16)aset_limiter_data->attack_time;
        p_dae->limiter_release_time = (uint16)aset_limiter_data->release_time;
        p_dae->limiter_enable = (bool)aset_limiter_data->limiter_enable;
    }
    else if (update_mode == UPDATE_PEQ_MODE_MDRC)
    {
        aset_mdrc_data_t *aset_mdrc_data = (aset_mdrc_data_t *) aset_data;

        p_dae->mdrc_threshold_base_max = -600;
        for (i = 0; i < MAX_MDRC_SEG; i++)
        {
            libc_memcpy(&(p_dae->mdrc_bands[i]), &(aset_mdrc_data->mdrc_band[i]), sizeof(aset_mdrc_band_t));
            p_dae->mdrc_bands[i].reserve = 0;
            p_dae->mdrc_threshold_base[i] = p_dae->mdrc_bands[i].threshold;
            if (p_dae->mdrc_threshold_base[i] > p_dae->mdrc_threshold_base_max)
            {
                p_dae->mdrc_threshold_base_max = p_dae->mdrc_threshold_base[i];
            }
        }

        p_dae->mdrc_enable = (bool)aset_mdrc_data->mdrc_enable;

        if (p_dae->mdrc_enable == 1)
        {
            p_dae->equivalent_gain = g_aset_equivalent_gain;
            p_dae->precut_ratio = 0;
            p_dae->mdrc_precut_ratio = 0;
            sys_comval->dae_mdrc_peak_gain = g_aset_main_gain_value;
        }
        else
        {
            p_dae->equivalent_gain = 0;
            p_dae->precut_ratio = g_aset_main_gain_value;
            p_dae->mdrc_precut_ratio = 0;
        }
    }
    else if (update_mode == UPDATE_PEQ_MODE_MDRC_OTHER)
    {
        aset_mDRC2_data_t *aset_mdrc2_data = (aset_mDRC2_data_t *) aset_data;

        //if (p_dae->mdrc_enable == 1)
        //{
            p_dae->mdrc_crossover_freq[0] = (uint16)aset_mdrc2_data->nMidMin;
            p_dae->mdrc_crossover_freq[1] = (uint16)aset_mdrc2_data->nMaxMid;
            p_dae->limiter_threshold_diff = (int16)aset_mdrc2_data->limiterThresholdDiff;
            p_dae->post_precut_ratio = (int8)aset_mdrc2_data->signalPrecut;
            sys_comval->mdrc_vol_adjust = (int8)aset_mdrc2_data->fMVolume;
        //}
    }
    else if (update_mode == UPDATE_PEQ_MODE_SEE)
    {
        aset_SEEnhance_data_t *aset_SEEnhance_data = (aset_SEEnhance_data_t *) aset_data;
        dew_band_t *p_dew_band;

        p_dew_band = sys_malloc(sizeof(dew_band_t)*MAX_DEW_SEG);
        sys_comval->dae_enhanced_enable = aset_SEEnhance_data->bEnableSEE;
        sys_comval->dae_enhanced_peak_ratio = aset_SEEnhance_data->peak_ratio;

        libc_memcpy(p_dew_band, aset_SEEnhance_data, sizeof(dew_band_t)*MAX_DEW_SEG);

        for (i = 0; i < MAX_DEW_SEG; i++)
        {
            p_dew_band[i].rel_vol_start *= 10; //单位从1db转换为0.1db
            p_dew_band[i].rel_vol_keep *= 10; //单位从1db转换为0.1db
        }

        sys_vm_write(p_dew_band, VM_DEW_PARAM_BASE, sizeof(dew_band_t)*MAX_DEW_SEG);

        sys_free(p_dew_band);
        p_dew_band = NULL;
    }
    else if (update_mode == UPDATE_PEQ_MODE_SEW)
    {
        aset_SEWeaken_data_t *aset_SEWeaken_data = (aset_SEWeaken_data_t *) aset_data;
        dew_band_t *p_dew_band;

        p_dew_band = sys_malloc(sizeof(dew_band_t)*MAX_DEW_SEG);

        sys_comval->dae_weaken_enable = aset_SEWeaken_data->bEnableSEW;

        libc_memcpy(p_dew_band, aset_SEWeaken_data, sizeof(dew_band_t)*MAX_DEW_SEG);

        for (i = 0; i < MAX_DEW_SEG; i++)
        {
            p_dew_band[i].rel_vol_start *= 10; //单位从1db转换为0.1db
            p_dew_band[i].rel_vol_keep *= 10; //单位从1db转换为0.1db
        }

        sys_vm_write(p_dew_band, VM_DEW_PARAM_BASE + 0x10000, sizeof(dew_band_t)*MAX_DEW_SEG);

        sys_free(p_dew_band);
        p_dew_band = NULL;
    }
    else if (update_mode == UPDATE_PEQ_MODE_SIGNAL)
    {
        aset_SignalDete_data_t *aset_SignalDete_data = (aset_SignalDete_data_t *) aset_data;

        sys_comval->signal_energy_enable = aset_SignalDete_data->bEnableSD;
        if (sys_comval->signal_energy_enable == 0)
        {
            p_dae->energy_detect_enable = 0;
            sys_comval->signal_energy = 0; 
        }

        p_dae->period = aset_SignalDete_data->fSignalDetePer * 100; //单位从0.1S转换为1ms
        p_dae->period_count = (uint8)aset_SignalDete_data->nSignalDetePerNum;
        p_dae->preadjust_db = aset_SignalDete_data->fSignalDesTVal;
        p_dae->preadjust_count = (uint8)aset_SignalDete_data->nSignalDesPerNum;
        sys_comval->signal_energy_min = aset_SignalDete_data->nSignalMinVal;
    }
    else if (update_mode == UPDATE_PEQ_MODE_SFR)
    {
        aset_FRCurve_data_t *aset_FRCurve_data = (aset_FRCurve_data_t *) aset_data;
        uint8 *buff = aset_FRCurve_data->stFirInfo.fir_coeff;
        uint8 index = aset_FRCurve_data->index;

        p_dae->spk_compensation_enable = aset_FRCurve_data->bEnFRCurve;

        p_dae->spk_comp_source = 1;
        p_dae->spk_comp_filter_order = (short)aset_FRCurve_data->stFirInfo.fir_order;
        if (index == 0)
        {
            p_dae->spk_comp_filter_QvalLeft = (uint8)aset_FRCurve_data->stFirInfo.fir_coeff_Q;
        }
        if (index == 4)
        {
            p_dae->spk_comp_filter_QvalRight = (uint8)aset_FRCurve_data->stFirInfo.fir_coeff_Q;
        }
        sys_vm_write(buff, VM_SPK_COMP_DAT_BASE + (((uint32)index) << 16), 128);
    }
    else if (update_mode == UPDATE_PEQ_MODE_COMPRESSOR_OTHER_STANDARD)
    {
        Compressor_TP_Info_M *pCompressor_TP_Info = (Compressor_TP_Info_M *) aset_data;
       
        p_dae->compressor_enable_standard_mode = pCompressor_TP_Info->bLmEnable;

        p_dae->compressor_standard_mode.threshold1 = pCompressor_TP_Info->nThreshold_01;
        p_dae->compressor_standard_mode.ratio1 = pCompressor_TP_Info->nCpRatio_01;
        p_dae->compressor_standard_mode.threshold2 = pCompressor_TP_Info->nThreshold_02;
        p_dae->compressor_standard_mode.ratio2 = pCompressor_TP_Info->nCpRatio_02;
        p_dae->compressor_standard_mode.tav = pCompressor_TP_Info->nRmsAvgTime;
        p_dae->compressor_standard_mode.attack_time = pCompressor_TP_Info->fAttack_time;
        p_dae->compressor_standard_mode.release_time = pCompressor_TP_Info->nRelease_time;    
    }
    else if (update_mode == UPDATE_PEQ_MODE_MDRC_STANDARD)
    {
        DRC_CP_Info_M *pDRC_CpVal_Info = (DRC_CP_Info_M *) aset_data;
        int16 mdrc_threshold_max = -600;
                      
        for (i = 0; i < MDRC_NUM_BANDS_STANDARD_MODE; i++)
        {
            libc_memcpy((p_dae->p_mdrc_band_standard_mode) + i, &(pDRC_CpVal_Info->stDrcVal_M[i]), sizeof(DRC_CpVal_Info_M));
            p_dae->p_mdrc_band_standard_mode[i].reserve = 0;
        }       
        p_dae->mdrc_enable_standard_mode = (bool)pDRC_CpVal_Info->bDrcEnable;
    }
    else if (update_mode == UPDATE_PEQ_MODE_MDRC_OTHER_STANDARD)
    {
        DRC_TP_Info_M3 *pDRC_TP_Info_M3 = (DRC_TP_Info_M3 *) aset_data;
        
        if (p_dae->mdrc_enable_standard_mode == 1)
        {
            p_dae->mdrc_extend_para_standard_mode.signal_adjust = (int16)pDRC_TP_Info_M3->fSignalPrecut;//功率调节
            p_dae->mdrc_extend_para_standard_mode.mdrc_crossover_freq0 = pDRC_TP_Info_M3->nMidMin; 
            p_dae->mdrc_extend_para_standard_mode.mdrc_crossover_freq1 = pDRC_TP_Info_M3->nMaxMid; 
            p_dae->mdrc_extend_para_standard_mode.makeup_gain = (int16)pDRC_TP_Info_M3->fGainCom; //灵敏度
            sys_comval->mdrc_vol_adjust_standard_mode = (int16)pDRC_TP_Info_M3->fMVolume;
            
            p_dae->mdrc_peak_standard_mode.MDRC_compensation_peak_detect_attack_time = pDRC_TP_Info_M3->fStTime; 
            p_dae->mdrc_peak_standard_mode.MDRC_compensation_peak_detect_release_time = pDRC_TP_Info_M3->nReleaseTime;  
            p_dae->mdrc_peak_standard_mode.MDRC_compensation_threshold = pDRC_TP_Info_M3->fTsVal;  
            p_dae->mdrc_peak_standard_mode.MDRC_compensation_filter_Q = pDRC_TP_Info_M3->fQVal;
#if 0
            PRINT_INFO_INT("signal_adjust",pDRC_TP_Info_M3->fSignalPrecut);
            PRINT_INFO_INT("nMidMin",pDRC_TP_Info_M3->nMidMin);
            PRINT_INFO_INT("nMaxMid",pDRC_TP_Info_M3->nMaxMid);
            PRINT_INFO_INT("fGainCom",pDRC_TP_Info_M3->fGainCom);
            PRINT_INFO_INT("fMVolume",pDRC_TP_Info_M3->fMVolume);
            PRINT_INFO_INT("fStTime",pDRC_TP_Info_M3->fStTime);
#endif            
        }
    }
    else
    {
        ;//nothing
    }

    sys_os_sched_unlock();
}

void enable_aset_sound_effect(void)
{
48525916:	6d00      	li	a1,0
    msg_apps_t seteq_msg;
    dae_config_t *p_dae_cfg_shm;

    //更新DAE配置参数到共享内存
    p_dae_cfg_shm = (dae_config_t *) sys_shm_mount(SHARE_MEM_ID_DAECFG);
48525918:	b01e      	lw	s0,48525990 <.LBE19+0x36>
4852591a:	6c03      	li	a0,3
4852591c:	67c5      	move	a2,a1
4852591e:	e840      	jalr	s0
48525920:	6f49      	li	a3,73
48525922:	6722      	move	s1,v0
48525924:	2a06      	bnez	v0,48525932 <enable_aset_sound_effect+0x1e>
    if (p_dae_cfg_shm == NULL)
48525926:	0c14      	la	a0,48525974 <.LBE19+0x1a>
    {
        PRINT_ERR("dae_cfg shm not exist!!");
48525928:	67a2      	move	a1,v0
4852592a:	67c2      	move	a2,v0
4852592c:	e840      	jalr	s0
4852592e:	6f4b      	li	a3,75
48525930:	17ff      	b	48525930 <enable_aset_sound_effect+0x1c>
        while (1)
48525932:	6c00      	li	a0,0
        {
            ; //nothing for QAC
        }
    }

    sys_os_sched_lock();
48525934:	b017      	lw	s0,48525990 <.LBE19+0x36>
48525936:	67a4      	move	a1,a0
48525938:	67c4      	move	a2,a0
4852593a:	e840      	jalr	s0
4852593c:	6f33      	li	a3,51
4852593e:	b616      	lw	a2,48525994 <.LBE19+0x3a>
    libc_memcpy(p_dae_cfg_shm, g_p_dae_cfg, sizeof(dae_config_t));
48525940:	b216      	lw	v0,48525998 <.LBE19+0x3e>
48525942:	9ea0      	lw	a1,0(a2)
48525944:	6eff      	li	a2,255
48525946:	6791      	move	a0,s1
48525948:	4e61      	addiu	a2,97
4852594a:	ea40      	jalr	v0
4852594c:	6f00      	li	a3,0
4852594e:	6c00      	li	a0,0
    sys_os_sched_unlock();
48525950:	67a4      	move	a1,a0
48525952:	67c4      	move	a2,a0
48525954:	e840      	jalr	s0
48525956:	6f34      	li	a3,52

48525958 <.LBB19>:
48525958:	b311      	lw	v1,4852599c <.LBE19+0x42>

4852595a <.LBE19>:
4852595a:	a340      	lbu	v0,0(v1)
4852595c:	2208      	beqz	v0,4852596e <.LBE19+0x14>
4852595e:	6cf6      	li	a0,246

    //发送消息给引擎
    if (get_engine_type() != ENGINE_NULL)
    {
        seteq_msg.type = MSG_SET_DAE_CFG_SYNC;
48525960:	6e00      	li	a2,0
        send_sync_msg(APP_ID_THEENGINE, &seteq_msg, NULL, 0);
48525962:	b210      	lw	v0,485259a0 <.LBE19+0x46>
48525964:	d404      	sw	a0,16(sp)
48525966:	0504      	addiu	a1,sp,16
48525968:	6c80      	li	a0,128
4852596a:	ea40      	jalr	v0
4852596c:	67e6      	move	a3,a2
4852596e:	6475      	restore	40,ra,s0-s1
    }
}
48525970:	e8a0      	jrc	ra
48525972:	0000      	addiu	s0,sp,0
48525974:	453c      	daddiu	s1,a1,-4
48525976:	203e      	beqz	s0,485259f4 <aset_read_vbass_data+0x4>
48525978:	6164      	btnez	48525a42 <aset_read_te_data+0x1e>
4852597a:	5f65      	sltiu	a3,101
4852597c:	6663      	0x6663
4852597e:	2067      	beqz	s0,48525a4e <aset_read_te_data+0x2a>
48525980:	6873      	li	s0,115
48525982:	206d      	beqz	s0,48525a5e <aset_read_surr_data+0x6>
48525984:	6f6e      	li	a3,110
48525986:	2074      	beqz	s0,48525a70 <aset_read_surr_data+0x18>
48525988:	7865      	sd	v1,40(s0)
4852598a:	7369      	cmpi	v1,105
4852598c:	2174      	beqz	s1,48525a76 <aset_read_surr_data+0x1e>
4852598e:	0021      	addiu	s0,sp,132
48525990:	e901      	sdbbp	8
48525992:	bfc1      	lwu	a2,4(a3)
48525994:	a2b0      	lbu	a1,16(v0)
48525996:	9fc1      	lw	a2,4(a3)
48525998:	e905      	break	8
4852599a:	bfc1      	lwu	a2,4(a3)
4852599c:	a094      	lbu	a0,20(s0)
4852599e:	9fc1      	lw	a2,4(a3)
485259a0:	5a65      	sltiu	v0,101
485259a2:	482e      	addiu	s0,46

485259a4 <aset_read_eq_data>:
485259a4:	64f4      	save	32,ra,s0-s1

int32 aset_read_eq_data(void)
{
485259a6:	b210      	lw	v0,485259e4 <aset_read_eq_data+0x40>
    int ret_val;

    aset_peq_data_t *eq_data_buffer = (aset_peq_data_t *) (ASET_READ_DATA_BUF);
485259a8:	b110      	lw	s1,485259e8 <aset_read_eq_data+0x44>
    aset_peq_data_2_3_t *eq_data_2_3_buffer = (aset_peq_data_2_3_t *) (ASET_READ_DATA_BUF);

    ret_val = aset_read_data(STUB_CMD_ASET_READ_EQ_DATA, eq_data_buffer, sizeof(aset_peq_data_t));
485259aa:	9a00      	lw	s0,0(v0)
485259ac:	6eb0      	li	a2,176
485259ae:	f300 6c02 	li	a0,770
485259b2:	e940      	jalr	s1
485259b4:	67b0      	move	a1,s0
485259b6:	67c2      	move	a2,v0
485259b8:	2a05      	bnez	v0,485259c4 <aset_read_eq_data+0x20>

    if (ret_val == 0)
485259ba:	b30d      	lw	v1,485259ec <aset_read_eq_data+0x48>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, eq_data_buffer, UPDATE_PEQ_MODE_PEQ);
485259bc:	67b0      	move	a1,s0
485259be:	1891 961f 	jal	4892587c <update_peq_value>
485259c2:	9b80      	lw	a0,0(v1)
485259c4:	f320 6c01 	li	a0,801
    }

    if (EQMAXPOINTCOUNT_ALL > EQMAXPOINTCOUNT)
    {
        ret_val = aset_read_data(STUB_CMD_ASET_READ_EQ2_DATA, eq_data_2_3_buffer, sizeof(aset_peq_data_2_3_t));
485259c8:	67b0      	move	a1,s0
485259ca:	e940      	jalr	s1
485259cc:	6eac      	li	a2,172
485259ce:	2a06      	bnez	v0,485259dc <aset_read_eq_data+0x38>

        if (ret_val == 0)
485259d0:	b507      	lw	a1,485259ec <aset_read_eq_data+0x48>
        {
            //update eq
            update_peq_value(g_p_dae_cfg, eq_data_2_3_buffer, UPDATE_PEQ_MODE_PEQ2);
485259d2:	6e0b      	li	a2,11
485259d4:	9d80      	lw	a0,0(a1)
485259d6:	1891 961f 	jal	4892587c <update_peq_value>
485259da:	67b0      	move	a1,s0
485259dc:	6a00      	li	v0,0
        }
    }

    if (EQMAXPOINTCOUNT_ALL > (EQMAXPOINTCOUNT*2))
    {
        ret_val = aset_read_data(STUB_CMD_ASET_READ_EQ3_DATA, eq_data_2_3_buffer, sizeof(aset_peq_data_2_3_t));

        if (ret_val == 0)
        {
            //update eq
            update_peq_value(g_p_dae_cfg, eq_data_2_3_buffer, UPDATE_PEQ_MODE_PEQ3);
        }
    }

    return 0;
}
485259de:	6474      	restore	32,ra,s0-s1
485259e0:	e8a0      	jrc	ra
485259e2:	0000      	addiu	s0,sp,0
485259e4:	a2ac      	lbu	a1,12(v0)
485259e6:	9fc1      	lw	a2,4(a3)
485259e8:	5801      	sltiu	s0,1
485259ea:	4852      	addiu	s0,82
485259ec:	a2b0      	lbu	a1,16(v0)
485259ee:	9fc1      	lw	a2,4(a3)

485259f0 <aset_read_vbass_data>:
485259f0:	64e3      	save	24,ra,s0

int32 aset_read_vbass_data(void)
{
485259f2:	b30a      	lw	v1,48525a18 <aset_read_vbass_data+0x28>
    int ret_val;

    aset_vbass_data_t *vbass_data_buffer = (aset_vbass_data_t *) (ASET_READ_DATA_BUF);
485259f4:	b20a      	lw	v0,48525a1c <aset_read_vbass_data+0x2c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_VBASS_DATA, vbass_data_buffer, sizeof(aset_vbass_data_t));
485259f6:	9b00      	lw	s0,0(v1)
485259f8:	f300 6c03 	li	a0,771
485259fc:	67b0      	move	a1,s0
485259fe:	ea40      	jalr	v0
48525a00:	6e08      	li	a2,8
48525a02:	2a06      	bnez	v0,48525a10 <aset_read_vbass_data+0x20>

    if (ret_val == 0)
48525a04:	b507      	lw	a1,48525a20 <aset_read_vbass_data+0x30>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, vbass_data_buffer, UPDATE_PEQ_MODE_VBASS);
48525a06:	6e01      	li	a2,1
48525a08:	9d80      	lw	a0,0(a1)
48525a0a:	1891 961f 	jal	4892587c <update_peq_value>
48525a0e:	67b0      	move	a1,s0
48525a10:	6a00      	li	v0,0
    }

    return 0;

}
48525a12:	6463      	restore	24,ra,s0
48525a14:	e8a0      	jrc	ra
48525a16:	0000      	addiu	s0,sp,0
48525a18:	a2ac      	lbu	a1,12(v0)
48525a1a:	9fc1      	lw	a2,4(a3)
48525a1c:	5801      	sltiu	s0,1
48525a1e:	4852      	addiu	s0,82
48525a20:	a2b0      	lbu	a1,16(v0)
48525a22:	9fc1      	lw	a2,4(a3)

48525a24 <aset_read_te_data>:
48525a24:	64e3      	save	24,ra,s0

int32 aset_read_te_data(void)
{
48525a26:	b30a      	lw	v1,48525a4c <aset_read_te_data+0x28>
    int ret_val;

    aset_te_data_t *te_data_buffer = (aset_te_data_t *) (ASET_READ_DATA_BUF);
48525a28:	b20a      	lw	v0,48525a50 <aset_read_te_data+0x2c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_TE_DATA, te_data_buffer, sizeof(aset_te_data_t));
48525a2a:	9b00      	lw	s0,0(v1)
48525a2c:	f300 6c04 	li	a0,772
48525a30:	67b0      	move	a1,s0
48525a32:	ea40      	jalr	v0
48525a34:	6e08      	li	a2,8
48525a36:	2a06      	bnez	v0,48525a44 <aset_read_te_data+0x20>

    if (ret_val == 0)
48525a38:	b507      	lw	a1,48525a54 <aset_read_te_data+0x30>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, te_data_buffer, UPDATE_PEQ_MODE_TREBLE);
48525a3a:	6e02      	li	a2,2
48525a3c:	9d80      	lw	a0,0(a1)
48525a3e:	1891 961f 	jal	4892587c <update_peq_value>
48525a42:	67b0      	move	a1,s0
48525a44:	6a00      	li	v0,0
    }

    return 0;

}
48525a46:	6463      	restore	24,ra,s0
48525a48:	e8a0      	jrc	ra
48525a4a:	0000      	addiu	s0,sp,0
48525a4c:	a2ac      	lbu	a1,12(v0)
48525a4e:	9fc1      	lw	a2,4(a3)
48525a50:	5801      	sltiu	s0,1
48525a52:	4852      	addiu	s0,82
48525a54:	a2b0      	lbu	a1,16(v0)
48525a56:	9fc1      	lw	a2,4(a3)

48525a58 <aset_read_surr_data>:
48525a58:	64e3      	save	24,ra,s0

int32 aset_read_surr_data(void)
{
48525a5a:	b30a      	lw	v1,48525a80 <aset_read_surr_data+0x28>
    int ret_val;

    aset_surr_data_t *surr_data_buffer = (aset_surr_data_t *) (ASET_READ_DATA_BUF);
48525a5c:	b20a      	lw	v0,48525a84 <aset_read_surr_data+0x2c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_SURR_DATA, surr_data_buffer, sizeof(aset_surr_data_t));
48525a5e:	9b00      	lw	s0,0(v1)
48525a60:	f300 6c05 	li	a0,773
48525a64:	67b0      	move	a1,s0
48525a66:	ea40      	jalr	v0
48525a68:	6e08      	li	a2,8
48525a6a:	2a06      	bnez	v0,48525a78 <aset_read_surr_data+0x20>

    if (ret_val == 0)
48525a6c:	b507      	lw	a1,48525a88 <aset_read_surr_data+0x30>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, surr_data_buffer, UPDATE_PEQ_MODE_VSURROUND);
48525a6e:	6e03      	li	a2,3
48525a70:	9d80      	lw	a0,0(a1)
48525a72:	1891 961f 	jal	4892587c <update_peq_value>
48525a76:	67b0      	move	a1,s0
48525a78:	6a00      	li	v0,0
    }

    return 0;

}
48525a7a:	6463      	restore	24,ra,s0
48525a7c:	e8a0      	jrc	ra
48525a7e:	0000      	addiu	s0,sp,0
48525a80:	a2ac      	lbu	a1,12(v0)
48525a82:	9fc1      	lw	a2,4(a3)
48525a84:	5801      	sltiu	s0,1
48525a86:	4852      	addiu	s0,82
48525a88:	a2b0      	lbu	a1,16(v0)
48525a8a:	9fc1      	lw	a2,4(a3)

48525a8c <aset_read_limiter_data>:
48525a8c:	64e3      	save	24,ra,s0

int32 aset_read_limiter_data(void)
{
48525a8e:	b30a      	lw	v1,48525ab4 <aset_read_limiter_data+0x28>
    int ret_val;

    aset_limiter_data_t *limiter_data_buffer = (aset_limiter_data_t *) (ASET_READ_DATA_BUF);
48525a90:	b20a      	lw	v0,48525ab8 <aset_read_limiter_data+0x2c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_LIMITER_DATA, limiter_data_buffer, sizeof(aset_limiter_data_t));
48525a92:	9b00      	lw	s0,0(v1)
48525a94:	f300 6c06 	li	a0,774
48525a98:	67b0      	move	a1,s0
48525a9a:	ea40      	jalr	v0
48525a9c:	6e08      	li	a2,8
48525a9e:	2a06      	bnez	v0,48525aac <aset_read_limiter_data+0x20>

    if (ret_val == 0)
48525aa0:	b507      	lw	a1,48525abc <aset_read_limiter_data+0x30>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, limiter_data_buffer, UPDATE_PEQ_MODE_LIMITER);
48525aa2:	6e04      	li	a2,4
48525aa4:	9d80      	lw	a0,0(a1)
48525aa6:	1891 961f 	jal	4892587c <update_peq_value>
48525aaa:	67b0      	move	a1,s0
48525aac:	6a00      	li	v0,0
    }

    return 0;

}
48525aae:	6463      	restore	24,ra,s0
48525ab0:	e8a0      	jrc	ra
48525ab2:	0000      	addiu	s0,sp,0
48525ab4:	a2ac      	lbu	a1,12(v0)
48525ab6:	9fc1      	lw	a2,4(a3)
48525ab8:	5801      	sltiu	s0,1
48525aba:	4852      	addiu	s0,82
48525abc:	a2b0      	lbu	a1,16(v0)
48525abe:	9fc1      	lw	a2,4(a3)

48525ac0 <aset_read_mdrc2_data>:
48525ac0:	64e3      	save	24,ra,s0

int32 aset_read_multibank_drc_data(void)
{

    int ret_val;
    uint8 mDRC2_en;
    aset_mdrc_data_t *mdrc_data_buffer = (aset_mdrc_data_t *) (ASET_READ_DATA_BUF);
    mdrc_data_buffer->mDRC2_enable = 0;
    ret_val = aset_read_data(STUB_CMD_ASET_READ_MDRC_DATA, mdrc_data_buffer, sizeof(aset_mdrc_data_t));
    mDRC2_en = (uint8)mdrc_data_buffer->mDRC2_enable;//避免数据被改掉
    if (ret_val == 0)
    {
        //update eq
        update_peq_value(g_p_dae_cfg, mdrc_data_buffer, UPDATE_PEQ_MODE_MDRC);
        if(mDRC2_en == 0x5A)//跟PC工具商议好，标志为5A
        {
            aset_read_mdrc2_data();
        }
    }
    return 0;
}

int32 aset_read_mdrc2_data(void)
{
48525ac2:	b30a      	lw	v1,48525ae8 <aset_read_mdrc2_data+0x28>

    int ret_val;

    aset_mDRC2_data_t *aset_buff = (aset_mDRC2_data_t *) (ASET_READ_DATA_BUF);
48525ac4:	b20a      	lw	v0,48525aec <aset_read_mdrc2_data+0x2c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_MDRC2_DATA, aset_buff, sizeof(aset_mDRC2_data_t));
48525ac6:	9b00      	lw	s0,0(v1)
48525ac8:	f300 6c09 	li	a0,777
48525acc:	67b0      	move	a1,s0
48525ace:	ea40      	jalr	v0
48525ad0:	6e10      	li	a2,16
48525ad2:	2a06      	bnez	v0,48525ae0 <aset_read_mdrc2_data+0x20>

    if (ret_val == 0)
48525ad4:	b507      	lw	a1,48525af0 <aset_read_mdrc2_data+0x30>
    {
        //update eq
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_MDRC_OTHER);
48525ad6:	6e06      	li	a2,6
48525ad8:	9d80      	lw	a0,0(a1)
48525ada:	1891 961f 	jal	4892587c <update_peq_value>
48525ade:	67b0      	move	a1,s0
48525ae0:	6a00      	li	v0,0
    }

    return 0;
}
48525ae2:	6463      	restore	24,ra,s0
48525ae4:	e8a0      	jrc	ra
48525ae6:	0000      	addiu	s0,sp,0
48525ae8:	a2ac      	lbu	a1,12(v0)
48525aea:	9fc1      	lw	a2,4(a3)
48525aec:	5801      	sltiu	s0,1
48525aee:	4852      	addiu	s0,82
48525af0:	a2b0      	lbu	a1,16(v0)
48525af2:	9fc1      	lw	a2,4(a3)

48525af4 <aset_read_multibank_drc_data>:
48525af4:	64f4      	save	32,ra,s0-s1
48525af6:	b40e      	lw	a0,48525b2c <aset_read_multibank_drc_data+0x38>
48525af8:	6b00      	li	v1,0
48525afa:	9c00      	lw	s0,0(a0)
48525afc:	b20d      	lw	v0,48525b30 <aset_read_multibank_drc_data+0x3c>
48525afe:	c073      	sb	v1,19(s0)
48525b00:	f300 6c08 	li	a0,776
48525b04:	67b0      	move	a1,s0
48525b06:	ea40      	jalr	v0
48525b08:	6e18      	li	a2,24
48525b0a:	a033      	lbu	s1,19(s0)
48525b0c:	2a0b      	bnez	v0,48525b24 <aset_read_multibank_drc_data+0x30>
48525b0e:	b50a      	lw	a1,48525b34 <aset_read_multibank_drc_data+0x40>
48525b10:	6e05      	li	a2,5
48525b12:	9d80      	lw	a0,0(a1)
48525b14:	1891 961f 	jal	4892587c <update_peq_value>
48525b18:	67b0      	move	a1,s0
48525b1a:	715a      	cmpi	s1,90
48525b1c:	6103      	btnez	48525b24 <aset_read_multibank_drc_data+0x30>
48525b1e:	1a90 96b0 	jal	48525ac0 <aset_read_mdrc2_data>
48525b22:	6500      	nop
48525b24:	6a00      	li	v0,0
48525b26:	6474      	restore	32,ra,s0-s1
48525b28:	e8a0      	jrc	ra
48525b2a:	0000      	addiu	s0,sp,0
48525b2c:	a2ac      	lbu	a1,12(v0)
48525b2e:	9fc1      	lw	a2,4(a3)
48525b30:	5801      	sltiu	s0,1
48525b32:	4852      	addiu	s0,82
48525b34:	a2b0      	lbu	a1,16(v0)
48525b36:	9fc1      	lw	a2,4(a3)

48525b38 <aset_read_frcurve_data>:
48525b38:	64f5      	save	40,ra,s0-s1

int32 aset_read_frcurve_data(uint16 cmd)
{
48525b3a:	b30d      	lw	v1,48525b6c <aset_read_frcurve_data+0x34>
    int ret_val;

    aset_FRCurve_data_t *aset_buff = (aset_FRCurve_data_t *) (ASET_READ_DATA_BUF);
48525b3c:	b20d      	lw	v0,48525b70 <aset_read_frcurve_data+0x38>

    ret_val = aset_read_data(cmd, aset_buff, sizeof(aset_FRCurve_data_t));
48525b3e:	9b20      	lw	s1,0(v1)
48525b40:	ec31      	zeh	a0
48525b42:	67b1      	move	a1,s1
48525b44:	6e94      	li	a2,148
48525b46:	ea40      	jalr	v0
48525b48:	6704      	move	s0,a0
48525b4a:	d204      	sw	v0,16(sp)
48525b4c:	2a0b      	bnez	v0,48525b64 <aset_read_frcurve_data+0x2c>

    if (ret_val == 0)
48525b4e:	4a0f      	addiu	v0,15
    {
        //update eq
        aset_buff->index = (uint8)((cmd & 0x0F) - 1);
48525b50:	e84c      	and	s0,v0
48525b52:	408f      	addiu	a0,s0,-1
48525b54:	b508      	lw	a1,48525b74 <aset_read_frcurve_data+0x3c>
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_SFR);
48525b56:	f080 c192 	sb	a0,146(s1)
48525b5a:	9d80      	lw	a0,0(a1)
48525b5c:	6e0a      	li	a2,10
48525b5e:	1891 961f 	jal	4892587c <update_peq_value>
48525b62:	67b1      	move	a1,s1
48525b64:	9204      	lw	v0,16(sp)
    }
    return ret_val;
}
48525b66:	6475      	restore	40,ra,s0-s1
48525b68:	e8a0      	jrc	ra
48525b6a:	0000      	addiu	s0,sp,0
48525b6c:	a2ac      	lbu	a1,12(v0)
48525b6e:	9fc1      	lw	a2,4(a3)
48525b70:	5801      	sltiu	s0,1
48525b72:	4852      	addiu	s0,82
48525b74:	a2b0      	lbu	a1,16(v0)
48525b76:	9fc1      	lw	a2,4(a3)

48525b78 <aset_cmd_deal>:
48525b78:	64f6      	save	48,ra,s0-s1


int32 __section__(".bank_2")aset_read_see_data(void)
{
    int ret_val;

    aset_SEEnhance_data_t *aset_buff = (aset_SEEnhance_data_t *) (ASET_READ_DATA_BUF);

    ret_val = aset_read_data(STUB_CMD_ASET_READ_SEE_DATA, aset_buff, sizeof(aset_SEEnhance_data_t));

    if (ret_val == 0)
    {
        //update eq
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_SEE);
    }

    return 0;

}

int32 __section__(".bank_2")aset_read_sew_data(void)
{
    int ret_val;

    aset_SEWeaken_data_t *aset_buff = (aset_SEWeaken_data_t *) (ASET_READ_DATA_BUF);

    ret_val = aset_read_data(STUB_CMD_ASET_READ_SEW_DATA, aset_buff, sizeof(aset_SEWeaken_data_t));

    if (ret_val == 0)
    {
        //update eq
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_SEW);
    }

    return 0;
}

int32 __section__(".bank_2")aset_read_SignalD_data(void)
{
    int ret_val;

    aset_SignalDete_data_t *aset_buff = (aset_SignalDete_data_t *) (ASET_READ_DATA_BUF);

    ret_val = aset_read_data(STUB_CMD_ASET_READ_SD_DATA, aset_buff, sizeof(aset_SignalDete_data_t));

    if (ret_val == 0)
    {
        //update eq
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_SIGNAL);
    }

    return 0;
}


int32 aset_cmd_deal(aset_status_t *aset_status)
{
48525b7a:	6b00      	li	v1,0
    bool sound_effect_changed = FALSE;
48525b7c:	d305      	sw	v1,20(sp)
48525b7e:	d304      	sw	v1,16(sp)
    bool aset_signal_detect_update = FALSE;
48525b80:	a444      	lbu	v0,4(a0)
    
    if (aset_status->upload_case_info == TRUE)
48525b82:	6724      	move	s1,a0
48525b84:	7201      	cmpi	v0,1
48525b86:	6112      	btnez	48525bac <.LBE21+0x4>
48525b88:	a486      	lbu	a0,6(a0)
    {
        if (aset_status->update_audiopp == TRUE)
48525b8a:	7401      	cmpi	a0,1
48525b8c:	610d      	btnez	48525ba8 <.LBE21>
48525b8e:	6d01      	li	a1,1

48525b90 <.LBB21>:
        {
            sound_effect_changed = TRUE;
48525b90:	b296      	lw	v0,48525de8 <.LBE37+0x8>
            aset_update_audiopp();
        }
        aset_write_case_info();
    }
    else if (aset_status->upload_data == TRUE)
    {
        aset_upload_sound_param();
    }
    else
    {
        ;//for qac
    }
    
    if (aset_status->state == 1)
    {
        
        if (aset_status->volume_changed == TRUE)
        {
            aset_read_volume();

            sound_effect_changed = TRUE;
        }

        if (aset_status->main_switch_changed == TRUE)
        {
            aset_read_main_switch();

            sound_effect_changed = TRUE;
        }

        if (aset_status->eq_data_changed == TRUE)
        {
            aset_read_eq_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->vbass_data_changed == TRUE)
        {
            aset_read_vbass_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->te_data_changed == TRUE)
        {
            aset_read_te_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->surr_data_changed == TRUE)
        {
            aset_read_surr_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->limiter_data_changed == TRUE)
        {
            aset_read_limiter_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->multiband_drc_data_changed == TRUE)
        {
            aset_read_multibank_drc_data();

            sound_effect_changed = TRUE;
        }

        if (aset_status->Left_frcurve_data_changed == TRUE)
        {
            uint8 i;
            sound_effect_changed = TRUE;
            for(i = 0; i < 4;i++)
            {
                aset_read_frcurve_data(STUB_CMD_ASET_READ_LFRC_DATA_BASE + (uint16)i);
            }
        }

        if (aset_status->Right_frcurve_data_changed == TRUE)
        {
            uint8 i;
            sound_effect_changed = TRUE;
            for(i = 0; i < 4;i++)
            {
                aset_read_frcurve_data(STUB_CMD_ASET_READ_RFRC_DATA_BASE + (uint16)i);
            }
        }

        if (aset_status->see_data_changed == TRUE)
        {
            sound_effect_changed = TRUE;
            aset_read_see_data();
        }

        if (aset_status->sew_data_changed == TRUE)
        {
            sound_effect_changed = TRUE;
            aset_read_sew_data();
        }

        if (aset_status->SignalD_data_changed == TRUE)
        {
            sound_effect_changed = TRUE;
            aset_signal_detect_update = TRUE;
            aset_read_SignalD_data();
        }

        if (aset_status->standard_mode_mdrc_changed == TRUE)
        {
            sound_effect_changed = TRUE;
        }
        
        if (aset_status->compressor_changed == TRUE)
        {
            sound_effect_changed = TRUE;
            aset_read_compressor_standard_mode();
        }

        if (aset_status->standard_mode_mdrc_changed == TRUE)
        {
            sound_effect_changed = TRUE;
            aset_read_multibank_drc_data_standard_mode();
        }

        if (sound_effect_changed == TRUE)
        {
            bool signal_detect_flag = FALSE;

            if (aset_status->main_switch_changed == 1)
            {
                if (g_aset_main_switch_flag == 0)
                {
                    com_set_dae_onoff(FALSE);
                }
                else
                {
                    com_set_dae_onoff(TRUE);
                }
            }

            if ((g_aset_neednot_take_effect == FALSE) && (aset_signal_detect_update == TRUE))
            {
                if (sys_comval->signal_energy_enable == 1)
                {
                    signal_detect_flag = TRUE; //如果信号检测更新且开启，那么要先关闭使之还原为初始状态，然后再恢复
                    sys_comval->signal_energy_enable = 0;
                    g_p_dae_cfg->energy_detect_enable = 0;
                }

                com_load_mdrc_config(g_p_dae_cfg, FALSE, TRUE);
            }
            else
            {
                com_load_mdrc_config(g_p_dae_cfg, FALSE, FALSE);
            }

            com_update_dae_config(g_p_dae_cfg);
            if (g_aset_neednot_take_effect == FALSE)
            {
                enable_aset_sound_effect();
            }

            if (signal_detect_flag == TRUE)
            {
                sys_os_time_dly(10); //delay 100ms,确保信号检测已经关闭

                sys_comval->signal_energy_enable = 1;

                com_load_mdrc_config(g_p_dae_cfg, FALSE, TRUE);
                com_update_dae_config(g_p_dae_cfg);
                if (g_aset_neednot_take_effect == FALSE)
                {
                    enable_aset_sound_effect();
                }
            }

            g_aset_sync_volume = 1;
            com_reset_sound_volume(0);
            g_aset_sync_volume = 0;
        }
    }
    else
    {
        ; //nothing for QAC
    }

    return 0;
}

void aset_set_dae_init(void)
{
    int ret_val;

    aset_status_t aset_status;

    g_aset_neednot_take_effect = TRUE;

    if (g_aset_run_state.run_state == ASET_TOOLS_NOT_WORK)
    {
        #ifdef SUPPORT_ASET_TEST
        aset_reconnect_deal();
        #endif
    }

    if (g_aset_run_state.run_state == ASET_TOOLS_WORK)
    {
        ret_val = aset_read_data(STUB_CMD_ASET_READ_STATUS, &aset_status, sizeof(aset_status));

        //PRINT_INFO_INT("aset_status.state",aset_status.state);
        if (aset_status.state == 1)
        {
            aset_status.volume_changed = 1;
            aset_status.eq_data_changed = 1;
            //aset_status.limiter_data_changed = 1;
            aset_status.surr_data_changed = 1;
            aset_status.te_data_changed = 1;
            aset_status.vbass_data_changed = 1;
            //aset_status.multiband_drc_data_changed = 1;

            aset_status.Left_frcurve_data_changed = 1;
            aset_status.Right_frcurve_data_changed = 1;
            aset_status.see_data_changed = 1;
            aset_status.sew_data_changed = 1;
            aset_status.SignalD_data_changed = 1;

            if (SMART_MODE == sys_comval->dae_cfg.audiopp_type)
            {
                aset_status.limiter_data_changed = 1;
                aset_status.multiband_drc_data_changed = 1;  

                aset_status.compressor_changed = 0;
                aset_status.standard_mode_mdrc_changed = 0;
            }
            else if(STANDARD_MODE == sys_comval->dae_cfg.audiopp_type)
            {
                aset_status.limiter_data_changed = 0;
                aset_status.multiband_drc_data_changed = 0;  

                aset_status.compressor_changed = 1;
                aset_status.standard_mode_mdrc_changed = 1;
            }

            //强制读一次ASET数据到小机
            aset_cmd_deal(&aset_status);
        }
    }

    g_aset_neednot_take_effect = FALSE;
}

static int32  __section__(".bank_2")aset_update_audiopp(void)
{

    uint8 audiopp_type;

    audiopp_type = get_audiopp_type();;
48525b92:	ea40      	jalr	v0
48525b94:	d504      	sw	a1,16(sp)
48525b96:	b496      	lw	a0,48525dec <.LBE37+0xc>

    g_p_dae_cfg->audiopp_type = audiopp_type;
48525b98:	67fd      	move	a3,sp
    g_p_dae_cfg->audiopp_type_update_flag = 1;
48525b9a:	9c60      	lw	v1,0(a0)
48525b9c:	f120 c353 	sb	v0,307(v1)
48525ba0:	9ca0      	lw	a1,0(a0)
48525ba2:	a7d0      	lbu	a2,16(a3)
48525ba4:	f120 c5d2 	sb	a2,306(a1)

48525ba8 <.LBE21>:
48525ba8:	b292      	lw	v0,48525df0 <.LBE37+0x10>
48525baa:	1004      	b	48525bb4 <.LBE21+0xc>
48525bac:	a4c1      	lbu	a2,1(a0)
48525bae:	7601      	cmpi	a2,1
48525bb0:	6102      	btnez	48525bb6 <.LBE21+0xe>
48525bb2:	b291      	lw	v0,48525df4 <.LBE37+0x14>
48525bb4:	eac0      	jalrc	v0
48525bb6:	a1e0      	lbu	a3,0(s1)
48525bb8:	7701      	cmpi	a3,1
48525bba:	f100 6111 	btnez	48525de0 <.LBE37>
48525bbe:	a182      	lbu	a0,2(s1)
48525bc0:	7401      	cmpi	a0,1
48525bc2:	6105      	btnez	48525bce <.LBE21+0x26>
48525bc4:	1a90 962d 	jal	485258b4 <aset_read_volume>
48525bc8:	6500      	nop
48525bca:	6b01      	li	v1,1
48525bcc:	d304      	sw	v1,16(sp)
48525bce:	a145      	lbu	v0,5(s1)
48525bd0:	7201      	cmpi	v0,1
48525bd2:	6105      	btnez	48525bde <.LBE21+0x36>
48525bd4:	1a90 963c 	jal	485258f0 <aset_read_main_switch>
48525bd8:	6500      	nop
48525bda:	6d01      	li	a1,1
48525bdc:	d504      	sw	a1,16(sp)
48525bde:	a1d0      	lbu	a2,16(s1)
48525be0:	7601      	cmpi	a2,1
48525be2:	6105      	btnez	48525bee <.LBE21+0x46>
48525be4:	1a90 9669 	jal	485259a4 <aset_read_eq_data>
48525be8:	6500      	nop
48525bea:	6f01      	li	a3,1
48525bec:	d704      	sw	a3,16(sp)
48525bee:	a191      	lbu	a0,17(s1)
48525bf0:	7401      	cmpi	a0,1
48525bf2:	6105      	btnez	48525bfe <.LBE21+0x56>
48525bf4:	1a90 967c 	jal	485259f0 <aset_read_vbass_data>
48525bf8:	6500      	nop
48525bfa:	6b01      	li	v1,1
48525bfc:	d304      	sw	v1,16(sp)
48525bfe:	a152      	lbu	v0,18(s1)
48525c00:	7201      	cmpi	v0,1
48525c02:	6105      	btnez	48525c0e <.LBE21+0x66>
48525c04:	1a90 9689 	jal	48525a24 <aset_read_te_data>
48525c08:	6500      	nop
48525c0a:	6d01      	li	a1,1
48525c0c:	d504      	sw	a1,16(sp)
48525c0e:	a1d5      	lbu	a2,21(s1)
48525c10:	7601      	cmpi	a2,1
48525c12:	6105      	btnez	48525c1e <.LBE21+0x76>
48525c14:	1a90 9696 	jal	48525a58 <aset_read_surr_data>
48525c18:	6500      	nop
48525c1a:	6f01      	li	a3,1
48525c1c:	d704      	sw	a3,16(sp)
48525c1e:	a193      	lbu	a0,19(s1)
48525c20:	7401      	cmpi	a0,1
48525c22:	6105      	btnez	48525c2e <.LBE21+0x86>
48525c24:	1a90 96a3 	jal	48525a8c <aset_read_limiter_data>
48525c28:	6500      	nop
48525c2a:	6b01      	li	v1,1
48525c2c:	d304      	sw	v1,16(sp)
48525c2e:	a156      	lbu	v0,22(s1)
48525c30:	7201      	cmpi	v0,1
48525c32:	6105      	btnez	48525c3e <.LBE21+0x96>
48525c34:	1a90 96bd 	jal	48525af4 <aset_read_multibank_drc_data>
48525c38:	6500      	nop
48525c3a:	6d01      	li	a1,1
48525c3c:	d504      	sw	a1,16(sp)
48525c3e:	a1d7      	lbu	a2,23(s1)
48525c40:	7601      	cmpi	a2,1
48525c42:	610d      	btnez	48525c5e <.LBE23>

48525c44 <.LBB23>:
48525c44:	6801      	li	s0,1
48525c46:	d004      	sw	s0,16(sp)
48525c48:	6800      	li	s0,0
48525c4a:	f310 4081 	addiu	a0,s0,785
48525c4e:	1a90 96ce 	jal	48525b38 <aset_read_frcurve_data>
48525c52:	6500      	nop
48525c54:	40e1      	addiu	a3,s0,1
48525c56:	6707      	move	s0,a3
48525c58:	e811      	zeb	s0
48525c5a:	5804      	sltiu	s0,4
48525c5c:	61f6      	btnez	48525c4a <.LBB23+0x6>

48525c5e <.LBE23>:
48525c5e:	a19b      	lbu	a0,27(s1)
48525c60:	7401      	cmpi	a0,1
48525c62:	610d      	btnez	48525c7e <.LBE24>

48525c64 <.LBB24>:
48525c64:	6b01      	li	v1,1
48525c66:	d304      	sw	v1,16(sp)
48525c68:	6800      	li	s0,0
48525c6a:	f310 4085 	addiu	a0,s0,789
48525c6e:	1a90 96ce 	jal	48525b38 <aset_read_frcurve_data>
48525c72:	6500      	nop
48525c74:	4041      	addiu	v0,s0,1
48525c76:	6702      	move	s0,v0
48525c78:	e811      	zeb	s0
48525c7a:	5804      	sltiu	s0,4
48525c7c:	61f6      	btnez	48525c6a <.LBB24+0x6>

48525c7e <.LBE24>:
48525c7e:	a1b8      	lbu	a1,24(s1)
48525c80:	7501      	cmpi	a1,1
48525c82:	6104      	btnez	48525c8c <.LBE24+0xe>
48525c84:	6e01      	li	a2,1
48525c86:	1891 9725 	jal	48925c94 <aset_read_see_data>
48525c8a:	d604      	sw	a2,16(sp)
48525c8c:	a1f9      	lbu	a3,25(s1)
48525c8e:	7701      	cmpi	a3,1
48525c90:	6104      	btnez	48525c9a <.LBE24+0x1c>
48525c92:	6c01      	li	a0,1
48525c94:	1891 9732 	jal	48925cc8 <aset_read_sew_data>
48525c98:	d404      	sw	a0,16(sp)
48525c9a:	a17a      	lbu	v1,26(s1)
48525c9c:	7301      	cmpi	v1,1
48525c9e:	6105      	btnez	48525caa <.LBE24+0x2c>
48525ca0:	6a01      	li	v0,1
48525ca2:	d205      	sw	v0,20(sp)
48525ca4:	1891 973f 	jal	48925cfc <aset_read_SignalD_data>
48525ca8:	d204      	sw	v0,16(sp)
48525caa:	a1bd      	lbu	a1,29(s1)
48525cac:	7501      	cmpi	a1,1
48525cae:	6102      	btnez	48525cb4 <.LBE24+0x36>
48525cb0:	6e01      	li	a2,1
48525cb2:	d604      	sw	a2,16(sp)
48525cb4:	a1fc      	lbu	a3,28(s1)
48525cb6:	7701      	cmpi	a3,1
48525cb8:	6111      	btnez	48525cdc <.LBE28>

48525cba <.LBB25>:
48525cba:	b450      	lw	a0,48525df8 <.LBE37+0x18>

48525cbc <.LBE25>:

    return 0;
}

static int32  __section__(".bank_2")aset_read_compressor_standard_mode(void)
{
    int ret_val;

    Compressor_TP_Info_M *vbass_data_buffer = (Compressor_TP_Info_M *) (ASET_READ_DATA_BUF);
48525cbc:	6801      	li	s0,1
48525cbe:	d004      	sw	s0,16(sp)

48525cc0 <.LBB28>:
48525cc0:	9c00      	lw	s0,0(a0)
48525cc2:	b24f      	lw	v0,48525dfc <.LBE37+0x1c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_COMPRESSOR_DATA_STANDARD_MODE, vbass_data_buffer,           \
48525cc4:	f320 6c0b 	li	a0,811
48525cc8:	67b0      	move	a1,s0
48525cca:	ea40      	jalr	v0
48525ccc:	6e20      	li	a2,32
48525cce:	2a06      	bnez	v0,48525cdc <.LBE28>
        sizeof(Compressor_TP_Info_M));

    if (ret_val == 0)
48525cd0:	b347      	lw	v1,48525dec <.LBE37+0xc>
    {
        update_peq_value(g_p_dae_cfg, vbass_data_buffer, UPDATE_PEQ_MODE_COMPRESSOR_OTHER_STANDARD);
48525cd2:	67b0      	move	a1,s0
48525cd4:	9b80      	lw	a0,0(v1)
48525cd6:	1891 961f 	jal	4892587c <update_peq_value>
48525cda:	6e0f      	li	a2,15

48525cdc <.LBE28>:
48525cdc:	a1bd      	lbu	a1,29(s1)
48525cde:	7501      	cmpi	a1,1
48525ce0:	6129      	btnez	48525d34 <.LBE34>

48525ce2 <.LBB29>:
48525ce2:	b246      	lw	v0,48525df8 <.LBE37+0x18>

48525ce4 <.LBE29>:
    }

    return 0;
}

static int32 __section__(".bank_2")aset_read_multibank_drc_data_standard_mode(void)
{
    int ret_val;
    uint8 cDataFlag;
    
    DRC_CP_Info_M *mdrc_data_buffer = (DRC_CP_Info_M *) (ASET_READ_DATA_BUF);
48525ce4:	6c01      	li	a0,1

48525ce6 <.LBB32>:
48525ce6:	9a00      	lw	s0,0(v0)
48525ce8:	6f00      	li	a3,0
    mdrc_data_buffer->bDrcEnable = 0;
48525cea:	b345      	lw	v1,48525dfc <.LBE37+0x1c>

48525cec <.LBE32>:
    ret_val = aset_read_data(STUB_CMD_ASET_READ_MDRC_DATA_STANDARD_MODE, mdrc_data_buffer, sizeof(DRC_CP_Info_M));
48525cec:	d404      	sw	a0,16(sp)

48525cee <.LBB34>:
48525cee:	6e3c      	li	a2,60
48525cf0:	f020 c0ea 	sb	a3,42(s0)
48525cf4:	f320 6c0a 	li	a0,810
48525cf8:	eb40      	jalr	v1
48525cfa:	67b0      	move	a1,s0
48525cfc:	f020 a0cb 	lbu	a2,43(s0)
    cDataFlag = (uint8)mdrc_data_buffer->cDataFlag;//避免数据被改掉
48525d00:	d606      	sw	a2,24(sp)
48525d02:	2a18      	bnez	v0,48525d34 <.LBE34>
      
    if (ret_val == 0)
48525d04:	b63a      	lw	a2,48525dec <.LBE37+0xc>
    {
        update_peq_value(g_p_dae_cfg, mdrc_data_buffer, UPDATE_PEQ_MODE_MDRC_STANDARD);
48525d06:	67b0      	move	a1,s0
48525d08:	9e80      	lw	a0,0(a2)
48525d0a:	1891 961f 	jal	4892587c <update_peq_value>
48525d0e:	6e0d      	li	a2,13
48525d10:	9506      	lw	a1,24(sp)
        if(cDataFlag == 0x5A)//跟PC工具商议好，标志为5A
48525d12:	755a      	cmpi	a1,90
48525d14:	610f      	btnez	48525d34 <.LBE34>

48525d16 <.LBB35>:
48525d16:	b739      	lw	a3,48525df8 <.LBE37+0x18>
        {
            aset_read_mdrc2_data_standard_mode();        
        }
    }
    return 0;
}

static int32 __section__(".bank_2")aset_read_mdrc2_data_standard_mode(void)
{

    int ret_val;

    DRC_TP_Info_M3 *aset_buff = (DRC_TP_Info_M3 *) (ASET_READ_DATA_BUF);
48525d18:	b339      	lw	v1,48525dfc <.LBE37+0x1c>

    ret_val = aset_read_data(STUB_CMD_ASET_READ_MDRC2_DATA_STANDARD_MODE, aset_buff, sizeof(DRC_TP_Info_M3));
48525d1a:	9f00      	lw	s0,0(a3)
48525d1c:	f320 6c09 	li	a0,809
48525d20:	67b0      	move	a1,s0
48525d22:	eb40      	jalr	v1
48525d24:	6e20      	li	a2,32
48525d26:	2a06      	bnez	v0,48525d34 <.LBE34>

    if (ret_val == 0)
48525d28:	b231      	lw	v0,48525dec <.LBE37+0xc>
    {
        update_peq_value(g_p_dae_cfg, aset_buff, UPDATE_PEQ_MODE_MDRC_OTHER_STANDARD);
48525d2a:	67b0      	move	a1,s0
48525d2c:	9a80      	lw	a0,0(v0)
48525d2e:	1891 961f 	jal	4892587c <update_peq_value>
48525d32:	6e0e      	li	a2,14

48525d34 <.LBE34>:
48525d34:	9404      	lw	a0,16(sp)
48525d36:	2454      	beqz	a0,48525de0 <.LBE37>

48525d38 <.LBB37>:
48525d38:	6d00      	li	a1,0
48525d3a:	d507      	sw	a1,28(sp)
48525d3c:	a105      	lbu	s0,5(s1)
48525d3e:	7001      	cmpi	s0,1
48525d40:	6107      	btnez	48525d50 <.LBB37+0x18>
48525d42:	b630      	lw	a2,48525e00 <.LBE37+0x20>
48525d44:	b330      	lw	v1,48525e04 <.LBE37+0x24>
48525d46:	a620      	lbu	s1,0(a2)
48525d48:	6c01      	li	a0,1
48525d4a:	2901      	bnez	s1,48525d4e <.LBB37+0x16>
48525d4c:	9407      	lw	a0,28(sp)
48525d4e:	ebc0      	jalrc	v1
48525d50:	b32e      	lw	v1,48525e04 <.LBE37+0x24>
48525d52:	a3a0      	lbu	a1,0(v1)
48525d54:	2d13      	bnez	a1,48525d7c <.LBB37+0x44>
48525d56:	9705      	lw	a3,20(sp)
48525d58:	2711      	beqz	a3,48525d7c <.LBB37+0x44>
48525d5a:	b42d      	lw	a0,48525e0c <.LBE37+0x2c>
48525d5c:	9c60      	lw	v1,0(a0)
48525d5e:	f040 a342 	lbu	v0,66(v1)
48525d62:	7201      	cmpi	v0,1
48525d64:	6107      	btnez	48525d74 <.LBB37+0x3c>
48525d66:	6e01      	li	a2,1
48525d68:	b121      	lw	s1,48525dec <.LBE37+0xc>
48525d6a:	d607      	sw	a2,28(sp)
48525d6c:	f040 c3a2 	sb	a1,66(v1)
48525d70:	9900      	lw	s0,0(s1)
48525d72:	c0b0      	sb	a1,16(s0)
48525d74:	b31e      	lw	v1,48525dec <.LBE37+0xc>
48525d76:	6e01      	li	a2,1
48525d78:	9b80      	lw	a0,0(v1)
48525d7a:	1004      	b	48525d84 <.LBB37+0x4c>
48525d7c:	b51c      	lw	a1,48525dec <.LBE37+0xc>
48525d7e:	9d80      	lw	a0,0(a1)
48525d80:	6d00      	li	a1,0
48525d82:	67c5      	move	a2,a1
48525d84:	b023      	lw	s0,48525e10 <.LBE37+0x30>
48525d86:	e8c0      	jalrc	s0
48525d88:	b019      	lw	s0,48525de8 <.LBE37+0x8>
48525d8a:	b223      	lw	v0,48525e14 <.LBE37+0x34>
48525d8c:	ea40      	jalr	v0
48525d8e:	9880      	lw	a0,0(s0)
48525d90:	b11e      	lw	s1,48525e08 <.LBE37+0x28>
48525d92:	a1e0      	lbu	a3,0(s1)
48525d94:	2f03      	bnez	a3,48525d9c <.LBB37+0x64>
48525d96:	1a90 9645 	jal	48525914 <enable_aset_sound_effect>
48525d9a:	6500      	nop
48525d9c:	9407      	lw	a0,28(sp)
48525d9e:	2418      	beqz	a0,48525dd0 <.LBB37+0x98>
48525da0:	6d00      	li	a1,0
48525da2:	b21e      	lw	v0,48525e18 <.LBE37+0x38>
48525da4:	67c5      	move	a2,a1
48525da6:	6c0a      	li	a0,10
48525da8:	ea40      	jalr	v0
48525daa:	6f31      	li	a3,49
48525dac:	b418      	lw	a0,48525e0c <.LBE37+0x2c>
48525dae:	6f01      	li	a3,1
48525db0:	9ca0      	lw	a1,0(a0)
48525db2:	b218      	lw	v0,48525e10 <.LBE37+0x30>
48525db4:	f040 c5e2 	sb	a3,66(a1)
48525db8:	9880      	lw	a0,0(s0)
48525dba:	6e01      	li	a2,1
48525dbc:	ea40      	jalr	v0
48525dbe:	6d00      	li	a1,0
48525dc0:	b315      	lw	v1,48525e14 <.LBE37+0x34>
48525dc2:	eb40      	jalr	v1
48525dc4:	9880      	lw	a0,0(s0)
48525dc6:	a1c0      	lbu	a2,0(s1)
48525dc8:	2e03      	bnez	a2,48525dd0 <.LBB37+0x98>
48525dca:	1a90 9645 	jal	48525914 <enable_aset_sound_effect>
48525dce:	6500      	nop
48525dd0:	b013      	lw	s0,48525e1c <.LBE37+0x3c>
48525dd2:	6b01      	li	v1,1
48525dd4:	b213      	lw	v0,48525e20 <.LBE37+0x40>
48525dd6:	c060      	sb	v1,0(s0)
48525dd8:	ea40      	jalr	v0
48525dda:	6c00      	li	a0,0
48525ddc:	6e00      	li	a2,0
48525dde:	c0c0      	sb	a2,0(s0)

48525de0 <.LBE37>:
48525de0:	6a00      	li	v0,0
48525de2:	6476      	restore	48,ra,s0-s1
48525de4:	e8a0      	jrc	ra
48525de6:	0000      	addiu	s0,sp,0
48525de8:	5801      	sltiu	s0,1
48525dea:	4856      	addiu	s0,86
48525dec:	a2b0      	lbu	a1,16(v0)
48525dee:	9fc1      	lw	a2,4(a3)
48525df0:	5cfd      	sltiu	a0,253
48525df2:	4856      	addiu	s0,86
48525df4:	5e71      	sltiu	a2,113
48525df6:	4856      	addiu	s0,86
48525df8:	a2ac      	lbu	a1,12(v0)
48525dfa:	9fc1      	lw	a2,4(a3)
48525dfc:	5801      	sltiu	s0,1
48525dfe:	4852      	addiu	s0,82
48525e00:	a2a9      	lbu	a1,9(v0)
48525e02:	9fc1      	lw	a2,4(a3)
48525e04:	5e65      	sltiu	a2,101
48525e06:	4846      	addiu	s0,70
48525e08:	a2a6      	lbu	a1,6(v0)
48525e0a:	9fc1      	lw	a2,4(a3)
48525e0c:	999c      	lw	a0,112(s1)
48525e0e:	9fc1      	lw	a2,4(a3)
48525e10:	5801      	sltiu	s0,1
48525e12:	484a      	addiu	s0,74
48525e14:	58f9      	sltiu	s0,249
48525e16:	484a      	addiu	s0,74
48525e18:	e901      	sdbbp	8
48525e1a:	bfc1      	lwu	a2,4(a3)
48525e1c:	a2a5      	lbu	a1,5(v0)
48525e1e:	9fc1      	lw	a2,4(a3)
48525e20:	5af9      	sltiu	v0,249
48525e22:	48be      	addiu	s0,-66

48525e24 <aset_set_dae_init>:
48525e24:	64f8      	save	64,ra,s0-s1
48525e26:	b429      	lw	a0,48525ec8 <aset_set_dae_init+0xa4>
48525e28:	6801      	li	s0,1
48525e2a:	b329      	lw	v1,48525ecc <aset_set_dae_init+0xa8>
48525e2c:	c400      	sb	s0,0(a0)
48525e2e:	a340      	lbu	v0,0(v1)
48525e30:	6940      	li	s1,64
48525e32:	e92b      	neg	s1
48525e34:	ea2c      	and	v0,s1
48525e36:	7240      	cmpi	v0,64
48525e38:	6102      	btnez	48525e3e <aset_set_dae_init+0x1a>
48525e3a:	b226      	lw	v0,48525ed0 <aset_set_dae_init+0xac>
48525e3c:	eac0      	jalrc	v0
48525e3e:	b624      	lw	a2,48525ecc <aset_set_dae_init+0xa8>
48525e40:	a6a0      	lbu	a1,0(a2)
48525e42:	ed2c      	and	a1,s1
48525e44:	7580      	cmpi	a1,128
48525e46:	613a      	btnez	48525ebc <aset_set_dae_init+0x98>
48525e48:	b223      	lw	v0,48525ed4 <aset_set_dae_init+0xb0>
48525e4a:	f300 6c00 	li	a0,768
48525e4e:	0504      	addiu	a1,sp,16
48525e50:	ea40      	jalr	v0
48525e52:	6e20      	li	a2,32
48525e54:	677d      	move	v1,sp
48525e56:	a3f0      	lbu	a3,16(v1)
48525e58:	7701      	cmpi	a3,1
48525e5a:	6130      	btnez	48525ebc <aset_set_dae_init+0x98>
48525e5c:	b51f      	lw	a1,48525ed8 <aset_set_dae_init+0xb4>
48525e5e:	c312      	sb	s0,18(v1)
48525e60:	9d80      	lw	a0,0(a1)
48525e62:	f020 c300 	sb	s0,32(v1)
48525e66:	f020 c305 	sb	s0,37(v1)
48525e6a:	f020 c302 	sb	s0,34(v1)
48525e6e:	f020 c301 	sb	s0,33(v1)
48525e72:	f020 c307 	sb	s0,39(v1)
48525e76:	f020 c30b 	sb	s0,43(v1)
48525e7a:	f020 c308 	sb	s0,40(v1)
48525e7e:	f020 c309 	sb	s0,41(v1)
48525e82:	f020 c30a 	sb	s0,42(v1)
48525e86:	f160 a45f 	lbu	v0,383(a0)
48525e8a:	2a09      	bnez	v0,48525e9e <aset_set_dae_init+0x7a>
48525e8c:	f020 c303 	sb	s0,35(v1)
48525e90:	f020 c306 	sb	s0,38(v1)
48525e94:	f020 c34c 	sb	v0,44(v1)
48525e98:	f020 c34d 	sb	v0,45(v1)
48525e9c:	100c      	b	48525eb6 <aset_set_dae_init+0x92>
48525e9e:	7201      	cmpi	v0,1
48525ea0:	610a      	btnez	48525eb6 <aset_set_dae_init+0x92>
48525ea2:	677d      	move	v1,sp
48525ea4:	6e00      	li	a2,0
48525ea6:	f020 c3c3 	sb	a2,35(v1)
48525eaa:	f020 c3c6 	sb	a2,38(v1)
48525eae:	f020 c30c 	sb	s0,44(v1)
48525eb2:	f020 c30d 	sb	s0,45(v1)
48525eb6:	b20a      	lw	v0,48525edc <aset_set_dae_init+0xb8>
48525eb8:	ea40      	jalr	v0
48525eba:	0404      	addiu	a0,sp,16
48525ebc:	b703      	lw	a3,48525ec8 <aset_set_dae_init+0xa4>
48525ebe:	6c00      	li	a0,0
48525ec0:	c780      	sb	a0,0(a3)
48525ec2:	6478      	restore	64,ra,s0-s1
48525ec4:	e8a0      	jrc	ra
48525ec6:	0000      	addiu	s0,sp,0
48525ec8:	a2a6      	lbu	a1,6(v0)
48525eca:	9fc1      	lw	a2,4(a3)
48525ecc:	a2a4      	lbu	a1,4(v0)
48525ece:	9fc1      	lw	a2,4(a3)
48525ed0:	5941      	sltiu	s1,65
48525ed2:	4856      	addiu	s0,86
48525ed4:	5801      	sltiu	s0,1
48525ed6:	4852      	addiu	s0,82
48525ed8:	999c      	lw	a0,112(s1)
48525eda:	9fc1      	lw	a2,4(a3)
48525edc:	5b79      	sltiu	v1,121
48525ede:	4852      	addiu	s0,82
	...
Disassembly of section BANK_UI_1_21:

48565800 <get_audiopp_type>:
48565800:	64e4      	save	32,ra,s0
48565802:	6800      	li	s0,0

48565804 <.L2>:
48565804:	b21c      	lw	v0,48565874 <.L2+0x70>
48565806:	f300 6c0f 	li	a0,783
4856580a:	0504      	addiu	a1,sp,16
4856580c:	ea40      	jalr	v0
4856580e:	6e04      	li	a2,4
48565810:	2a03      	bnez	v0,48565818 <.L2+0x14>
48565812:	677d      	move	v1,sp
48565814:	a310      	lbu	s0,16(v1)
48565816:	100c      	b	48565830 <.L2+0x2c>
48565818:	6d00      	li	a1,0
4856581a:	b218      	lw	v0,48565878 <.L2+0x74>
4856581c:	0c0a      	la	a0,48565844 <.L2+0x40>
4856581e:	67c5      	move	a2,a1
48565820:	ea40      	jalr	v0
48565822:	6f4b      	li	a3,75
48565824:	4081      	addiu	a0,s0,1
48565826:	6704      	move	s0,a0
48565828:	e811      	zeb	s0
4856582a:	580a      	sltiu	s0,10
4856582c:	61eb      	btnez	48565804 <.L2>
4856582e:	6800      	li	s0,0
48565830:	b212      	lw	v0,48565878 <.L2+0x74>
48565832:	0c0c      	la	a0,48565860 <.L2+0x5c>
48565834:	67b0      	move	a1,s0
48565836:	6e02      	li	a2,2
48565838:	ea40      	jalr	v0
4856583a:	6f4b      	li	a3,75
4856583c:	6750      	move	v0,s0
4856583e:	6464      	restore	32,ra,s0
48565840:	e8a0      	jrc	ra
48565842:	0000      	addiu	s0,sp,0
48565844:	493c      	addiu	s1,60
48565846:	203e      	beqz	s0,485658c4 <.L10+0x1a>
48565848:	6567      	move	v1,a3
4856584a:	2074      	beqz	s0,48565934 <.L10+0x8a>
4856584c:	7561      	cmpi	a1,97
4856584e:	6964      	li	s1,100
48565850:	706f      	cmpi	s0,111
48565852:	2070      	beqz	s0,48565934 <.L10+0x8a>
48565854:	7974      	sd	v1,160(s1)
48565856:	6570      	move	s3,s0
48565858:	6620      	0x6620
4856585a:	6961      	li	s1,97
4856585c:	216c      	beqz	s1,48565936 <.L10+0x8c>
4856585e:	0021      	addiu	s0,sp,132
48565860:	493c      	addiu	s1,60
48565862:	203e      	beqz	s0,485658e0 <.L10+0x36>
48565864:	7561      	cmpi	a1,97
48565866:	6964      	li	s1,100
48565868:	706f      	cmpi	s0,111
4856586a:	5f70      	sltiu	a3,112
4856586c:	7974      	sd	v1,160(s1)
4856586e:	6570      	move	s3,s0
48565870:	0000      	addiu	s0,sp,0
48565872:	0000      	addiu	s0,sp,0
48565874:	5801      	sltiu	s0,1
48565876:	4852      	addiu	s0,82
48565878:	e901      	sdbbp	8
4856587a:	bfc1      	lwu	a2,4(a3)

4856587c <write_application_properties>:
4856587c:	64f5      	save	40,ra,s0-s1
4856587e:	b42d      	lw	a0,48565930 <.L10+0x86>
48565880:	6d00      	li	a1,0
48565882:	9c00      	lw	s0,0(a0)
48565884:	d504      	sw	a1,16(sp)
48565886:	6730      	move	s1,s0
48565888:	4908      	addiu	s1,8
4856588a:	9504      	lw	a1,16(sp)
4856588c:	b22a      	lw	v0,48565934 <.L10+0x8a>
4856588e:	6791      	move	a0,s1
48565890:	6e08      	li	a2,8
48565892:	ea40      	jalr	v0
48565894:	6f01      	li	a3,1
48565896:	b329      	lw	v1,48565938 <.L10+0x8e>
48565898:	a353      	lbu	v0,19(v1)
4856589a:	7203      	cmpi	v0,3
4856589c:	6103      	btnez	485658a4 <write_application_properties+0x28>
4856589e:	6e01      	li	a2,1
485658a0:	c0c8      	sb	a2,8(s0)
485658a2:	1003      	b	485658aa <.L10>
485658a4:	677d      	move	v1,sp
485658a6:	a3f0      	lbu	a3,16(v1)
485658a8:	c0e8      	sb	a3,8(s0)

485658aa <.L10>:
485658aa:	f380 6c10 	li	a0,912
485658ae:	67b1      	move	a1,s1
485658b0:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
485658b4:	6e08      	li	a2,8
485658b6:	220d      	beqz	v0,485658d2 <.L10+0x28>
485658b8:	9404      	lw	a0,16(sp)
485658ba:	b221      	lw	v0,4856593c <.L10+0x92>
485658bc:	44c1      	addiu	a2,a0,1
485658be:	ee11      	zeb	a2
485658c0:	d604      	sw	a2,16(sp)
485658c2:	67a6      	move	a1,a2
485658c4:	0c0b      	la	a0,485658f0 <.L10+0x46>
485658c6:	6e02      	li	a2,2
485658c8:	ea40      	jalr	v0
485658ca:	6f4b      	li	a3,75
485658cc:	9004      	lw	s0,16(sp)
485658ce:	580a      	sltiu	s0,10
485658d0:	61ec      	btnez	485658aa <.L10>
485658d2:	a1a0      	lbu	a1,0(s1)
485658d4:	b01a      	lw	s0,4856593c <.L10+0x92>
485658d6:	0c0f      	la	a0,48565910 <.L10+0x66>
485658d8:	6e02      	li	a2,2
485658da:	e840      	jalr	s0
485658dc:	6f4b      	li	a3,75
485658de:	b717      	lw	a3,48565938 <.L10+0x8e>
485658e0:	0c10      	la	a0,48565920 <.L10+0x76>
485658e2:	a7b3      	lbu	a1,19(a3)
485658e4:	6e02      	li	a2,2
485658e6:	e840      	jalr	s0
485658e8:	6f4b      	li	a3,75
485658ea:	6475      	restore	40,ra,s0-s1
485658ec:	e8a0      	jrc	ra
485658ee:	0000      	addiu	s0,sp,0
485658f0:	493c      	addiu	s1,60
485658f2:	203e      	beqz	s0,48565970 <aset_reconnect_deal+0x30>
485658f4:	7361      	cmpi	v1,97
485658f6:	7465      	cmpi	a0,101
485658f8:	775f      	cmpi	a3,95
485658fa:	6972      	li	s1,114
485658fc:	6574      	move	s3,a0
485658fe:	615f      	btnez	485659be <.LBB4+0x1a>
48565900:	7070      	cmpi	s0,112
48565902:	705f      	cmpi	s0,95
48565904:	6f72      	li	a3,114
48565906:	665f      	0x665f
48565908:	6961      	li	s1,97
4856590a:	5f6c      	sltiu	a3,108
4856590c:	6e63      	li	a2,99
4856590e:	0074      	addiu	s0,sp,464
48565910:	493c      	addiu	s1,60
48565912:	203e      	beqz	s0,48565990 <aset_reconnect_deal+0x50>
48565914:	7561      	cmpi	a1,97
48565916:	5f78      	sltiu	a3,120
48565918:	6f6d      	li	a3,109
4856591a:	6564      	move	v1,a0
4856591c:	0000      	addiu	s0,sp,0
4856591e:	0000      	addiu	s0,sp,0
48565920:	493c      	addiu	s1,60
48565922:	203e      	beqz	s0,485659a0 <.LBE3>
48565924:	7563      	cmpi	a1,99
48565926:	5f72      	sltiu	a3,114
48565928:	7566      	cmpi	a1,102
4856592a:	636e      	addiu	sp,880
4856592c:	695f      	li	s1,95
4856592e:	0064      	addiu	s0,sp,400
48565930:	a2ac      	lbu	a1,12(v0)
48565932:	9fc1      	lw	a2,4(a3)
48565934:	e905      	break	8
48565936:	bfc1      	lwu	a2,4(a3)
48565938:	a0c0      	lbu	a2,0(s0)
4856593a:	9fc1      	lw	a2,4(a3)
4856593c:	e901      	sdbbp	8
4856593e:	bfc1      	lwu	a2,4(a3)

48565940 <aset_reconnect_deal>:
48565940:	64f6      	save	48,ra,s0-s1
48565942:	b542      	lw	a1,48565a48 <.LBE2+0x82>
48565944:	6c40      	li	a0,64
48565946:	a560      	lbu	v1,0(a1)
48565948:	ea8b      	neg	v0,a0
4856594a:	eb4c      	and	v1,v0
4856594c:	7340      	cmpi	v1,64
4856594e:	6900      	li	s1,0
48565950:	6002      	bteqz	48565956 <aset_reconnect_deal+0x16>
48565952:	7380      	cmpi	v1,128
48565954:	6156      	btnez	48565a02 <.LBE2+0x3c>
48565956:	b33e      	lw	v1,48565a4c <.LBE2+0x86>
48565958:	a345      	lbu	v0,5(v1)
4856595a:	7204      	cmpi	v0,4
4856595c:	6002      	bteqz	48565962 <aset_reconnect_deal+0x22>
4856595e:	7201      	cmpi	v0,1
48565960:	6103      	btnez	48565968 <aset_reconnect_deal+0x28>
48565962:	6c02      	li	a0,2
48565964:	67b1      	move	a1,s1
48565966:	1002      	b	4856596c <aset_reconnect_deal+0x2c>
48565968:	6c02      	li	a0,2
4856596a:	6d01      	li	a1,1
4856596c:	b039      	lw	s0,48565a50 <.LBE2+0x8a>
4856596e:	67d1      	move	a2,s1
48565970:	e840      	jalr	s0
48565972:	67e4      	move	a3,a0
48565974:	6c00      	li	a0,0
48565976:	b037      	lw	s0,48565a50 <.LBE2+0x8a>
48565978:	67c4      	move	a2,a0
4856597a:	6d32      	li	a1,50
4856597c:	e840      	jalr	s0
4856597e:	6f02      	li	a3,2
48565980:	b532      	lw	a1,48565a48 <.LBE2+0x82>
48565982:	0c22      	la	a0,48565a08 <.LBE2+0x42>
48565984:	a520      	lbu	s1,0(a1)
48565986:	6e02      	li	a2,2
48565988:	353a      	srl	a1,s1,6
4856598a:	b133      	lw	s1,48565a54 <.LBE2+0x8e>
4856598c:	e940      	jalr	s1
4856598e:	6f4b      	li	a3,75
48565990:	b42e      	lw	a0,48565a48 <.LBE2+0x82>
48565992:	6a40      	li	v0,64
48565994:	a4c0      	lbu	a2,0(a0)
48565996:	ef4b      	neg	a3,v0
48565998:	eeec      	and	a2,a3
4856599a:	7640      	cmpi	a2,64
4856599c:	6129      	btnez	485659f0 <.LBE2+0x2a>

4856599e <.LBB2>:
4856599e:	67dd      	move	a2,sp

485659a0 <.LBE3>:
485659a0:	f3e0 6a1e 	li	v0,1022

485659a4 <.LBB4>:
485659a4:	6f00      	li	a3,0
485659a6:	0306      	addiu	v1,sp,24
485659a8:	cee9      	sh	a3,18(a2)
485659aa:	ce48      	sh	v0,16(a2)
485659ac:	d305      	sw	v1,20(sp)
485659ae:	0404      	addiu	a0,sp,16
485659b0:	6d01      	li	a1,1
485659b2:	6e00      	li	a2,0
485659b4:	e840      	jalr	s0
485659b6:	6f05      	li	a3,5
485659b8:	6702      	move	s0,v0
485659ba:	2205      	beqz	v0,485659c6 <.LBE2>
485659bc:	6d00      	li	a1,0
485659be:	0c17      	la	a0,48565a18 <.LBE2+0x52>
485659c0:	67c5      	move	a2,a1
485659c2:	e940      	jalr	s1
485659c4:	6f4b      	li	a3,75

485659c6 <.LBE2>:
485659c6:	b425      	lw	a0,48565a58 <.LBE2+0x92>
485659c8:	b225      	lw	v0,48565a5c <.LBE2+0x96>
485659ca:	6730      	move	s1,s0
485659cc:	9c00      	lw	s0,0(a0)
485659ce:	ea40      	jalr	v0
485659d0:	e991      	seb	s1
485659d2:	f120 c053 	sb	v0,307(s0)
485659d6:	2912      	bnez	s1,485659fc <.LBE2+0x36>
485659d8:	b222      	lw	v0,48565a60 <.LBE2+0x9a>
485659da:	eac0      	jalrc	v0
485659dc:	b71b      	lw	a3,48565a44 <.LBE2+0x7e>
485659de:	6b3f      	li	v1,63
485659e0:	a7c0      	lbu	a2,0(a3)
485659e2:	b51a      	lw	a1,48565a48 <.LBE2+0x82>
485659e4:	ee6c      	and	a2,v1
485659e6:	4b80      	addiu	v1,-128
485659e8:	4bc1      	addiu	v1,-63
485659ea:	ee6d      	or	a2,v1
485659ec:	c5c0      	sb	a2,0(a1)
485659ee:	1006      	b	485659fc <.LBE2+0x36>
485659f0:	b41a      	lw	a0,48565a58 <.LBE2+0x92>
485659f2:	b21b      	lw	v0,48565a5c <.LBE2+0x96>
485659f4:	ea40      	jalr	v0
485659f6:	9c00      	lw	s0,0(a0)
485659f8:	f120 c053 	sb	v0,307(s0)
485659fc:	1ab0 961f 	jal	4856587c <write_application_properties>
48565a00:	6500      	nop
48565a02:	6476      	restore	48,ra,s0-s1
48565a04:	e8a0      	jrc	ra
48565a06:	0000      	addiu	s0,sp,0
48565a08:	493c      	addiu	s1,60
48565a0a:	203e      	beqz	s0,48565a88 <aset_test_init+0x18>
48565a0c:	7572      	cmpi	a1,114
48565a0e:	5f6e      	sltiu	a3,110
48565a10:	7473      	cmpi	a0,115
48565a12:	7461      	cmpi	a0,97
48565a14:	0065      	addiu	s0,sp,404
48565a16:	0000      	addiu	s0,sp,0
48565a18:	493c      	addiu	s1,60
48565a1a:	203e      	beqz	s0,48565a98 <aset_test_init+0x28>
48565a1c:	7361      	cmpi	v1,97
48565a1e:	7465      	cmpi	a0,101
48565a20:	6120      	btnez	48565a62 <.LBE2+0x9c>
48565a22:	646e      	restore	112,ra,s0
48565a24:	7320      	cmpi	v1,32
48565a26:	616d      	btnez	48565b02 <aset_test_exit+0x32>
48565a28:	6c6c      	li	a0,108
48565a2a:	6d20      	li	a1,32
48565a2c:	6361      	addiu	sp,776
48565a2e:	6968      	li	s1,104
48565a30:	656e      	move	t3,a2
48565a32:	6820      	li	s0,32
48565a34:	6e61      	li	a2,97
48565a36:	7364      	cmpi	v1,100
48565a38:	6168      	btnez	48565b0a <aset_test_set_dae_init+0x6>
48565a3a:	656b      	move	t3,v1
48565a3c:	6620      	0x6620
48565a3e:	6961      	li	s1,97
48565a40:	756c      	cmpi	a1,108
48565a42:	6572      	move	s3,v0
48565a44:	0000      	addiu	s0,sp,0
48565a46:	0000      	addiu	s0,sp,0
48565a48:	a2a4      	lbu	a1,4(v0)
48565a4a:	9fc1      	lw	a2,4(a3)
48565a4c:	a080      	lbu	a0,0(s0)
48565a4e:	9fc1      	lw	a2,4(a3)
48565a50:	e921      	sdbbp	9
48565a52:	bfc1      	lwu	a2,4(a3)
48565a54:	e901      	sdbbp	8
48565a56:	bfc1      	lwu	a2,4(a3)
48565a58:	a2b0      	lbu	a1,16(v0)
48565a5a:	9fc1      	lw	a2,4(a3)
48565a5c:	5801      	sltiu	s0,1
48565a5e:	4856      	addiu	s0,86
48565a60:	5cfd      	sltiu	a0,253
48565a62:	4856      	addiu	s0,86

48565a64 <aset_global_para_init>:
48565a64:	b202      	lw	v0,48565a6c <aset_global_para_init+0x8>
48565a66:	6b00      	li	v1,0
48565a68:	e820      	jr	ra
48565a6a:	c260      	sb	v1,0(v0)
48565a6c:	a2a4      	lbu	a1,4(v0)
48565a6e:	9fc1      	lw	a2,4(a3)

48565a70 <aset_test_init>:
48565a70:	64e3      	save	24,ra,s0
48565a72:	b414      	lw	a0,48565ac0 <aset_test_init+0x50>
48565a74:	b712      	lw	a3,48565abc <aset_test_init+0x4c>
48565a76:	9c40      	lw	v0,0(a0)
48565a78:	6b01      	li	v1,1
48565a7a:	4a4c      	addiu	v0,76
48565a7c:	df40      	sw	v0,0(a3)
48565a7e:	c269      	sb	v1,9(v0)
48565a80:	9f00      	lw	s0,0(a3)
48565a82:	6e00      	li	a2,0
48565a84:	c0ca      	sb	a2,10(s0)
48565a86:	9fa0      	lw	a1,0(a3)
48565a88:	b010      	lw	s0,48565ac8 <aset_test_init+0x58>
48565a8a:	6cff      	li	a0,255
48565a8c:	c5c1      	sb	a2,1(a1)
48565a8e:	4481      	addiu	a0,a0,1
48565a90:	6d04      	li	a1,4
48565a92:	6e00      	li	a2,0
48565a94:	e840      	jalr	s0
48565a96:	6f16      	li	a3,22
48565a98:	b30b      	lw	v1,48565ac4 <aset_test_init+0x54>
48565a9a:	0c06      	la	a0,48565ab0 <aset_test_init+0x40>
48565a9c:	db40      	sw	v0,0(v1)
48565a9e:	67a2      	move	a1,v0
48565aa0:	6e02      	li	a2,2
48565aa2:	e840      	jalr	s0
48565aa4:	6f4b      	li	a3,75
48565aa6:	b20a      	lw	v0,48565acc <aset_test_init+0x5c>
48565aa8:	eac0      	jalrc	v0
48565aaa:	6a01      	li	v0,1
48565aac:	6463      	restore	24,ra,s0
48565aae:	e8a0      	jrc	ra
48565ab0:	7361      	cmpi	v1,97
48565ab2:	7465      	cmpi	a0,101
48565ab4:	6d20      	li	a1,32
48565ab6:	6c61      	li	a0,97
48565ab8:	6f6c      	li	a3,108
48565aba:	0063      	addiu	s0,sp,396
48565abc:	a2b0      	lbu	a1,16(v0)
48565abe:	9fc1      	lw	a2,4(a3)
48565ac0:	999c      	lw	a0,112(s1)
48565ac2:	9fc1      	lw	a2,4(a3)
48565ac4:	a2ac      	lbu	a1,12(v0)
48565ac6:	9fc1      	lw	a2,4(a3)
48565ac8:	e901      	sdbbp	8
48565aca:	bfc1      	lwu	a2,4(a3)
48565acc:	5941      	sltiu	s1,65
48565ace:	4856      	addiu	s0,86

48565ad0 <aset_test_exit>:
48565ad0:	64f4      	save	32,ra,s0-s1
48565ad2:	b10b      	lw	s1,48565afc <aset_test_exit+0x2c>
48565ad4:	b00b      	lw	s0,48565b00 <aset_test_exit+0x30>
48565ad6:	99a0      	lw	a1,0(s1)
48565ad8:	0c06      	la	a0,48565af0 <aset_test_exit+0x20>
48565ada:	6e02      	li	a2,2
48565adc:	e840      	jalr	s0
48565ade:	6f4b      	li	a3,75
48565ae0:	9980      	lw	a0,0(s1)
48565ae2:	6d04      	li	a1,4
48565ae4:	6e00      	li	a2,0
48565ae6:	e840      	jalr	s0
48565ae8:	6f17      	li	a3,23
48565aea:	6474      	restore	32,ra,s0-s1
48565aec:	e8a0      	jrc	ra
48565aee:	0000      	addiu	s0,sp,0
48565af0:	7361      	cmpi	v1,97
48565af2:	7465      	cmpi	a0,101
48565af4:	6620      	0x6620
48565af6:	6572      	move	s3,v0
48565af8:	0065      	addiu	s0,sp,404
48565afa:	0000      	addiu	s0,sp,0
48565afc:	a2ac      	lbu	a1,12(v0)
48565afe:	9fc1      	lw	a2,4(a3)
48565b00:	e901      	sdbbp	8
48565b02:	bfc1      	lwu	a2,4(a3)

48565b04 <aset_test_set_dae_init>:
48565b04:	64c3      	save	24,ra
48565b06:	b203      	lw	v0,48565b10 <aset_test_set_dae_init+0xc>
48565b08:	eac0      	jalrc	v0
48565b0a:	6443      	restore	24,ra
48565b0c:	e8a0      	jrc	ra
48565b0e:	0000      	addiu	s0,sp,0
48565b10:	5e25      	sltiu	a2,37
48565b12:	4852      	addiu	s0,82

48565b14 <reinstall_stub>:
48565b14:	64c6      	save	48,ra
48565b16:	b312      	lw	v1,48565b5c <reinstall_stub+0x48>
48565b18:	6a01      	li	v0,1
48565b1a:	9b80      	lw	a0,0(v1)
48565b1c:	0604      	addiu	a2,sp,16
48565b1e:	f020 a4e5 	lbu	a3,37(a0)
48565b22:	f180 6d06 	li	a1,390
48565b26:	ef4e      	xor	a3,v0
48565b28:	5f01      	sltiu	a3,1
48565b2a:	6778      	move	v1,t8
48565b2c:	679d      	move	a0,sp
48565b2e:	b20d      	lw	v0,48565b60 <reinstall_stub+0x4c>
48565b30:	c47c      	sb	v1,28(a0)
48565b32:	d609      	sw	a2,36(sp)
48565b34:	d506      	sw	a1,24(sp)
48565b36:	0608      	addiu	a2,sp,32
48565b38:	0506      	addiu	a1,sp,24
48565b3a:	6c0b      	li	a0,11
48565b3c:	ea40      	jalr	v0
48565b3e:	6f00      	li	a3,0
48565b40:	b409      	lw	a0,48565b64 <reinstall_stub+0x50>
48565b42:	6f3f      	li	a3,63
48565b44:	a4a0      	lbu	a1,0(a0)
48565b46:	47c1      	addiu	a2,a3,1
48565b48:	edec      	and	a1,a3
48565b4a:	edcd      	or	a1,a2
48565b4c:	b207      	lw	v0,48565b68 <reinstall_stub+0x54>
48565b4e:	ea40      	jalr	v0
48565b50:	c4a0      	sb	a1,0(a0)
48565b52:	677d      	move	v1,sp
48565b54:	a350      	lbu	v0,16(v1)
48565b56:	6446      	restore	48,ra
48565b58:	e8a0      	jrc	ra
48565b5a:	0000      	addiu	s0,sp,0
48565b5c:	999c      	lw	a0,112(s1)
48565b5e:	9fc1      	lw	a2,4(a3)
48565b60:	5a65      	sltiu	v0,101
48565b62:	482e      	addiu	s0,46
48565b64:	a2a4      	lbu	a1,4(v0)
48565b66:	9fc1      	lw	a2,4(a3)
48565b68:	5941      	sltiu	s1,65
48565b6a:	4856      	addiu	s0,86

48565b6c <aset_loop_deal>:
48565b6c:	64fa      	save	80,ra,s0-s1
48565b6e:	b21e      	lw	v0,48565be4 <aset_loop_deal+0x78>
48565b70:	f300 6c00 	li	a0,768
48565b74:	0504      	addiu	a1,sp,16
48565b76:	ea40      	jalr	v0
48565b78:	6e20      	li	a2,32
48565b7a:	b01c      	lw	s0,48565be8 <aset_loop_deal+0x7c>
48565b7c:	2a1b      	bnez	v0,48565bb4 <aset_loop_deal+0x48>
48565b7e:	a040      	lbu	v0,0(s0)
48565b80:	6940      	li	s1,64
48565b82:	e92b      	neg	s1
48565b84:	ea2c      	and	v0,s1
48565b86:	7280      	cmpi	v0,128
48565b88:	6106      	btnez	48565b96 <aset_loop_deal+0x2a>
48565b8a:	b219      	lw	v0,48565bec <aset_loop_deal+0x80>
48565b8c:	ea40      	jalr	v0
48565b8e:	0404      	addiu	a0,sp,16
48565b90:	a040      	lbu	v0,0(s0)
48565b92:	ea2c      	and	v0,s1
48565b94:	100d      	b	48565bb0 <aset_loop_deal+0x44>
48565b96:	7240      	cmpi	v0,64
48565b98:	6123      	btnez	48565be0 <aset_loop_deal+0x74>
48565b9a:	1ab0 961f 	jal	4856587c <write_application_properties>
48565b9e:	6500      	nop
48565ba0:	b214      	lw	v0,48565bf0 <aset_loop_deal+0x84>
48565ba2:	eac0      	jalrc	v0
48565ba4:	a040      	lbu	v0,0(s0)
48565ba6:	6b3f      	li	v1,63
48565ba8:	ea6c      	and	v0,v1
48565baa:	4b80      	addiu	v1,-128
48565bac:	4bc1      	addiu	v1,-63
48565bae:	ea6d      	or	v0,v1
48565bb0:	c040      	sb	v0,0(s0)
48565bb2:	1016      	b	48565be0 <aset_loop_deal+0x74>
48565bb4:	a080      	lbu	a0,0(s0)
48565bb6:	6d3f      	li	a1,63
48565bb8:	6764      	move	v1,a0
48565bba:	ebac      	and	v1,a1
48565bbc:	5b05      	sltiu	v1,5
48565bbe:	6109      	btnez	48565bd2 <aset_loop_deal+0x66>
48565bc0:	6f40      	li	a3,64
48565bc2:	edeb      	neg	a1,a3
48565bc4:	ecac      	and	a0,a1
48565bc6:	7480      	cmpi	a0,128
48565bc8:	610b      	btnez	48565be0 <aset_loop_deal+0x74>
48565bca:	6c40      	li	a0,64
48565bcc:	ec6d      	or	a0,v1
48565bce:	c080      	sb	a0,0(s0)
48565bd0:	1007      	b	48565be0 <aset_loop_deal+0x74>
48565bd2:	6a40      	li	v0,64
48565bd4:	43c1      	addiu	a2,v1,1
48565bd6:	eb4b      	neg	v1,v0
48565bd8:	eeac      	and	a2,a1
48565bda:	ec6c      	and	a0,v1
48565bdc:	eccd      	or	a0,a2
48565bde:	c080      	sb	a0,0(s0)
48565be0:	647a      	restore	80,ra,s0-s1
48565be2:	e8a0      	jrc	ra
48565be4:	5801      	sltiu	s0,1
48565be6:	4852      	addiu	s0,82
48565be8:	a2a4      	lbu	a1,4(v0)
48565bea:	9fc1      	lw	a2,4(a3)
48565bec:	5b79      	sltiu	v1,121
48565bee:	4852      	addiu	s0,82
48565bf0:	5cfd      	sltiu	a0,253
48565bf2:	4856      	addiu	s0,86

48565bf4 <aset_write_data>:
48565bf4:	f00c 64f6 	save	a0-a2,48,ra,s0-s1

extern dae_config_t *g_p_dae_cfg;

int32 aset_write_data(uint16 cmd, void *data_buffer, uint32 data_len)
{
48565bf8:	ec31      	zeh	a0
48565bfa:	d406      	sw	a0,24(sp)
48565bfc:	b222      	lw	v0,48565c84 <.L2+0x78>
    int32 ret_val;
    int32 timeout;

    stub_ext_param_t ext_param;

    ext_param.rw_buffer = sys_malloc_large_data(256);
48565bfe:	6cff      	li	a0,255
48565c00:	4481      	addiu	a0,a0,1
48565c02:	6d20      	li	a1,32
48565c04:	6e00      	li	a2,0
48565c06:	ea40      	jalr	v0
48565c08:	6f16      	li	a3,22
48565c0a:	d205      	sw	v0,20(sp)

48565c0c <.L2>:
48565c0c:	67bd      	move	a1,sp
    try_again: timeout = 0;
    ext_param.opcode = cmd;
48565c0e:	adec      	lhu	a3,24(a1)
48565c10:	addc      	lhu	a2,56(a1)
    ext_param.payload_len = (uint16)data_len;
48565c12:	9305      	lw	v1,20(sp)

    libc_memcpy(&(ext_param.rw_buffer[6]), data_buffer, data_len);
48565c14:	cde8      	sh	a3,16(a1)
48565c16:	cdc9      	sh	a2,18(a1)
48565c18:	6900      	li	s1,0
48565c1a:	950d      	lw	a1,52(sp)
48565c1c:	960e      	lw	a2,56(sp)
48565c1e:	b21b      	lw	v0,48565c88 <.L2+0x7c>
48565c20:	4386      	addiu	a0,v1,6
48565c22:	ea40      	jalr	v0
48565c24:	67f1      	move	a3,s1
48565c26:	b01a      	lw	s0,48565c8c <.L2+0x80>

    ret_val = stub_ext_write(&ext_param);
48565c28:	0404      	addiu	a0,sp,16
48565c2a:	6d01      	li	a1,1
48565c2c:	67d1      	move	a2,s1
48565c2e:	e840      	jalr	s0
48565c30:	6f05      	li	a3,5
48565c32:	6702      	move	s0,v0
48565c34:	2a1d      	bnez	v0,48565c70 <.L2+0x64>

    if (ret_val == 0)
48565c36:	6a00      	li	v0,0
    {
        //等待ACK 100ms
        while (1)
        {
            //读取ACK数据,最多等待100ms
            ext_param.payload_len = 0;
48565c38:	679d      	move	a0,sp
48565c3a:	6d00      	li	a1,0
            ret_val = stub_ext_read(&ext_param);
48565c3c:	b014      	lw	s0,48565c8c <.L2+0x80>
48565c3e:	cc49      	sh	v0,18(a0)
48565c40:	67c5      	move	a2,a1
48565c42:	0404      	addiu	a0,sp,16
48565c44:	e840      	jalr	s0
48565c46:	6f05      	li	a3,5
48565c48:	6702      	move	s0,v0
48565c4a:	2a08      	bnez	v0,48565c5c <.L2+0x50>

            if (ret_val == 0)
48565c4c:	9305      	lw	v1,20(sp)
            {
                if ((ext_param.rw_buffer[1] == 0x03) && (ext_param.rw_buffer[2] == 0xfe))
48565c4e:	a3a1      	lbu	a1,1(v1)
48565c50:	7503      	cmpi	a1,3
48565c52:	61f1      	btnez	48565c36 <.L2+0x2a>
48565c54:	a3c2      	lbu	a2,2(v1)
48565c56:	76fe      	cmpi	a2,254
48565c58:	61ee      	btnez	48565c36 <.L2+0x2a>
48565c5a:	100a      	b	48565c70 <.L2+0x64>
                {
                    break;
48565c5c:	6d00      	li	a1,0
                }
            }
            else
            {
                sys_mdelay(10);
48565c5e:	b00a      	lw	s0,48565c84 <.L2+0x78>
48565c60:	6c0a      	li	a0,10
48565c62:	67c5      	move	a2,a1
48565c64:	6f1d      	li	a3,29
48565c66:	e840      	jalr	s0
48565c68:	4121      	addiu	s1,s1,1
48565c6a:	710a      	cmpi	s1,10
                timeout++;
                if (timeout == 10)
48565c6c:	61e4      	btnez	48565c36 <.L2+0x2a>
48565c6e:	17ce      	b	48565c0c <.L2>
                {
                    //如果数据接收失败，会重新发送数据
                    goto try_again;
48565c70:	9405      	lw	a0,20(sp)
                }
            }
        }
    }

    sys_free_large_data(ext_param.rw_buffer);
48565c72:	b205      	lw	v0,48565c84 <.L2+0x78>
48565c74:	6d20      	li	a1,32
48565c76:	6e00      	li	a2,0
48565c78:	ea40      	jalr	v0
48565c7a:	6f17      	li	a3,23
48565c7c:	6750      	move	v0,s0

    return ret_val;
}
48565c7e:	6476      	restore	48,ra,s0-s1
48565c80:	e8a0      	jrc	ra
48565c82:	0000      	addiu	s0,sp,0
48565c84:	e901      	sdbbp	8
48565c86:	bfc1      	lwu	a2,4(a3)
48565c88:	e905      	break	8
48565c8a:	bfc1      	lwu	a2,4(a3)
48565c8c:	e921      	sdbbp	9
48565c8e:	bfc1      	lwu	a2,4(a3)

48565c90 <config_pc_view>:
48565c90:	64c4      	save	32,ra

void config_pc_view(aset_interface_config_t *pCfg)
{
48565c92:	b517      	lw	a1,48565cec <config_pc_view+0x5c>
//用这个宏的目的:使用waves pc工具时，避免空间不够用
#ifndef   WAVES_ASET_TOOLS
    char fw_version[] = "282A104";
48565c94:	b317      	lw	v1,48565cf0 <config_pc_view+0x60>
48565c96:	d504      	sw	a1,16(sp)
48565c98:	d305      	sw	v1,20(sp)
48565c9a:	6d00      	li	a1,0

    pCfg->bEQ_v_1_0 = 0;
48565c9c:	6b01      	li	v1,1
    pCfg->bVBass_v_1_0 = 0;
    pCfg->bVBass_v_1_1 = 1;
48565c9e:	b616      	lw	a2,48565cf4 <config_pc_view+0x64>
    pCfg->bTE_v_1_0 = 0;
    pCfg->bTE_v_1_1 = 1;
    pCfg->bSurround_v_1_0 = 0;
    //pCfg->bLimiter_v_1_0 = 1;
    //pCfg->bMDRC_v_1_0 = 1;
    pCfg->bSRC_v_1_0 = 0;
    pCfg->bSEE_v_1_0 = 1;
    pCfg->bSEW_v_1_0 = 1;
    pCfg->bSD_v_1_0 = 1;
    pCfg->bEQ_v_1_1 = 0;
    pCfg->bMS_v_1_0 = 1;

    pCfg->bEQ_v_1_2 = 1;
    
    if (SMART_MODE == g_p_dae_cfg->audiopp_type)
48565ca0:	c4a0      	sb	a1,0(a0)
48565ca2:	c4a1      	sb	a1,1(a0)
48565ca4:	c46c      	sb	v1,12(a0)
48565ca6:	c4a2      	sb	a1,2(a0)
48565ca8:	c46d      	sb	v1,13(a0)
48565caa:	c4a3      	sb	a1,3(a0)
48565cac:	c4a6      	sb	a1,6(a0)
48565cae:	c467      	sb	v1,7(a0)
48565cb0:	c468      	sb	v1,8(a0)
48565cb2:	c469      	sb	v1,9(a0)
48565cb4:	c4aa      	sb	a1,10(a0)
48565cb6:	c46b      	sb	v1,11(a0)
48565cb8:	c46e      	sb	v1,14(a0)
48565cba:	9e40      	lw	v0,0(a2)
48565cbc:	f120 a253 	lbu	v0,307(v0)
48565cc0:	2a05      	bnez	v0,48565ccc <config_pc_view+0x3c>
48565cc2:	c464      	sb	v1,4(a0)
    {
        pCfg->bLimiter_v_1_0 = 1;
48565cc4:	c465      	sb	v1,5(a0)
        pCfg->bMDRC_v_1_0 = 1;
48565cc6:	c44f      	sb	v0,15(a0)

        pCfg->bMDRC_v_1_1 = 0;
48565cc8:	c4b0      	sb	a1,16(a0)
        pCfg->bComPressor_v_1_0 = 0;
48565cca:	1006      	b	48565cd8 <config_pc_view+0x48>
48565ccc:	7201      	cmpi	v0,1
    }
    else if (STANDARD_MODE == g_p_dae_cfg->audiopp_type)
48565cce:	6104      	btnez	48565cd8 <config_pc_view+0x48>
48565cd0:	c4a4      	sb	a1,4(a0)
    {
        pCfg->bLimiter_v_1_0 = 0;
48565cd2:	c4a5      	sb	a1,5(a0)
        pCfg->bMDRC_v_1_0 = 0;
48565cd4:	c46f      	sb	v1,15(a0)
        
        pCfg->bMDRC_v_1_1 = 1;
48565cd6:	c470      	sb	v1,16(a0)
        pCfg->bComPressor_v_1_0 = 1;
48565cd8:	4c7f      	addiu	a0,127
    }
    else
    {
        ;//for qac
    }
    libc_memcpy(pCfg->szVerInfo, fw_version, sizeof(fw_version));
48565cda:	b208      	lw	v0,48565cf8 <config_pc_view+0x68>
48565cdc:	4c09      	addiu	a0,9
48565cde:	0504      	addiu	a1,sp,16
48565ce0:	6e08      	li	a2,8
48565ce2:	ea40      	jalr	v0
48565ce4:	6f00      	li	a3,0
48565ce6:	6444      	restore	32,ra
48565ce8:	e8a0      	jrc	ra
48565cea:	0000      	addiu	s0,sp,0
48565cec:	3832      	ld	s1,144(s0)
48565cee:	4132      	daddiu	s1,s1,2
48565cf0:	3031      	dsll	s0,s1,4
48565cf2:	0034      	addiu	s0,sp,208
48565cf4:	a2b0      	lbu	a1,16(v0)
48565cf6:	9fc1      	lw	a2,4(a3)
48565cf8:	e905      	break	8
48565cfa:	bfc1      	lwu	a2,4(a3)

48565cfc <aset_write_case_info>:
48565cfc:	64f4      	save	32,ra,s0-s1
    
 #endif   
}


int32 aset_write_case_info(void)
{
48565cfe:	b30d      	lw	v1,48565d30 <aset_write_case_info+0x34>
    aset_case_info_t *aset_case_info = (aset_case_info_t *) ASET_RW_DATA_BUF;
48565d00:	b20d      	lw	v0,48565d34 <aset_write_case_info+0x38>

    libc_memset(aset_case_info, 0x00, sizeof(aset_case_info_t));
48565d02:	9b00      	lw	s0,0(v1)
48565d04:	6f01      	li	a3,1
48565d06:	6730      	move	s1,s0
48565d08:	4908      	addiu	s1,8
48565d0a:	6791      	move	a0,s1
48565d0c:	6d00      	li	a1,0
48565d0e:	ea40      	jalr	v0
48565d10:	6eb0      	li	a2,176
48565d12:	6a14      	li	v0,20
    aset_case_info->peq_point_num = EQMAXPOINTCOUNT_ALL;
48565d14:	6790      	move	a0,s0
    config_pc_view(&aset_case_info->stInterface);
48565d16:	c048      	sb	v0,8(s0)
48565d18:	1ab0 9724 	jal	48565c90 <config_pc_view>
48565d1c:	4c28      	addiu	a0,40
48565d1e:	f380 6c00 	li	a0,896

#ifdef WAVES_ASET_TOOLS
    
#else
    aset_write_data(STUB_CMD_ASET_WRITE_STATUS, aset_case_info, sizeof(aset_case_info_t));          
48565d22:	67b1      	move	a1,s1
48565d24:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565d28:	6eb0      	li	a2,176
48565d2a:	6a00      	li	v0,0
#endif

    return 0;
}
48565d2c:	6474      	restore	32,ra,s0-s1
48565d2e:	e8a0      	jrc	ra
48565d30:	a2ac      	lbu	a1,12(v0)
48565d32:	9fc1      	lw	a2,4(a3)
48565d34:	e905      	break	8
48565d36:	bfc1      	lwu	a2,4(a3)

48565d38 <aset_write_peq_data>:
48565d38:	64c3      	save	24,ra

int32 aset_write_peq_data(dae_config_t *p_dae)
{
48565d3a:	b514      	lw	a1,48565d88 <aset_write_peq_data+0x50>
    int i;

    aset_peq_data_t *aset_peq_data = (aset_peq_data_t *) ASET_RW_DATA_BUF;
48565d3c:	a442      	lbu	v0,2(a0)

    aset_peq_data->main_gain_value = p_dae->precut_ratio;
48565d3e:	9de0      	lw	a3,0(a1)
48565d40:	6e01      	li	a2,1

    aset_peq_data->main_gain_enable = 1;
48565d42:	67a7      	move	a1,a3
48565d44:	4d08      	addiu	a1,8
48565d46:	6b0e      	li	v1,14

    aset_peq_data->nPointTotal = EQMAXPOINTCOUNT;
48565d48:	c5c4      	sb	a2,4(a1)
48565d4a:	c566      	sb	v1,6(a1)
48565d4c:	cf44      	sh	v0,8(a3)
48565d4e:	a449      	lbu	v0,9(a0)

    aset_peq_data->peq_enable = (int8)(p_dae->peq_enable);
48565d50:	6765      	move	v1,a1
48565d52:	c545      	sb	v0,5(a1)
48565d54:	6e0d      	li	a2,13
48565d56:	ac4b      	lhu	v0,22(a0)

    for (i = 0; i < EQMAXPOINTCOUNT; i++)
    {
        aset_peq_data->peq_array[i].freq = (int16)p_dae->peq_bands[i].cutoff;
48565d58:	cb44      	sh	v0,8(v1)
48565d5a:	ac4d      	lhu	v0,26(a0)
        aset_peq_data->peq_array[i].Qval = p_dae->peq_bands[i].q;
        aset_peq_data->peq_array[i].gain = p_dae->peq_bands[i].gain;
48565d5c:	acec      	lhu	a3,24(a0)
48565d5e:	cb45      	sh	v0,10(v1)
48565d60:	dbe3      	sw	a3,12(v1)
48565d62:	acee      	lhu	a3,28(a0)
        aset_peq_data->peq_array[i].type = (int16)p_dae->peq_bands[i].type;
48565d64:	cbe8      	sh	a3,16(v1)
48565d66:	8c4d      	lh	v0,26(a0)

        if (p_dae->peq_bands[i].gain != 0)
48565d68:	2201      	beqz	v0,48565d6c <aset_write_peq_data+0x34>
48565d6a:	6a01      	li	v0,1
        {
            aset_peq_data->peq_array[i].enable = 1;
48565d6c:	46cf      	addiu	a2,a2,-1
48565d6e:	5600      	slti	a2,0
48565d70:	c352      	sb	v0,18(v1)
        }
        else
        {
            aset_peq_data->peq_array[i].enable = 0;
48565d72:	4c08      	addiu	a0,8
48565d74:	4b0c      	addiu	v1,12
48565d76:	60ef      	bteqz	48565d56 <aset_write_peq_data+0x1e>
48565d78:	f380 6c02 	li	a0,898
        }
    }

    aset_write_data(STUB_CMD_ASET_WRITE_EQ_DATA, aset_peq_data, sizeof(aset_peq_data_t));
48565d7c:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565d80:	6eb0      	li	a2,176
48565d82:	6a00      	li	v0,0

    return 0;
}
48565d84:	6443      	restore	24,ra
48565d86:	e8a0      	jrc	ra
48565d88:	a2ac      	lbu	a1,12(v0)
48565d8a:	9fc1      	lw	a2,4(a3)

48565d8c <aset_write_vbass_data>:
48565d8c:	64c3      	save	24,ra

int32 aset_write_vbass_data(dae_config_t *p_dae)
{
48565d8e:	b50b      	lw	a1,48565db8 <aset_write_vbass_data+0x2c>
    aset_vbass_data_t *aset_vbass_data = (aset_vbass_data_t *) ASET_RW_DATA_BUF;
48565d90:	f0c0 acf4 	lhu	a3,212(a0)

    aset_vbass_data->cutoff_freq = (int16)p_dae->vbass_cut_freq;
48565d94:	9dc0      	lw	a2,0(a1)
48565d96:	cee4      	sh	a3,8(a2)
48565d98:	f0c0 ac76 	lhu	v1,214(a0)

    aset_vbass_data->vbass_gain = p_dae->vbass_ratio;
48565d9c:	67a6      	move	a1,a2
48565d9e:	4d08      	addiu	a1,8
48565da0:	cd61      	sh	v1,2(a1)
48565da2:	a44b      	lbu	v0,11(a0)

    aset_vbass_data->vbass_enable = (int8)p_dae->vbass_enable;
48565da4:	6e08      	li	a2,8

    aset_write_data(STUB_CMD_ASET_WRITE_VBASS_DATA, aset_vbass_data, sizeof(aset_vbass_data_t));
48565da6:	f380 6c03 	li	a0,899
48565daa:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565dae:	c544      	sb	v0,4(a1)
48565db0:	6a00      	li	v0,0

    return 0;
}
48565db2:	6443      	restore	24,ra
48565db4:	e8a0      	jrc	ra
48565db6:	0000      	addiu	s0,sp,0
48565db8:	a2ac      	lbu	a1,12(v0)
48565dba:	9fc1      	lw	a2,4(a3)

48565dbc <aset_write_te_data>:
48565dbc:	64c3      	save	24,ra

int32 aset_write_te_data(dae_config_t *p_dae)
{
48565dbe:	b50b      	lw	a1,48565de8 <aset_write_te_data+0x2c>
    aset_te_data_t *aset_te_data = (aset_te_data_t *) ASET_RW_DATA_BUF;
48565dc0:	f0c0 acea 	lhu	a3,202(a0)

    aset_te_data->cutoff_freq = (int16)p_dae->treble_enhance_cut_freq;
48565dc4:	9d60      	lw	v1,0(a1)
48565dc6:	67a3      	move	a1,v1
48565dc8:	4d08      	addiu	a1,8
48565dca:	cde1      	sh	a3,2(a1)
48565dcc:	f0c0 accc 	lhu	a2,204(a0)

    aset_te_data->te_gain = p_dae->treble_enhance_ratio;
48565dd0:	cbc4      	sh	a2,8(v1)
48565dd2:	a44d      	lbu	v0,13(a0)

    aset_te_data->te_enable = (int8)p_dae->treble_enhance_enable;
48565dd4:	6e08      	li	a2,8

    aset_write_data(STUB_CMD_ASET_WRITE_TE_DATA, aset_te_data, sizeof(aset_te_data_t));
48565dd6:	f380 6c04 	li	a0,900
48565dda:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565dde:	c544      	sb	v0,4(a1)
48565de0:	6a00      	li	v0,0

    return 0;
}
48565de2:	6443      	restore	24,ra
48565de4:	e8a0      	jrc	ra
48565de6:	0000      	addiu	s0,sp,0
48565de8:	a2ac      	lbu	a1,12(v0)
48565dea:	9fc1      	lw	a2,4(a3)

48565dec <aset_write_surr_data>:
48565dec:	64c3      	save	24,ra

int32 aset_write_surr_data(dae_config_t *p_dae)
{
48565dee:	b50b      	lw	a1,48565e18 <aset_write_surr_data+0x2c>
    aset_surr_data_t *aset_surr_data = (aset_surr_data_t *) ASET_RW_DATA_BUF;
48565df0:	f0c0 a4f9 	lbu	a3,217(a0)

    aset_surr_data->head_angle = p_dae->vsurround_angle;
48565df4:	9dc0      	lw	a2,0(a1)
48565df6:	cee4      	sh	a3,8(a2)
48565df8:	f0c0 847a 	lb	v1,218(a0)

    aset_surr_data->surr_gain = p_dae->vsurround_ratio;
48565dfc:	67a6      	move	a1,a2
48565dfe:	4d08      	addiu	a1,8
48565e00:	cd61      	sh	v1,2(a1)
48565e02:	a44c      	lbu	v0,12(a0)

    aset_surr_data->surr_enable = (int8)p_dae->vsurround_enable;
48565e04:	6e08      	li	a2,8

    aset_write_data(STUB_CMD_ASET_WRITE_SURR_DATA, aset_surr_data, sizeof(aset_surr_data_t));
48565e06:	f380 6c05 	li	a0,901
48565e0a:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565e0e:	c544      	sb	v0,4(a1)
48565e10:	6a00      	li	v0,0

    return 0;
}
48565e12:	6443      	restore	24,ra
48565e14:	e8a0      	jrc	ra
48565e16:	0000      	addiu	s0,sp,0
48565e18:	a2ac      	lbu	a1,12(v0)
48565e1a:	9fc1      	lw	a2,4(a3)

48565e1c <aset_write_limiter_data>:
48565e1c:	64c3      	save	24,ra

int32 aset_write_limiter_data(dae_config_t *p_dae)
{
48565e1e:	b50c      	lw	a1,48565e4c <aset_write_limiter_data+0x30>
    aset_limiter_data_t *aset_limiter_data = (aset_limiter_data_t *) ASET_RW_DATA_BUF;
48565e20:	f0e0 ac5a 	lhu	v0,250(a0)

    aset_limiter_data->attack_time = (int16)p_dae->limiter_attack_time;
48565e24:	9d60      	lw	v1,0(a1)
48565e26:	67a3      	move	a1,v1
48565e28:	4d08      	addiu	a1,8
48565e2a:	cd41      	sh	v0,2(a1)
48565e2c:	f0e0 acfc 	lhu	a3,252(a0)

    aset_limiter_data->release_time = (int16)p_dae->limiter_release_time;
48565e30:	cde2      	sh	a3,4(a1)
48565e32:	f0e0 acd8 	lhu	a2,248(a0)

    aset_limiter_data->threhold = p_dae->limiter_threshold;
48565e36:	cbc4      	sh	a2,8(v1)
48565e38:	a44f      	lbu	v0,15(a0)

    aset_limiter_data->limiter_enable = (int8)p_dae->limiter_enable;
48565e3a:	6e08      	li	a2,8

    aset_write_data(STUB_CMD_ASET_WRITE_LIMITER_DATA, aset_limiter_data, sizeof(aset_limiter_data_t));
48565e3c:	f380 6c06 	li	a0,902
48565e40:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565e44:	c546      	sb	v0,6(a1)
48565e46:	6a00      	li	v0,0

    return 0;
}
48565e48:	6443      	restore	24,ra
48565e4a:	e8a0      	jrc	ra
48565e4c:	a2ac      	lbu	a1,12(v0)
48565e4e:	9fc1      	lw	a2,4(a3)

48565e50 <aset_write_volume_data>:
48565e50:	64c4      	save	32,ra

int32 aset_write_volume_data(void)
{
48565e52:	b207      	lw	v0,48565e6c <aset_write_volume_data+0x1c>
    int volume;

    volume = com_get_sound_volume();
48565e54:	eac0      	jalrc	v0
48565e56:	f380 6c01 	li	a0,897

    aset_write_data(STUB_CMD_ASET_WRITE_VOLUME, &volume, sizeof(volume));
48565e5a:	0504      	addiu	a1,sp,16
48565e5c:	6e04      	li	a2,4
48565e5e:	1ab0 96fd 	jal	48565bf4 <aset_write_data>
48565e62:	d204      	sw	v0,16(sp)
48565e64:	6a00      	li	v0,0

    return 0;
}
48565e66:	6444      	restore	32,ra
48565e68:	e8a0      	jrc	ra
48565e6a:	0000      	addiu	s0,sp,0
48565e6c:	5a3d      	sltiu	v0,61
48565e6e:	48be      	addiu	s0,-66

48565e70 <aset_upload_sound_param>:
48565e70:	64e3      	save	24,ra,s0

int32 aset_upload_sound_param(void)
{
48565e72:	1ab0 9794 	jal	48565e50 <aset_write_volume_data>
//用这个宏的目的:使用waves pc工具时，避免空间不够用
#ifndef   WAVES_ASET_TOOLS

    aset_write_volume_data();
48565e76:	6500      	nop
48565e78:	b00a      	lw	s0,48565ea0 <aset_upload_sound_param+0x30>

    aset_write_peq_data(g_p_dae_cfg);
48565e7a:	1ab0 974e 	jal	48565d38 <aset_write_peq_data>
48565e7e:	9880      	lw	a0,0(s0)
48565e80:	1ab0 9763 	jal	48565d8c <aset_write_vbass_data>

    aset_write_vbass_data(g_p_dae_cfg);
48565e84:	9880      	lw	a0,0(s0)
48565e86:	1ab0 976f 	jal	48565dbc <aset_write_te_data>

    aset_write_te_data(g_p_dae_cfg);
48565e8a:	9880      	lw	a0,0(s0)
48565e8c:	1ab0 977b 	jal	48565dec <aset_write_surr_data>

    aset_write_surr_data(g_p_dae_cfg);
48565e90:	9880      	lw	a0,0(s0)
48565e92:	1ab0 9787 	jal	48565e1c <aset_write_limiter_data>

    aset_write_limiter_data(g_p_dae_cfg);
48565e96:	9880      	lw	a0,0(s0)
48565e98:	6a00      	li	v0,0

#endif
    return 0;
}
48565e9a:	6463      	restore	24,ra,s0
48565e9c:	e8a0      	jrc	ra
48565e9e:	0000      	addiu	s0,sp,0
48565ea0:	a2b0      	lbu	a1,16(v0)
48565ea2:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_22:

485a5800 <keytone_init_set>:
485a5800:	64f4      	save	32,ra,s0-s1
 * \note
 */
/*******************************************************************************/
void keytone_init_set(void)
{
485a5802:	b00d      	lw	s0,485a5834 <keytone_init_set+0x34>
    //CHAN 0 -- URAM0 = 2KB
    //CHAN 1 -- PCMRAM2 = 4KB
    enable_dac(DAFIS_ASRC, g_keytone_infor.dac_chan);
485a5804:	b10d      	lw	s1,485a5838 <keytone_init_set+0x38>
485a5806:	a0a1      	lbu	a1,1(s0)
485a5808:	6c02      	li	a0,2
485a580a:	6e00      	li	a2,0
485a580c:	e940      	jalr	s1
485a580e:	6f04      	li	a3,4
485a5810:	a041      	lbu	v0,1(s0)
    config_asrc((g_keytone_infor.dac_chan == DAF0_EN)? K_OUT0_U0 : K_OUT1_P2, g_keytone_infor.dac_chan);
485a5812:	6c0d      	li	a0,13
485a5814:	2201      	beqz	v0,485a5818 <keytone_init_set+0x18>
485a5816:	4486      	addiu	a0,a0,6
485a5818:	b007      	lw	s0,485a5834 <keytone_init_set+0x34>
485a581a:	b108      	lw	s1,485a5838 <keytone_init_set+0x38>
485a581c:	a0a1      	lbu	a1,1(s0)
485a581e:	6e00      	li	a2,0
485a5820:	e940      	jalr	s1
485a5822:	6f10      	li	a3,16
485a5824:	a082      	lbu	a0,2(s0)
    //set_dac_rate(g_keytone_infor.dac_sample, g_keytone_infor.dac_chan);
    set_asrc_rate(g_keytone_infor.dac_sample, g_keytone_infor.dac_chan, 5000);
485a5826:	a0a1      	lbu	a1,1(s0)
485a5828:	f382 6e08 	li	a2,5000
485a582c:	e940      	jalr	s1
485a582e:	6f12      	li	a3,18
485a5830:	6474      	restore	32,ra,s0-s1
485a5832:	e8a0      	jrc	ra
485a5834:	a234      	lbu	s1,20(v0)
485a5836:	9fc1      	lw	a2,4(a3)
485a5838:	e909      	entry	a0
485a583a:	bfc1      	lwu	a2,4(a3)

485a583c <keytone_asrc_fill>:
485a583c:	6b64      	li	v1,100
}

/******************************************************************************/
/*!
 * \par  Description:
 * \void keytone_send_to_asrc(uint32 data_count)
 * \read decoder frame data
 * \param[in]    data_count send data number
 * \param[in]
 * \param[out]   none
 * \return
 * \ingroup
 * \note
 */
/*******************************************************************************/
void keytone_asrc_fill(int32 fill_data)
{
    fill_data = fill_data / 100 * (int32) sys_comval->mdrc_percent;
485a583e:	ec7a      	div	zero,a0,v1
485a5840:	b70b      	lw	a3,485a586c <keytone_asrc_fill+0x30>
485a5842:	9fc0      	lw	a2,0(a3)
485a5844:	f020 a695 	lbu	a0,53(a2)
485a5848:	ed12      	mflo	a1
485a584a:	ed98      	mult	a1,a0
485a584c:	b409      	lw	a0,485a5870 <keytone_asrc_fill+0x34>
    fill_data = fill_data / 100 * (int32) sys_comval->kt_tts_percent;

    if (g_keytone_infor.dac_chan == DAF0_EN)
485a584e:	ea12      	mflo	v0
485a5850:	ea7a      	div	zero,v0,v1
485a5852:	a67a      	lbu	v1,26(a2)
485a5854:	a441      	lbu	v0,1(a0)
485a5856:	ed12      	mflo	a1
485a5858:	ed78      	mult	a1,v1
485a585a:	eb12      	mflo	v1
485a585c:	6500      	nop
485a585e:	2a02      	bnez	v0,485a5864 <keytone_asrc_fill+0x28>
485a5860:	b205      	lw	v0,485a5874 <keytone_asrc_fill+0x38>
    {
        (*(volatile int32 *) ASRC_OUT0_WFIFO) = fill_data;
485a5862:	1001      	b	485a5866 <keytone_asrc_fill+0x2a>
485a5864:	b205      	lw	v0,485a5878 <keytone_asrc_fill+0x3c>
        (*(volatile int32 *) ASRC_OUT0_WFIFO) = fill_data;
    }
    else
    {
        (*(volatile int32 *) ASRC_OUT1_WFIFO) = fill_data;
485a5866:	da60      	sw	v1,0(v0)
485a5868:	da60      	sw	v1,0(v0)
        (*(volatile int32 *) ASRC_OUT1_WFIFO) = fill_data;
485a586a:	e8a0      	jrc	ra
485a586c:	999c      	lw	a0,112(s1)
485a586e:	9fc1      	lw	a2,4(a3)
485a5870:	a234      	lbu	s1,20(v0)
485a5872:	9fc1      	lw	a2,4(a3)
485a5874:	0044      	addiu	s0,sp,272
485a5876:	c016      	sb	s0,22(s0)
485a5878:	0074      	addiu	s0,sp,464
485a587a:	c016      	sb	s0,22(s0)

485a587c <keytone_send_to_asrc>:
485a587c:	f004 64f5 	save	a0,40,ra,s0-s1
    }
}
void keytone_send_to_asrc(kt_play_info_t *p_kt_play_info)
{
485a5880:	ac24      	lhu	s1,8(a0)
    uint32 data_count = p_kt_play_info->kt_frame_size;
485a5882:	6a00      	li	v0,0
    //temp use
    long long shift_use;
    //position to buffer
    uint32 buf_ptr = 0;
485a5884:	d204      	sw	v0,16(sp)
485a5886:	2148      	beqz	s1,485a5918 <keytone_send_to_asrc+0x9c>
    int16 chanel_data;
    uint32 check_ret;

    while (data_count > 0)
    {
        if (g_keytone_infor.dac_chan == DAF0_EN)
        {
            check_ret = act_readl(ASRC_OUT0_NUM);
        }
        else
        {
            check_ret = act_readl(ASRC_OUT1_NUM);
        }

        if (check_ret != 0)
        {
            chanel_data = *(int16 *) &g_bitstream_buffer[buf_ptr];
            shift_use = (long long) chanel_data * p_kt_play_info->kt_compact;
#pragma __PRQA_IGNORE_START__
            shift_use >>= 10;
#pragma __PRQA_IGNORE_END__
            shift_use <<= 16;
            if (shift_use > 0x7fffffff)
            {
                shift_use = 0x7fffffff;
            }
            if (shift_use < -0x7fffffff)
            {
                shift_use = -0x7fffffff;
            }

            //out first sample data
            keytone_asrc_fill((int32) shift_use);

            //position move
            buf_ptr += 2;
            //data count sub
            data_count -= 2;
        }
        else
        {
            p_kt_play_info->kt_fill_flag = TRUE;
485a5888:	b425      	lw	a0,485a591c <keytone_send_to_asrc+0xa0>
485a588a:	a461      	lbu	v1,1(a0)
485a588c:	2b02      	bnez	v1,485a5892 <keytone_send_to_asrc+0x16>
485a588e:	b225      	lw	v0,485a5920 <keytone_send_to_asrc+0xa4>
485a5890:	1001      	b	485a5894 <keytone_send_to_asrc+0x18>
485a5892:	b225      	lw	v0,485a5924 <keytone_send_to_asrc+0xa8>
485a5894:	9aa0      	lw	a1,0(v0)
485a5896:	253c      	beqz	a1,485a5910 <keytone_send_to_asrc+0x94>
485a5898:	b024      	lw	s0,485a5928 <keytone_send_to_asrc+0xac>
485a589a:	9704      	lw	a3,16(sp)
485a589c:	960a      	lw	a2,40(sp)
485a589e:	e715      	addu	a1,a3,s0
485a58a0:	8d40      	lh	v0,0(a1)
485a58a2:	6b00      	li	v1,0
485a58a4:	6782      	move	a0,v0
485a58a6:	f7c0 3543 	sra	a1,v0,31
485a58aa:	9e43      	lw	v0,12(a2)
485a58ac:	ec59      	multu	a0,v0
485a58ae:	ef10      	mfhi	a3
485a58b0:	ee12      	mflo	a2
485a58b2:	ec78      	mult	a0,v1
485a58b4:	e812      	mflo	s0
485a58b6:	eab8      	mult	v0,a1
485a58b8:	e0e1      	addu	s0,a3
485a58ba:	eb12      	mflo	v1
485a58bc:	32c2      	srl	v0,a2,8
485a58be:	e07d      	addu	a3,s0,v1
485a58c0:	f580 35e0 	sll	a1,a3,22
485a58c4:	344a      	srl	a0,v0,2
485a58c6:	6745      	move	v0,a1
485a58c8:	ea8d      	or	v0,a0
485a58ca:	33e3      	sra	v1,a3,8
485a58cc:	356b      	sra	a1,v1,2
485a58ce:	3642      	srl	a2,v0,8
485a58d0:	34a0      	sll	a0,a1,8
485a58d2:	37c2      	srl	a3,a2,8
485a58d4:	3380      	sll	v1,a0,8
485a58d6:	67a7      	move	a1,a3
485a58d8:	ed6d      	or	a1,v1
485a58da:	3640      	sll	a2,v0,8
485a58dc:	5501      	slti	a1,1
485a58de:	34c0      	sll	a0,a2,8
485a58e0:	6004      	bteqz	485a58ea <keytone_send_to_asrc+0x6e>
485a58e2:	2d06      	bnez	a1,485a58f0 <keytone_send_to_asrc+0x74>
485a58e4:	b312      	lw	v1,485a592c <keytone_send_to_asrc+0xb0>
485a58e6:	eb83      	sltu	v1,a0
485a58e8:	6003      	bteqz	485a58f0 <keytone_send_to_asrc+0x74>
485a58ea:	b412      	lw	a0,485a5930 <keytone_send_to_asrc+0xb4>
485a58ec:	b512      	lw	a1,485a5934 <keytone_send_to_asrc+0xb8>
485a58ee:	1003      	b	485a58f6 <keytone_send_to_asrc+0x7a>
485a58f0:	f7ff 551f 	slti	a1,-1
485a58f4:	6105      	btnez	485a5900 <keytone_send_to_asrc+0x84>
485a58f6:	eeaf      	not	a2,a1
485a58f8:	2e04      	bnez	a2,485a5902 <keytone_send_to_asrc+0x86>
485a58fa:	b210      	lw	v0,485a5938 <keytone_send_to_asrc+0xbc>
485a58fc:	ec43      	sltu	a0,v0
485a58fe:	6001      	bteqz	485a5902 <keytone_send_to_asrc+0x86>
485a5900:	b410      	lw	a0,485a5940 <keytone_send_to_asrc+0xc4>
485a5902:	1ad0 960f 	jal	485a583c <keytone_asrc_fill>
485a5906:	412e      	addiu	s1,s1,-2
485a5908:	9504      	lw	a1,16(sp)
485a590a:	4582      	addiu	a0,a1,2
485a590c:	d404      	sw	a0,16(sp)
485a590e:	17bb      	b	485a5886 <keytone_send_to_asrc+0xa>
485a5910:	970a      	lw	a3,40(sp)
485a5912:	6b01      	li	v1,1
485a5914:	c76a      	sb	v1,10(a3)
485a5916:	17b7      	b	485a5886 <keytone_send_to_asrc+0xa>
485a5918:	6475      	restore	40,ra,s0-s1
485a591a:	e8a0      	jrc	ra
485a591c:	a234      	lbu	s1,20(v0)
485a591e:	9fc1      	lw	a2,4(a3)
485a5920:	003c      	addiu	s0,sp,240
485a5922:	c016      	sb	s0,22(s0)
485a5924:	006c      	addiu	s0,sp,432
485a5926:	c016      	sb	s0,22(s0)
485a5928:	5d88      	sltiu	a1,136
485a592a:	485a      	addiu	s0,90
485a592c:	ffff      	daddiu	a3,sp,124
485a592e:	7fff      	sd	a3,248(a3)
485a5930:	ffff      	daddiu	a3,sp,124
485a5932:	7fff      	sd	a3,248(a3)
485a5934:	0000      	addiu	s0,sp,0
485a5936:	0000      	addiu	s0,sp,0
485a5938:	0001      	addiu	s0,sp,4
485a593a:	8000      	lb	s0,0(s0)
485a593c:	0000      	addiu	s0,sp,0
485a593e:	0000      	addiu	s0,sp,0
485a5940:	0001      	addiu	s0,sp,4
485a5942:	8000      	lb	s0,0(s0)
485a5944:	ffff      	daddiu	a3,sp,124
485a5946:	ffff      	daddiu	a3,sp,124

485a5948 <keytone_play_frame>:
485a5948:	64f5      	save	40,ra,s0-s1
        }
    }
}

/******************************************************************************/
/*!
 * \par  Description:
 * \int32 keytone_play_frame(void* null0, void* null1, void* null2)
 * \按键音播放
 * \param[in]    none
 * \param[out]   none
 * \return       bool the result
 * \retval           1 sucess
 * \retval           0 failed
 * \ingroup
 * \note
 */
/*******************************************************************************/
int32 keytone_play_frame(kt_play_info_t *p_kt_play_info)
{
485a594a:	6704      	move	s0,a0
485a594c:	a863      	lhu	v1,6(s0)
    //播放音频帧
    int32 play_ret;

    if (p_kt_play_info->kt_offset >= p_kt_play_info->kt_length)
485a594e:	ac82      	lhu	a0,4(a0)
485a5950:	6a01      	li	v0,1
    {
        return -1;
485a5952:	ec63      	sltu	a0,v1
485a5954:	ea4b      	neg	v0
485a5956:	6037      	bteqz	485a59c6 <.L29+0xe>
485a5958:	6c00      	li	a0,0
    }

    sys_os_sched_lock();
485a595a:	b31d      	lw	v1,485a59cc <.L29+0x14>
485a595c:	67a4      	move	a1,a0
485a595e:	67c4      	move	a2,a0
485a5960:	eb40      	jalr	v1
485a5962:	6f33      	li	a3,51
485a5964:	a8c2      	lhu	a2,4(s0)

    //播放音频帧
    if (sys_sd_fseek(p_kt_play_info->kt_handle, 0, p_kt_play_info->kt_offset) == -1)
485a5966:	9880      	lw	a0,0(s0)
485a5968:	b319      	lw	v1,485a59cc <.L29+0x14>
485a596a:	6d00      	li	a1,0
485a596c:	eb40      	jalr	v1
485a596e:	6f0f      	li	a3,15
485a5970:	6f01      	li	a3,1
    {
        play_ret = -1;
485a5972:	eeeb      	neg	a2,a3
485a5974:	ed4f      	not	a1,v0
485a5976:	d604      	sw	a2,16(sp)
485a5978:	251f      	beqz	a1,485a59b8 <.L29>
485a597a:	b116      	lw	s1,485a59d0 <.L29+0x18>
        goto file_seek_fail;
    }
    //read frame data
    play_ret = sys_sd_fread(p_kt_play_info->kt_handle, g_bitstream_buffer, p_kt_play_info->kt_frame_size);
485a597c:	9880      	lw	a0,0(s0)
485a597e:	a8c4      	lhu	a2,8(s0)
485a5980:	b313      	lw	v1,485a59cc <.L29+0x14>
485a5982:	67b1      	move	a1,s1
485a5984:	eb40      	jalr	v1
485a5986:	6f11      	li	a3,17
485a5988:	d204      	sw	v0,16(sp)
485a598a:	ea4f      	not	v0

    if (play_ret != -1)
485a598c:	2215      	beqz	v0,485a59b8 <.L29>
485a598e:	a842      	lhu	v0,4(s0)
    {
        if (p_kt_play_info->kt_offset == 0)
485a5990:	2a04      	bnez	v0,485a599a <keytone_play_frame+0x52>
485a5992:	c140      	sb	v0,0(s1)
        {//前4字节为文件长度，清为0
            g_bitstream_buffer[0] = 0;
485a5994:	c141      	sb	v0,1(s1)
            g_bitstream_buffer[1] = 0;
485a5996:	c142      	sb	v0,2(s1)
            g_bitstream_buffer[2] = 0;
485a5998:	c143      	sb	v0,3(s1)
            g_bitstream_buffer[3] = 0;
485a599a:	a842      	lhu	v0,4(s0)
        }

        //change data offset
        p_kt_play_info->kt_offset += (uint16) play_ret;
485a599c:	9404      	lw	a0,16(sp)
485a599e:	a8a4      	lhu	a1,8(s0)

        //file size
        if ((uint16) play_ret < p_kt_play_info->kt_frame_size)
485a59a0:	e45d      	addu	a3,a0,v0
485a59a2:	679d      	move	a0,sp
485a59a4:	acc8      	lhu	a2,16(a0)
485a59a6:	c8e2      	sh	a3,4(s0)
485a59a8:	ee31      	zeh	a2
485a59aa:	eea3      	sltu	a2,a1
485a59ac:	6002      	bteqz	485a59b2 <keytone_play_frame+0x6a>
485a59ae:	ac68      	lhu	v1,16(a0)
        {
            p_kt_play_info->kt_frame_size = (uint16) play_ret;
485a59b0:	c864      	sh	v1,8(s0)
485a59b2:	1ad0 961f 	jal	485a587c <keytone_send_to_asrc>
        }

        //send data to asrc
        keytone_send_to_asrc(p_kt_play_info);
485a59b6:	6790      	move	a0,s0

485a59b8 <.L29>:
485a59b8:	6c00      	li	a0,0
    }

    file_seek_fail:
    sys_os_sched_unlock();
485a59ba:	b205      	lw	v0,485a59cc <.L29+0x14>
485a59bc:	67a4      	move	a1,a0
485a59be:	67c4      	move	a2,a0
485a59c0:	ea40      	jalr	v0
485a59c2:	6f34      	li	a3,52
485a59c4:	9204      	lw	v0,16(sp)

    return play_ret;
485a59c6:	6475      	restore	40,ra,s0-s1
}
485a59c8:	e8a0      	jrc	ra
485a59ca:	0000      	addiu	s0,sp,0
485a59cc:	e901      	sdbbp	8
485a59ce:	bfc1      	lwu	a2,4(a3)
485a59d0:	5d88      	sltiu	a1,136
485a59d2:	485a      	addiu	s0,90

485a59d4 <keytone_play_loop>:
485a59d4:	64f6      	save	48,ra,s0-s1

void keytone_play_loop(void *param)
{
485a59d6:	b141      	lw	s1,485a5ad8 <.L35+0x1c>
    kt_play_info_t kt_play_info;
    int32 play_ret;
    uint8 kt_id = (uint8) (uint32) (param);

    //PRINT_DBG_INT("keytone enter:", kt_id);

    g_keytone_infor.playing = TRUE;
485a59d8:	6d02      	li	a1,2
485a59da:	a143      	lbu	v0,3(s1)
485a59dc:	677d      	move	v1,sp

    kt_play_info.kt_compact = 0x0fec; //固定系数
    kt_play_info.kt_fill_flag = FALSE;
485a59de:	eaad      	or	v0,a1
485a59e0:	c143      	sb	v0,3(s1)
485a59e2:	6704      	move	s0,a0
485a59e4:	b13e      	lw	s1,485a5adc <.L35+0x20>
    sys_os_sched_lock();
485a59e6:	458e      	addiu	a0,a1,-2
485a59e8:	f7e1 6f0c 	li	a3,4076
485a59ec:	6e00      	li	a2,0
485a59ee:	c3da      	sb	a2,26(v1)
485a59f0:	67a4      	move	a1,a0
485a59f2:	67c4      	move	a2,a0
485a59f4:	d707      	sw	a3,28(sp)
485a59f6:	e940      	jalr	s1
485a59f8:	6f33      	li	a3,51
485a59fa:	e811      	zeb	s0
485a59fc:	b439      	lw	a0,485a5ae0 <.L35+0x24>
    kt_play_info.kt_handle = sys_sd_fopen(g_keytone_filelist[kt_id]);
485a59fe:	6d00      	li	a1,0
485a5a00:	3010      	sll	s0,4
485a5a02:	67c5      	move	a2,a1
485a5a04:	e091      	addu	a0,s0,a0
485a5a06:	e940      	jalr	s1
485a5a08:	6f0d      	li	a3,13
485a5a0a:	6c00      	li	a0,0
    sys_os_sched_unlock();
485a5a0c:	d204      	sw	v0,16(sp)
485a5a0e:	67a4      	move	a1,a0
485a5a10:	67c4      	move	a2,a0
485a5a12:	e940      	jalr	s1
485a5a14:	6f34      	li	a3,52
485a5a16:	9204      	lw	v0,16(sp)
    if (kt_play_info.kt_handle == NULL)
485a5a18:	2251      	beqz	v0,485a5abc <.L35>
485a5a1a:	1ad0 9600 	jal	485a5800 <keytone_init_set>
    {
        //open fail
        goto fail_open;
    }

    //set hardware
    keytone_init_set();
485a5a1e:	6500      	nop
485a5a20:	677d      	move	v1,sp

    kt_play_info.kt_frame_size = KEYTONE_FRAME_SIZE;
485a5a22:	6d00      	li	a1,0
    sys_sd_fseek(kt_play_info.kt_handle, 0, 0);
485a5a24:	f200 6e00 	li	a2,512
485a5a28:	9404      	lw	a0,16(sp)
485a5a2a:	cbcc      	sh	a2,24(v1)
485a5a2c:	6f0f      	li	a3,15
485a5a2e:	e940      	jalr	s1
485a5a30:	67c5      	move	a2,a1
485a5a32:	9404      	lw	a0,16(sp)
    sys_sd_fread(kt_play_info.kt_handle, &(kt_play_info.kt_length), 2);
485a5a34:	f000 0516 	addiu	a1,sp,22
485a5a38:	6e02      	li	a2,2
485a5a3a:	e940      	jalr	s1
485a5a3c:	6f11      	li	a3,17
485a5a3e:	6d00      	li	a1,0
    kt_play_info.kt_offset = 0;
485a5a40:	679d      	move	a0,sp
485a5a42:	ccaa      	sh	a1,20(a0)
485a5a44:	1ad0 9652 	jal	485a5948 <keytone_play_frame>

    while (1)
    {
        play_ret = keytone_play_frame(&kt_play_info);
485a5a48:	0404      	addiu	a0,sp,16
485a5a4a:	ef4f      	not	a3,v0
        if (play_ret == -1)
485a5a4c:	270d      	beqz	a3,485a5a68 <keytone_play_loop+0x94>
485a5a4e:	679d      	move	a0,sp
        {
            break;
        }

        //ASRC OUT启动后才需要延时
        if (kt_play_info.kt_fill_flag == TRUE)
485a5a50:	a45a      	lbu	v0,26(a0)
485a5a52:	7201      	cmpi	v0,1
485a5a54:	61f7      	btnez	485a5a44 <keytone_play_loop+0x70>
485a5a56:	6d00      	li	a1,0
        {
            kt_play_info.kt_fill_flag = FALSE;
485a5a58:	c4ba      	sb	a1,26(a0)
485a5a5a:	b221      	lw	v0,485a5adc <.L35+0x20>
            sys_os_time_dly(2);
485a5a5c:	6d00      	li	a1,0
485a5a5e:	6c02      	li	a0,2
485a5a60:	67c5      	move	a2,a1
485a5a62:	ea40      	jalr	v0
485a5a64:	6f31      	li	a3,49
485a5a66:	17ee      	b	485a5a44 <keytone_play_loop+0x70>
485a5a68:	b41c      	lw	a0,485a5ad8 <.L35+0x1c>
        }
    }

    //等待按键音播放结束
    while (1)
    {
        if (g_keytone_infor.dac_chan == DAF0_EN)
485a5a6a:	a4a1      	lbu	a1,1(a0)
485a5a6c:	2d02      	bnez	a1,485a5a72 <keytone_play_loop+0x9e>
485a5a6e:	b21e      	lw	v0,485a5ae4 <.L35+0x28>
        {
            if ((act_readl(ASRC_OUT0_IP) & (1 << ASRC_OUT0_IP_PCMFIFOEmpty)) != 0)
485a5a70:	1001      	b	485a5a74 <keytone_play_loop+0xa0>
485a5a72:	b21e      	lw	v0,485a5ae8 <.L35+0x2c>
            {
                break;
            }
        }
        else
        {
            if ((act_readl(ASRC_OUT1_IP) & (1 << ASRC_OUT1_IP_PCMFIFOEmpty)) != 0)
485a5a74:	9ac0      	lw	a2,0(v0)
485a5a76:	6b08      	li	v1,8
485a5a78:	ee6c      	and	a2,v1
485a5a7a:	2e07      	bnez	a2,485a5a8a <keytone_play_loop+0xb6>
485a5a7c:	6d00      	li	a1,0
            {
                break;
            }
        }

        sys_os_time_dly(1);
485a5a7e:	b218      	lw	v0,485a5adc <.L35+0x20>
485a5a80:	6c01      	li	a0,1
485a5a82:	67c5      	move	a2,a1
485a5a84:	ea40      	jalr	v0
485a5a86:	6f31      	li	a3,49
485a5a88:	17ef      	b	485a5a68 <keytone_play_loop+0x94>
485a5a8a:	67c5      	move	a2,a1
    }

    if (g_keytone_infor.dac_chan == DAF0_EN)
485a5a8c:	ee11      	zeb	a2
485a5a8e:	b218      	lw	v0,485a5aec <.L35+0x30>
485a5a90:	2e03      	bnez	a2,485a5a98 <keytone_play_loop+0xc4>
485a5a92:	6c0d      	li	a0,13
    {
        close_asrc(K_OUT0_U0);
485a5a94:	67a6      	move	a1,a2
485a5a96:	1003      	b	485a5a9e <keytone_play_loop+0xca>
485a5a98:	6d00      	li	a1,0
    }
    else
    {
        close_asrc(K_OUT1_P2);
485a5a9a:	6c13      	li	a0,19
485a5a9c:	67c5      	move	a2,a1
485a5a9e:	ea40      	jalr	v0
485a5aa0:	6f11      	li	a3,17
485a5aa2:	b70e      	lw	a3,485a5ad8 <.L35+0x1c>
    }

    //disable dac channel zero
    disable_dac(g_keytone_infor.dac_chan);
485a5aa4:	6d00      	li	a1,0
485a5aa6:	a781      	lbu	a0,1(a3)
485a5aa8:	b211      	lw	v0,485a5aec <.L35+0x30>
485a5aaa:	67c5      	move	a2,a1
485a5aac:	ea40      	jalr	v0
485a5aae:	6f05      	li	a3,5
485a5ab0:	6d00      	li	a1,0
    //close source file
    sys_sd_fclose(kt_play_info.kt_handle);
485a5ab2:	9404      	lw	a0,16(sp)
485a5ab4:	b20a      	lw	v0,485a5adc <.L35+0x20>
485a5ab6:	67c5      	move	a2,a1
485a5ab8:	ea40      	jalr	v0
485a5aba:	6f0e      	li	a3,14

485a5abc <.L35>:
485a5abc:	b507      	lw	a1,485a5ad8 <.L35+0x1c>

    fail_open:

    g_keytone_infor.playing = FALSE;
485a5abe:	6b03      	li	v1,3
485a5ac0:	a583      	lbu	a0,3(a1)
485a5ac2:	ee6b      	neg	a2,v1
485a5ac4:	eccc      	and	a0,a2
485a5ac6:	c583      	sb	a0,3(a1)
485a5ac8:	b20a      	lw	v0,485a5af0 <.L35+0x34>

    libc_pthread_exit();
485a5aca:	6c00      	li	a0,0
485a5acc:	67a4      	move	a1,a0
485a5ace:	67c4      	move	a2,a0
485a5ad0:	ea40      	jalr	v0
485a5ad2:	6f0c      	li	a3,12
485a5ad4:	6476      	restore	48,ra,s0-s1
485a5ad6:	e8a0      	jrc	ra
485a5ad8:	a234      	lbu	s1,20(v0)
485a5ada:	9fc1      	lw	a2,4(a3)
485a5adc:	e901      	sdbbp	8
485a5ade:	bfc1      	lwu	a2,4(a3)
485a5ae0:	5f88      	sltiu	a3,136
485a5ae2:	485a      	addiu	s0,90
485a5ae4:	0050      	addiu	s0,sp,320
485a5ae6:	c016      	sb	s0,22(s0)
485a5ae8:	0080      	addiu	s0,sp,512
485a5aea:	c016      	sb	s0,22(s0)
485a5aec:	e909      	entry	a0
485a5aee:	bfc1      	lwu	a2,4(a3)
485a5af0:	e905      	break	8
485a5af2:	bfc1      	lwu	a2,4(a3)

485a5af4 <keytone_play_thread>:
485a5af4:	64f6      	save	48,ra,s0-s1
}

void keytone_play_thread(uint8 kt_id)
{
485a5af6:	b510      	lw	a1,485a5b34 <keytone_play_thread+0x40>
    //打开按键音线程
    pthread_ext_param_t param;

    //初始化创建线程的参数
    param.pthread_param.start_rtn = (void *) keytone_play_loop;
485a5af8:	f300 6900 	li	s1,768
    param.pthread_param.arg = (void *) (uint32) kt_id;
    //param.pthread_param.ptos = (void *) KEYTONE_PLAY_STK_POS;/*实际使用0x190*/
    g_keytone_infor.keytone_thread_addr = sys_malloc_large_data(KEYTONE_PLAY_STK_SIZE);
485a5afc:	ec11      	zeb	a0
485a5afe:	b310      	lw	v1,485a5b3c <keytone_play_thread+0x48>
485a5b00:	b00e      	lw	s0,485a5b38 <keytone_play_thread+0x44>
485a5b02:	d504      	sw	a1,16(sp)
485a5b04:	d405      	sw	a0,20(sp)
485a5b06:	6d20      	li	a1,32
485a5b08:	6791      	move	a0,s1
485a5b0a:	6e00      	li	a2,0
485a5b0c:	eb40      	jalr	v1
485a5b0e:	6f16      	li	a3,22
485a5b10:	d842      	sw	v0,8(s0)
485a5b12:	679d      	move	a0,sp
    param.pthread_param.ptos = (void *)(g_keytone_infor.keytone_thread_addr + KEYTONE_PLAY_STK_SIZE);

    //libc_print("keytone addr", g_keytone_infor.keytone_thread_addr, 2);
    
    param.stk_size = KEYTONE_PLAY_STK_SIZE;
485a5b14:	f300 4a00 	addiu	v0,768
485a5b18:	cc2e      	sh	s1,28(a0)
485a5b1a:	d206      	sw	v0,24(sp)
485a5b1c:	a043      	lbu	v0,3(s0)

    g_keytone_infor.thread_eixt = TRUE;
485a5b1e:	6d04      	li	a1,4
485a5b20:	eaad      	or	v0,a1
485a5b22:	b307      	lw	v1,485a5b3c <keytone_play_thread+0x48>

    if (libc_pthread_create(&param, KEYTONE_PLAY_PRIO, CREATE_NOT_MAIN_THREAD) < 0)
485a5b24:	c043      	sb	v0,3(s0)
485a5b26:	0404      	addiu	a0,sp,16
485a5b28:	6eff      	li	a2,255
485a5b2a:	eb40      	jalr	v1
485a5b2c:	6f4a      	li	a3,74
485a5b2e:	6476      	restore	48,ra,s0-s1
    {
    }

    return;
485a5b30:	e8a0      	jrc	ra
485a5b32:	0000      	addiu	s0,sp,0
485a5b34:	59d5      	sltiu	s1,213
485a5b36:	485a      	addiu	s0,90
485a5b38:	a234      	lbu	s1,20(v0)
485a5b3a:	9fc1      	lw	a2,4(a3)
485a5b3c:	e901      	sdbbp	8
485a5b3e:	bfc1      	lwu	a2,4(a3)

485a5b40 <keytone_thread_task_stack_free>:
485a5b40:	64e3      	save	24,ra,s0
}

void keytone_thread_task_stack_free(void)
{
485a5b42:	b009      	lw	s0,485a5b64 <keytone_thread_task_stack_free+0x24>
    if(g_keytone_infor.keytone_thread_addr != 0)
485a5b44:	9882      	lw	a0,8(s0)
485a5b46:	240c      	beqz	a0,485a5b60 <keytone_thread_task_stack_free+0x20>
485a5b48:	b208      	lw	v0,485a5b68 <keytone_thread_task_stack_free+0x28>
    {
        //libc_print("free keytone", g_keytone_infor.keytone_thread_addr, 2);
        sys_free_large_data(g_keytone_infor.keytone_thread_addr);
485a5b4a:	6d20      	li	a1,32
485a5b4c:	6e00      	li	a2,0
485a5b4e:	ea40      	jalr	v0
485a5b50:	6f17      	li	a3,23
485a5b52:	a043      	lbu	v0,3(s0)
        g_keytone_infor.keytone_thread_addr = 0;
        g_keytone_infor.thread_eixt = FALSE;
485a5b54:	6c05      	li	a0,5
485a5b56:	eb8b      	neg	v1,a0
485a5b58:	6d00      	li	a1,0
485a5b5a:	ea6c      	and	v0,v1
485a5b5c:	d8a2      	sw	a1,8(s0)
485a5b5e:	c043      	sb	v0,3(s0)
485a5b60:	6463      	restore	24,ra,s0
    }
}
485a5b62:	e8a0      	jrc	ra
485a5b64:	a234      	lbu	s1,20(v0)
485a5b66:	9fc1      	lw	a2,4(a3)
485a5b68:	e901      	sdbbp	8
485a5b6a:	bfc1      	lwu	a2,4(a3)

485a5b6c <keytone_play_deal_wait>:
485a5b6c:	64c3      	save	24,ra

void keytone_play_deal_wait(void)
{
485a5b6e:	b409      	lw	a0,485a5b90 <keytone_play_deal_wait+0x24>
    while (g_keytone_infor.playing == TRUE)
    {
        sys_os_time_dly(1);
485a5b70:	6b02      	li	v1,2
485a5b72:	a443      	lbu	v0,3(a0)
485a5b74:	ea6c      	and	v0,v1
485a5b76:	2207      	beqz	v0,485a5b86 <keytone_play_deal_wait+0x1a>
485a5b78:	6d00      	li	a1,0
485a5b7a:	b207      	lw	v0,485a5b94 <keytone_play_deal_wait+0x28>
485a5b7c:	6c01      	li	a0,1
485a5b7e:	67c5      	move	a2,a1
485a5b80:	ea40      	jalr	v0
485a5b82:	6f31      	li	a3,49
485a5b84:	17f4      	b	485a5b6e <keytone_play_deal_wait+0x2>
485a5b86:	1ad0 96d0 	jal	485a5b40 <keytone_thread_task_stack_free>
    }

    keytone_thread_task_stack_free();
485a5b8a:	6500      	nop
485a5b8c:	6443      	restore	24,ra
485a5b8e:	e8a0      	jrc	ra
485a5b90:	a234      	lbu	s1,20(v0)
485a5b92:	9fc1      	lw	a2,4(a3)
485a5b94:	e901      	sdbbp	8
485a5b96:	bfc1      	lwu	a2,4(a3)

485a5b98 <keytone_set_dac_chan>:
485a5b98:	64f4      	save	32,ra,s0-s1
}


void keytone_set_dac_chan(dac_chenel_e dac_chan)
{
485a5b9a:	b106      	lw	s1,485a5bb0 <keytone_set_dac_chan+0x18>
    if (dac_chan == g_keytone_infor.dac_chan)
485a5b9c:	6704      	move	s0,a0
485a5b9e:	a141      	lbu	v0,1(s1)
485a5ba0:	e811      	zeb	s0
485a5ba2:	ea0e      	xor	v0,s0
485a5ba4:	2203      	beqz	v0,485a5bac <keytone_set_dac_chan+0x14>
485a5ba6:	b304      	lw	v1,485a5bb4 <keytone_set_dac_chan+0x1c>
    {
        return;
    }

    //等待按键音结束后才能切换dac通道
    keytone_play_deal_wait();
485a5ba8:	ebc0      	jalrc	v1
485a5baa:	c101      	sb	s0,1(s1)

    g_keytone_infor.dac_chan = dac_chan;
485a5bac:	6474      	restore	32,ra,s0-s1
}
485a5bae:	e8a0      	jrc	ra
485a5bb0:	a234      	lbu	s1,20(v0)
485a5bb2:	9fc1      	lw	a2,4(a3)
485a5bb4:	5b6d      	sltiu	v1,109
485a5bb6:	485a      	addiu	s0,90

485a5bb8 <keytone_set_dac_sample>:
485a5bb8:	b202      	lw	v0,485a5bc0 <keytone_set_dac_sample+0x8>

//只允许在初始化时设置
void keytone_set_dac_sample(uint8 dac_sample)
{
    g_keytone_infor.dac_sample = dac_sample;
485a5bba:	e820      	jr	ra
485a5bbc:	c282      	sb	a0,2(v0)
485a5bbe:	0000      	addiu	s0,sp,0
485a5bc0:	a234      	lbu	s1,20(v0)
485a5bc2:	9fc1      	lw	a2,4(a3)

485a5bc4 <keytone_set_on_off>:
485a5bc4:	64f4      	save	32,ra,s0-s1
}

//按键音开关有2个：全局开关和场景开关，这里就是场景开关
void keytone_set_on_off(bool on_off)
{
485a5bc6:	b30b      	lw	v1,485a5bf0 <keytone_set_on_off+0x2c>
    if (on_off == g_keytone_infor.enable)
485a5bc8:	6724      	move	s1,a0
485a5bca:	a343      	lbu	v0,3(v1)
485a5bcc:	6801      	li	s0,1
485a5bce:	e911      	zeb	s1
485a5bd0:	ea0c      	and	v0,s0
485a5bd2:	ea2e      	xor	v0,s1
485a5bd4:	220b      	beqz	v0,485a5bec <keytone_set_on_off+0x28>
485a5bd6:	b308      	lw	v1,485a5bf4 <keytone_set_on_off+0x30>
    {
        return;
    }

    //等待按键音结束后才能切换dac通道
    keytone_play_deal_wait();
485a5bd8:	eb40      	jalr	v1
485a5bda:	e82c      	and	s0,s1
485a5bdc:	b205      	lw	v0,485a5bf0 <keytone_set_on_off+0x2c>

    g_keytone_infor.enable = on_off;
485a5bde:	6f02      	li	a3,2
485a5be0:	a2a3      	lbu	a1,3(v0)
485a5be2:	eeeb      	neg	a2,a3
485a5be4:	edcc      	and	a1,a2
485a5be6:	b403      	lw	a0,485a5bf0 <keytone_set_on_off+0x2c>
485a5be8:	ed0d      	or	a1,s0
485a5bea:	c4a3      	sb	a1,3(a0)
485a5bec:	6474      	restore	32,ra,s0-s1
}
485a5bee:	e8a0      	jrc	ra
485a5bf0:	a234      	lbu	s1,20(v0)
485a5bf2:	9fc1      	lw	a2,4(a3)
485a5bf4:	5b6d      	sltiu	v1,109
485a5bf6:	485a      	addiu	s0,90

485a5bf8 <keytone_fifo_out>:
485a5bf8:	b50b      	lw	a1,485a5c24 <keytone_fifo_out+0x2c>

void keytone_play_deal(void)
{
    uint8 kt_id;

    if (g_keytone_infor.playing == TRUE)
    {
        return;
    }

    keytone_thread_task_stack_free();

    kt_id = keytone_fifo_out();
    if (kt_id == 0xff)
    {
        //PRINT_WARNING("kt fifo out err!!");
        return;
    }

    if (g_keytone_infor.enable == TRUE)
    {
        keytone_play_thread(kt_id);
    }
}



bool keytone_play(uint8 kt_id, uint8 mode)
{
    soundout_state_e state = get_soundout_state();

    if (g_app_info_state.inner_pa_inited == FALSE)
    {
        return FALSE;
    }

    if (g_keytone_infor.enable == FALSE)
    { //已禁用按键音
        return FALSE;
    }

    if (g_app_info_state.stub_tools_type != 0)
    {
        return FALSE;
    }

    if (g_app_info_state.autotest_mode != 0)
    {
        return FALSE;
    }

#if ((CASE_BOARD_TYPE == CASE_BOARD_ATS2823) || (CASE_BOARD_TYPE == CASE_BOARD_DVB_ATS2823))
    if (get_card_state() != CARD_STATE_CARD_NULL)
    {
        return FALSE;
    }
#endif

    if ((sys_comval->key_tone_overlay == FALSE) && ((state != SOUND_OUT_STOP) && (state != SOUND_OUT_PAUSE)))
    { //不允许按键音叠加到音乐中
        return FALSE;
    }

    if (get_mute_enable() == TRUE)
    { //静音状态下，直接返回
        return FALSE;
    }

    if ((sys_comval->volume_current == 0) && (sys_comval->kt_tts_min_volume == 0))
    { //允许音量为0时没有按键音和TTS
        return FALSE;
    }

    if (mode == KEYTONE_NOBLOCK)
    {
        keytone_fifo_in(kt_id);

        keytone_play_deal();
    }
    else
    {
        keytone_play_deal_wait();

        keytone_fifo_in(kt_id);

        while (1)
        {
            kt_id = keytone_fifo_out();
            if (kt_id == 0xff)
            {
                break;
            }

            if (g_keytone_infor.enable == TRUE)
            {
                keytone_play_thread(kt_id);
                keytone_play_deal_wait();
            }
        }
    }

    return TRUE;
}

void com_start_key_tone(uint8 mode)
{
    //按键音使能，才发出按键音
    if (sys_comval->key_tone == TRUE)
    {
        keytone_play(KEYTONE_KEYTONE, mode);
    }
}

uint8 keytone_fifo_out(void)
{
    uint8 kt_id, i;
    
    if (g_keytone_infor.count == 0)
485a5bfa:	6bff      	li	v1,255
    {
        return -1;
485a5bfc:	a540      	lbu	v0,0(a1)
485a5bfe:	2210      	beqz	v0,485a5c20 <keytone_fifo_out+0x28>
485a5c00:	424f      	addiu	v0,v0,-1
    }

    kt_id = g_keytone_infor.kt_fifo[0];
    g_keytone_infor.count--;
485a5c02:	c540      	sb	v0,0(a1)
485a5c04:	ea11      	zeb	v0

    for (i = 0; i < g_keytone_infor.count; i++)
485a5c06:	a5e4      	lbu	a3,4(a1)
485a5c08:	6c00      	li	a0,0
485a5c0a:	2209      	beqz	v0,485a5c1e <keytone_fifo_out+0x26>
485a5c0c:	67c2      	move	a2,v0
485a5c0e:	e4ad      	addu	v1,a0,a1
    {
        g_keytone_infor.kt_fifo[i] = g_keytone_infor.kt_fifo[i + 1];
485a5c10:	a345      	lbu	v0,5(v1)
485a5c12:	c344      	sb	v0,4(v1)
485a5c14:	4441      	addiu	v0,a0,1
485a5c16:	6782      	move	a0,v0
485a5c18:	ec11      	zeb	a0
485a5c1a:	ecc3      	sltu	a0,a2
485a5c1c:	61f8      	btnez	485a5c0e <keytone_fifo_out+0x16>
485a5c1e:	6767      	move	v1,a3
    }

    return kt_id;
485a5c20:	e820      	jr	ra
}
485a5c22:	6743      	move	v0,v1
485a5c24:	a234      	lbu	s1,20(v0)
485a5c26:	9fc1      	lw	a2,4(a3)

485a5c28 <keytone_play_deal>:
485a5c28:	64e3      	save	24,ra,s0
485a5c2a:	b00c      	lw	s0,485a5c58 <keytone_play_deal+0x30>
485a5c2c:	6b02      	li	v1,2
485a5c2e:	a043      	lbu	v0,3(s0)
485a5c30:	ea6c      	and	v0,v1
485a5c32:	2a10      	bnez	v0,485a5c54 <keytone_play_deal+0x2c>
485a5c34:	1ad0 96d0 	jal	485a5b40 <keytone_thread_task_stack_free>
485a5c38:	6500      	nop
485a5c3a:	1ad0 96fe 	jal	485a5bf8 <keytone_fifo_out>
485a5c3e:	6500      	nop
485a5c40:	72ff      	cmpi	v0,255
485a5c42:	6782      	move	a0,v0
485a5c44:	6007      	bteqz	485a5c54 <keytone_play_deal+0x2c>
485a5c46:	a0a3      	lbu	a1,3(s0)
485a5c48:	6e01      	li	a2,1
485a5c4a:	edcc      	and	a1,a2
485a5c4c:	2503      	beqz	a1,485a5c54 <keytone_play_deal+0x2c>
485a5c4e:	1ad0 96bd 	jal	485a5af4 <keytone_play_thread>
485a5c52:	6500      	nop
485a5c54:	6463      	restore	24,ra,s0
485a5c56:	e8a0      	jrc	ra
485a5c58:	a234      	lbu	s1,20(v0)
485a5c5a:	9fc1      	lw	a2,4(a3)

485a5c5c <keytone_fifo_in>:
485a5c5c:	64c3      	save	24,ra

bool keytone_fifo_in(uint8 kt_id)
{
485a5c5e:	b312      	lw	v1,485a5ca4 <keytone_fifo_in+0x48>
    if (g_keytone_infor.count >= KEYTONE_FIFO_DEPTH)
485a5c60:	ec11      	zeb	a0
485a5c62:	a3a0      	lbu	a1,0(v1)
485a5c64:	6745      	move	v0,a1
485a5c66:	ea11      	zeb	v0
485a5c68:	5a04      	sltiu	v0,4
485a5c6a:	6108      	btnez	485a5c7c <keytone_fifo_in+0x20>
485a5c6c:	6d00      	li	a1,0
    {
        PRINT_WARNING("kt fifo in full!");
485a5c6e:	b20f      	lw	v0,485a5ca8 <keytone_fifo_in+0x4c>
485a5c70:	0c07      	la	a0,485a5c8c <keytone_fifo_in+0x30>
485a5c72:	67c5      	move	a2,a1
485a5c74:	ea40      	jalr	v0
485a5c76:	6f4b      	li	a3,75
485a5c78:	6a00      	li	v0,0
        return FALSE;
485a5c7a:	1005      	b	485a5c86 <keytone_fifo_in+0x2a>
485a5c7c:	e279      	addu	a2,v0,v1
    }

    g_keytone_infor.kt_fifo[g_keytone_infor.count] = kt_id;
485a5c7e:	c684      	sb	a0,4(a2)
485a5c80:	4581      	addiu	a0,a1,1
    g_keytone_infor.count++;
485a5c82:	c380      	sb	a0,0(v1)
485a5c84:	6a01      	li	v0,1

    return TRUE;
485a5c86:	6443      	restore	24,ra
}
485a5c88:	e8a0      	jrc	ra
485a5c8a:	0000      	addiu	s0,sp,0
485a5c8c:	573c      	slti	a3,60
485a5c8e:	203e      	beqz	s0,485a5d0c <.LBE2+0x5a>
485a5c90:	746b      	cmpi	a0,107
485a5c92:	6620      	0x6620
485a5c94:	6669      	0x6669
485a5c96:	206f      	beqz	s0,485a5d76 <com_start_key_tone+0x12>
485a5c98:	6e69      	li	a2,105
485a5c9a:	6620      	0x6620
485a5c9c:	6c75      	li	a0,117
485a5c9e:	216c      	beqz	s1,485a5d78 <com_start_key_tone+0x14>
485a5ca0:	0000      	addiu	s0,sp,0
485a5ca2:	0000      	addiu	s0,sp,0
485a5ca4:	a234      	lbu	s1,20(v0)
485a5ca6:	9fc1      	lw	a2,4(a3)
485a5ca8:	e901      	sdbbp	8
485a5caa:	bfc1      	lwu	a2,4(a3)

485a5cac <keytone_play>:
485a5cac:	64f4      	save	32,ra,s0-s1
485a5cae:	b628      	lw	a2,485a5d4c <.LBE2+0x9a>

485a5cb0 <.LBB2>:
485a5cb0:	b326      	lw	v1,485a5d48 <.LBE2+0x96>

485a5cb2 <.LBE2>:
485a5cb2:	a650      	lbu	v0,16(a2)
485a5cb4:	6704      	move	s0,a0
485a5cb6:	e811      	zeb	s0
485a5cb8:	ed11      	zeb	a1
485a5cba:	a3e7      	lbu	a3,7(v1)
485a5cbc:	6722      	move	s1,v0
485a5cbe:	2241      	beqz	v0,485a5d42 <.LBE2+0x90>
485a5cc0:	b224      	lw	v0,485a5d50 <.LBE2+0x9e>
485a5cc2:	6901      	li	s1,1
485a5cc4:	a283      	lbu	a0,3(v0)
485a5cc6:	ec2c      	and	a0,s1
485a5cc8:	6724      	move	s1,a0
485a5cca:	243b      	beqz	a0,485a5d42 <.LBE2+0x90>
485a5ccc:	a66c      	lbu	v1,12(a2)
485a5cce:	6c7f      	li	a0,127
485a5cd0:	eb8c      	and	v1,a0
485a5cd2:	6900      	li	s1,0
485a5cd4:	2b36      	bnez	v1,485a5d42 <.LBE2+0x90>
485a5cd6:	a68d      	lbu	a0,13(a2)
485a5cd8:	6723      	move	s1,v1
485a5cda:	2c33      	bnez	a0,485a5d42 <.LBE2+0x90>
485a5cdc:	a664      	lbu	v1,4(a2)
485a5cde:	6724      	move	s1,a0
485a5ce0:	2b30      	bnez	v1,485a5d42 <.LBE2+0x90>
485a5ce2:	b11d      	lw	s1,485a5d54 <.LBE2+0xa2>
485a5ce4:	9960      	lw	v1,0(s1)
485a5ce6:	a355      	lbu	v0,21(v1)
485a5ce8:	2a04      	bnez	v0,485a5cf2 <.LBE2+0x40>
485a5cea:	2703      	beqz	a3,485a5cf2 <.LBE2+0x40>
485a5cec:	7702      	cmpi	a3,2
485a5cee:	6722      	move	s1,v0
485a5cf0:	6128      	btnez	485a5d42 <.LBE2+0x90>
485a5cf2:	a6e0      	lbu	a3,0(a2)
485a5cf4:	6900      	li	s1,0
485a5cf6:	7701      	cmpi	a3,1
485a5cf8:	6024      	bteqz	485a5d42 <.LBE2+0x90>
485a5cfa:	9bc6      	lw	a2,24(v1)
485a5cfc:	b217      	lw	v0,485a5d58 <.LBE2+0xa6>
485a5cfe:	ee4c      	and	a2,v0
485a5d00:	6726      	move	s1,a2
485a5d02:	261f      	beqz	a2,485a5d42 <.LBE2+0x90>
485a5d04:	2d07      	bnez	a1,485a5d14 <.LBE2+0x62>
485a5d06:	1ad0 9717 	jal	485a5c5c <keytone_fifo_in>
485a5d0a:	6790      	move	a0,s0
485a5d0c:	b314      	lw	v1,485a5d5c <.LBE2+0xaa>
485a5d0e:	eb40      	jalr	v1
485a5d10:	6901      	li	s1,1
485a5d12:	1017      	b	485a5d42 <.LBE2+0x90>
485a5d14:	b113      	lw	s1,485a5d60 <.LBE2+0xae>
485a5d16:	e9c0      	jalrc	s1
485a5d18:	1ad0 9717 	jal	485a5c5c <keytone_fifo_in>
485a5d1c:	6790      	move	a0,s0
485a5d1e:	1ad0 96fe 	jal	485a5bf8 <keytone_fifo_out>
485a5d22:	6500      	nop
485a5d24:	72ff      	cmpi	v0,255
485a5d26:	6782      	move	a0,v0
485a5d28:	600b      	bteqz	485a5d40 <.LBE2+0x8e>
485a5d2a:	b60a      	lw	a2,485a5d50 <.LBE2+0x9e>
485a5d2c:	6f01      	li	a3,1
485a5d2e:	a6a3      	lbu	a1,3(a2)
485a5d30:	edec      	and	a1,a3
485a5d32:	25f5      	beqz	a1,485a5d1e <.LBE2+0x6c>
485a5d34:	1ad0 96bd 	jal	485a5af4 <keytone_play_thread>
485a5d38:	6500      	nop
485a5d3a:	b20a      	lw	v0,485a5d60 <.LBE2+0xae>
485a5d3c:	eac0      	jalrc	v0
485a5d3e:	17ef      	b	485a5d1e <.LBE2+0x6c>
485a5d40:	6901      	li	s1,1
485a5d42:	6751      	move	v0,s1
485a5d44:	6474      	restore	32,ra,s0-s1
485a5d46:	e8a0      	jrc	ra
485a5d48:	a094      	lbu	a0,20(s0)
485a5d4a:	9fc1      	lw	a2,4(a3)
485a5d4c:	a0c0      	lbu	a2,0(s0)
485a5d4e:	9fc1      	lw	a2,4(a3)
485a5d50:	a234      	lbu	s1,20(v0)
485a5d52:	9fc1      	lw	a2,4(a3)
485a5d54:	999c      	lw	a0,112(s1)
485a5d56:	9fc1      	lw	a2,4(a3)
485a5d58:	00ff      	addiu	s0,sp,1020
485a5d5a:	ff00      	daddiu	s0,sp,0
485a5d5c:	5c29      	sltiu	a0,41
485a5d5e:	485a      	addiu	s0,90
485a5d60:	5b6d      	sltiu	v1,109
485a5d62:	485a      	addiu	s0,90

485a5d64 <com_start_key_tone>:
485a5d64:	64c3      	save	24,ra
485a5d66:	67a4      	move	a1,a0
485a5d68:	b406      	lw	a0,485a5d80 <com_start_key_tone+0x1c>
485a5d6a:	ed11      	zeb	a1
485a5d6c:	9c60      	lw	v1,0(a0)
485a5d6e:	a354      	lbu	v0,20(v1)
485a5d70:	7201      	cmpi	v0,1
485a5d72:	6103      	btnez	485a5d7a <com_start_key_tone+0x16>
485a5d74:	b204      	lw	v0,485a5d84 <com_start_key_tone+0x20>
485a5d76:	ea40      	jalr	v0
485a5d78:	6c00      	li	a0,0
485a5d7a:	6443      	restore	24,ra
485a5d7c:	e8a0      	jrc	ra
485a5d7e:	0000      	addiu	s0,sp,0
485a5d80:	999c      	lw	a0,112(s1)
485a5d82:	9fc1      	lw	a2,4(a3)
485a5d84:	5cad      	sltiu	a0,173
485a5d86:	485a      	addiu	s0,90

485a5d88 <g_bitstream_buffer>:
	...

485a5f88 <g_keytone_filelist>:
485a5f88:	656b 7479 6e6f 2e65 6370 006d 0000 0000     keytone.pcm.....
485a5f98:	6177 6e72 6e69 2e67 6370 006d 0000 0000     warning.pcm.....
485a5fa8:	7462 696c 6b6e 702e 6d63 0000 0000 0000     btlink.pcm......
485a5fb8:	7462 6e75 696c 6b6e 702e 6d63 0000 0000     btunlink.pcm....

485a5fc8 <com_app_deal_play_prev_next>:
485a5fc8:	64e3      	save	24,ra,s0


#ifdef ENABLE_TRUE_WIRELESS_STEREO
void __section__(".text.BANK_UI") com_app_deal_play_prev_next(void)
{
485a5fca:	b008      	lw	s0,485a5fe8 <com_app_deal_play_prev_next+0x20>
    g_prev_next_ch_start = 0;
    if(prev_next_ch_timer_id != -1)
    {
         kill_app_timer(prev_next_ch_timer_id);
485a5fcc:	b406      	lw	a0,485a5fe4 <com_app_deal_play_prev_next+0x1c>
485a5fce:	6b00      	li	v1,0
485a5fd0:	c460      	sb	v1,0(a0)
485a5fd2:	b207      	lw	v0,485a5fec <com_app_deal_play_prev_next+0x24>
485a5fd4:	ea40      	jalr	v0
485a5fd6:	8080      	lb	a0,0(s0)
485a5fd8:	6a01      	li	v0,1
        prev_next_ch_timer_id = -1;
485a5fda:	ea4b      	neg	v0
485a5fdc:	c040      	sb	v0,0(s0)
485a5fde:	6463      	restore	24,ra,s0
485a5fe0:	e8a0      	jrc	ra
485a5fe2:	0000      	addiu	s0,sp,0
485a5fe4:	9a31      	lw	s1,68(v0)
485a5fe6:	9fc1      	lw	a2,4(a3)
485a5fe8:	9a30      	lw	s1,64(v0)
485a5fea:	9fc1      	lw	a2,4(a3)
485a5fec:	5b01      	sltiu	v1,1
485a5fee:	488e      	addiu	s0,-114
	...
Disassembly of section BANK_UI_1_23:

485e5800 <discrete_led_init>:
485e5800:	64f4      	save	32,ra,s0-s1
485e5802:	b01d      	lw	s0,485e5874 <discrete_led_init+0x74>
485e5804:	e840      	jalr	s0
485e5806:	6c7c      	li	a0,124
485e5808:	ea11      	zeb	v0
485e580a:	5a01      	sltiu	v0,1
485e580c:	b319      	lw	v1,485e5870 <discrete_led_init+0x70>
485e580e:	6758      	move	v0,t8
485e5810:	c340      	sb	v0,0(v1)
485e5812:	6900      	li	s1,0
485e5814:	b519      	lw	a1,485e5878 <discrete_led_init+0x78>
485e5816:	b31a      	lw	v1,485e587c <discrete_led_init+0x7c>
485e5818:	3424      	sll	a0,s1,1
485e581a:	3628      	sll	a2,s1,2
485e581c:	e6b9      	addu	a2,a1
485e581e:	6a01      	li	v0,1
485e5820:	ea4b      	neg	v0
485e5822:	e475      	addu	a1,a0,v1
485e5824:	a580      	lbu	a0,0(a1)
485e5826:	c642      	sb	v0,2(a2)
485e5828:	6b07      	li	v1,7
485e582a:	a640      	lbu	v0,0(a2)
485e582c:	6808      	li	s0,8
485e582e:	67e3      	move	a3,v1
485e5830:	e80b      	neg	s0
485e5832:	ef8c      	and	a3,a0
485e5834:	a5a1      	lbu	a1,1(a1)
485e5836:	ea0c      	and	v0,s0
485e5838:	eaed      	or	v0,a3
485e583a:	eb4c      	and	v1,v0
485e583c:	37ac      	sll	a3,a1,3
485e583e:	ebed      	or	v1,a3
485e5840:	a6e1      	lbu	a3,1(a2)
485e5842:	c640      	sb	v0,0(a2)
485e5844:	c660      	sb	v1,0(a2)
485e5846:	6b19      	li	v1,25
485e5848:	ea6b      	neg	v0,v1
485e584a:	ef0c      	and	a3,s0
485e584c:	4268      	addiu	v1,v0,-8
485e584e:	ef4c      	and	a3,v0
485e5850:	ef6c      	and	a3,v1
485e5852:	b20c      	lw	v0,485e5880 <discrete_led_init+0x80>
485e5854:	c6e1      	sb	a3,1(a2)
485e5856:	ec11      	zeb	a0
485e5858:	ed11      	zeb	a1
485e585a:	6e00      	li	a2,0
485e585c:	ea40      	jalr	v0
485e585e:	6f06      	li	a3,6
485e5860:	4181      	addiu	a0,s1,1
485e5862:	6724      	move	s1,a0
485e5864:	e911      	zeb	s1
485e5866:	5902      	sltiu	s1,2
485e5868:	61d5      	btnez	485e5814 <discrete_led_init+0x14>
485e586a:	6474      	restore	32,ra,s0-s1
485e586c:	e8a0      	jrc	ra
485e586e:	0000      	addiu	s0,sp,0
485e5870:	a194      	lbu	a0,20(s1)
485e5872:	9fc1      	lw	a2,4(a3)
485e5874:	5ac5      	sltiu	v0,197
485e5876:	4846      	addiu	s0,70
485e5878:	a18c      	lbu	a0,12(s1)
485e587a:	9fc1      	lw	a2,4(a3)
485e587c:	5a04      	sltiu	v0,4
485e587e:	485e      	addiu	s0,94
485e5880:	e90d      	or	s1,s0
485e5882:	bfc1      	lwu	a2,4(a3)

485e5884 <discrete_led_set>:
485e5884:	f00c 64f6 	save	a0-a2,48,ra,s0-s1
485e5888:	6764      	move	v1,a0
485e588a:	eb11      	zeb	v1
485e588c:	6725      	move	s1,a1
485e588e:	5b02      	sltiu	v1,2
485e5890:	e911      	zeb	s1
485e5892:	6056      	bteqz	485e5940 <.LBE2>
485e5894:	7102      	cmpi	s1,2
485e5896:	6102      	btnez	485e589c <discrete_led_set+0x18>
485e5898:	2e01      	bnez	a2,485e589c <discrete_led_set+0x18>
485e589a:	6901      	li	s1,1
485e589c:	b22a      	lw	v0,485e5944 <.LBE2+0x4>
485e589e:	3568      	sll	a1,v1,2
485e58a0:	e541      	addu	s0,a1,v0
485e58a2:	a0a1      	lbu	a1,1(s0)
485e58a4:	6e19      	li	a2,25
485e58a6:	eccb      	neg	a0,a2
485e58a8:	6f03      	li	a3,3
485e58aa:	ed8c      	and	a1,a0
485e58ac:	ef2c      	and	a3,s1
485e58ae:	8082      	lb	a0,2(s0)
485e58b0:	33ec      	sll	v1,a3,3
485e58b2:	ed6d      	or	a1,v1
485e58b4:	ea8f      	not	v0,a0
485e58b6:	c0a1      	sb	a1,1(s0)
485e58b8:	2205      	beqz	v0,485e58c4 <discrete_led_set+0x40>
485e58ba:	b224      	lw	v0,485e5948 <.LBE2+0x8>
485e58bc:	eac0      	jalrc	v0
485e58be:	6c01      	li	a0,1
485e58c0:	eb8b      	neg	v1,a0
485e58c2:	c062      	sb	v1,2(s0)
485e58c4:	a081      	lbu	a0,1(s0)
485e58c6:	2913      	bnez	s1,485e58ee <discrete_led_set+0x6a>
485e58c8:	3696      	srl	a2,a0,5
485e58ca:	6f01      	li	a3,1
485e58cc:	eeec      	and	a2,a3
485e58ce:	2638      	beqz	a2,485e5940 <.LBE2>
485e58d0:	a060      	lbu	v1,0(s0)
485e58d2:	6f21      	li	a3,33
485e58d4:	eeeb      	neg	a2,a3
485e58d6:	67a3      	move	a1,v1
485e58d8:	ee8c      	and	a2,a0
485e58da:	ed11      	zeb	a1
485e58dc:	6c07      	li	a0,7
485e58de:	b21c      	lw	v0,485e594c <.LBE2+0xc>
485e58e0:	c0c1      	sb	a2,1(s0)
485e58e2:	ec6c      	and	a0,v1
485e58e4:	35ae      	srl	a1,3
485e58e6:	6e02      	li	a2,2
485e58e8:	ea40      	jalr	v0
485e58ea:	6f06      	li	a3,6
485e58ec:	1029      	b	485e5940 <.LBE2>
485e58ee:	3296      	srl	v0,a0,5
485e58f0:	6b01      	li	v1,1
485e58f2:	ea6c      	and	v0,v1
485e58f4:	2a0d      	bnez	v0,485e5910 <discrete_led_set+0x8c>
485e58f6:	a0c0      	lbu	a2,0(s0)
485e58f8:	4a20      	addiu	v0,32
485e58fa:	ea8d      	or	v0,a0
485e58fc:	67a6      	move	a1,a2
485e58fe:	c041      	sb	v0,1(s0)
485e5900:	ed11      	zeb	a1
485e5902:	6c07      	li	a0,7
485e5904:	b212      	lw	v0,485e594c <.LBE2+0xc>
485e5906:	eccc      	and	a0,a2
485e5908:	35ae      	srl	a1,3
485e590a:	67c3      	move	a2,v1
485e590c:	ea40      	jalr	v0
485e590e:	6f06      	li	a3,6
485e5910:	7102      	cmpi	s1,2
485e5912:	6116      	btnez	485e5940 <.LBE2>

485e5914 <.LBB2>:
485e5914:	960e      	lw	a2,56(sp)
485e5916:	677d      	move	v1,sp
485e5918:	a6a0      	lbu	a1,0(a2)
485e591a:	6f01      	li	a3,1
485e591c:	c3b0      	sb	a1,16(v1)
485e591e:	c3f1      	sb	a3,17(v1)
485e5920:	940e      	lw	a0,56(sp)
485e5922:	950e      	lw	a1,56(sp)
485e5924:	ac41      	lhu	v0,2(a0)
485e5926:	67dd      	move	a2,sp
485e5928:	ce49      	sh	v0,18(a2)
485e592a:	ade2      	lhu	a3,4(a1)
485e592c:	b409      	lw	a0,485e5950 <.LBE2+0x10>
485e592e:	677d      	move	v1,sp
485e5930:	b209      	lw	v0,485e5954 <.LBE2+0x14>
485e5932:	d406      	sw	a0,24(sp)
485e5934:	cbea      	sh	a3,20(v1)
485e5936:	f71f 6c03 	li	a0,65283
485e593a:	ea40      	jalr	v0
485e593c:	0504      	addiu	a1,sp,16
485e593e:	c042      	sb	v0,2(s0)

485e5940 <.LBE2>:
485e5940:	6476      	restore	48,ra,s0-s1
485e5942:	e8a0      	jrc	ra
485e5944:	a18c      	lbu	a0,12(s1)
485e5946:	9fc1      	lw	a2,4(a3)
485e5948:	5b01      	sltiu	v1,1
485e594a:	488e      	addiu	s0,-114
485e594c:	e90d      	or	s1,s0
485e594e:	bfc1      	lwu	a2,4(a3)
485e5950:	0e39      	la	a2,485e5a34 <SPEAKER_CONTROL_ENABLE+0x2c>
485e5952:	bfc1      	lwu	a2,4(a3)
485e5954:	594d      	sltiu	s1,77
485e5956:	488e      	addiu	s0,-114

485e5958 <discrete_led_low_power>:
485e5958:	64e3      	save	24,ra,s0
485e595a:	b013      	lw	s0,485e59a4 <discrete_led_low_power+0x4c>
485e595c:	e840      	jalr	s0
485e595e:	6c7c      	li	a0,124
485e5960:	ea11      	zeb	v0
485e5962:	5a01      	sltiu	v0,1
485e5964:	b30f      	lw	v1,485e59a0 <discrete_led_low_power+0x48>
485e5966:	6758      	move	v0,t8
485e5968:	c340      	sb	v0,0(v1)
485e596a:	6800      	li	s0,0
485e596c:	b20f      	lw	v0,485e59a8 <discrete_led_low_power+0x50>
485e596e:	3308      	sll	v1,s0,2
485e5970:	e351      	addu	a0,v1,v0
485e5972:	a4e1      	lbu	a3,1(a0)
485e5974:	6e01      	li	a2,1
485e5976:	35f6      	srl	a1,a3,5
485e5978:	edcc      	and	a1,a2
485e597a:	250a      	beqz	a1,485e5990 <discrete_led_low_power+0x38>
485e597c:	a4c0      	lbu	a2,0(a0)
485e597e:	b20c      	lw	v0,485e59ac <discrete_led_low_power+0x54>
485e5980:	67a6      	move	a1,a2
485e5982:	ed11      	zeb	a1
485e5984:	6c07      	li	a0,7
485e5986:	eccc      	and	a0,a2
485e5988:	35ae      	srl	a1,3
485e598a:	6e02      	li	a2,2
485e598c:	ea40      	jalr	v0
485e598e:	6f06      	li	a3,6
485e5990:	4081      	addiu	a0,s0,1
485e5992:	6704      	move	s0,a0
485e5994:	e811      	zeb	s0
485e5996:	5802      	sltiu	s0,2
485e5998:	61e9      	btnez	485e596c <discrete_led_low_power+0x14>
485e599a:	6463      	restore	24,ra,s0
485e599c:	e8a0      	jrc	ra
485e599e:	0000      	addiu	s0,sp,0
485e59a0:	a194      	lbu	a0,20(s1)
485e59a2:	9fc1      	lw	a2,4(a3)
485e59a4:	5ac5      	sltiu	v0,197
485e59a6:	4846      	addiu	s0,70
485e59a8:	a18c      	lbu	a0,12(s1)
485e59aa:	9fc1      	lw	a2,4(a3)
485e59ac:	e90d      	or	s1,s0
485e59ae:	bfc1      	lwu	a2,4(a3)

485e59b0 <discrete_led_restore>:
485e59b0:	64e3      	save	24,ra,s0
485e59b2:	b012      	lw	s0,485e59f8 <discrete_led_restore+0x48>
485e59b4:	e840      	jalr	s0
485e59b6:	6c7c      	li	a0,124
485e59b8:	ea11      	zeb	v0
485e59ba:	5a01      	sltiu	v0,1
485e59bc:	b30e      	lw	v1,485e59f4 <discrete_led_restore+0x44>
485e59be:	6758      	move	v0,t8
485e59c0:	c340      	sb	v0,0(v1)
485e59c2:	6800      	li	s0,0
485e59c4:	b70e      	lw	a3,485e59fc <discrete_led_restore+0x4c>
485e59c6:	3608      	sll	a2,s0,2
485e59c8:	e6ed      	addu	v1,a2,a3
485e59ca:	a3a1      	lbu	a1,1(v1)
485e59cc:	6e01      	li	a2,1
485e59ce:	34b6      	srl	a0,a1,5
485e59d0:	eccc      	and	a0,a2
485e59d2:	2409      	beqz	a0,485e59e6 <discrete_led_restore+0x36>
485e59d4:	a3a0      	lbu	a1,0(v1)
485e59d6:	6c07      	li	a0,7
485e59d8:	6765      	move	v1,a1
485e59da:	eb11      	zeb	v1
485e59dc:	b209      	lw	v0,485e5a00 <discrete_led_restore+0x50>
485e59de:	ecac      	and	a0,a1
485e59e0:	6f06      	li	a3,6
485e59e2:	ea40      	jalr	v0
485e59e4:	356e      	srl	a1,v1,3
485e59e6:	4081      	addiu	a0,s0,1
485e59e8:	6704      	move	s0,a0
485e59ea:	e811      	zeb	s0
485e59ec:	5802      	sltiu	s0,2
485e59ee:	61ea      	btnez	485e59c4 <discrete_led_restore+0x14>
485e59f0:	6463      	restore	24,ra,s0
485e59f2:	e8a0      	jrc	ra
485e59f4:	a194      	lbu	a0,20(s1)
485e59f6:	9fc1      	lw	a2,4(a3)
485e59f8:	5ac5      	sltiu	v0,197
485e59fa:	4846      	addiu	s0,70
485e59fc:	a18c      	lbu	a0,12(s1)
485e59fe:	9fc1      	lw	a2,4(a3)
485e5a00:	e90d      	or	s1,s0
485e5a02:	bfc1      	lwu	a2,4(a3)

485e5a04 <discrete_led_cfg>:
485e5a04:	0302 0202                                   ....

485e5a08 <SPEAKER_CONTROL_ENABLE>:
485e5a08:	64c3      	save	24,ra
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_CONTROL_ENABLE(void)
{
485e5a0a:	b316      	lw	v1,485e5a60 <SPEAKER_CONTROL_ENABLE+0x58>
    if (g_app_info_state.aout_mode == AO_SOURCE_DAC)
485e5a0c:	a342      	lbu	v0,2(v1)
485e5a0e:	2a17      	bnez	v0,485e5a3e <SPEAKER_CONTROL_ENABLE+0x36>
485e5a10:	a348      	lbu	v0,8(v1)
485e5a12:	2a1d      	bnez	v0,485e5a4e <SPEAKER_CONTROL_ENABLE+0x46>
485e5a14:	b414      	lw	a0,485e5a64 <SPEAKER_CONTROL_ENABLE+0x5c>
    {
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            act_writel(act_readl(SPEAKER_A_PA_EN_GPIOOUT) | SPEAKER_A_PA_EN_PIN, SPEAKER_A_PA_EN_GPIOOUT);
485e5a16:	b715      	lw	a3,485e5a68 <SPEAKER_CONTROL_ENABLE+0x60>
485e5a18:	9ca0      	lw	a1,0(a0)
485e5a1a:	b615      	lw	a2,485e5a6c <SPEAKER_CONTROL_ENABLE+0x64>
            act_writel(act_readl(SPEAKER_A_PA_BST_EN_GPIOOUT) | SPEAKER_A_PA_BST_EN_PIN, SPEAKER_A_PA_BST_EN_GPIOOUT);
485e5a1c:	eded      	or	a1,a3
485e5a1e:	dca0      	sw	a1,0(a0)
485e5a20:	9c60      	lw	v1,0(a0)
485e5a22:	6d40      	li	a1,64
            act_writel(act_readl(SPEAKER_A_PA_D_AB_GPIOOUT) | SPEAKER_A_PA_D_AB_PIN, SPEAKER_A_PA_D_AB_GPIOOUT);
485e5a24:	ebcd      	or	v1,a2
485e5a26:	dc60      	sw	v1,0(a0)
485e5a28:	9c40      	lw	v0,0(a0)
485e5a2a:	b312      	lw	v1,485e5a70 <SPEAKER_CONTROL_ENABLE+0x68>

            #if (SPEAKER_A_PA_BST_EN_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_BST_EN_GPIODATA) | SPEAKER_A_PA_BST_EN_PIN),
485e5a2c:	eaad      	or	v0,a1
485e5a2e:	dc40      	sw	v0,0(a0)
485e5a30:	9be0      	lw	a3,0(v1)
485e5a32:	efcd      	or	a3,a2
485e5a34:	dbe0      	sw	a3,0(v1)
485e5a36:	9b80      	lw	a0,0(v1)
                    SPEAKER_A_PA_BST_EN_GPIODATA);
            #else
            act_writel((act_readl(SPEAKER_A_PA_BST_EN_GPIODATA) & (~SPEAKER_A_PA_BST_EN_PIN)),
                    SPEAKER_A_PA_BST_EN_GPIODATA);
            #endif

            #if (SPEAKER_A_PA_D_AB_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_D_AB_GPIODATA) | SPEAKER_A_PA_D_AB_PIN), SPEAKER_A_PA_D_AB_GPIODATA);
485e5a38:	ecad      	or	a0,a1
485e5a3a:	db80      	sw	a0,0(v1)
485e5a3c:	1008      	b	485e5a4e <SPEAKER_CONTROL_ENABLE+0x46>
485e5a3e:	7201      	cmpi	v0,1
            #else
            act_writel((act_readl(SPEAKER_A_PA_D_AB_GPIODATA) & (~SPEAKER_A_PA_D_AB_PIN)), SPEAKER_A_PA_D_AB_GPIODATA);
            #endif
        }
    }
    else if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
485e5a40:	6106      	btnez	485e5a4e <SPEAKER_CONTROL_ENABLE+0x46>
485e5a42:	b20d      	lw	v0,485e5a74 <SPEAKER_CONTROL_ENABLE+0x6c>
    {
        //install extern speaker driver 安装驱动时使能控制
        sys_drv_install(DRV_GROUP_CCD, 0, "ccd.drv");
485e5a44:	6c09      	li	a0,9
485e5a46:	6d00      	li	a1,0
485e5a48:	0e04      	la	a2,485e5a58 <SPEAKER_CONTROL_ENABLE+0x50>
485e5a4a:	ea40      	jalr	v0
485e5a4c:	6f0a      	li	a3,10
485e5a4e:	b605      	lw	a2,485e5a60 <SPEAKER_CONTROL_ENABLE+0x58>
    }
    else
    {
        ; //nothing
    }

    g_app_info_state.outer_pa_on = FALSE;
485e5a50:	6c00      	li	a0,0
485e5a52:	c691      	sb	a0,17(a2)
485e5a54:	6443      	restore	24,ra
485e5a56:	e8a0      	jrc	ra
485e5a58:	6363      	addiu	sp,792
485e5a5a:	2e64      	bnez	a2,485e5b24 <SPEAKER_ON+0x3c>
485e5a5c:	7264      	cmpi	v0,100
485e5a5e:	0076      	addiu	s0,sp,472
485e5a60:	a0c0      	lbu	a2,0(s0)
485e5a62:	9fc1      	lw	a2,4(a3)
485e5a64:	0000      	addiu	s0,sp,0
485e5a66:	c009      	sb	s0,9(s0)
485e5a68:	0000      	addiu	s0,sp,0
485e5a6a:	0020      	addiu	s0,sp,128
485e5a6c:	0000      	addiu	s0,sp,0
485e5a6e:	0040      	addiu	s0,sp,256
485e5a70:	0008      	addiu	s0,sp,32
485e5a72:	c009      	sb	s0,9(s0)
485e5a74:	e901      	sdbbp	8
485e5a76:	bfc1      	lwu	a2,4(a3)

485e5a78 <SPEAKER_CONTROL_DISABLE>:
485e5a78:	64f4      	save	32,ra,s0-s1
}

/******************************************************************************/
/*!
 * \par  Description:
 *    关闭 SPEAKER，断电
 * \param[in]    none
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_CONTROL_DISABLE(void)
{
485e5a7a:	b216      	lw	v0,485e5ad0 <SPEAKER_CONTROL_DISABLE+0x58>
    if (g_app_info_state.aout_mode == AO_SOURCE_DAC)
485e5a7c:	a2c2      	lbu	a2,2(v0)
485e5a7e:	2e1d      	bnez	a2,485e5aba <SPEAKER_CONTROL_DISABLE+0x42>
485e5a80:	a248      	lbu	v0,8(v0)
485e5a82:	2a23      	bnez	v0,485e5aca <SPEAKER_CONTROL_DISABLE+0x52>
485e5a84:	b014      	lw	s0,485e5ad4 <SPEAKER_CONTROL_DISABLE+0x5c>
    {
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            #if (SPEAKER_A_PA_EN_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) & (~SPEAKER_A_PA_EN_PIN)), SPEAKER_A_PA_EN_GPIODATA);
485e5a86:	b115      	lw	s1,485e5ad8 <SPEAKER_CONTROL_DISABLE+0x60>
485e5a88:	9860      	lw	v1,0(s0)
485e5a8a:	b215      	lw	v0,485e5adc <SPEAKER_CONTROL_DISABLE+0x64>
            #else
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) | SPEAKER_A_PA_EN_PIN), SPEAKER_A_PA_EN_GPIODATA);
            #endif

            sys_os_time_dly(5);
485e5a8c:	eb2c      	and	v1,s1
485e5a8e:	67a6      	move	a1,a2
485e5a90:	d860      	sw	v1,0(s0)
485e5a92:	6c05      	li	a0,5
485e5a94:	ea40      	jalr	v0
485e5a96:	6f31      	li	a3,49
485e5a98:	9880      	lw	a0,0(s0)

            #if (SPEAKER_A_PA_BST_EN_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_BST_EN_GPIODATA) & (~SPEAKER_A_PA_BST_EN_PIN)),
485e5a9a:	b512      	lw	a1,485e5ae0 <SPEAKER_CONTROL_DISABLE+0x68>
485e5a9c:	6e41      	li	a2,65
                    SPEAKER_A_PA_BST_EN_GPIODATA);
            #else
            act_writel((act_readl(SPEAKER_A_PA_BST_EN_GPIODATA) | SPEAKER_A_PA_BST_EN_PIN),
                    SPEAKER_A_PA_BST_EN_GPIODATA);
            #endif

            act_writel(act_readl(SPEAKER_A_PA_EN_GPIOOUT) & (~SPEAKER_A_PA_EN_PIN), SPEAKER_A_PA_EN_GPIOOUT);
            act_writel(act_readl(SPEAKER_A_PA_BST_EN_GPIOOUT) & (~SPEAKER_A_PA_BST_EN_PIN),
                    SPEAKER_A_PA_BST_EN_GPIOOUT);
            act_writel(act_readl(SPEAKER_A_PA_D_AB_GPIOOUT) & (~SPEAKER_A_PA_D_AB_PIN), SPEAKER_A_PA_D_AB_GPIOOUT);
485e5a9e:	ecac      	and	a0,a1
485e5aa0:	d880      	sw	a0,0(s0)
485e5aa2:	b411      	lw	a0,485e5ae4 <SPEAKER_CONTROL_DISABLE+0x6c>
485e5aa4:	ebcb      	neg	v1,a2
485e5aa6:	9c40      	lw	v0,0(a0)
485e5aa8:	ea2c      	and	v0,s1
485e5aaa:	dc40      	sw	v0,0(a0)
485e5aac:	9ce0      	lw	a3,0(a0)
485e5aae:	efac      	and	a3,a1
485e5ab0:	dce0      	sw	a3,0(a0)
485e5ab2:	9ca0      	lw	a1,0(a0)
485e5ab4:	ed6c      	and	a1,v1
485e5ab6:	dca0      	sw	a1,0(a0)
485e5ab8:	1008      	b	485e5aca <SPEAKER_CONTROL_DISABLE+0x52>
485e5aba:	7601      	cmpi	a2,1
        }
    }
    else if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
485e5abc:	6106      	btnez	485e5aca <SPEAKER_CONTROL_DISABLE+0x52>
485e5abe:	6d00      	li	a1,0
    {
        // unstall extern speaker driver 卸载驱动时断电
        sys_drv_uninstall(DRV_GROUP_CCD);
485e5ac0:	b207      	lw	v0,485e5adc <SPEAKER_CONTROL_DISABLE+0x64>
485e5ac2:	6c09      	li	a0,9
485e5ac4:	67c5      	move	a2,a1
485e5ac6:	ea40      	jalr	v0
485e5ac8:	6f0b      	li	a3,11
485e5aca:	6474      	restore	32,ra,s0-s1
    }
    else
    {
        ; //nothing
    }

}
485e5acc:	e8a0      	jrc	ra
485e5ace:	0000      	addiu	s0,sp,0
485e5ad0:	a0c0      	lbu	a2,0(s0)
485e5ad2:	9fc1      	lw	a2,4(a3)
485e5ad4:	0008      	addiu	s0,sp,32
485e5ad6:	c009      	sb	s0,9(s0)
485e5ad8:	ffff      	daddiu	a3,sp,124
485e5ada:	ffdf      	daddiu	a2,sp,124
485e5adc:	e901      	sdbbp	8
485e5ade:	bfc1      	lwu	a2,4(a3)
485e5ae0:	ffff      	daddiu	a3,sp,124
485e5ae2:	ffbf      	daddiu	a1,sp,124
485e5ae4:	0000      	addiu	s0,sp,0
485e5ae6:	c009      	sb	s0,9(s0)

485e5ae8 <SPEAKER_ON>:
485e5ae8:	64c3      	save	24,ra

/******************************************************************************/
/*!
 * \par  Description:
 *    打开 SPEAKER
 * \param[in]    none
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_ON(void)
{
485e5aea:	b310      	lw	v1,485e5b28 <SPEAKER_ON+0x40>
    if (g_app_info_state.outer_pa_on == TRUE)
485e5aec:	a351      	lbu	v0,17(v1)
485e5aee:	7201      	cmpi	v0,1
485e5af0:	6019      	bteqz	485e5b24 <SPEAKER_ON+0x3c>
485e5af2:	a3c2      	lbu	a2,2(v1)
    {
        return ;
    }

    if (g_app_info_state.aout_mode == AO_SOURCE_DAC)
485e5af4:	2e0c      	bnez	a2,485e5b0e <SPEAKER_ON+0x26>
485e5af6:	a388      	lbu	a0,8(v1)
485e5af8:	2c12      	bnez	a0,485e5b1e <SPEAKER_ON+0x36>
485e5afa:	b50d      	lw	a1,485e5b2c <SPEAKER_ON+0x44>
    {
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            #if (SPEAKER_A_PA_EN_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) | SPEAKER_A_PA_EN_PIN), SPEAKER_A_PA_EN_GPIODATA);
485e5afc:	b30d      	lw	v1,485e5b30 <SPEAKER_ON+0x48>
485e5afe:	9de0      	lw	a3,0(a1)
485e5b00:	b20d      	lw	v0,485e5b34 <SPEAKER_ON+0x4c>
            #else
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) & (~SPEAKER_A_PA_EN_PIN)), SPEAKER_A_PA_EN_GPIODATA);
            #endif

            //外部PA上电BYPASS延时
            sys_os_time_dly(SPEAKER_A_PA_BYPASS_TIME);
485e5b02:	ef6d      	or	a3,v1
485e5b04:	dde0      	sw	a3,0(a1)
485e5b06:	6c0f      	li	a0,15
485e5b08:	67a6      	move	a1,a2
485e5b0a:	6f31      	li	a3,49
485e5b0c:	1007      	b	485e5b1c <SPEAKER_ON+0x34>
485e5b0e:	7601      	cmpi	a2,1
        }
    }
    else if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
485e5b10:	6106      	btnez	485e5b1e <SPEAKER_ON+0x36>
485e5b12:	6c00      	li	a0,0
    {
        ccd_i2s_pa_poweron();
485e5b14:	b209      	lw	v0,485e5b38 <SPEAKER_ON+0x50>
485e5b16:	67a4      	move	a1,a0
485e5b18:	67c4      	move	a2,a0
485e5b1a:	67e4      	move	a3,a0
485e5b1c:	eac0      	jalrc	v0
485e5b1e:	b603      	lw	a2,485e5b28 <SPEAKER_ON+0x40>
    }
    else
    {
        ; //nothing
    }

    g_app_info_state.outer_pa_on = TRUE;
485e5b20:	6a01      	li	v0,1
485e5b22:	c651      	sb	v0,17(a2)
485e5b24:	6443      	restore	24,ra
}
485e5b26:	e8a0      	jrc	ra
485e5b28:	a0c0      	lbu	a2,0(s0)
485e5b2a:	9fc1      	lw	a2,4(a3)
485e5b2c:	0008      	addiu	s0,sp,32
485e5b2e:	c009      	sb	s0,9(s0)
485e5b30:	0000      	addiu	s0,sp,0
485e5b32:	0020      	addiu	s0,sp,128
485e5b34:	e901      	sdbbp	8
485e5b36:	bfc1      	lwu	a2,4(a3)
485e5b38:	e919      	multu	s1,s0
485e5b3a:	bfc1      	lwu	a2,4(a3)

485e5b3c <SPEAKER_OFF>:
485e5b3c:	64c3      	save	24,ra

/******************************************************************************/
/*!
 * \par  Description:
 *    关闭 SPEAKER
 * \param[in]    none
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_OFF(void)
{
485e5b3e:	b30e      	lw	v1,485e5b74 <SPEAKER_OFF+0x38>
    if (g_app_info_state.aout_mode == AO_SOURCE_DAC)
485e5b40:	a342      	lbu	v0,2(v1)
485e5b42:	2a08      	bnez	v0,485e5b54 <SPEAKER_OFF+0x18>
485e5b44:	a348      	lbu	v0,8(v1)
485e5b46:	2a11      	bnez	v0,485e5b6a <SPEAKER_OFF+0x2e>
485e5b48:	b50c      	lw	a1,485e5b78 <SPEAKER_OFF+0x3c>
    {
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            #if (SPEAKER_A_PA_EN_LEVEL == ENABLE_LEVEL_HIGH)
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) & (~SPEAKER_A_PA_EN_PIN)), SPEAKER_A_PA_EN_GPIODATA);
485e5b4a:	b40d      	lw	a0,485e5b7c <SPEAKER_OFF+0x40>
485e5b4c:	9d60      	lw	v1,0(a1)
485e5b4e:	eb8c      	and	v1,a0
485e5b50:	dd60      	sw	v1,0(a1)
485e5b52:	100b      	b	485e5b6a <SPEAKER_OFF+0x2e>
485e5b54:	7201      	cmpi	v0,1
            #else
            act_writel((act_readl(SPEAKER_A_PA_EN_GPIODATA) | SPEAKER_A_PA_EN_PIN), SPEAKER_A_PA_EN_GPIODATA);
            #endif
        }
    }
    else if (g_app_info_state.aout_mode == AO_SOURCE_I2S)
485e5b56:	6109      	btnez	485e5b6a <SPEAKER_OFF+0x2e>
485e5b58:	a3d1      	lbu	a2,17(v1)
    {
        if (g_app_info_state.outer_pa_on == TRUE)
485e5b5a:	7601      	cmpi	a2,1
485e5b5c:	6106      	btnez	485e5b6a <SPEAKER_OFF+0x2e>
485e5b5e:	6c00      	li	a0,0
        {
            ccd_i2s_pa_powerdown();
485e5b60:	b208      	lw	v0,485e5b80 <SPEAKER_OFF+0x44>
485e5b62:	67a4      	move	a1,a0
485e5b64:	67c4      	move	a2,a0
485e5b66:	ea40      	jalr	v0
485e5b68:	6f01      	li	a3,1
485e5b6a:	b703      	lw	a3,485e5b74 <SPEAKER_OFF+0x38>
        }
    }
    else
    {
        ; //nothing
    }

    g_app_info_state.outer_pa_on = FALSE;
485e5b6c:	6d00      	li	a1,0
485e5b6e:	c7b1      	sb	a1,17(a3)
485e5b70:	6443      	restore	24,ra
485e5b72:	e8a0      	jrc	ra
485e5b74:	a0c0      	lbu	a2,0(s0)
485e5b76:	9fc1      	lw	a2,4(a3)
485e5b78:	0008      	addiu	s0,sp,32
485e5b7a:	c009      	sb	s0,9(s0)
485e5b7c:	ffff      	daddiu	a3,sp,124
485e5b7e:	ffdf      	daddiu	a2,sp,124
485e5b80:	e919      	multu	s1,s0
485e5b82:	bfc1      	lwu	a2,4(a3)

485e5b84 <IS_SPEAKER_ON>:
485e5b84:	b202      	lw	v0,485e5b8c <IS_SPEAKER_ON+0x8>
}

/******************************************************************************/
/*!
 * \par  Description:
 *    SPEAKER 是否开着
 * \param[in]    none
 * \param[out]   none
 * \return       bool    TRUE表示开，FALSE表示关
 *******************************************************************************/
bool IS_SPEAKER_ON(void)
{
    return g_app_info_state.outer_pa_on;
485e5b86:	e820      	jr	ra
}
485e5b88:	a251      	lbu	v0,17(v0)
485e5b8a:	0000      	addiu	s0,sp,0
485e5b8c:	a0c0      	lbu	a2,0(s0)
485e5b8e:	9fc1      	lw	a2,4(a3)

485e5b90 <SPEAKER_D_AB_SWITCH>:
485e5b90:	b30a      	lw	v1,485e5bb8 <SPEAKER_D_AB_SWITCH+0x28>

/******************************************************************************/
/*!
 * \par  Description:
 *    SPEAKER D/AB模式切换
 * \param[in]    type 0表示D类功放，1表示AB类功放
 * \param[out]   none
 * \return       none
 *******************************************************************************/
void SPEAKER_D_AB_SWITCH(uint8 type)
{
    if (g_app_info_state.aout_mode == AO_SOURCE_DAC)
485e5b92:	ec11      	zeb	a0
485e5b94:	a342      	lbu	v0,2(v1)
485e5b96:	2a0e      	bnez	v0,485e5bb4 <SPEAKER_D_AB_SWITCH+0x24>
485e5b98:	a3a8      	lbu	a1,8(v1)
485e5b9a:	2d0c      	bnez	a1,485e5bb4 <SPEAKER_D_AB_SWITCH+0x24>
485e5b9c:	b508      	lw	a1,485e5bbc <SPEAKER_D_AB_SWITCH+0x2c>
485e5b9e:	2c05      	bnez	a0,485e5baa <SPEAKER_D_AB_SWITCH+0x1a>
    {
        if (get_headphone_state() == HEADPHONE_STATE_NULL)
        {
            #if (SPEAKER_A_PA_D_AB_LEVEL == ENABLE_LEVEL_HIGH)
            if (type == SPEAKER_A_PA_TYPE_D)
485e5ba0:	9d80      	lw	a0,0(a1)
            {
                act_writel((act_readl(SPEAKER_A_PA_D_AB_GPIODATA) | SPEAKER_A_PA_D_AB_PIN), SPEAKER_A_PA_D_AB_GPIODATA);
485e5ba2:	6b40      	li	v1,64
485e5ba4:	ec6d      	or	a0,v1
485e5ba6:	dd80      	sw	a0,0(a1)
485e5ba8:	e8a0      	jrc	ra
485e5baa:	9dc0      	lw	a2,0(a1)
            }
            else
            {
                act_writel((act_readl(SPEAKER_A_PA_D_AB_GPIODATA) & (~SPEAKER_A_PA_D_AB_PIN)),
485e5bac:	6a41      	li	v0,65
485e5bae:	ef4b      	neg	a3,v0
485e5bb0:	eeec      	and	a2,a3
485e5bb2:	ddc0      	sw	a2,0(a1)
485e5bb4:	e8a0      	jrc	ra
485e5bb6:	0000      	addiu	s0,sp,0
485e5bb8:	a0c0      	lbu	a2,0(s0)
485e5bba:	9fc1      	lw	a2,4(a3)
485e5bbc:	0008      	addiu	s0,sp,32
485e5bbe:	c009      	sb	s0,9(s0)

485e5bc0 <com_view_manager_init>:
485e5bc0:	64e3      	save	24,ra,s0
485e5bc2:	b00d      	lw	s0,485e5bf4 <com_view_manager_init+0x34>
485e5bc4:	b20d      	lw	v0,485e5bf8 <com_view_manager_init+0x38>
485e5bc6:	6790      	move	a0,s0
485e5bc8:	6d00      	li	a1,0
485e5bca:	6e30      	li	a2,48
485e5bcc:	ea40      	jalr	v0
485e5bce:	6f01      	li	a3,1
485e5bd0:	6b00      	li	v1,0
485e5bd2:	6c01      	li	a0,1
485e5bd4:	ec8b      	neg	a0
485e5bd6:	43a1      	addiu	a1,v1,1
485e5bd8:	3770      	sll	a3,v1,4
485e5bda:	6765      	move	v1,a1
485e5bdc:	eb11      	zeb	v1
485e5bde:	e719      	addu	a2,a3,s0
485e5be0:	5b03      	sltiu	v1,3
485e5be2:	c683      	sb	a0,3(a2)
485e5be4:	61f8      	btnez	485e5bd6 <com_view_manager_init+0x16>
485e5be6:	b306      	lw	v1,485e5bfc <com_view_manager_init+0x3c>
485e5be8:	6a00      	li	v0,0
485e5bea:	c380      	sb	a0,0(v1)
485e5bec:	db41      	sw	v0,4(v1)
485e5bee:	6463      	restore	24,ra,s0
485e5bf0:	e8a0      	jrc	ra
485e5bf2:	0000      	addiu	s0,sp,0
485e5bf4:	99ac      	lw	a1,48(s1)
485e5bf6:	9fc1      	lw	a2,4(a3)
485e5bf8:	e905      	break	8
485e5bfa:	bfc1      	lwu	a2,4(a3)
485e5bfc:	99dc      	lw	a2,112(s1)
485e5bfe:	9fc1      	lw	a2,4(a3)

485e5c00 <com_view_update_key_view>:
485e5c00:	b60c      	lw	a2,485e5c30 <com_view_update_key_view+0x30>
485e5c02:	a640      	lbu	v0,0(a2)
485e5c04:	5a03      	sltiu	v0,3
485e5c06:	6010      	bteqz	485e5c28 <com_view_update_key_view+0x28>
485e5c08:	6c00      	li	a0,0
485e5c0a:	67a2      	move	a1,v0
485e5c0c:	e58b      	subu	v0,a1,a0
485e5c0e:	b30a      	lw	v1,485e5c34 <com_view_update_key_view+0x34>
485e5c10:	3750      	sll	a3,v0,4
485e5c12:	e76d      	addu	v1,a3,v1
485e5c14:	a341      	lbu	v0,1(v1)
485e5c16:	7202      	cmpi	v0,2
485e5c18:	6002      	bteqz	485e5c1e <com_view_update_key_view+0x1e>
485e5c1a:	e820      	jr	ra
485e5c1c:	de61      	sw	v1,4(a2)
485e5c1e:	4461      	addiu	v1,a0,1
485e5c20:	6783      	move	a0,v1
485e5c22:	ec11      	zeb	a0
485e5c24:	ed83      	sltu	a1,a0
485e5c26:	60f2      	bteqz	485e5c0c <com_view_update_key_view+0xc>
485e5c28:	6c00      	li	a0,0
485e5c2a:	e820      	jr	ra
485e5c2c:	de81      	sw	a0,4(a2)
485e5c2e:	0000      	addiu	s0,sp,0
485e5c30:	99dc      	lw	a2,112(s1)
485e5c32:	9fc1      	lw	a2,4(a3)
485e5c34:	99ac      	lw	a1,48(s1)
485e5c36:	9fc1      	lw	a2,4(a3)

485e5c38 <com_view_remove>:
485e5c38:	64f6      	save	48,ra,s0-s1
485e5c3a:	b337      	lw	v1,485e5d14 <.LBE2+0x18>
485e5c3c:	ed11      	zeb	a1
485e5c3e:	d504      	sw	a1,16(sp)
485e5c40:	a3a0      	lbu	a1,0(v1)
485e5c42:	6a01      	li	v0,1
485e5c44:	5d03      	sltiu	a1,3
485e5c46:	ec11      	zeb	a0
485e5c48:	ea4b      	neg	v0
485e5c4a:	6061      	bteqz	485e5d0e <.LBE2+0x12>
485e5c4c:	6f00      	li	a3,0
485e5c4e:	e5eb      	subu	v0,a1,a3
485e5c50:	67c2      	move	a2,v0
485e5c52:	ee11      	zeb	a2
485e5c54:	b331      	lw	v1,485e5d18 <.LBE2+0x1c>
485e5c56:	32d0      	sll	v0,a2,4
485e5c58:	e269      	addu	v0,v1
485e5c5a:	a240      	lbu	v0,0(v0)
485e5c5c:	ea8e      	xor	v0,a0
485e5c5e:	220a      	beqz	v0,485e5c74 <com_view_remove+0x3c>
485e5c60:	4761      	addiu	v1,a3,1
485e5c62:	67e3      	move	a3,v1
485e5c64:	67c5      	move	a2,a1
485e5c66:	ef11      	zeb	a3
485e5c68:	ee11      	zeb	a2
485e5c6a:	eee3      	sltu	a2,a3
485e5c6c:	60f0      	bteqz	485e5c4e <com_view_remove+0x16>
485e5c6e:	6c01      	li	a0,1
485e5c70:	ea8b      	neg	v0,a0
485e5c72:	104d      	b	485e5d0e <.LBE2+0x12>
485e5c74:	e5cf      	subu	v1,a1,a2
485e5c76:	4341      	addiu	v0,v1,1
485e5c78:	ea11      	zeb	v0
485e5c7a:	d205      	sw	v0,20(sp)
485e5c7c:	9505      	lw	a1,20(sp)
485e5c7e:	6f00      	li	a3,0
485e5c80:	d706      	sw	a3,24(sp)
485e5c82:	252f      	beqz	a1,485e5ce2 <com_view_remove+0xaa>
485e5c84:	b124      	lw	s1,485e5d14 <.LBE2+0x18>
485e5c86:	b425      	lw	a0,485e5d18 <.LBE2+0x1c>
485e5c88:	a100      	lbu	s0,0(s1)
485e5c8a:	3510      	sll	a1,s0,4
485e5c8c:	e581      	addu	s0,a1,a0
485e5c8e:	9843      	lw	v0,12(s0)
485e5c90:	ea40      	jalr	v0
485e5c92:	6c01      	li	a0,1
485e5c94:	8083      	lb	a0,3(s0)
485e5c96:	ee8f      	not	a2,a0
485e5c98:	2602      	beqz	a2,485e5c9e <com_view_remove+0x66>
485e5c9a:	b221      	lw	v0,485e5d1c <.LBE2+0x20>
485e5c9c:	eac0      	jalrc	v0
485e5c9e:	b221      	lw	v0,485e5d20 <.LBE2+0x24>
485e5ca0:	6f01      	li	a3,1
485e5ca2:	6790      	move	a0,s0
485e5ca4:	6d00      	li	a1,0
485e5ca6:	ea40      	jalr	v0
485e5ca8:	6e10      	li	a2,16
485e5caa:	6f01      	li	a3,1
485e5cac:	efeb      	neg	a3
485e5cae:	c0e3      	sb	a3,3(s0)
485e5cb0:	a140      	lbu	v0,0(s1)
485e5cb2:	2203      	beqz	v0,485e5cba <com_view_remove+0x82>
485e5cb4:	426f      	addiu	v1,v0,-1
485e5cb6:	c160      	sb	v1,0(s1)
485e5cb8:	1003      	b	485e5cc0 <com_view_remove+0x88>
485e5cba:	6e01      	li	a2,1
485e5cbc:	eecb      	neg	a2
485e5cbe:	c1c0      	sb	a2,0(s1)
485e5cc0:	1af0 9700 	jal	485e5c00 <com_view_update_key_view>
485e5cc4:	6500      	nop
485e5cc6:	b514      	lw	a1,485e5d14 <.LBE2+0x18>
485e5cc8:	9d81      	lw	a0,4(a1)
485e5cca:	2404      	beqz	a0,485e5cd4 <com_view_remove+0x9c>
485e5ccc:	9c81      	lw	a0,4(a0)
485e5cce:	2402      	beqz	a0,485e5cd4 <com_view_remove+0x9c>
485e5cd0:	b215      	lw	v0,485e5d24 <.LBE2+0x28>
485e5cd2:	eac0      	jalrc	v0
485e5cd4:	9306      	lw	v1,24(sp)
485e5cd6:	9405      	lw	a0,20(sp)
485e5cd8:	43e1      	addiu	a3,v1,1
485e5cda:	ef11      	zeb	a3
485e5cdc:	ef83      	sltu	a3,a0
485e5cde:	d706      	sw	a3,24(sp)
485e5ce0:	61d1      	btnez	485e5c84 <com_view_remove+0x4c>
485e5ce2:	9604      	lw	a2,16(sp)
485e5ce4:	7601      	cmpi	a2,1
485e5ce6:	6112      	btnez	485e5d0c <.LBE2+0x10>
485e5ce8:	b50b      	lw	a1,485e5d14 <.LBE2+0x18>
485e5cea:	a500      	lbu	s0,0(a1)
485e5cec:	5803      	sltiu	s0,3
485e5cee:	600e      	bteqz	485e5d0c <.LBE2+0x10>
485e5cf0:	b60a      	lw	a2,485e5d18 <.LBE2+0x1c>
485e5cf2:	3010      	sll	s0,4
485e5cf4:	e0c1      	addu	s0,a2

485e5cf6 <.LBB2>:
485e5cf6:	b40d      	lw	a0,485e5d28 <.LBE2+0x2c>
485e5cf8:	a0e0      	lbu	a3,0(s0)
485e5cfa:	c4e0      	sb	a3,0(a0)

485e5cfc <.LBE2>:
485e5cfc:	9863      	lw	v1,12(s0)
485e5cfe:	eb40      	jalr	v1
485e5d00:	6c02      	li	a0,2
485e5d02:	8083      	lb	a0,3(s0)
485e5d04:	ea8f      	not	v0,a0
485e5d06:	2202      	beqz	v0,485e5d0c <.LBE2+0x10>
485e5d08:	b209      	lw	v0,485e5d2c <.LBE2+0x30>
485e5d0a:	eac0      	jalrc	v0
485e5d0c:	6a00      	li	v0,0
485e5d0e:	6476      	restore	48,ra,s0-s1
485e5d10:	e8a0      	jrc	ra
485e5d12:	0000      	addiu	s0,sp,0
485e5d14:	99dc      	lw	a2,112(s1)
485e5d16:	9fc1      	lw	a2,4(a3)
485e5d18:	99ac      	lw	a1,48(s1)
485e5d1a:	9fc1      	lw	a2,4(a3)
485e5d1c:	5b01      	sltiu	v1,1
485e5d1e:	488e      	addiu	s0,-114
485e5d20:	e905      	break	8
485e5d22:	bfc1      	lwu	a2,4(a3)
485e5d24:	5d01      	sltiu	a1,1
485e5d26:	4876      	addiu	s0,118
485e5d28:	998d      	lw	a0,52(s1)
485e5d2a:	9fc1      	lw	a2,4(a3)
485e5d2c:	5a81      	sltiu	v0,129
485e5d2e:	488e      	addiu	s0,-114

485e5d30 <com_view_remove_type_view>:
485e5d30:	64f4      	save	32,ra,s0-s1
485e5d32:	6704      	move	s0,a0
485e5d34:	b10a      	lw	s1,485e5d5c <com_view_remove_type_view+0x2c>
485e5d36:	e811      	zeb	s0
485e5d38:	a140      	lbu	v0,0(s1)
485e5d3a:	5a03      	sltiu	v0,3
485e5d3c:	600c      	bteqz	485e5d56 <com_view_remove_type_view+0x26>
485e5d3e:	ea11      	zeb	v0
485e5d40:	b308      	lw	v1,485e5d60 <com_view_remove_type_view+0x30>
485e5d42:	3450      	sll	a0,v0,4
485e5d44:	e46d      	addu	v1,a0,v1
485e5d46:	a341      	lbu	v0,1(v1)
485e5d48:	ea03      	sltu	v0,s0
485e5d4a:	6105      	btnez	485e5d56 <com_view_remove_type_view+0x26>
485e5d4c:	a380      	lbu	a0,0(v1)
485e5d4e:	b206      	lw	v0,485e5d64 <com_view_remove_type_view+0x34>
485e5d50:	ea40      	jalr	v0
485e5d52:	6d00      	li	a1,0
485e5d54:	17f1      	b	485e5d38 <com_view_remove_type_view+0x8>
485e5d56:	6474      	restore	32,ra,s0-s1
485e5d58:	e8a0      	jrc	ra
485e5d5a:	0000      	addiu	s0,sp,0
485e5d5c:	99dc      	lw	a2,112(s1)
485e5d5e:	9fc1      	lw	a2,4(a3)
485e5d60:	99ac      	lw	a1,48(s1)
485e5d62:	9fc1      	lw	a2,4(a3)
485e5d64:	5c39      	sltiu	a0,57
485e5d66:	485e      	addiu	s0,94

485e5d68 <com_view_add>:
485e5d68:	64f5      	save	40,ra,s0-s1
485e5d6a:	ec11      	zeb	a0
485e5d6c:	d404      	sw	a0,16(sp)
485e5d6e:	9d80      	lw	a0,0(a1)
485e5d70:	f71f 6b01 	li	v1,65281
485e5d74:	eb6b      	neg	v1
485e5d76:	ec6c      	and	a0,v1
485e5d78:	6a01      	li	v0,1
485e5d7a:	7402      	cmpi	a0,2
485e5d7c:	6705      	move	s0,a1
485e5d7e:	d305      	sw	v1,20(sp)
485e5d80:	ea4b      	neg	v0
485e5d82:	6037      	bteqz	485e5df2 <.LBE5+0x28>
485e5d84:	b21d      	lw	v0,485e5df8 <.LBE5+0x2e>
485e5d86:	ea40      	jalr	v0
485e5d88:	a580      	lbu	a0,0(a1)
485e5d8a:	b31d      	lw	v1,485e5dfc <.LBE5+0x32>
485e5d8c:	b41d      	lw	a0,485e5e00 <.LBE5+0x36>
485e5d8e:	a3a0      	lbu	a1,0(v1)
485e5d90:	67fd      	move	a3,sp
485e5d92:	4521      	addiu	s1,a1,1
485e5d94:	c320      	sb	s1,0(v1)
485e5d96:	e911      	zeb	s1
485e5d98:	a7d0      	lbu	a2,16(a3)
485e5d9a:	3230      	sll	v0,s1,4
485e5d9c:	e285      	addu	s1,v0,a0
485e5d9e:	c1c0      	sb	a2,0(s1)
485e5da0:	a0a0      	lbu	a1,0(s0)
485e5da2:	c1a1      	sb	a1,1(s1)
485e5da4:	a061      	lbu	v1,1(s0)
485e5da6:	c162      	sb	v1,2(s1)
485e5da8:	9881      	lw	a0,4(s0)
485e5daa:	9842      	lw	v0,8(s0)
485e5dac:	98e3      	lw	a3,12(s0)
485e5dae:	d981      	sw	a0,4(s1)
485e5db0:	d942      	sw	v0,8(s1)
485e5db2:	1af0 9700 	jal	485e5c00 <com_view_update_key_view>
485e5db6:	d9e3      	sw	a3,12(s1)
485e5db8:	b611      	lw	a2,485e5dfc <.LBE5+0x32>
485e5dba:	9ea1      	lw	a1,4(a2)
485e5dbc:	9d81      	lw	a0,4(a1)
485e5dbe:	2402      	beqz	a0,485e5dc4 <.LBB5>
485e5dc0:	b311      	lw	v1,485e5e04 <.LBE5+0x3a>
485e5dc2:	ebc0      	jalrc	v1

485e5dc4 <.LBB5>:
485e5dc4:	a180      	lbu	a0,0(s1)
485e5dc6:	b711      	lw	a3,485e5e08 <.LBE5+0x3e>
485e5dc8:	c780      	sb	a0,0(a3)

485e5dca <.LBE5>:
485e5dca:	9943      	lw	v0,12(s1)
485e5dcc:	ea40      	jalr	v0
485e5dce:	6c00      	li	a0,0
485e5dd0:	a0c0      	lbu	a2,0(s0)
485e5dd2:	260e      	beqz	a2,485e5df0 <.LBE5+0x26>
485e5dd4:	98a0      	lw	a1,0(s0)
485e5dd6:	9305      	lw	v1,20(sp)
485e5dd8:	ed6c      	and	a1,v1
485e5dda:	7501      	cmpi	a1,1
485e5ddc:	6009      	bteqz	485e5df0 <.LBE5+0x26>
485e5dde:	a1e0      	lbu	a3,0(s1)
485e5de0:	6e02      	li	a2,2
485e5de2:	34e0      	sll	a0,a3,8
485e5de4:	eccd      	or	a0,a2
485e5de6:	b60a      	lw	a2,485e5e0c <.LBE5+0x42>
485e5de8:	b20a      	lw	v0,485e5e10 <.LBE5+0x46>
485e5dea:	ea40      	jalr	v0
485e5dec:	a8a1      	lhu	a1,2(s0)
485e5dee:	c143      	sb	v0,3(s1)
485e5df0:	6a00      	li	v0,0
485e5df2:	6475      	restore	40,ra,s0-s1
485e5df4:	e8a0      	jrc	ra
485e5df6:	0000      	addiu	s0,sp,0
485e5df8:	5d31      	sltiu	a1,49
485e5dfa:	485e      	addiu	s0,94
485e5dfc:	99dc      	lw	a2,112(s1)
485e5dfe:	9fc1      	lw	a2,4(a3)
485e5e00:	99ac      	lw	a1,48(s1)
485e5e02:	9fc1      	lw	a2,4(a3)
485e5e04:	5d01      	sltiu	a1,1
485e5e06:	4876      	addiu	s0,118
485e5e08:	998d      	lw	a0,52(s1)
485e5e0a:	9fc1      	lw	a2,4(a3)
485e5e0c:	5e39      	sltiu	a2,57
485e5e0e:	485e      	addiu	s0,94
485e5e10:	5915      	sltiu	s1,21
485e5e12:	488e      	addiu	s0,-114

485e5e14 <com_view_manager_exit>:
485e5e14:	64c3      	save	24,ra
485e5e16:	b206      	lw	v0,485e5e2c <com_view_manager_exit+0x18>
485e5e18:	ea40      	jalr	v0
485e5e1a:	6c00      	li	a0,0
485e5e1c:	b305      	lw	v1,485e5e30 <com_view_manager_exit+0x1c>
485e5e1e:	ebc0      	jalrc	v1
485e5e20:	b205      	lw	v0,485e5e30 <com_view_manager_exit+0x1c>
485e5e22:	eac0      	jalrc	v0
485e5e24:	6a00      	li	v0,0
485e5e26:	6443      	restore	24,ra
485e5e28:	e8a0      	jrc	ra
485e5e2a:	0000      	addiu	s0,sp,0
485e5e2c:	5d31      	sltiu	a1,49
485e5e2e:	485e      	addiu	s0,94
485e5e30:	5b6d      	sltiu	v1,109
485e5e32:	485a      	addiu	s0,90
485e5e34:	5bd9      	sltiu	v1,217
485e5e36:	483a      	addiu	s0,58

485e5e38 <com_view_remove_top_view>:
485e5e38:	64c3      	save	24,ra
485e5e3a:	b207      	lw	v0,485e5e54 <com_view_remove_top_view+0x1c>
485e5e3c:	a240      	lbu	v0,0(v0)
485e5e3e:	5a03      	sltiu	v0,3
485e5e40:	6007      	bteqz	485e5e50 <com_view_remove_top_view+0x18>
485e5e42:	b306      	lw	v1,485e5e58 <com_view_remove_top_view+0x20>
485e5e44:	3450      	sll	a0,v0,4
485e5e46:	e475      	addu	a1,a0,v1
485e5e48:	a580      	lbu	a0,0(a1)
485e5e4a:	b205      	lw	v0,485e5e5c <com_view_remove_top_view+0x24>
485e5e4c:	ea40      	jalr	v0
485e5e4e:	6d01      	li	a1,1
485e5e50:	6443      	restore	24,ra
485e5e52:	e8a0      	jrc	ra
485e5e54:	99dc      	lw	a2,112(s1)
485e5e56:	9fc1      	lw	a2,4(a3)
485e5e58:	99ac      	lw	a1,48(s1)
485e5e5a:	9fc1      	lw	a2,4(a3)
485e5e5c:	5c39      	sltiu	a0,57
485e5e5e:	485e      	addiu	s0,94

485e5e60 <com_btmanater_start_apk_app_verification>:
485e5e60:	64c3      	save	24,ra
485e5e62:	b31f      	lw	v1,485e5edc <com_btmanater_start_apk_app_verification+0x7c>
485e5e64:	ab56      	lhu	v0,44(v1)
485e5e66:	220d      	beqz	v0,485e5e82 <com_btmanater_start_apk_app_verification+0x22>
485e5e68:	6cff      	li	a0,255
485e5e6a:	b21e      	lw	v0,485e5ee0 <com_btmanater_start_apk_app_verification+0x80>
485e5e6c:	ea40      	jalr	v0
485e5e6e:	4c4b      	addiu	a0,75
485e5e70:	67c2      	move	a2,v0
485e5e72:	ee11      	zeb	a2
485e5e74:	2e06      	bnez	a2,485e5e82 <com_btmanater_start_apk_app_verification+0x22>
485e5e76:	b41c      	lw	a0,485e5ee4 <com_btmanater_start_apk_app_verification+0x84>
485e5e78:	6d02      	li	a1,2
485e5e7a:	c4b5      	sb	a1,21(a0)
485e5e7c:	0c09      	la	a0,485e5ea0 <com_btmanater_start_apk_app_verification+0x40>
485e5e7e:	67a6      	move	a1,a2
485e5e80:	1006      	b	485e5e8e <com_btmanater_start_apk_app_verification+0x2e>
485e5e82:	b619      	lw	a2,485e5ee4 <com_btmanater_start_apk_app_verification+0x84>
485e5e84:	6f01      	li	a3,1
485e5e86:	6d00      	li	a1,0
485e5e88:	c6f5      	sb	a3,21(a2)
485e5e8a:	0c0e      	la	a0,485e5ec0 <com_btmanater_start_apk_app_verification+0x60>
485e5e8c:	67c5      	move	a2,a1
485e5e8e:	b217      	lw	v0,485e5ee8 <com_btmanater_start_apk_app_verification+0x88>
485e5e90:	ea40      	jalr	v0
485e5e92:	6f4b      	li	a3,75
485e5e94:	b216      	lw	v0,485e5eec <com_btmanater_start_apk_app_verification+0x8c>
485e5e96:	6b00      	li	v1,0
485e5e98:	c26a      	sb	v1,10(v0)
485e5e9a:	6443      	restore	24,ra
485e5e9c:	e8a0      	jrc	ra
485e5e9e:	0000      	addiu	s0,sp,0
485e5ea0:	493c      	addiu	s1,60
485e5ea2:	203e      	beqz	s0,485e5f20 <com_btmanager_unlink_spp_ble_profile+0x30>
485e5ea4:	4352      	daddiu	v0,v1,2
485e5ea6:	2050      	beqz	s0,485e5f48 <com_btmanager_unlink_spp_ble_profile+0x58>
485e5ea8:	4556      	daddiu	v0,a1,6
485e5eaa:	4952      	addiu	s1,82
485e5eac:	4946      	addiu	s1,70
485e5eae:	4143      	addiu	v0,s1,3
485e5eb0:	4954      	addiu	s1,84
485e5eb2:	4e4f      	addiu	a2,79
485e5eb4:	4e20      	addiu	a2,32
485e5eb6:	4545      	addiu	v0,a1,5
485e5eb8:	4e44      	addiu	a2,68
485e5eba:	5427      	slti	a0,39
485e5ebc:	0000      	addiu	s0,sp,0
485e5ebe:	0000      	addiu	s0,sp,0
485e5ec0:	493c      	addiu	s1,60
485e5ec2:	203e      	beqz	s0,485e5f40 <com_btmanager_unlink_spp_ble_profile+0x50>
485e5ec4:	4352      	daddiu	v0,v1,2
485e5ec6:	2050      	beqz	s0,485e5f68 <com_btmanager_unlink_spp_ble_profile+0x78>
485e5ec8:	4556      	daddiu	v0,a1,6
485e5eca:	4952      	addiu	s1,82
485e5ecc:	4946      	addiu	s1,70
485e5ece:	4143      	addiu	v0,s1,3
485e5ed0:	4954      	addiu	s1,84
485e5ed2:	4e4f      	addiu	a2,79
485e5ed4:	5320      	slti	v1,32
485e5ed6:	4154      	daddiu	v0,s1,4
485e5ed8:	5452      	slti	a0,82
485e5eda:	0000      	addiu	s0,sp,0
485e5edc:	a2fc      	lbu	a3,28(v0)
485e5ede:	9fc1      	lw	a2,4(a3)
485e5ee0:	5ac5      	sltiu	v0,197
485e5ee2:	4846      	addiu	s0,70
485e5ee4:	a0c0      	lbu	a2,0(s0)
485e5ee6:	9fc1      	lw	a2,4(a3)
485e5ee8:	e901      	sdbbp	8
485e5eea:	bfc1      	lwu	a2,4(a3)
485e5eec:	a0dc      	lbu	a2,28(s0)
485e5eee:	9fc1      	lw	a2,4(a3)

485e5ef0 <com_btmanager_unlink_spp_ble_profile>:
485e5ef0:	64e4      	save	32,ra,s0
485e5ef2:	b31c      	lw	v1,485e5f60 <com_btmanager_unlink_spp_ble_profile+0x70>
485e5ef4:	ec11      	zeb	a0
485e5ef6:	f020 a34c 	lbu	v0,44(v1)
485e5efa:	2203      	beqz	v0,485e5f02 <com_btmanager_unlink_spp_ble_profile+0x12>
485e5efc:	f001 6a0b 	li	v0,2059
485e5f00:	1002      	b	485e5f06 <com_btmanager_unlink_spp_ble_profile+0x16>
485e5f02:	f001 6a0c 	li	v0,2060
485e5f06:	7401      	cmpi	a0,1
485e5f08:	d204      	sw	v0,16(sp)
485e5f0a:	6103      	btnez	485e5f12 <com_btmanager_unlink_spp_ble_profile+0x22>
485e5f0c:	f001 6c0c 	li	a0,2060
485e5f10:	d404      	sw	a0,16(sp)
485e5f12:	6c00      	li	a0,0
485e5f14:	6800      	li	s0,0
485e5f16:	67dd      	move	a2,sp
485e5f18:	b213      	lw	v0,485e5f64 <com_btmanager_unlink_spp_ble_profile+0x74>
485e5f1a:	c614      	sb	s0,20(a2)
485e5f1c:	0504      	addiu	a1,sp,16
485e5f1e:	67c4      	move	a2,a0
485e5f20:	ea40      	jalr	v0
485e5f22:	67e4      	move	a3,a0
485e5f24:	b511      	lw	a1,485e5f68 <com_btmanager_unlink_spp_ble_profile+0x78>
485e5f26:	b212      	lw	v0,485e5f6c <com_btmanager_unlink_spp_ble_profile+0x7c>
485e5f28:	c515      	sb	s0,21(a1)
485e5f2a:	6d00      	li	a1,0
485e5f2c:	0c03      	la	a0,485e5f38 <com_btmanager_unlink_spp_ble_profile+0x48>
485e5f2e:	67c5      	move	a2,a1
485e5f30:	ea40      	jalr	v0
485e5f32:	6f4b      	li	a3,75
485e5f34:	6464      	restore	32,ra,s0
485e5f36:	e8a0      	jrc	ra
485e5f38:	493c      	addiu	s1,60
485e5f3a:	203e      	beqz	s0,485e5fb8 <com_creat_play_prev_next_timer+0x48>
485e5f3c:	4352      	daddiu	v0,v1,2
485e5f3e:	2050      	beqz	s0,485e5fe0 <com_creat_play_prev_next_timer+0x70>
485e5f40:	4556      	daddiu	v0,a1,6
485e5f42:	4952      	addiu	s1,82
485e5f44:	4946      	addiu	s1,70
485e5f46:	4143      	addiu	v0,s1,3
485e5f48:	4954      	addiu	s1,84
485e5f4a:	4e4f      	addiu	a2,79
485e5f4c:	4f20      	addiu	a3,32
485e5f4e:	4556      	daddiu	v0,a1,6
485e5f50:	5452      	slti	a0,82
485e5f52:	4d49      	addiu	a1,73
485e5f54:	2c45      	bnez	a0,485e5fe0 <com_creat_play_prev_next_timer+0x70>
485e5f56:	5520      	slti	a1,32
485e5f58:	4c4e      	addiu	a0,78
485e5f5a:	4e49      	addiu	a2,73
485e5f5c:	004b      	addiu	s0,sp,300
485e5f5e:	0000      	addiu	s0,sp,0
485e5f60:	a2fc      	lbu	a3,28(v0)
485e5f62:	9fc1      	lw	a2,4(a3)
485e5f64:	0d15      	la	a1,485e5fb8 <com_creat_play_prev_next_timer+0x48>
485e5f66:	bfc1      	lwu	a2,4(a3)
485e5f68:	a0c0      	lbu	a2,0(s0)
485e5f6a:	9fc1      	lw	a2,4(a3)
485e5f6c:	e901      	sdbbp	8
485e5f6e:	bfc1      	lwu	a2,4(a3)

485e5f70 <com_creat_play_prev_next_timer>:
485e5f70:	64c3      	save	24,ra
    }
    // libc_print("start 0",0,0);
}
//void __section__(".text.BANK_UI")com_creat_play_prev_next_timer(void)
void __section__(".text.BANK2")com_creat_play_prev_next_timer(void)

{
485e5f72:	b407      	lw	a0,485e5f8c <com_creat_play_prev_next_timer+0x1c>
    g_prev_next_ch_start = 1;
485e5f74:	6d01      	li	a1,1
485e5f76:	b608      	lw	a2,485e5f94 <com_creat_play_prev_next_timer+0x24>
    prev_next_ch_timer_id = set_single_shot_app_timer(APP_TIMER_ATTRB_COM_CONTROL | (APP_TIMER_TAG_SYS << 8), 200,
485e5f78:	b208      	lw	v0,485e5f98 <com_creat_play_prev_next_timer+0x28>
485e5f7a:	c4a0      	sb	a1,0(a0)
485e5f7c:	f71f 6c03 	li	a0,65283
485e5f80:	ea40      	jalr	v0
485e5f82:	6dc8      	li	a1,200
485e5f84:	b303      	lw	v1,485e5f90 <com_creat_play_prev_next_timer+0x20>
485e5f86:	c340      	sb	v0,0(v1)
485e5f88:	6443      	restore	24,ra
485e5f8a:	e8a0      	jrc	ra
485e5f8c:	9a31      	lw	s1,68(v0)
485e5f8e:	9fc1      	lw	a2,4(a3)
485e5f90:	9a30      	lw	s1,64(v0)
485e5f92:	9fc1      	lw	a2,4(a3)
485e5f94:	5fc9      	sltiu	a3,201
485e5f96:	485a      	addiu	s0,90
485e5f98:	5931      	sltiu	s1,49
485e5f9a:	488e      	addiu	s0,-114
	...
Disassembly of section BANK_UI_1_24:

48625800 <com_standby_register>:
48625800:	b303      	lw	v1,4862580c <com_standby_register+0xc>

//注册进入和退出STANDBY的应用回调函数
void com_standby_register(standby_enter_hook enter_cb, standby_exit_hook exit_cb)
{
    g_standby_enter_cb = enter_cb;
48625802:	b204      	lw	v0,48625810 <com_standby_register+0x10>
    g_standby_exit_cb = exit_cb;
48625804:	db80      	sw	a0,0(v1)
48625806:	e820      	jr	ra
48625808:	daa0      	sw	a1,0(v0)
4862580a:	0000      	addiu	s0,sp,0
4862580c:	9a1c      	lw	s0,112(v0)
4862580e:	9fc1      	lw	a2,4(a3)
48625810:	9a20      	lw	s1,0(v0)
48625812:	9fc1      	lw	a2,4(a3)

48625814 <switch_low_freq>:
48625814:	b60a      	lw	a2,4862583c <switch_low_freq+0x28>
}

static void delay_ms_32k(int ms)
{
    int count = ms * 5;

    while (count != 0)
    {
        count--;
    }
}

static void delay_ms_13m(int ms)
{
    int count = ms * 13000 * 12;

    while (count != 0)
    {
        count--;
    }
}

/************************************** ********************/
/*!
 * \par  Description:
 *  config等待RTCVCC域的寄存器写入
 * \param[in]    none
 * \param[out]   none
 * \return       non
 * \ingroup      config
 * \note
 ******************************************************/
static void flush_rtc_reg(void)
{
    uint32 i;

    act_writel(0xA596, RTC_REGUPDATA);
    while (act_readl(RTC_REGUPDATA) != 0x5A69)
    {
        ;//nothing for QAC
    }

    for (i = 0; i < 256 * 4; i++)
    {
        act_writel((act_readl(WD_CTL) | 0x01), WD_CTL);
    }
}

static int switch_low_freq(void)
{
    if (g_low_power_var.high_freq_flag == 0)
48625816:	a654      	lbu	v0,20(a2)
48625818:	220e      	beqz	v0,48625836 <switch_low_freq+0x22>
4862581a:	b50a      	lw	a1,48625840 <switch_low_freq+0x2c>
    {
        return 0;
    }

    g_low_power_var.bak_24MPLL_CTL = act_readl(_24MPLL_CTL);
4862581c:	b30b      	lw	v1,48625848 <switch_low_freq+0x34>
    g_low_power_var.bak_CORE_PLL_CTL = act_readl(CORE_PLL_CTL);
    g_low_power_var.bak_CMU_SYSCLK = act_readl(CMU_SYSCLK);
4862581e:	9d80      	lw	a0,0(a1)
48625820:	de80      	sw	a0,0(a2)
48625822:	b409      	lw	a0,48625844 <switch_low_freq+0x30>
48625824:	9ce0      	lw	a3,0(a0)
48625826:	dee1      	sw	a3,4(a2)
48625828:	9b40      	lw	v0,0(v1)
4862582a:	6f00      	li	a3,0

    act_writel(0, CMU_SYSCLK); //选择低频
4862582c:	de42      	sw	v0,8(a2)
4862582e:	dbe0      	sw	a3,0(v1)
48625830:	dde0      	sw	a3,0(a1)
    act_writel(0, _24MPLL_CTL); //关掉高频
48625832:	dce0      	sw	a3,0(a0)
    act_writel(0, CORE_PLL_CTL); //关COREPLL
48625834:	c6f4      	sb	a3,20(a2)

    g_low_power_var.high_freq_flag = 0;
48625836:	e820      	jr	ra

    return 0;
}
48625838:	6a00      	li	v0,0
4862583a:	0000      	addiu	s0,sp,0
4862583c:	9a04      	lw	s0,16(v0)
4862583e:	9fc1      	lw	a2,4(a3)
48625840:	0108      	addiu	s1,sp,32
48625842:	c000      	sb	s0,0(s0)
48625844:	010c      	addiu	s1,sp,48
48625846:	c000      	sb	s0,0(s0)
48625848:	1000      	b	4862584a <switch_low_freq+0x36>
4862584a:	c000      	sb	s0,0(s0)

4862584c <switch_high_freq>:
4862584c:	b40a      	lw	a0,48625874 <switch_high_freq+0x28>

static int enter_low_power_mode(int low_freq_time)
{
    PRINT_INFO("enter_s2");

    g_low_power_var.bak_DAC_ANACTL = act_readl(DAC_ANACTL);
    g_low_power_var.bak_AUDIO_PLL_CTL = act_readl(AUDIO_PLL_CTL);

    act_writel(0, DAC_ANACTL);
    act_writel(0, AUDIO_PLL_CTL);

    if (low_freq_time != 0)
    {
        g_low_power_var.high_freq_flag = 1;
        switch_low_freq();
    }

    return 0;
}

static int switch_high_freq(void)
{
    if (g_low_power_var.high_freq_flag == 1)
4862584e:	a454      	lbu	v0,20(a0)
48625850:	7201      	cmpi	v0,1
48625852:	600d      	bteqz	4862586e <switch_high_freq+0x22>
48625854:	b309      	lw	v1,48625878 <switch_high_freq+0x2c>
    {
        return 0;
    }

    act_writel(0x8, _24MPLL_CTL);
48625856:	6e08      	li	a2,8
48625858:	dbc0      	sw	a2,0(v1)
4862585a:	9ca0      	lw	a1,0(a0)
    delay_ms_32k(3);//高频稳定延时
    act_writel(g_low_power_var.bak_24MPLL_CTL, _24MPLL_CTL);
4862585c:	b708      	lw	a3,4862587c <switch_high_freq+0x30>
    act_writel(g_low_power_var.bak_CORE_PLL_CTL, CORE_PLL_CTL);
4862585e:	dba0      	sw	a1,0(v1)
48625860:	9c41      	lw	v0,4(a0)
48625862:	b508      	lw	a1,48625880 <switch_high_freq+0x34>
    act_writel(g_low_power_var.bak_CMU_SYSCLK, CMU_SYSCLK);
48625864:	df40      	sw	v0,0(a3)
48625866:	9cc2      	lw	a2,8(a0)
48625868:	6b01      	li	v1,1

    g_low_power_var.high_freq_flag = 1;
4862586a:	ddc0      	sw	a2,0(a1)
4862586c:	c474      	sb	v1,20(a0)
4862586e:	e820      	jr	ra

    return 0;
}
48625870:	6a00      	li	v0,0
48625872:	0000      	addiu	s0,sp,0
48625874:	9a04      	lw	s0,16(v0)
48625876:	9fc1      	lw	a2,4(a3)
48625878:	0108      	addiu	s1,sp,32
4862587a:	c000      	sb	s0,0(s0)
4862587c:	010c      	addiu	s1,sp,48
4862587e:	c000      	sb	s0,0(s0)
48625880:	1000      	b	48625882 <switch_high_freq+0x36>
48625882:	c000      	sb	s0,0(s0)

48625884 <com_standby>:
48625884:	f004 64f7 	save	a0,56,ra,s0-s1

48625888 <.LBB2>:
48625888:	b798      	lw	a3,48625ae8 <.LBE15+0x48>

4862588a <.LBE2>:
4862588a:	6a08      	li	v0,8
4862588c:	a760      	lbu	v1,0(a3)
4862588e:	6e01      	li	a2,1
48625890:	d307      	sw	v1,28(sp)
48625892:	b397      	lw	v1,48625aec <.LBE15+0x4c>
48625894:	ea8c      	and	v0,a0
48625896:	c3d4      	sb	a2,20(v1)
48625898:	6900      	li	s1,0
4862589a:	2205      	beqz	v0,486258a6 <.LBB4>
4862589c:	6814      	li	s0,20
4862589e:	6c38      	li	a0,56
486258a0:	ec8b      	neg	a0
486258a2:	c315      	sb	s0,21(v1)
486258a4:	c396      	sb	a0,22(v1)

486258a6 <.LBB4>:
486258a6:	b293      	lw	v0,48625af0 <.LBE15+0x50>

static int exit_low_power_mode(int low_freq_time)
{
    if (low_freq_time != 0)
    {
        switch_high_freq();
    }

    act_writel(g_low_power_var.bak_AUDIO_PLL_CTL, AUDIO_PLL_CTL);
    act_writel(g_low_power_var.bak_DAC_ANACTL, DAC_ANACTL);

    PRINT_INFO("exit_s2");

    return 0;
}

//为了低频下计时偏差小一点，低频模式下运行的代码尽量避免函数调用
//如果必须一直运行在高频，那么同样需要计时，因为某些接口并非执行的越频繁越好，比如TK检测接口
static int wait_wake_event(int32 low_freq_time, uint32 wake_type)
{
    int wake_ret = 0;
    int32 low_freq_cycle; //高频+低频切换下低频持续时间
    int32 low_freq_cycle_per_while; //while循环没有任何事件发生周期数
    uint8 i2c_key_counter = 0;
    uint8 card_detect_counter = 0;

    if (low_freq_time > 0)
    {
        low_freq_cycle = low_freq_time*32;
    }

    low_freq_cycle_per_while = 75; //通过LST反汇编计算

    while ((act_readl(WAKE_PD) & (1 << WAKE_PD_BT_PD)) != 0)
    {
        act_writel(act_readl(WAKE_PD), WAKE_PD); //清pending
    }

    while (1)
    {
        //alarm唤醒
        if ((act_readl(RTC_CTL) & 0x01) != 0)
        {
            //清pending
            wake_ret = WAKE_BY_ALARM;
            break;
        }

#if (SUPPORT_OUTER_CHARGE == 1)
        if (sys_comval->bat_charge_mode == BAT_CHARGE_MODE_OUTER)
        {
            //插入9V充电线唤醒
            if (IS_EXTERN_CAHREGE_IN() == 1)
            {
                wake_ret = WAKE_BY_USB;
                break;
            }
        }
        else
#endif
        {
            //usb&adapter唤醒
            if ((act_readl(CHG_DET) & (1 << CHG_DET_UVLO)) != 0)
            {
                wake_ret = WAKE_BY_USB;
                break;
            }
        }

#if (SUPPORT_OUTER_CHARGE == 1)
        if (sys_comval->bat_charge_mode == BAT_CHARGE_MODE_OUTER)
        {
            //低电退出低功耗模式
            if (((act_readb(TEMPADC_DATA)) & 0x7F) < TEMP_ADC_1_62_V)
            {
                wake_ret = WAKE_BY_LOWPOWER;
                break;
            }
        }
        else
#endif
        {
            //低电退出低功耗模式
            if (((act_readb(BATADC_DATA)) & 0x7f) < BAT_ADC_3_40_V)
            {
                wake_ret = WAKE_BY_LOWPOWER;
                break;
            }
        }

        if ((wake_type & WAKE_TYPE_BT_RX) != 0)
        {
            if ((act_readl(WAKE_PD) & (1 << WAKE_PD_BT_PD)) != 0)
            {
                wake_ret = WAKE_BY_BT;
                break;
            }
        }

        //onoff key唤醒
        if ((wake_type & WAKE_TYPE_ONOFF_KEY) != 0)
        {
            if ((act_readl(ONOFF_KEY) & (1<<ONOFF_KEY_ONOFF_PRESS_0)) != 0)
            {
                wake_ret = WAKE_BY_KEY;
                break;
            }
        }

        //物理按键唤醒
        if ((wake_type & WAKE_TYPE_PHY_KEY) != 0)
        {
            if ((act_readb(LRADC1_DATA) & 0x7F) < KEY_VAL_DATA_MAX)
            {
                wake_ret = WAKE_BY_KEY;
                break;
            }
        }

        //红外遥控器唤醒
        if ((wake_type & WAKE_TYPE_IR_KEY) != 0)
        {
            if (((act_readl(IRC_STA) & (1 << IRC_STA_UCMP)) != 0)
                    || ((act_readl(IRC_STA) & (1 << IRC_STA_IIP)) != 0))
            {
                wake_ret = WAKE_BY_KEY;
                break;
            }
        }

        //AUX检测唤醒
        if ((wake_type & WAKE_TYPE_AUX_DETECT) != 0)
        {
#if (SUPPORT_AUX_DETECT == DETECT_BY_GPIO)
            bool aux_in;

#if (AUX_GPIO_EN_LEVEL == ENABLE_LEVEL_LOW)
            aux_in = (bool)((act_readl(AUX_GPIO_DATA) & AUX_GPIO_PIN) == 0);
#else
            aux_in = ((act_readl(AUX_GPIO_DATA) & AUX_GPIO_PIN) != 0);
#endif
            if (((get_linein_state() == LINEIN_STATE_LINEIN_NULL) && (aux_in == TRUE))
                    || ((get_linein_state() == LINEIN_STATE_LINEIN_IN) && (aux_in == FALSE)))
            {
                wake_ret = WAKE_BY_AUX_DET;
                break;
            }
#endif
        }

        //卡检测唤醒
#if (SUPPORT_CARD_DETECT != DETECT_BY_CMD)
        if ((wake_type & WAKE_TYPE_CARD_DETECT) != 0)
        {
#if (SUPPORT_CARD_DETECT == DETECT_BY_GPIO)
            bool card_in;

#if (CARD_GPIO_EN_LEVEL == ENABLE_LEVEL_LOW)
            card_in = ((act_readl(CARD_GPIO_DATA) & CARD_GPIO_PIN) == 0);
#else
            card_in = ((act_readl(CARD_GPIO_DATA) & CARD_GPIO_PIN) != 0);
#endif
            if (((get_card_state() == CARD_STATE_CARD_NULL) && (card_in == TRUE))
                    || ((get_card_state() != CARD_STATE_CARD_NULL) && (card_in == FALSE)))
            {
                wake_ret = WAKE_BY_CARD_DET;
                break;
            }
#endif
        }
#endif

        //以下检测方式需在高频下进行
        if (g_low_power_var.high_freq_flag == 1)
        {
            if (low_freq_time == 0)
            {
                //delay 1ms
                delay_ms_13m(1);
            }

            //I2C 按键（外挂按键模块，比如触摸屏按键）唤醒
            if ((wake_type & WAKE_TYPE_I2C_KEY) != 0)
            {
                i2c_key_counter++;
                if (i2c_key_counter >= g_low_power_var.i2c_key_timer)
                {
                    i2c_key_counter = 0;
#if (SUPPORT_TK_DRIVER == TK_DRIVER_OUTER)
                    if (key_extern_tk_op(TK_OP_CHECK) != 0)
                    {
                        wake_ret = WAKE_BY_KEY;
                        break;
                    }
#endif
                }
            }

            //CMD 卡检测唤醒
#if (SUPPORT_CARD_DETECT == DETECT_BY_CMD)
            if ((wake_type & WAKE_TYPE_CARD_DETECT) != 0)
            {
                card_detect_counter++;
                if (card_detect_counter >= g_low_power_var.card_detect_timer)
                {
                    int8 card_ret;
                    card_detect_counter = 0;

                    card_ret = (int8) sys_detect_disk(DRV_GROUP_STG_CARD);
                    if (((get_card_state() == CARD_STATE_CARD_NULL) && (card_ret == 0))
                            || ((get_card_state() != CARD_STATE_CARD_NULL) && (card_ret == -1)))
                    {
                        wake_ret = WAKE_BY_CARD_DET;
                        break;
                    }
                }
            }
#endif

            //UHOST检测唤醒
            if ((wake_type & WAKE_TYPE_UHOST_DETECT) != 0)
            {

            }
        }

        if (low_freq_time > 0)
        {
            if (low_freq_cycle > low_freq_cycle_per_while)
            {
                low_freq_cycle -= low_freq_cycle_per_while;

                if (g_low_power_var.high_freq_flag == 1)
                {
                    //切换到低频
                    switch_low_freq();
                }
            }
            else
            {
                low_freq_cycle = low_freq_time*32;

                if (g_low_power_var.high_freq_flag == 0)
                {
                    //切换到高频
                    switch_high_freq();
                }
            }
        }

        //长时间关中断或锁调度必须主动清狗
        CLEAR_WATCH_DOG;
    }

    return wake_ret;
}

static void com_standby_enter_cb(void)
{
    //关掉LED数码管，LED灯
#if (SUPPORT_LED_DRIVER == 1)
    if(sys_comval->support_led_display == 1)
    {
        led_sleep_display();
    }
#endif

    discrete_led_low_power();
486258a8:	eac0      	jalrc	v0
486258aa:	b093      	lw	s0,48625af4 <.LBE15+0x54>

    SPEAKER_OFF();
486258ac:	e8c0      	jalrc	s0
486258ae:	b393      	lw	v1,48625af8 <.LBE15+0x58>
    SPEAKER_CONTROL_DISABLE();
486258b0:	ebc0      	jalrc	v1

486258b2 <.LBE4>:
486258b2:	b293      	lw	v0,48625afc <.LBE15+0x5c>
486258b4:	9a40      	lw	v0,0(v0)
486258b6:	2201      	beqz	v0,486258ba <.LBE4+0x8>
486258b8:	eac0      	jalrc	v0
486258ba:	9507      	lw	a1,28(sp)
486258bc:	2510      	beqz	a1,486258de <.LBE6>

486258be <.LBB6>:
486258be:	b291      	lw	v0,48625b00 <.LBE15+0x60>
486258c0:	0406      	addiu	a0,sp,24
486258c2:	67b1      	move	a1,s1
486258c4:	67d1      	move	a2,s1
486258c6:	ea40      	jalr	v0
486258c8:	6f12      	li	a3,18
486258ca:	9606      	lw	a2,24(sp)
486258cc:	6ffa      	li	a3,250
486258ce:	b08e      	lw	s0,48625b04 <.LBE15+0x64>
486258d0:	d704      	sw	a3,16(sp)
486258d2:	d605      	sw	a2,20(sp)
486258d4:	6c80      	li	a0,128
486258d6:	0504      	addiu	a1,sp,16
486258d8:	67d1      	move	a2,s1
486258da:	e840      	jalr	s0
486258dc:	67f1      	move	a3,s1

486258de <.LBE6>:
486258de:	b08b      	lw	s0,48625b08 <.LBE15+0x68>
486258e0:	6791      	move	a0,s1
486258e2:	67b1      	move	a1,s1
486258e4:	67d1      	move	a2,s1
486258e6:	e840      	jalr	s0
486258e8:	6f2d      	li	a3,45
486258ea:	d208      	sw	v0,32(sp)

486258ec <.LBB7>:
486258ec:	67b1      	move	a1,s1
486258ee:	67d1      	move	a2,s1
486258f0:	0c73      	la	a0,48625abc <.LBE15+0x1c>
486258f2:	e840      	jalr	s0
486258f4:	6f4b      	li	a3,75
486258f6:	b486      	lw	a0,48625b0c <.LBE15+0x6c>
486258f8:	b67d      	lw	a2,48625aec <.LBE15+0x4c>
486258fa:	9ce0      	lw	a3,0(a0)
486258fc:	b385      	lw	v1,48625b10 <.LBE15+0x70>
486258fe:	dee3      	sw	a3,12(a2)
48625900:	9b00      	lw	s0,0(v1)
48625902:	b57b      	lw	a1,48625aec <.LBE15+0x4c>
48625904:	dd04      	sw	s0,16(a1)
48625906:	dc20      	sw	s1,0(a0)
48625908:	db20      	sw	s1,0(v1)

4862590a <.LBB10>:
4862590a:	b383      	lw	v1,48625b14 <.LBE15+0x74>
4862590c:	6801      	li	s0,1
4862590e:	9b40      	lw	v0,0(v1)
48625910:	6900      	li	s1,0
48625912:	6790      	move	a0,s0
48625914:	ea0c      	and	v0,s0
48625916:	2205      	beqz	v0,48625922 <.LBB10+0x18>
48625918:	9b40      	lw	v0,0(v1)
4862591a:	db40      	sw	v0,0(v1)
4862591c:	9b40      	lw	v0,0(v1)
4862591e:	ea8c      	and	v0,a0
48625920:	17fa      	b	48625916 <.LBB10+0xc>
48625922:	b47e      	lw	a0,48625b18 <.LBE15+0x78>
48625924:	6d01      	li	a1,1
48625926:	9c60      	lw	v1,0(a0)
48625928:	ebac      	and	v1,a1
4862592a:	2302      	beqz	v1,48625930 <.LBB10+0x26>
4862592c:	6904      	li	s1,4
4862592e:	1067      	b	486259fe <.LBB13>
48625930:	b27b      	lw	v0,48625b1c <.LBE15+0x7c>
48625932:	6f80      	li	a3,128
48625934:	9ac0      	lw	a2,0(v0)
48625936:	eeec      	and	a2,a3
48625938:	2e24      	bnez	a2,48625982 <.LBB10+0x78>
4862593a:	b67a      	lw	a2,48625b20 <.LBE15+0x80>
4862593c:	6c7f      	li	a0,127
4862593e:	a660      	lbu	v1,0(a2)
48625940:	ec6c      	and	a0,v1
48625942:	5455      	slti	a0,85
48625944:	6002      	bteqz	4862594a <.LBB10+0x40>
48625946:	6908      	li	s1,8
48625948:	105a      	b	486259fe <.LBB13>
4862594a:	920e      	lw	v0,56(sp)
4862594c:	6f10      	li	a3,16
4862594e:	ef4c      	and	a3,v0
48625950:	2706      	beqz	a3,4862595e <.LBB10+0x54>
48625952:	b371      	lw	v1,48625b14 <.LBE15+0x74>
48625954:	9b80      	lw	a0,0(v1)
48625956:	ecac      	and	a0,a1
48625958:	2402      	beqz	a0,4862595e <.LBB10+0x54>
4862595a:	6903      	li	s1,3
4862595c:	1050      	b	486259fe <.LBB13>
4862595e:	950e      	lw	a1,56(sp)
48625960:	6b01      	li	v1,1
48625962:	ed6c      	and	a1,v1
48625964:	2504      	beqz	a1,4862596e <.LBB10+0x64>
48625966:	b770      	lw	a3,48625b24 <.LBE15+0x84>
48625968:	9fc0      	lw	a2,0(a3)
4862596a:	ee6c      	and	a2,v1
4862596c:	2e18      	bnez	a2,4862599e <.LBB10+0x94>
4862596e:	920e      	lw	v0,56(sp)
48625970:	6d02      	li	a1,2
48625972:	eaac      	and	v0,a1
48625974:	2208      	beqz	v0,48625986 <.LBB10+0x7c>
48625976:	b66d      	lw	a2,48625b28 <.LBE15+0x88>
48625978:	6c7f      	li	a0,127
4862597a:	a660      	lbu	v1,0(a2)
4862597c:	ec6c      	and	a0,v1
4862597e:	5462      	slti	a0,98
48625980:	6002      	bteqz	48625986 <.LBB10+0x7c>
48625982:	6725      	move	s1,a1
48625984:	103c      	b	486259fe <.LBB13>
48625986:	970e      	lw	a3,56(sp)
48625988:	6d04      	li	a1,4
4862598a:	efac      	and	a3,a1
4862598c:	270a      	beqz	a3,486259a2 <.LBB10+0x98>
4862598e:	b468      	lw	a0,48625b2c <.LBE15+0x8c>
48625990:	6b40      	li	v1,64
48625992:	9c40      	lw	v0,0(a0)
48625994:	ea6c      	and	v0,v1
48625996:	2a03      	bnez	v0,4862599e <.LBB10+0x94>
48625998:	9cc0      	lw	a2,0(a0)
4862599a:	eeac      	and	a2,a1
4862599c:	2602      	beqz	a2,486259a2 <.LBB10+0x98>
4862599e:	6902      	li	s1,2
486259a0:	102e      	b	486259fe <.LBB13>
486259a2:	b453      	lw	a0,48625aec <.LBE15+0x4c>
486259a4:	a4b4      	lbu	a1,20(a0)
486259a6:	7501      	cmpi	a1,1
486259a8:	6110      	btnez	486259ca <.LBE11+0x16>

486259aa <.LBB11>:
486259aa:	f302 6f0b 	li	a3,4875
486259ae:	33f4      	sll	v1,a3,5
486259b0:	4bb5      	addiu	v1,-75
486259b2:	2bfe      	bnez	v1,486259b0 <.LBB11+0x6>

486259b4 <.LBE11>:
486259b4:	960e      	lw	a2,56(sp)
486259b6:	6a08      	li	v0,8
486259b8:	eacc      	and	v0,a2
486259ba:	2207      	beqz	v0,486259ca <.LBE11+0x16>
486259bc:	41e1      	addiu	a3,s1,1
486259be:	6727      	move	s1,a3
486259c0:	a4b5      	lbu	a1,21(a0)
486259c2:	e911      	zeb	s1
486259c4:	e9a3      	sltu	s1,a1
486259c6:	6101      	btnez	486259ca <.LBE11+0x16>
486259c8:	6723      	move	s1,v1
486259ca:	2813      	bnez	s0,486259f2 <.LBE11+0x3e>
486259cc:	9309      	lw	v1,36(sp)
486259ce:	6a4b      	li	v0,75
486259d0:	ea62      	slt	v0,v1
486259d2:	a454      	lbu	v0,20(a0)
486259d4:	6009      	bteqz	486259e8 <.LBE11+0x34>
486259d6:	ea11      	zeb	v0
486259d8:	4bb5      	addiu	v1,-75
486259da:	7201      	cmpi	v0,1
486259dc:	d309      	sw	v1,36(sp)
486259de:	6109      	btnez	486259f2 <.LBE11+0x3e>
486259e0:	1b10 9605 	jal	48625814 <switch_low_freq>
486259e4:	6500      	nop
486259e6:	1005      	b	486259f2 <.LBE11+0x3e>
486259e8:	d009      	sw	s0,36(sp)
486259ea:	2a03      	bnez	v0,486259f2 <.LBE11+0x3e>
486259ec:	1b10 9613 	jal	4862584c <switch_high_freq>
486259f0:	6500      	nop
486259f2:	b650      	lw	a2,48625b30 <.LBE15+0x90>
486259f4:	6c01      	li	a0,1
486259f6:	9e60      	lw	v1,0(a2)
486259f8:	eb8d      	or	v1,a0
486259fa:	de60      	sw	v1,0(a2)
486259fc:	1792      	b	48625922 <.LBB10+0x18>

486259fe <.LBB13>:
486259fe:	b63c      	lw	a2,48625aec <.LBE15+0x4c>
48625a00:	b244      	lw	v0,48625b10 <.LBE15+0x70>
48625a02:	9e84      	lw	a0,16(a2)
48625a04:	b542      	lw	a1,48625b0c <.LBE15+0x6c>
48625a06:	da80      	sw	a0,0(v0)
48625a08:	9ee3      	lw	a3,12(a2)
48625a0a:	b340      	lw	v1,48625b08 <.LBE15+0x68>
48625a0c:	dde0      	sw	a3,0(a1)
48625a0e:	6d00      	li	a1,0
48625a10:	67c5      	move	a2,a1
48625a12:	0c2f      	la	a0,48625acc <.LBE15+0x2c>
48625a14:	eb40      	jalr	v1
48625a16:	6f4b      	li	a3,75

48625a18 <.LBE13>:
48625a18:	b03c      	lw	s0,48625b08 <.LBE15+0x68>
48625a1a:	0c30      	la	a0,48625ad8 <.LBE15+0x38>
48625a1c:	67b1      	move	a1,s1
48625a1e:	6e02      	li	a2,2
48625a20:	e840      	jalr	s0
48625a22:	6f4b      	li	a3,75
48625a24:	6d00      	li	a1,0
48625a26:	9408      	lw	a0,32(sp)
48625a28:	b338      	lw	v1,48625b08 <.LBE15+0x68>
48625a2a:	67c5      	move	a2,a1
48625a2c:	eb40      	jalr	v1
48625a2e:	6f2e      	li	a3,46
48625a30:	9007      	lw	s0,28(sp)
48625a32:	200b      	beqz	s0,48625a4a <.LBE13+0x32>
48625a34:	6d00      	li	a1,0
48625a36:	9406      	lw	a0,24(sp)
48625a38:	b032      	lw	s0,48625b00 <.LBE15+0x60>
48625a3a:	67c5      	move	a2,a1
48625a3c:	e840      	jalr	s0
48625a3e:	6f16      	li	a3,22
48625a40:	6d00      	li	a1,0
48625a42:	0406      	addiu	a0,sp,24
48625a44:	67c5      	move	a2,a1
48625a46:	e840      	jalr	s0
48625a48:	6f13      	li	a3,19
48625a4a:	b43b      	lw	a0,48625b34 <.LBE15+0x94>
48625a4c:	6800      	li	s0,0
48625a4e:	b23b      	lw	v0,48625b38 <.LBE15+0x98>
48625a50:	c40c      	sb	s0,12(a0)
48625a52:	6d07      	li	a1,7
48625a54:	6c0a      	li	a0,10
48625a56:	6e00      	li	a2,0
48625a58:	ea40      	jalr	v0
48625a5a:	6f03      	li	a3,3
48625a5c:	b623      	lw	a2,48625ae8 <.LBE15+0x48>
48625a5e:	6c00      	li	a0,0
48625a60:	c603      	sb	s0,3(a2)
48625a62:	b02a      	lw	s0,48625b08 <.LBE15+0x68>
48625a64:	67c4      	move	a2,a0
48625a66:	6d08      	li	a1,8
48625a68:	e840      	jalr	s0
48625a6a:	6f36      	li	a3,54

48625a6c <.LBB15>:
48625a6c:	b735      	lw	a3,48625b40 <.LBE15+0xa0>
}

static void com_standby_exit_cb(void)
{
    standby_restart_all_app_timer(g_app_timer_vector, g_app_timer_count);
48625a6e:	b534      	lw	a1,48625b3c <.LBE15+0x9c>
48625a70:	b035      	lw	s0,48625b44 <.LBE15+0xa4>
48625a72:	9d80      	lw	a0,0(a1)
48625a74:	e840      	jalr	s0
48625a76:	a7a0      	lbu	a1,0(a3)
48625a78:	b434      	lw	a0,48625b48 <.LBE15+0xa8>
    standby_restart_all_app_timer(g_com_app_timer_vct, COM_APP_TIMER_MAX);
48625a7a:	e840      	jalr	s0
48625a7c:	6d08      	li	a1,8
48625a7e:	b42e      	lw	a0,48625b34 <.LBE15+0x94>

    libc_memset(&g_sys_counter, 0x00, sizeof(sys_counter_t));
48625a80:	b220      	lw	v0,48625b00 <.LBE15+0x60>
48625a82:	6d00      	li	a1,0
48625a84:	6e0e      	li	a2,14
48625a86:	ea40      	jalr	v0
48625a88:	6f01      	li	a3,1
48625a8a:	b231      	lw	v0,48625b4c <.LBE15+0xac>

    //唤醒LED数码管
#if (SUPPORT_LED_DRIVER == 1)
    if(sys_comval->support_led_display == 1)
    {
        led_wake_up_display();
    }
#endif

    discrete_led_restore();
48625a8c:	eac0      	jalrc	v0
48625a8e:	b331      	lw	v1,48625b50 <.LBE15+0xb0>

    SPEAKER_CONTROL_ENABLE();
48625a90:	ebc0      	jalrc	v1
48625a92:	b231      	lw	v0,48625b54 <.LBE15+0xb4>
    SPEAKER_ON();
48625a94:	eac0      	jalrc	v0

48625a96 <.LBB17>:
48625a96:	b331      	lw	v1,48625b58 <.LBE15+0xb8>

48625a98 <.LBE17>:
48625a98:	a380      	lbu	a0,0(v1)
48625a9a:	2c02      	bnez	a0,48625aa0 <.LBE15>
48625a9c:	b230      	lw	v0,48625b5c <.LBE15+0xbc>
    //I2S ENABLE后必须重新设置音量
    if (get_mute_enable() == FALSE)
    {
        com_reset_sound_volume(0);
48625a9e:	eac0      	jalrc	v0

48625aa0 <.LBE15>:
48625aa0:	b330      	lw	v1,48625b5c <.LBE15+0xbc>
48625aa2:	9b40      	lw	v0,0(v1)
48625aa4:	2201      	beqz	v0,48625aa8 <.LBE15+0x8>
48625aa6:	eac0      	jalrc	v0
48625aa8:	b72f      	lw	a3,48625b60 <.LBE15+0xc0>
48625aaa:	6d01      	li	a1,1
48625aac:	6a00      	li	v0,0
48625aae:	f020 c7a0 	sb	a1,32(a3)
48625ab2:	f020 c721 	sb	s1,33(a3)
48625ab6:	6477      	restore	56,ra,s0-s1
48625ab8:	e8a0      	jrc	ra
48625aba:	0000      	addiu	s0,sp,0
48625abc:	493c      	addiu	s1,60
48625abe:	203e      	beqz	s0,48625b3c <.LBE15+0x9c>
48625ac0:	6e65      	li	a2,101
48625ac2:	6574      	move	s3,a0
48625ac4:	5f72      	sltiu	a3,114
48625ac6:	3273      	sra	v0,v1,4
48625ac8:	0000      	addiu	s0,sp,0
48625aca:	0000      	addiu	s0,sp,0
48625acc:	493c      	addiu	s1,60
48625ace:	203e      	beqz	s0,48625b4c <.LBE15+0xac>
48625ad0:	7865      	sd	v1,40(s0)
48625ad2:	7469      	cmpi	a0,105
48625ad4:	735f      	cmpi	v1,95
48625ad6:	0032      	addiu	s0,sp,200
48625ad8:	493c      	addiu	s1,60
48625ada:	203e      	beqz	s0,48625b58 <.LBE15+0xb8>
48625adc:	6177      	btnez	48625bcc <auto_connect_deal+0x38>
48625ade:	656b      	move	t3,v1
48625ae0:	7220      	cmpi	v0,32
48625ae2:	7465      	cmpi	a0,101
48625ae4:	003a      	addiu	s0,sp,232
48625ae6:	0000      	addiu	s0,sp,0
48625ae8:	a094      	lbu	a0,20(s0)
48625aea:	9fc1      	lw	a2,4(a3)
48625aec:	9a04      	lw	s0,16(v0)
48625aee:	9fc1      	lw	a2,4(a3)
48625af0:	5959      	sltiu	s1,89
48625af2:	485e      	addiu	s0,94
48625af4:	5b3d      	sltiu	v1,61
48625af6:	485e      	addiu	s0,94
48625af8:	5a79      	sltiu	v0,121
48625afa:	485e      	addiu	s0,94
48625afc:	9a1c      	lw	s0,112(v0)
48625afe:	9fc1      	lw	a2,4(a3)
48625b00:	e905      	break	8
48625b02:	bfc1      	lwu	a2,4(a3)
48625b04:	5a65      	sltiu	v0,101
48625b06:	482e      	addiu	s0,46
48625b08:	e901      	sdbbp	8
48625b0a:	bfc1      	lwu	a2,4(a3)
48625b0c:	001c      	addiu	s0,sp,112
48625b0e:	c005      	sb	s0,5(s0)
48625b10:	0110      	addiu	s1,sp,64
48625b12:	c000      	sb	s0,0(s0)
48625b14:	0050      	addiu	s0,sp,320
48625b16:	c002      	sb	s0,2(s0)
48625b18:	0000      	addiu	s0,sp,0
48625b1a:	c012      	sb	s0,18(s0)
48625b1c:	0010      	addiu	s0,sp,64
48625b1e:	c002      	sb	s0,2(s0)
48625b20:	0018      	addiu	s0,sp,96
48625b22:	c002      	sb	s0,2(s0)
48625b24:	0054      	addiu	s0,sp,336
48625b26:	c002      	sb	s0,2(s0)
48625b28:	0028      	addiu	s0,sp,160
48625b2a:	c002      	sb	s0,2(s0)
48625b2c:	0054      	addiu	s0,sp,336
48625b2e:	c00f      	sb	s0,15(s0)
48625b30:	001c      	addiu	s0,sp,112
48625b32:	c012      	sb	s0,18(s0)
48625b34:	a0dc      	lbu	a2,28(s0)
48625b36:	9fc1      	lw	a2,4(a3)
48625b38:	e90d      	or	s1,s0
48625b3a:	bfc1      	lwu	a2,4(a3)
48625b3c:	9988      	lw	a0,32(s1)
48625b3e:	9fc1      	lw	a2,4(a3)
48625b40:	9998      	lw	a0,96(s1)
48625b42:	9fc1      	lw	a2,4(a3)
48625b44:	5b8d      	sltiu	v1,141
48625b46:	488e      	addiu	s0,-114
48625b48:	a104      	lbu	s0,4(s1)
48625b4a:	9fc1      	lw	a2,4(a3)
48625b4c:	59b1      	sltiu	s1,177
48625b4e:	485e      	addiu	s0,94
48625b50:	5a09      	sltiu	v0,9
48625b52:	485e      	addiu	s0,94
48625b54:	5ae9      	sltiu	v0,233
48625b56:	485e      	addiu	s0,94
48625b58:	a0c0      	lbu	a2,0(s0)
48625b5a:	9fc1      	lw	a2,4(a3)
48625b5c:	5af9      	sltiu	v0,249
48625b5e:	48be      	addiu	s0,-66
48625b60:	9a20      	lw	s1,0(v0)
48625b62:	9fc1      	lw	a2,4(a3)
48625b64:	a19c      	lbu	a0,28(s1)
48625b66:	9fc1      	lw	a2,4(a3)

48625b68 <com_get_dev_conn_init>:
48625b68:	64c6      	save	48,ra
48625b6a:	f001 6c13 	li	a0,2067
48625b6e:	0508      	addiu	a1,sp,32
48625b70:	d404      	sw	a0,16(sp)
48625b72:	b208      	lw	v0,48625b90 <com_get_dev_conn_init+0x28>
48625b74:	b406      	lw	a0,48625b8c <com_get_dev_conn_init+0x24>
48625b76:	d507      	sw	a1,28(sp)
48625b78:	0606      	addiu	a2,sp,24
48625b7a:	0504      	addiu	a1,sp,16
48625b7c:	ea40      	jalr	v0
48625b7e:	6f00      	li	a3,0
48625b80:	677d      	move	v1,sp
48625b82:	f020 a340 	lbu	v0,32(v1)
48625b86:	6446      	restore	48,ra
48625b88:	e8a0      	jrc	ra
48625b8a:	0000      	addiu	s0,sp,0
48625b8c:	a2c0      	lbu	a2,0(v0)
48625b8e:	9fc1      	lw	a2,4(a3)
48625b90:	0d15      	la	a1,48625be4 <auto_connect_deal+0x50>
48625b92:	bfc1      	lwu	a2,4(a3)

48625b94 <auto_connect_deal>:
48625b94:	64f6      	save	48,ra,s0-s1
48625b96:	b36f      	lw	v1,48625d50 <.L12+0x5a>
48625b98:	b66f      	lw	a2,48625d54 <.L12+0x5e>
48625b9a:	a347      	lbu	v0,7(v1)
48625b9c:	a66b      	lbu	v1,11(a2)
48625b9e:	6d00      	li	a1,0
48625ba0:	6c00      	li	a0,0
48625ba2:	d505      	sw	a1,20(sp)
48625ba4:	d206      	sw	v0,24(sp)
48625ba6:	d404      	sw	a0,16(sp)
48625ba8:	f0c0 230a 	beqz	v1,48625d40 <.L12+0x4a>
48625bac:	b16b      	lw	s1,48625d58 <.L12+0x62>
48625bae:	eb11      	zeb	v1
48625bb0:	a1e0      	lbu	a3,0(s1)
48625bb2:	ef63      	sltu	a3,v1
48625bb4:	6102      	btnez	48625bba <auto_connect_deal+0x26>
48625bb6:	6800      	li	s0,0
48625bb8:	c100      	sb	s0,0(s1)
48625bba:	a180      	lbu	a0,0(s1)
48625bbc:	6a12      	li	v0,18
48625bbe:	67a4      	move	a1,a0
48625bc0:	ed11      	zeb	a1
48625bc2:	ed58      	mult	a1,v0
48625bc4:	b063      	lw	s0,48625d50 <.L12+0x5a>
48625bc6:	eb12      	mflo	v1
48625bc8:	e31d      	addu	a3,v1,s0
48625bca:	a75d      	lbu	v0,29(a3)
48625bcc:	7201      	cmpi	v0,1
48625bce:	6012      	bteqz	48625bf4 <auto_connect_deal+0x60>
48625bd0:	9705      	lw	a3,20(sp)
48625bd2:	a66b      	lbu	v1,11(a2)
48625bd4:	47a1      	addiu	a1,a3,1
48625bd6:	ed11      	zeb	a1
48625bd8:	ebaa      	cmp	v1,a1
48625bda:	d505      	sw	a1,20(sp)
48625bdc:	6102      	btnez	48625be2 <auto_connect_deal+0x4e>
48625bde:	6e00      	li	a2,0
48625be0:	c0c1      	sb	a2,1(s0)
48625be2:	4441      	addiu	v0,a0,1
48625be4:	c140      	sb	v0,0(s1)
48625be6:	ea11      	zeb	v0
48625be8:	ea63      	sltu	v0,v1
48625bea:	f080 611d 	btnez	48625d28 <.L12+0x32>
48625bee:	6c00      	li	a0,0
48625bf0:	c180      	sb	a0,0(s1)
48625bf2:	109a      	b	48625d28 <.L12+0x32>
48625bf4:	b25a      	lw	v0,48625d5c <.L12+0x66>
48625bf6:	0c54      	la	a0,48625d44 <.L12+0x4e>
48625bf8:	6e02      	li	a2,2
48625bfa:	ea40      	jalr	v0
48625bfc:	6f4b      	li	a3,75
48625bfe:	a065      	lbu	v1,5(s0)
48625c00:	7302      	cmpi	v1,2
48625c02:	610a      	btnez	48625c18 <auto_connect_deal+0x84>
48625c04:	a066      	lbu	v1,6(s0)
48625c06:	2308      	beqz	v1,48625c18 <auto_connect_deal+0x84>
48625c08:	a140      	lbu	v0,0(s1)
48625c0a:	6c12      	li	a0,18
48625c0c:	ea98      	mult	v0,a0
48625c0e:	ee12      	mflo	a2
48625c10:	e61d      	addu	a3,a2,s0
48625c12:	a7bc      	lbu	a1,28(a3)
48625c14:	ed63      	sltu	a1,v1
48625c16:	102e      	b	48625c74 <auto_connect_deal+0xe0>
48625c18:	b44e      	lw	a0,48625d50 <.L12+0x5a>
48625c1a:	a465      	lbu	v1,5(a0)
48625c1c:	67a3      	move	a1,v1
48625c1e:	ed11      	zeb	a1
48625c20:	7501      	cmpi	a1,1
48625c22:	610b      	btnez	48625c3a <auto_connect_deal+0xa6>
48625c24:	a4a8      	lbu	a1,8(a0)
48625c26:	2509      	beqz	a1,48625c3a <auto_connect_deal+0xa6>
48625c28:	b74c      	lw	a3,48625d58 <.L12+0x62>
48625c2a:	6a12      	li	v0,18
48625c2c:	a760      	lbu	v1,0(a3)
48625c2e:	eb58      	mult	v1,v0
48625c30:	ee12      	mflo	a2
48625c32:	e69d      	addu	a3,a2,a0
48625c34:	a77c      	lbu	v1,28(a3)
48625c36:	eba3      	sltu	v1,a1
48625c38:	101d      	b	48625c74 <auto_connect_deal+0xe0>
48625c3a:	2b1d      	bnez	v1,48625c76 <auto_connect_deal+0xe2>
48625c3c:	a4c7      	lbu	a2,7(a0)
48625c3e:	261b      	beqz	a2,48625c76 <auto_connect_deal+0xe2>
48625c40:	b346      	lw	v1,48625d58 <.L12+0x62>
48625c42:	6a12      	li	v0,18
48625c44:	a3a0      	lbu	a1,0(v1)
48625c46:	67e5      	move	a3,a1
48625c48:	ef11      	zeb	a3
48625c4a:	ef58      	mult	a3,v0
48625c4c:	eb12      	mflo	v1
48625c4e:	e39d      	addu	a3,v1,a0
48625c50:	a75e      	lbu	v0,30(a3)
48625c52:	7202      	cmpi	v0,2
48625c54:	6106      	btnez	48625c62 <auto_connect_deal+0xce>
48625c56:	a449      	lbu	v0,9(a0)
48625c58:	7201      	cmpi	v0,1
48625c5a:	6103      	btnez	48625c62 <auto_connect_deal+0xce>
48625c5c:	46e3      	addiu	a3,a2,3
48625c5e:	ef11      	zeb	a3
48625c60:	d706      	sw	a3,24(sp)
48625c62:	67e5      	move	a3,a1
48625c64:	ef11      	zeb	a3
48625c66:	6a12      	li	v0,18
48625c68:	ef58      	mult	a3,v0
48625c6a:	eb12      	mflo	v1
48625c6c:	e399      	addu	a2,v1,a0
48625c6e:	a6bc      	lbu	a1,28(a2)
48625c70:	9406      	lw	a0,24(sp)
48625c72:	ed83      	sltu	a1,a0
48625c74:	6040      	bteqz	48625cf6 <.L12>
48625c76:	b139      	lw	s1,48625d58 <.L12+0x62>
48625c78:	6812      	li	s0,18
48625c7a:	a180      	lbu	a0,0(s1)
48625c7c:	b535      	lw	a1,48625d50 <.L12+0x5a>
48625c7e:	ec18      	mult	a0,s0
48625c80:	ee12      	mflo	a2
48625c82:	e6ad      	addu	v1,a2,a1
48625c84:	a35c      	lbu	v0,28(v1)
48625c86:	4d0e      	addiu	a1,14
48625c88:	42e1      	addiu	a3,v0,1
48625c8a:	c3fc      	sb	a3,28(v1)
48625c8c:	a180      	lbu	a0,0(s1)
48625c8e:	b236      	lw	v0,48625d64 <.L12+0x6e>
48625c90:	ec18      	mult	a0,s0
48625c92:	b434      	lw	a0,48625d60 <.L12+0x6a>
48625c94:	ee12      	mflo	a2
48625c96:	6f00      	li	a3,0
48625c98:	e6b5      	addu	a1,a2,a1
48625c9a:	ea40      	jalr	v0
48625c9c:	6e06      	li	a2,6
48625c9e:	1b10 96da 	jal	48625b68 <com_get_dev_conn_init>
48625ca2:	6500      	nop
48625ca4:	7201      	cmpi	v0,1
48625ca6:	610d      	btnez	48625cc2 <auto_connect_deal+0x12e>
48625ca8:	a180      	lbu	a0,0(s1)
48625caa:	b730      	lw	a3,48625d68 <.L12+0x72>
48625cac:	ec18      	mult	a0,s0
48625cae:	eb12      	mflo	v1
48625cb0:	e3f5      	addu	a1,v1,a3
48625cb2:	a564      	lbu	v1,4(a1)
48625cb4:	2b06      	bnez	v1,48625cc2 <auto_connect_deal+0x12e>
48625cb6:	b628      	lw	a2,48625d54 <.L12+0x5e>
48625cb8:	a64b      	lbu	v0,11(a2)
48625cba:	ec43      	sltu	a0,v0
48625cbc:	6135      	btnez	48625d28 <.L12+0x32>
48625cbe:	c160      	sb	v1,0(s1)
48625cc0:	1033      	b	48625d28 <.L12+0x32>
48625cc2:	b526      	lw	a1,48625d58 <.L12+0x62>
48625cc4:	6a12      	li	v0,18
48625cc6:	a5c0      	lbu	a2,0(a1)
48625cc8:	b722      	lw	a3,48625d50 <.L12+0x5a>
48625cca:	6766      	move	v1,a2
48625ccc:	eb11      	zeb	v1
48625cce:	eb58      	mult	v1,v0
48625cd0:	6b01      	li	v1,1
48625cd2:	ec12      	mflo	a0
48625cd4:	e4e9      	addu	v0,a0,a3
48625cd6:	a294      	lbu	a0,20(v0)
48625cd8:	b21f      	lw	v0,48625d54 <.L12+0x5e>
48625cda:	ec6c      	and	a0,v1
48625cdc:	5c01      	sltiu	a0,1
48625cde:	67f8      	move	a3,t8
48625ce0:	4681      	addiu	a0,a2,1
48625ce2:	4761      	addiu	v1,a3,1
48625ce4:	a2eb      	lbu	a3,11(v0)
48625ce6:	c580      	sb	a0,0(a1)
48625ce8:	ec11      	zeb	a0
48625cea:	ece3      	sltu	a0,a3
48625cec:	6102      	btnez	48625cf2 <auto_connect_deal+0x15e>
48625cee:	6e00      	li	a2,0
48625cf0:	c5c0      	sb	a2,0(a1)
48625cf2:	6743      	move	v0,v1
48625cf4:	1025      	b	48625d40 <.L12+0x4a>

48625cf6 <.L12>:
48625cf6:	b519      	lw	a1,48625d58 <.L12+0x62>
48625cf8:	6f12      	li	a3,18
48625cfa:	a540      	lbu	v0,0(a1)
48625cfc:	b315      	lw	v1,48625d50 <.L12+0x5a>
48625cfe:	eaf8      	mult	v0,a3
48625d00:	ee12      	mflo	a2
48625d02:	e671      	addu	a0,a2,v1
48625d04:	6e00      	li	a2,0
48625d06:	c4dc      	sb	a2,28(a0)
48625d08:	a540      	lbu	v0,0(a1)
48625d0a:	eaf8      	mult	v0,a3
48625d0c:	ec12      	mflo	a0
48625d0e:	e47d      	addu	a3,a0,v1
48625d10:	c7dd      	sb	a2,29(a3)
48625d12:	a540      	lbu	v0,0(a1)
48625d14:	b310      	lw	v1,48625d54 <.L12+0x5e>
48625d16:	4281      	addiu	a0,v0,1
48625d18:	a3eb      	lbu	a3,11(v1)
48625d1a:	c580      	sb	a0,0(a1)
48625d1c:	ec11      	zeb	a0
48625d1e:	ece3      	sltu	a0,a3
48625d20:	6101      	btnez	48625d24 <.L12+0x2e>
48625d22:	c5c0      	sb	a2,0(a1)
48625d24:	6a00      	li	v0,0
48625d26:	100c      	b	48625d40 <.L12+0x4a>
48625d28:	9304      	lw	v1,16(sp)
48625d2a:	b60b      	lw	a2,48625d54 <.L12+0x5e>
48625d2c:	4381      	addiu	a0,v1,1
48625d2e:	ec11      	zeb	a0
48625d30:	a66b      	lbu	v1,11(a2)
48625d32:	d404      	sw	a0,16(sp)
48625d34:	67a3      	move	a1,v1
48625d36:	9704      	lw	a3,16(sp)
48625d38:	ed11      	zeb	a1
48625d3a:	efa3      	sltu	a3,a1
48625d3c:	f73f 6116 	btnez	48625bac <auto_connect_deal+0x18>
48625d40:	6476      	restore	48,ra,s0-s1
48625d42:	e8a0      	jrc	ra
48625d44:	6863      	li	s0,99
48625d46:	6365      	addiu	sp,808
48625d48:	5f6b      	sltiu	a3,107
48625d4a:	6469      	restore	72,ra,s0
48625d4c:	2031      	beqz	s0,48625db0 <connect_remain_profile_bank+0x44>
48625d4e:	003d      	addiu	s0,sp,244
48625d50:	a2c8      	lbu	a2,8(v0)
48625d52:	9fc1      	lw	a2,4(a3)
48625d54:	a33c      	lbu	s1,28(v1)
48625d56:	9fc1      	lw	a2,4(a3)
48625d58:	a35f      	lbu	v0,31(v1)
48625d5a:	9fc1      	lw	a2,4(a3)
48625d5c:	e901      	sdbbp	8
48625d5e:	bfc1      	lwu	a2,4(a3)
48625d60:	a2c0      	lbu	a2,0(v0)
48625d62:	9fc1      	lw	a2,4(a3)
48625d64:	e905      	break	8
48625d66:	bfc1      	lwu	a2,4(a3)
48625d68:	a2fc      	lbu	a3,28(v0)
48625d6a:	9fc1      	lw	a2,4(a3)

48625d6c <connect_remain_profile_bank>:
48625d6c:	ed11      	zeb	a1
48625d6e:	7502      	cmpi	a1,2
48625d70:	6111      	btnez	48625d94 <connect_remain_profile_bank+0x28>
48625d72:	b218      	lw	v0,48625dd0 <connect_remain_profile_bank+0x64>
48625d74:	a264      	lbu	v1,4(v0)
48625d76:	2303      	beqz	v1,48625d7e <connect_remain_profile_bank+0x12>
48625d78:	a4a7      	lbu	a1,7(a0)
48625d7a:	ed63      	sltu	a1,v1
48625d7c:	6026      	bteqz	48625dca <connect_remain_profile_bank+0x5e>
48625d7e:	b616      	lw	a2,48625dd4 <connect_remain_profile_bank+0x68>
48625d80:	a660      	lbu	v1,0(a2)
48625d82:	7303      	cmpi	v1,3
48625d84:	6122      	btnez	48625dca <connect_remain_profile_bank+0x5e>
48625d86:	a447      	lbu	v0,7(a0)
48625d88:	6d00      	li	a1,0
48625d8a:	42e1      	addiu	a3,v0,1
48625d8c:	6a02      	li	v0,2
48625d8e:	cca5      	sh	a1,10(a0)
48625d90:	e820      	jr	ra
48625d92:	c4e7      	sb	a3,7(a0)
48625d94:	7520      	cmpi	a1,32
48625d96:	b20f      	lw	v0,48625dd0 <connect_remain_profile_bank+0x64>
48625d98:	610c      	btnez	48625db2 <connect_remain_profile_bank+0x46>
48625d9a:	a264      	lbu	v1,4(v0)
48625d9c:	2303      	beqz	v1,48625da4 <connect_remain_profile_bank+0x38>
48625d9e:	a4c7      	lbu	a2,7(a0)
48625da0:	ee63      	sltu	a2,v1
48625da2:	6013      	bteqz	48625dca <connect_remain_profile_bank+0x5e>
48625da4:	a4e7      	lbu	a3,7(a0)
48625da6:	6a00      	li	v0,0
48625da8:	cc45      	sh	v0,10(a0)
48625daa:	4761      	addiu	v1,a3,1
48625dac:	6a20      	li	v0,32
48625dae:	e820      	jr	ra
48625db0:	c467      	sb	v1,7(a0)
48625db2:	a264      	lbu	v1,4(v0)
48625db4:	2303      	beqz	v1,48625dbc <connect_remain_profile_bank+0x50>
48625db6:	a4a7      	lbu	a1,7(a0)
48625db8:	ed63      	sltu	a1,v1
48625dba:	6007      	bteqz	48625dca <connect_remain_profile_bank+0x5e>
48625dbc:	a467      	lbu	v1,7(a0)
48625dbe:	6f00      	li	a3,0
48625dc0:	43c1      	addiu	a2,v1,1
48625dc2:	6a01      	li	v0,1
48625dc4:	cce5      	sh	a3,10(a0)
48625dc6:	e820      	jr	ra
48625dc8:	c4c7      	sb	a2,7(a0)
48625dca:	e820      	jr	ra
48625dcc:	6a00      	li	v0,0
48625dce:	0000      	addiu	s0,sp,0
48625dd0:	a2c8      	lbu	a2,8(v0)
48625dd2:	9fc1      	lw	a2,4(a3)
48625dd4:	a2fc      	lbu	a3,28(v0)
48625dd6:	9fc1      	lw	a2,4(a3)

48625dd8 <auto_connect_profile>:
48625dd8:	64c4      	save	32,ra
48625dda:	ec11      	zeb	a0
48625ddc:	b313      	lw	v1,48625e28 <auto_connect_profile+0x50>
48625dde:	6a01      	li	v0,1
48625de0:	6d01      	li	a1,1
48625de2:	ea8c      	and	v0,a0
48625de4:	c3b2      	sb	a1,18(v1)
48625de6:	2203      	beqz	v0,48625dee <auto_connect_profile+0x16>
48625de8:	f700 6a09 	li	v0,1801
48625dec:	100e      	b	48625e0a <auto_connect_profile+0x32>
48625dee:	6e02      	li	a2,2
48625df0:	ee8c      	and	a2,a0
48625df2:	2603      	beqz	a2,48625dfa <auto_connect_profile+0x22>
48625df4:	f600 6a03 	li	v0,1539
48625df8:	1008      	b	48625e0a <auto_connect_profile+0x32>
48625dfa:	6f20      	li	a3,32
48625dfc:	ef8c      	and	a3,a0
48625dfe:	2703      	beqz	a3,48625e06 <auto_connect_profile+0x2e>
48625e00:	f501 6a01 	li	v0,3329
48625e04:	1002      	b	48625e0a <auto_connect_profile+0x32>
48625e06:	f600 6a05 	li	v0,1541
48625e0a:	a38f      	lbu	a0,15(v1)
48625e0c:	d204      	sw	v0,16(sp)
48625e0e:	7402      	cmpi	a0,2
48625e10:	6003      	bteqz	48625e18 <auto_connect_profile+0x40>
48625e12:	b307      	lw	v1,48625e2c <auto_connect_profile+0x54>
48625e14:	eb40      	jalr	v1
48625e16:	6c02      	li	a0,2
48625e18:	6e00      	li	a2,0
48625e1a:	b406      	lw	a0,48625e30 <auto_connect_profile+0x58>
48625e1c:	b206      	lw	v0,48625e34 <auto_connect_profile+0x5c>
48625e1e:	0504      	addiu	a1,sp,16
48625e20:	ea40      	jalr	v0
48625e22:	67e6      	move	a3,a2
48625e24:	6444      	restore	32,ra
48625e26:	e8a0      	jrc	ra
48625e28:	a33c      	lbu	s1,28(v1)
48625e2a:	9fc1      	lw	a2,4(a3)
48625e2c:	5dc5      	sltiu	a1,197
48625e2e:	4882      	addiu	s0,-126
48625e30:	a2c0      	lbu	a2,0(v0)
48625e32:	9fc1      	lw	a2,4(a3)
48625e34:	0d15      	la	a1,48625e88 <com_btmanager_force_unlink+0x28>
48625e36:	bfc1      	lwu	a2,4(a3)

48625e38 <com_btmanager_power_off>:
48625e38:	64c4      	save	32,ra


//在蓝牙连接状态下，发送关机命令给对方
void com_btmanager_power_off(void)
{
48625e3a:	b308      	lw	v1,48625e58 <.LBE2+0x4>
    if((g_bt_stack_cur_info.conn_status == CONN_STATUS_LINKED))
48625e3c:	a340      	lbu	v0,0(v1)
48625e3e:	7203      	cmpi	v0,3
48625e40:	6109      	btnez	48625e54 <.LBE2>

48625e42 <.LBB2>:
48625e42:	f0a1 6c07 	li	a0,2215
    {
        msg_apps_t msg;
         //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_TWS_POWER_OFF;
48625e46:	d404      	sw	a0,16(sp)
48625e48:	b205      	lw	v0,48625e5c <.LBE2+0x8>
        // msg.content.data[0] = 0x01;
        //发送同步消息
        send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48625e4a:	6c00      	li	a0,0
48625e4c:	0504      	addiu	a1,sp,16
48625e4e:	67c4      	move	a2,a0
48625e50:	ea40      	jalr	v0
48625e52:	67e4      	move	a3,a0

48625e54 <.LBE2>:
48625e54:	6444      	restore	32,ra
    }
}
48625e56:	e8a0      	jrc	ra
48625e58:	a2fc      	lbu	a3,28(v0)
48625e5a:	9fc1      	lw	a2,4(a3)
48625e5c:	0d15      	la	a1,48625eb0 <com_btmanager_force_unlink+0x50>
48625e5e:	bfc1      	lwu	a2,4(a3)

48625e60 <com_btmanager_force_unlink>:
48625e60:	64c4      	save	32,ra



int com_btmanager_force_unlink(void)
{
48625e62:	b310      	lw	v1,48625ea0 <com_btmanager_force_unlink+0x40>
    msg_apps_t msg;

    if ((g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
48625e64:	a34c      	lbu	v0,12(v1)
48625e66:	7201      	cmpi	v0,1
48625e68:	6115      	btnez	48625e94 <com_btmanager_force_unlink+0x34>
48625e6a:	b40f      	lw	a0,48625ea4 <com_btmanager_force_unlink+0x44>
48625e6c:	a440      	lbu	v0,0(a0)
48625e6e:	7201      	cmpi	v0,1
48625e70:	6002      	bteqz	48625e76 <com_btmanager_force_unlink+0x16>
48625e72:	7203      	cmpi	v0,3
48625e74:	610f      	btnez	48625e94 <com_btmanager_force_unlink+0x34>
48625e76:	b30d      	lw	v1,48625ea8 <com_btmanager_force_unlink+0x48>
            && ((g_bt_stack_cur_info.conn_status == CONN_STATUS_WAIT_PAIR)
                    || (g_bt_stack_cur_info.conn_status == CONN_STATUS_LINKED)))
    {
        g_bt_auto_connect_ctrl.need_auto_connect = 0x0;
48625e78:	6e00      	li	a2,0
48625e7a:	67bd      	move	a1,sp

        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_FORCE_UNLINK_SYNC;
        msg.content.data[0] = 0x00;
48625e7c:	6c00      	li	a0,0
        //发送同步消息
        send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48625e7e:	f001 6f06 	li	a3,2054
48625e82:	b20b      	lw	v0,48625eac <com_btmanager_force_unlink+0x4c>
48625e84:	c3c1      	sb	a2,1(v1)
48625e86:	d704      	sw	a3,16(sp)
48625e88:	c5d4      	sb	a2,20(a1)
48625e8a:	67e4      	move	a3,a0
48625e8c:	0504      	addiu	a1,sp,16
48625e8e:	ea40      	jalr	v0
48625e90:	67c4      	move	a2,a0
48625e92:	1003      	b	48625e9a <com_btmanager_force_unlink+0x3a>
48625e94:	b407      	lw	a0,48625eb0 <com_btmanager_force_unlink+0x50>
    }
    else
    {
        g_ap_switch_var.forbid_auto_connect = TRUE;
48625e96:	6a01      	li	v0,1
48625e98:	c45e      	sb	v0,30(a0)
48625e9a:	6a00      	li	v0,0
    }

    return 0;
}
48625e9c:	6444      	restore	32,ra
48625e9e:	e8a0      	jrc	ra
48625ea0:	a080      	lbu	a0,0(s0)
48625ea2:	9fc1      	lw	a2,4(a3)
48625ea4:	a2fc      	lbu	a3,28(v0)
48625ea6:	9fc1      	lw	a2,4(a3)
48625ea8:	a2c8      	lbu	a2,8(v0)
48625eaa:	9fc1      	lw	a2,4(a3)
48625eac:	0d15      	la	a1,48625f00 <com_btmanager_BQB_test+0x10>
48625eae:	bfc1      	lwu	a2,4(a3)
48625eb0:	a19c      	lbu	a0,28(s1)
48625eb2:	9fc1      	lw	a2,4(a3)

48625eb4 <com_btmanager_clearpairlist>:
48625eb4:	64c4      	save	32,ra

int com_btmanager_clearpairlist(void)
{
48625eb6:	b30c      	lw	v1,48625ee4 <.LBE3+0x8>
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if ((g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
48625eb8:	a34c      	lbu	v0,12(v1)
48625eba:	7201      	cmpi	v0,1
48625ebc:	610f      	btnez	48625edc <.LBE3>
48625ebe:	b50b      	lw	a1,48625ee8 <.LBE3+0xc>
48625ec0:	a580      	lbu	a0,0(a1)
48625ec2:	240c      	beqz	a0,48625edc <.LBE3>

48625ec4 <.LBB3>:
48625ec4:	6f00      	li	a3,0
            && (g_bt_stack_cur_info.conn_status >= CONN_STATUS_WAIT_PAIR))
    {
        msg_apps_t msg;
        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_CLEAR_TWSPAIR_LIST;
        msg.content.data[0] = 0;
48625ec6:	67dd      	move	a2,sp
48625ec8:	6c00      	li	a0,0
        //发送同步消息
        send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48625eca:	f0a1 6b0d 	li	v1,2221
48625ece:	b208      	lw	v0,48625eec <.LBE3+0x10>
48625ed0:	c6f4      	sb	a3,20(a2)
48625ed2:	d304      	sw	v1,16(sp)
48625ed4:	0504      	addiu	a1,sp,16
48625ed6:	67c4      	move	a2,a0
48625ed8:	ea40      	jalr	v0
48625eda:	67e4      	move	a3,a0

48625edc <.LBE3>:
48625edc:	6a00      	li	v0,0
    }
#endif
    return 0;
}
48625ede:	6444      	restore	32,ra
48625ee0:	e8a0      	jrc	ra
48625ee2:	0000      	addiu	s0,sp,0
48625ee4:	a080      	lbu	a0,0(s0)
48625ee6:	9fc1      	lw	a2,4(a3)
48625ee8:	a2fc      	lbu	a3,28(v0)
48625eea:	9fc1      	lw	a2,4(a3)
48625eec:	0d15      	la	a1,48625f40 <com_btmanager_rmt_dev_set+0x14>
48625eee:	bfc1      	lwu	a2,4(a3)

48625ef0 <com_btmanager_BQB_test>:
48625ef0:	64c4      	save	32,ra

int com_btmanager_BQB_test(void)
{
48625ef2:	b40c      	lw	a0,48625f20 <com_btmanager_BQB_test+0x30>
    msg_apps_t msg;

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
48625ef4:	6b01      	li	v1,1
    {
        return -1;
48625ef6:	a44c      	lbu	v0,12(a0)
48625ef8:	eb6b      	neg	v1
48625efa:	220f      	beqz	v0,48625f1a <com_btmanager_BQB_test+0x2a>
48625efc:	b70a      	lw	a3,48625f24 <com_btmanager_BQB_test+0x34>
    }

    if (g_this_app_info->app_id == APP_ID_BTPLAY)
48625efe:	9fc0      	lw	a2,0(a3)
48625f00:	a6a1      	lbu	a1,1(a2)
48625f02:	7502      	cmpi	a1,2
48625f04:	6109      	btnez	48625f18 <com_btmanager_BQB_test+0x28>
48625f06:	6c00      	li	a0,0
    {
        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_BQB_TEST_SYNC;
        //发送同步消息
        send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48625f08:	f001 6b04 	li	v1,2052
48625f0c:	b207      	lw	v0,48625f28 <com_btmanager_BQB_test+0x38>
48625f0e:	d304      	sw	v1,16(sp)
48625f10:	0504      	addiu	a1,sp,16
48625f12:	67c4      	move	a2,a0
48625f14:	ea40      	jalr	v0
48625f16:	67e4      	move	a3,a0
48625f18:	6b00      	li	v1,0
    }

    return 0;
48625f1a:	6743      	move	v0,v1
}
48625f1c:	6444      	restore	32,ra
48625f1e:	e8a0      	jrc	ra
48625f20:	a080      	lbu	a0,0(s0)
48625f22:	9fc1      	lw	a2,4(a3)
48625f24:	9990      	lw	a0,64(s1)
48625f26:	9fc1      	lw	a2,4(a3)
48625f28:	0d15      	la	a1,48625f7c <com_btmanager_rmt_dev_set+0x50>
48625f2a:	bfc1      	lwu	a2,4(a3)

48625f2c <com_btmanager_rmt_dev_set>:
48625f2c:	e820      	jr	ra

int com_btmanager_rmt_dev_set(void)
{
#if 0
    bt_paired_info_t cur_list;
    msg_apps_t msg;

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
    {
        return -1;
    }

    libc_memset(&cur_list, 0x0, sizeof(bt_paired_info_t));
    msg.type = MSG_BTSTACK_GET_PAIRED_LIST_SYNC;
    msg.content.addr = &cur_list;
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);

    if (cur_list.dev_num > 1)
    {
        //存在多于1个已配对的设备
        //在这里获取到所选择的设备地址，然后用该地址进行操作
    }
#endif
    return RESULT_NULL;
}
48625f2e:	6a00      	li	v0,0
	...
Disassembly of section BANK_UI_1_25:

48665800 <tm_alarm_create_clock_view>:
48665800:	64c5      	save	40,ra

const key_event_map_t clock_ke_maplist[];
void tm_alarm_clock_view(view_update_e mode);
void tm_alarm_create_clock_view(void)
{
48665802:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_SUB;
48665804:	6b01      	li	v1,1
48665806:	c670      	sb	v1,16(a2)
48665808:	b509      	lw	a1,4866582c <tm_alarm_create_clock_view+0x2c>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 8000;
    create_view_param.ke_maplist = clock_ke_maplist;
4866580a:	b30a      	lw	v1,48665830 <tm_alarm_create_clock_view+0x30>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = tm_alarm_clock_view;
4866580c:	6a00      	li	v0,0
4866580e:	c651      	sb	v0,17(a2)
48665810:	f743 6f00 	li	a3,8000
48665814:	6c00      	li	a0,0
48665816:	b208      	lw	v0,48665834 <tm_alarm_create_clock_view+0x34>
    com_view_add(COM_VIEW_ID_DISP_CLOCK, &create_view_param);
48665818:	d505      	sw	a1,20(sp)
4866581a:	d406      	sw	a0,24(sp)
4866581c:	cee9      	sh	a3,18(a2)
4866581e:	d307      	sw	v1,28(sp)
48665820:	6c80      	li	a0,128
48665822:	ea40      	jalr	v0
48665824:	0504      	addiu	a1,sp,16
48665826:	6445      	restore	40,ra
48665828:	e8a0      	jrc	ra
4866582a:	0000      	addiu	s0,sp,0
4866582c:	5800      	sltiu	s0,0
4866582e:	4876      	addiu	s0,118
48665830:	5895      	sltiu	s0,149
48665832:	4866      	addiu	s0,102
48665834:	5d69      	sltiu	a1,105
48665836:	485e      	addiu	s0,94

48665838 <clock_key_deal_exit>:
48665838:	64c3      	save	24,ra
}

app_result_e clock_key_deal_exit(void);
app_result_e clock_key_deal_switch_set_calendar(void);
app_result_e clock_key_deal_switch_set_alarm(void);

void clock_handle(void);

const key_event_map_t __section__(".rodata.ke_maplist") clock_ke_maplist[] =
{
#if 0 //不支持在小机下操作闹钟和日历
    /*! 切换到设置日历功能 */
    { { KEY_CLK, 0, KEY_TYPE_SHORT_UP, 0 }, clock_key_deal_switch_set_calendar },
    { { KEY_ABREC, 0, KEY_TYPE_SHORT_UP, 0 }, clock_key_deal_switch_set_calendar },

    /*! 切换到设置闹钟功能 */
    { { KEY_ABREC, 0, KEY_TYPE_LONG, KEY_DEAL_FILTER }, clock_key_deal_switch_set_alarm },
    { { KEY_CLK, 0, KEY_TYPE_LONG, KEY_DEAL_FILTER }, clock_key_deal_switch_set_alarm },
#endif
    /*! 确定退出 */
    { { KEY_PLAY, 0, KEY_TYPE_SHORT_UP, 0 }, clock_key_deal_exit },

    /*! 结束标志 */
    { { KEY_NULL, 0, KEY_TYPE_NULL, 0 }, NULL },
};

app_result_e clock_key_deal_exit(void)
{
4866583a:	b203      	lw	v0,48665844 <clock_key_deal_exit+0xc>
    com_view_remove_top_view();
4866583c:	eac0      	jalrc	v0
4866583e:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665840:	6443      	restore	24,ra
48665842:	e8a0      	jrc	ra
48665844:	5e39      	sltiu	a2,57
48665846:	485e      	addiu	s0,94

48665848 <clock_key_deal_switch_set_calendar>:
48665848:	64c3      	save	24,ra

app_result_e clock_key_deal_switch_set_calendar(void)
{
4866584a:	b203      	lw	v0,48665854 <clock_key_deal_switch_set_calendar+0xc>
    tm_alarm_create_set_calendar_view();
4866584c:	eac0      	jalrc	v0
4866584e:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665850:	6443      	restore	24,ra
48665852:	e8a0      	jrc	ra
48665854:	5801      	sltiu	s0,1
48665856:	486a      	addiu	s0,106

48665858 <clock_key_deal_switch_set_alarm>:
48665858:	64c3      	save	24,ra

app_result_e clock_key_deal_switch_set_alarm(void)
{
4866585a:	b203      	lw	v0,48665864 <clock_key_deal_switch_set_alarm+0xc>
    tm_alarm_create_set_alarm_view();
4866585c:	eac0      	jalrc	v0
4866585e:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665860:	6443      	restore	24,ra
48665862:	e8a0      	jrc	ra
48665864:	5801      	sltiu	s0,1
48665866:	486e      	addiu	s0,110

48665868 <__tm_alarm_clock_redraw>:
48665868:	64e3      	save	24,ra,s0

static void __tm_alarm_clock_redraw(void)
{
4866586a:	b009      	lw	s0,4866588c <__tm_alarm_clock_redraw+0x24>
    uint16 hour, minute;

    sys_get_time(&(g_p_clock_show->time));
4866586c:	6d00      	li	a1,0
4866586e:	9880      	lw	a0,0(s0)
48665870:	b208      	lw	v0,48665890 <__tm_alarm_clock_redraw+0x28>
48665872:	4484      	addiu	a0,a0,4
48665874:	67c5      	move	a2,a1
48665876:	ea40      	jalr	v0
48665878:	6f24      	li	a3,36
4866587a:	9800      	lw	s0,0(s0)

    hour = g_p_clock_show->time.hour;
    minute = g_p_clock_show->time.minute;

    led_display(LCD_COL, 0xff, 0); //清除:号
    led_display(LCD_FM, 0xff, 0); //清楚.号及FM标记
    led_display(LCD_NO1, 0xff, 0); //清楚.号及FM标记

    led_display(LCD_COL, 0xff, (uint32 )g_p_clock_show->twinkling_flag);
    led_display(0, (hour / 10) + NUM_0, 1);
    led_display(1, (hour % 10) + NUM_0, 1);
    led_display(2, (minute / 10) + NUM_0, 1);
    led_display(3, (minute % 10) + NUM_0, 1);

    if (g_p_clock_show->twinkling_flag == TRUE)
4866587c:	a047      	lbu	v0,7(s0)
4866587e:	7201      	cmpi	v0,1
48665880:	6a00      	li	v0,0
    {
        g_p_clock_show->twinkling_flag = FALSE;
48665882:	6001      	bteqz	48665886 <__tm_alarm_clock_redraw+0x1e>
48665884:	6a01      	li	v0,1
    }
    else
    {
        g_p_clock_show->twinkling_flag = TRUE;
48665886:	c047      	sb	v0,7(s0)
48665888:	6463      	restore	24,ra,s0
    }
}
4866588a:	e8a0      	jrc	ra
4866588c:	99a0      	lw	a1,0(s1)
4866588e:	9fc1      	lw	a2,4(a3)
48665890:	e901      	sdbbp	8
48665892:	bfc1      	lwu	a2,4(a3)

48665894 <tm_alarm_clock_view>:
48665894:	64f4      	save	32,ra,s0-s1

void tm_alarm_clock_view(view_update_e mode)
{
48665896:	67c4      	move	a2,a0
48665898:	ee11      	zeb	a2
4866589a:	7601      	cmpi	a2,1
    switch (mode)
4866589c:	6037      	bteqz	4866590c <tm_alarm_clock_view+0x78>
4866589e:	5602      	slti	a2,2
486658a0:	6002      	bteqz	486658a6 <tm_alarm_clock_view+0x12>
486658a2:	2606      	beqz	a2,486658b0 <tm_alarm_clock_view+0x1c>
486658a4:	1044      	b	4866592e <tm_alarm_clock_view+0x9a>
486658a6:	7602      	cmpi	a2,2
486658a8:	603f      	bteqz	48665928 <tm_alarm_clock_view+0x94>
486658aa:	7603      	cmpi	a2,3
486658ac:	603d      	bteqz	48665928 <tm_alarm_clock_view+0x94>
486658ae:	103f      	b	4866592e <tm_alarm_clock_view+0x9a>
486658b0:	b02a      	lw	s0,48665958 <tm_alarm_clock_view+0xc4>
    {
        case VIEW_UPDATE_CREATE:
        {
            g_p_clock_show = sys_malloc(sizeof(clock_show_var_t));
486658b2:	6c0a      	li	a0,10
486658b4:	6d04      	li	a1,4
486658b6:	e840      	jalr	s0
486658b8:	6f16      	li	a3,22
486658ba:	67c2      	move	a2,v0
486658bc:	b226      	lw	v0,48665954 <tm_alarm_clock_view+0xc0>
486658be:	dac0      	sw	a2,0(v0)
486658c0:	2e05      	bnez	a2,486658cc <tm_alarm_clock_view+0x38>
            if (g_p_clock_show == NULL)
486658c2:	0c1d      	la	a0,48665934 <tm_alarm_clock_view+0xa0>
            {
                PRINT_ERR("clock view malloc fail!!");
486658c4:	67a6      	move	a1,a2
486658c6:	e840      	jalr	s0
486658c8:	6f4b      	li	a3,75
486658ca:	17ff      	b	486658ca <tm_alarm_clock_view+0x36>
                while (1)
486658cc:	b022      	lw	s0,48665954 <tm_alarm_clock_view+0xc0>
                {
                    ; //nothing for QAC
                }
            }

            sys_get_date(&(g_p_clock_show->date));
486658ce:	6d00      	li	a1,0
486658d0:	9880      	lw	a0,0(s0)
486658d2:	b122      	lw	s1,48665958 <tm_alarm_clock_view+0xc4>
486658d4:	67c5      	move	a2,a1
486658d6:	e940      	jalr	s1
486658d8:	6f26      	li	a3,38
486658da:	9880      	lw	a0,0(s0)
            if (g_p_clock_show->date.year > 2099)
486658dc:	ac60      	lhu	v1,0(a0)
486658de:	f021 5b14 	sltiu	v1,2100
486658e2:	6107      	btnez	486658f2 <tm_alarm_clock_view+0x5e>
486658e4:	f7c0 6d10 	li	a1,2000
            {
                g_p_clock_show->date.year = 2000;
486658e8:	cca0      	sh	a1,0(a0)
486658ea:	6d00      	li	a1,0
                sys_set_date(&(g_p_clock_show->date));
486658ec:	67c5      	move	a2,a1
486658ee:	e940      	jalr	s1
486658f0:	6f25      	li	a3,37
486658f2:	9880      	lw	a0,0(s0)
            }

            g_p_clock_show->twinkling_flag = TRUE;
486658f4:	6e01      	li	a2,1
486658f6:	c4c7      	sb	a2,7(a0)
486658f8:	b21a      	lw	v0,48665960 <tm_alarm_clock_view+0xcc>
            g_p_clock_show->twinkling_timer_id = set_app_timer(APP_TIMER_ATTRB_COM_UI | (COM_VIEW_ID_DISP_CLOCK << 8), 500,
486658fa:	b619      	lw	a2,4866595c <tm_alarm_clock_view+0xc8>
486658fc:	f010 6c02 	li	a0,32770
48665900:	f1e0 6d14 	li	a1,500
48665904:	ea40      	jalr	v0
48665906:	9800      	lw	s0,0(s0)
48665908:	c048      	sb	v0,8(s0)
4866590a:	100e      	b	48665928 <tm_alarm_clock_view+0x94>
4866590c:	b012      	lw	s0,48665954 <tm_alarm_clock_view+0xc0>
                    clock_handle);            
            __tm_alarm_clock_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
            kill_app_timer(g_p_clock_show->twinkling_timer_id);
4866590e:	b216      	lw	v0,48665964 <tm_alarm_clock_view+0xd0>
48665910:	9860      	lw	v1,0(s0)
48665912:	ea40      	jalr	v0
48665914:	8388      	lb	a0,8(v1)
48665916:	9880      	lw	a0,0(s0)

            sys_free(g_p_clock_show);
48665918:	b210      	lw	v0,48665958 <tm_alarm_clock_view+0xc4>
4866591a:	6f17      	li	a3,23
4866591c:	6d04      	li	a1,4
4866591e:	ea40      	jalr	v0
48665920:	6e00      	li	a2,0
48665922:	6f00      	li	a3,0
            g_p_clock_show = NULL;
48665924:	d8e0      	sw	a3,0(s0)
48665926:	1003      	b	4866592e <tm_alarm_clock_view+0x9a>
        }
        break;
48665928:	1b30 961a 	jal	48665868 <__tm_alarm_clock_redraw>

        case VIEW_UPDATE_REDRAW:
        {
            __tm_alarm_clock_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __tm_alarm_clock_redraw();
4866592c:	6500      	nop
4866592e:	6474      	restore	32,ra,s0-s1
        }
        break;

        default:
        break;
    }
}
48665930:	e8a0      	jrc	ra
48665932:	0000      	addiu	s0,sp,0
48665934:	453c      	daddiu	s1,a1,-4
48665936:	203e      	beqz	s0,486659b4 <time_alarm_get_alarm_list+0x40>
48665938:	6c63      	li	a0,99
4866593a:	636f      	addiu	sp,888
4866593c:	206b      	beqz	s0,48665a14 <time_alarm_get_alarm_list+0xa0>
4866593e:	6976      	li	s1,118
48665940:	7765      	cmpi	a3,101
48665942:	6d20      	li	a1,32
48665944:	6c61      	li	a0,97
48665946:	6f6c      	li	a3,108
48665948:	2063      	beqz	s0,48665a10 <time_alarm_get_alarm_list+0x9c>
4866594a:	6166      	btnez	48665a18 <time_alarm_get_alarm_list+0xa4>
4866594c:	6c69      	li	a0,105
4866594e:	2121      	beqz	s1,48665992 <time_alarm_get_alarm_list+0x1e>
48665950:	0000      	addiu	s0,sp,0
48665952:	0000      	addiu	s0,sp,0
48665954:	99a0      	lw	a1,0(s1)
48665956:	9fc1      	lw	a2,4(a3)
48665958:	e901      	sdbbp	8
4866595a:	bfc1      	lwu	a2,4(a3)
4866595c:	5969      	sltiu	s1,105
4866595e:	4866      	addiu	s0,102
48665960:	5915      	sltiu	s1,21
48665962:	488e      	addiu	s0,-114
48665964:	5b01      	sltiu	v1,1
48665966:	488e      	addiu	s0,-114

48665968 <clock_handle>:
48665968:	64c3      	save	24,ra

//时钟2Hz定时处理
void clock_handle(void)
{
4866596a:	1b30 9625 	jal	48665894 <tm_alarm_clock_view>
    tm_alarm_clock_view(VIEW_UPDATE_REDRAW);
4866596e:	6c02      	li	a0,2
48665970:	6443      	restore	24,ra
48665972:	e8a0      	jrc	ra

48665974 <time_alarm_get_alarm_list>:
48665974:	64fd      	save	104,ra,s0-s1
#include "common_time_alarm.h"

/*获取闹钟记录列表*/
app_result_e time_alarm_get_alarm_list(uint32 data1, uint32 data2)
{
48665976:	6d00      	li	a1,0
    alarm_record_t cur_alarm_record;
    uint8 alarm_cnt, alarm_index, i;
    uint8 tmp_ring_folder_type[RCP_RING_FOLDER_MAX];
    uint8 tmp_ring_foldernum[RCP_RING_FOLDER_MAX];

    //如果卡已拔出，那么将卡闹铃目录数目清0
#if (SUPPORT_RING_FOLDER == 1)
    if (get_card_state() == CARD_STATE_CARD_NULL)
    {
        libc_memset(tmp_ring_foldernum, 0, RCP_RING_FOLDER_MAX);
        time_alarm_record_list_operate(RECORD_LIST_WRITE_FOLDERNUM, tmp_ring_foldernum, 0);
    }
#endif

    alarm_cnt = (uint8) time_alarm_record_list_operate(RECORD_LIST_VALID_TOTAL, 0, 0);
48665978:	b028      	lw	s0,48665a18 <time_alarm_get_alarm_list+0xa4>
4866597a:	67c5      	move	a2,a1
4866597c:	e840      	jalr	s0
4866597e:	6c08      	li	a0,8
48665980:	6722      	move	s1,v0
48665982:	b227      	lw	v0,48665a1c <time_alarm_get_alarm_list+0xa8>

    com_load_share_data(COM_SHARE_DATA_RING_TYPE, tmp_ring_folder_type, RCP_RING_FOLDER_MAX, 0);
48665984:	6f00      	li	a3,0
48665986:	6c03      	li	a0,3
48665988:	0512      	addiu	a1,sp,72
4866598a:	ea40      	jalr	v0
4866598c:	6e04      	li	a2,4
4866598e:	6c0a      	li	a0,10
    time_alarm_record_list_operate(RECORD_LIST_READ_FOLDERNUM, (void *) tmp_ring_foldernum, 0);
48665990:	0514      	addiu	a1,sp,80
48665992:	e840      	jalr	s0
48665994:	6e00      	li	a2,0
48665996:	e911      	zeb	s1
48665998:	6c2c      	li	a0,44

    com_rcp_send_pkg(alarm_cnt, 0, NULL, 0, sizeof(alarm_alarm_t) * alarm_cnt);
4866599a:	e998      	mult	s1,a0
4866599c:	6d00      	li	a1,0
4866599e:	eb12      	mflo	v1
486659a0:	b220      	lw	v0,48665a20 <time_alarm_get_alarm_list+0xac>
486659a2:	d304      	sw	v1,16(sp)
486659a4:	6791      	move	a0,s1
486659a6:	67c5      	move	a2,a1
486659a8:	ea40      	jalr	v0
486659aa:	67e5      	move	a3,a1
486659ac:	6800      	li	s0,0
    for (alarm_index = 0; alarm_index < RCP_ALARM_MAX; alarm_index++)
486659ae:	b21b      	lw	v0,48665a18 <time_alarm_get_alarm_list+0xa4>
    {
        time_alarm_record_list_operate(RECORD_LIST_READ_BYINDEX, &cur_alarm_record, (void *) (uint32) alarm_index);
486659b0:	67d0      	move	a2,s0
486659b2:	6c00      	li	a0,0
486659b4:	ea40      	jalr	v0
486659b6:	0506      	addiu	a1,sp,24
486659b8:	6e00      	li	a2,0

        //闹钟记录合法性检查，如果不合法将自动改为内置闹铃第一首
        for (i = 0; i < RCP_RING_FOLDER_MAX; i++)
486659ba:	0506      	addiu	a1,sp,24
        {
            if (cur_alarm_record.alarm.ring_type == tmp_ring_folder_type[i])
486659bc:	e5d1      	addu	a0,a1,a2
486659be:	675d      	move	v0,sp
486659c0:	f020 a2ff 	lbu	a3,63(v0)
486659c4:	f020 a470 	lbu	v1,48(a0)
486659c8:	ef6e      	xor	a3,v1
486659ca:	2f10      	bnez	a3,486659ec <time_alarm_get_alarm_list+0x78>
486659cc:	f020 a4f8 	lbu	a3,56(a0)
            {
                if (cur_alarm_record.alarm.sound.ring_seq > tmp_ring_foldernum[i])
486659d0:	9610      	lw	a2,64(sp)
486659d2:	efc3      	sltu	a3,a2
486659d4:	6010      	bteqz	486659f6 <time_alarm_get_alarm_list+0x82>
486659d6:	6e03      	li	a2,3
                {
                    cur_alarm_record.alarm.ring_type = RING_TYPE_BUILTIN;
486659d8:	677d      	move	v1,sp
486659da:	6c01      	li	a0,1
                    cur_alarm_record.alarm.sound.ring_seq = 1;
486659dc:	b20f      	lw	v0,48665a18 <time_alarm_get_alarm_list+0xa4>
                    time_alarm_record_list_operate(RECORD_LIST_ADD_BYINDEX, &cur_alarm_record, \
486659de:	f020 c3df 	sb	a2,63(v1)
486659e2:	d410      	sw	a0,64(sp)
486659e4:	67d0      	move	a2,s0
486659e6:	ea40      	jalr	v0
486659e8:	6c06      	li	a0,6
486659ea:	1005      	b	486659f6 <time_alarm_get_alarm_list+0x82>
                            (void *) (uint32) alarm_index);
                }
                break;
486659ec:	46a1      	addiu	a1,a2,1
486659ee:	67c5      	move	a2,a1
486659f0:	ee11      	zeb	a2
486659f2:	5e04      	sltiu	a2,4
486659f4:	61e2      	btnez	486659ba <time_alarm_get_alarm_list+0x46>
486659f6:	675d      	move	v0,sp
            }
        }

        if (cur_alarm_record.alarm.alarm_used == 1)
486659f8:	f020 a2f9 	lbu	a3,57(v0)
486659fc:	7701      	cmpi	a3,1
486659fe:	6104      	btnez	48665a08 <time_alarm_get_alarm_list+0x94>
48665a00:	b309      	lw	v1,48665a24 <time_alarm_get_alarm_list+0xb0>
        {
            com_rcp_send_pkg_cont(&(cur_alarm_record.alarm), sizeof(alarm_alarm_t));
48665a02:	0406      	addiu	a0,sp,24
48665a04:	eb40      	jalr	v1
48665a06:	6d2c      	li	a1,44
48665a08:	4081      	addiu	a0,s0,1
48665a0a:	6704      	move	s0,a0
48665a0c:	e811      	zeb	s0
48665a0e:	5804      	sltiu	s0,4
48665a10:	61ce      	btnez	486659ae <time_alarm_get_alarm_list+0x3a>
48665a12:	6a00      	li	v0,0
        }
    }

    return RESULT_NULL;
}
48665a14:	647d      	restore	104,ra,s0-s1
48665a16:	e8a0      	jrc	ra
48665a18:	5a11      	sltiu	v0,17
48665a1a:	4872      	addiu	s0,114
48665a1c:	5cd1      	sltiu	a0,209
48665a1e:	4846      	addiu	s0,70
48665a20:	5f29      	sltiu	a3,41
48665a22:	482a      	addiu	s0,42
48665a24:	5801      	sltiu	s0,1
48665a26:	48aa      	addiu	s0,-86

48665a28 <time_alarm_set_alarm_add>:
48665a28:	64fa      	save	80,ra,s0-s1

/*添加/更新闹钟记录*/
app_result_e time_alarm_set_alarm_add(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
48665a2a:	6706      	move	s0,a2
48665a2c:	b319      	lw	v1,48665a90 <time_alarm_set_alarm_add+0x68>
    alarm_record_t cur_alarm_record;
    alarm_alarm_t *p_alarm_info = (alarm_alarm_t *) data;
    int ret_index;

    //先检索是否已有该闹钟记录，如果还未有该记录，继续检索可用空白记录
    ret_index = time_alarm_record_list_operate(RECORD_LIST_SEARCH_BYID, &cur_alarm_record, \
48665a2e:	f020 a6c0 	lbu	a2,32(a2)
48665a32:	6c01      	li	a0,1
48665a34:	eb40      	jalr	v1
48665a36:	0504      	addiu	a1,sp,16
48665a38:	5200      	slti	v0,0
            (void *) (uint32) (p_alarm_info->alarm_id));
    if (ret_index < 0)
48665a3a:	6722      	move	s1,v0
48665a3c:	6008      	bteqz	48665a4e <time_alarm_set_alarm_add+0x26>
48665a3e:	6d00      	li	a1,0
    {
        ret_index = time_alarm_record_list_operate(RECORD_LIST_SEARCH_NOUSED, 0, 0);
48665a40:	b114      	lw	s1,48665a90 <time_alarm_set_alarm_add+0x68>
48665a42:	6c09      	li	a0,9
48665a44:	e940      	jalr	s1
48665a46:	67c5      	move	a2,a1
48665a48:	5200      	slti	v0,0
        if (ret_index < 0)
48665a4a:	6722      	move	s1,v0
48665a4c:	611d      	btnez	48665a88 <time_alarm_set_alarm_add+0x60>
48665a4e:	67b0      	move	a1,s0
        {
            return RESULT_NULL;
        }
    }

    //添加或更新闹钟记录
    libc_memcpy(&(cur_alarm_record.alarm), p_alarm_info, sizeof(alarm_alarm_t));
48665a50:	b011      	lw	s0,48665a94 <time_alarm_set_alarm_add+0x6c>
48665a52:	0404      	addiu	a0,sp,16
48665a54:	6e2c      	li	a2,44
48665a56:	e840      	jalr	s0
48665a58:	6f00      	li	a3,0
48665a5a:	6e01      	li	a2,1
    cur_alarm_record.alarm.alarm_used = 1;
48665a5c:	67bd      	move	a1,sp
48665a5e:	f020 c5d1 	sb	a2,49(a1)
48665a62:	040f      	addiu	a0,sp,60
    libc_memcpy(&(cur_alarm_record.last_time), &(cur_alarm_record.alarm.alarm_time), sizeof(time_t));
48665a64:	050d      	addiu	a1,sp,52
48665a66:	6e03      	li	a2,3
48665a68:	e840      	jalr	s0
48665a6a:	6f00      	li	a3,0
48665a6c:	6a00      	li	v0,0
    cur_alarm_record.snooze = 0;
48665a6e:	679d      	move	a0,sp
48665a70:	b308      	lw	v1,48665a90 <time_alarm_set_alarm_add+0x68>
    time_alarm_record_list_operate(RECORD_LIST_ADD_BYINDEX, &cur_alarm_record, (void *) ret_index);
48665a72:	f020 c45f 	sb	v0,63(a0)
48665a76:	0504      	addiu	a1,sp,16
48665a78:	6c06      	li	a0,6
48665a7a:	eb40      	jalr	v1
48665a7c:	67d1      	move	a2,s1
48665a7e:	6d00      	li	a1,0

    //刷新闹钟设置
    time_alarm_record_list_operate(RECORD_LIST_UPDATE_ALARM, UPDATE_ALARM_ADD, 0);
48665a80:	b304      	lw	v1,48665a90 <time_alarm_set_alarm_add+0x68>
48665a82:	6c03      	li	a0,3
48665a84:	eb40      	jalr	v1
48665a86:	67c5      	move	a2,a1
48665a88:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665a8a:	647a      	restore	80,ra,s0-s1
48665a8c:	e8a0      	jrc	ra
48665a8e:	0000      	addiu	s0,sp,0
48665a90:	5a11      	sltiu	v0,17
48665a92:	4872      	addiu	s0,114
48665a94:	e905      	break	8
48665a96:	bfc1      	lwu	a2,4(a3)

48665a98 <time_alarm_set_alarm_delete>:
48665a98:	64e9      	save	72,ra,s0

/*删除闹钟记录*/
app_result_e time_alarm_set_alarm_delete(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
48665a9a:	ea8f      	not	v0,a0
    alarm_record_t cur_alarm_record;
    int alarm_id = (int) data1;
    int ret_index;

    if (alarm_id == -1)
48665a9c:	6e01      	li	a2,1
    { //删除全部闹钟记录
        ret_index = -1;
48665a9e:	6764      	move	v1,a0
48665aa0:	eecb      	neg	a2
48665aa2:	2208      	beqz	v0,48665ab4 <time_alarm_set_alarm_delete+0x1c>
48665aa4:	b20a      	lw	v0,48665acc <time_alarm_set_alarm_delete+0x34>
    }
    else
    { //删除指定闹钟记录
        ret_index = time_alarm_record_list_operate(RECORD_LIST_SEARCH_BYID, &cur_alarm_record, (void *) alarm_id);
48665aa6:	67c3      	move	a2,v1
48665aa8:	6c01      	li	a0,1
48665aaa:	ea40      	jalr	v0
48665aac:	0504      	addiu	a1,sp,16
48665aae:	5200      	slti	v0,0
        if (ret_index < 0)
48665ab0:	67c2      	move	a2,v0
48665ab2:	6108      	btnez	48665ac4 <time_alarm_set_alarm_delete+0x2c>
48665ab4:	b006      	lw	s0,48665acc <time_alarm_set_alarm_delete+0x34>
        {
            return RESULT_NULL;
        }
    }

    time_alarm_record_list_operate(RECORD_LIST_DELETE_BYINDEX, 0, (void *) ret_index);
48665ab6:	6c07      	li	a0,7
48665ab8:	e840      	jalr	s0
48665aba:	6d00      	li	a1,0
48665abc:	6c03      	li	a0,3
    //刷新闹钟设置
    time_alarm_record_list_operate(RECORD_LIST_UPDATE_ALARM, (void *) UPDATE_ALARM_DEL, 0);
48665abe:	6d01      	li	a1,1
48665ac0:	e840      	jalr	s0
48665ac2:	6e00      	li	a2,0
48665ac4:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665ac6:	6469      	restore	72,ra,s0
48665ac8:	e8a0      	jrc	ra
48665aca:	0000      	addiu	s0,sp,0
48665acc:	5a11      	sltiu	v0,17
48665ace:	4872      	addiu	s0,114

48665ad0 <time_alarm_get_alarm_param>:
48665ad0:	64c7      	save	56,ra

//获取闹钟参数
app_result_e time_alarm_get_alarm_param(uint32 data1, uint32 data2)
{
48665ad2:	b20d      	lw	v0,48665b04 <time_alarm_get_alarm_param+0x34>
    uint8 tmp_param_buf[RCP_COMMAND_HEAD_SIZE + sizeof(alarm_param_t)];
    alarm_param_t *p_tmp_alarm_param = (alarm_param_t *) (tmp_param_buf + RCP_COMMAND_HEAD_SIZE);

    p_tmp_alarm_param->snooze_time = sys_comval->snooze_timer;
48665ad4:	679d      	move	a0,sp
48665ad6:	9a60      	lw	v1,0(v0)
48665ad8:	b20c      	lw	v0,48665b08 <time_alarm_get_alarm_param+0x38>
    p_tmp_alarm_param->snooze_max_count = sys_comval->snooze_max;
    p_tmp_alarm_param->overtime = sys_comval->alarm_overtime;

    com_rcp_send_pkg(0, 0, tmp_param_buf, sizeof(tmp_param_buf), sizeof(tmp_param_buf));
48665ada:	f020 a3e9 	lbu	a3,41(v1)
48665ade:	f020 c4e8 	sb	a3,40(a0)
48665ae2:	f020 a3ca 	lbu	a2,42(v1)
48665ae6:	6f14      	li	a3,20
48665ae8:	f020 c4c9 	sb	a2,41(a0)
48665aec:	f020 a3ab 	lbu	a1,43(v1)
48665af0:	0606      	addiu	a2,sp,24
48665af2:	f020 c4aa 	sb	a1,42(a0)
48665af6:	6c00      	li	a0,0
48665af8:	d704      	sw	a3,16(sp)
48665afa:	ea40      	jalr	v0
48665afc:	67a4      	move	a1,a0
48665afe:	6a00      	li	v0,0

    return RESULT_NULL;
}
48665b00:	6447      	restore	56,ra
48665b02:	e8a0      	jrc	ra
48665b04:	999c      	lw	a0,112(s1)
48665b06:	9fc1      	lw	a2,4(a3)
48665b08:	5f29      	sltiu	a3,41
48665b0a:	482a      	addiu	s0,42

48665b0c <time_alarm_set_alarm_param>:
48665b0c:	a660      	lbu	v1,0(a2)

//设置闹钟参数
app_result_e time_alarm_set_alarm_param(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
    alarm_param_t *p_tmp_alarm_param = (alarm_param_t *) data;

    if (p_tmp_alarm_param->snooze_time <= 30)
48665b0e:	5b1f      	sltiu	v1,31
48665b10:	6004      	bteqz	48665b1a <time_alarm_set_alarm_param+0xe>
48665b12:	b40c      	lw	a0,48665b40 <time_alarm_set_alarm_param+0x34>
    {
        sys_comval->snooze_timer = p_tmp_alarm_param->snooze_time;
48665b14:	9c40      	lw	v0,0(a0)
48665b16:	f020 c269 	sb	v1,41(v0)
48665b1a:	a660      	lbu	v1,0(a2)
    }
    if (p_tmp_alarm_param->snooze_time <= 10)
48665b1c:	5b0b      	sltiu	v1,11
48665b1e:	6005      	bteqz	48665b2a <time_alarm_set_alarm_param+0x1e>
48665b20:	b208      	lw	v0,48665b40 <time_alarm_set_alarm_param+0x34>
    {
        sys_comval->snooze_max = p_tmp_alarm_param->snooze_max_count;
48665b22:	a6e1      	lbu	a3,1(a2)
48665b24:	9aa0      	lw	a1,0(v0)
48665b26:	f020 c5ea 	sb	a3,42(a1)
48665b2a:	a680      	lbu	a0,0(a2)
    }
    if (p_tmp_alarm_param->snooze_time <= 30)
48665b2c:	5c1f      	sltiu	a0,31
48665b2e:	6005      	bteqz	48665b3a <time_alarm_set_alarm_param+0x2e>
48665b30:	b704      	lw	a3,48665b40 <time_alarm_set_alarm_param+0x34>
    {
        sys_comval->alarm_overtime = p_tmp_alarm_param->overtime;
48665b32:	a6a2      	lbu	a1,2(a2)
48665b34:	9f60      	lw	v1,0(a3)
48665b36:	f020 c3ab 	sb	a1,43(v1)
48665b3a:	e820      	jr	ra
    }

    return RESULT_NULL;
}
48665b3c:	6a00      	li	v0,0
48665b3e:	0000      	addiu	s0,sp,0
48665b40:	999c      	lw	a0,112(s1)
48665b42:	9fc1      	lw	a2,4(a3)

48665b44 <ring_filename_type>:
48665b44:	a460      	lbu	v1,0(a0)
uint8 ring_filename_type(uint8 *info)
{
    uint8 code_type = 0; //ANSI

    if ((info[0] == 0xff) && (info[1] == 0xfe))
48665b46:	6d00      	li	a1,0
48665b48:	73ff      	cmpi	v1,255
48665b4a:	6105      	btnez	48665b56 <ring_filename_type+0x12>
48665b4c:	a441      	lbu	v0,1(a0)
48665b4e:	72fe      	cmpi	v0,254
48665b50:	6102      	btnez	48665b56 <ring_filename_type+0x12>
48665b52:	45a1      	addiu	a1,a1,1
    { //UTF16 LE
        code_type = 1;
48665b54:	100f      	b	48665b74 <ring_filename_type+0x30>
48665b56:	73fe      	cmpi	v1,254
    }
    else if ((info[0] == 0xfe) && (info[1] == 0xff))
48665b58:	6105      	btnez	48665b64 <ring_filename_type+0x20>
48665b5a:	a4c1      	lbu	a2,1(a0)
48665b5c:	76ff      	cmpi	a2,255
48665b5e:	6102      	btnez	48665b64 <ring_filename_type+0x20>
48665b60:	6d02      	li	a1,2
    { //UTF16 BE
        code_type = 2;
48665b62:	1008      	b	48665b74 <ring_filename_type+0x30>
48665b64:	73ef      	cmpi	v1,239
    }
    else if ((info[0] == 0xef) && (info[1] == 0xbb) && (info[1] == 0xbf))
48665b66:	6106      	btnez	48665b74 <ring_filename_type+0x30>
48665b68:	a481      	lbu	a0,1(a0)
48665b6a:	74bb      	cmpi	a0,187
48665b6c:	6103      	btnez	48665b74 <ring_filename_type+0x30>
48665b6e:	74bf      	cmpi	a0,191
48665b70:	6101      	btnez	48665b74 <ring_filename_type+0x30>
48665b72:	6d03      	li	a1,3
    { //UTF-8
        code_type = 3;
48665b74:	e820      	jr	ra
    }
    else
    {
        ; //do nothing
    }

    return code_type;
}
48665b76:	6745      	move	v0,a1

48665b78 <time_alarm_get_ring_folder>:
48665b78:	64fa      	save	80,ra,s0-s1

/*获取本地磁盘闹铃目录（类型）列表*/
app_result_e time_alarm_get_ring_folder(uint32 data1, uint32 data2)
{
48665b7a:	6d00      	li	a1,0
    ring_folder_infor_t tmp_ring_folder;
    uint8 tmp_ring_folder_type[RCP_RING_FOLDER_MAX];
    int param, i;

    com_rcp_send_pkg(RCP_RING_FOLDER_MAX, 0, NULL, 0, sizeof(ring_folder_infor_t) * RCP_RING_FOLDER_MAX);
48665b7c:	6c80      	li	a0,128
48665b7e:	b314      	lw	v1,48665bcc <time_alarm_get_ring_folder+0x54>
48665b80:	67c5      	move	a2,a1
48665b82:	67e5      	move	a3,a1
48665b84:	d404      	sw	a0,16(sp)
48665b86:	eb40      	jalr	v1
48665b88:	6c04      	li	a0,4
48665b8a:	b212      	lw	v0,48665bd0 <time_alarm_get_ring_folder+0x58>

    com_load_share_data(COM_SHARE_DATA_RING_TYPE, tmp_ring_folder_type, RCP_RING_FOLDER_MAX, 0);
48665b8c:	6c03      	li	a0,3
48665b8e:	050e      	addiu	a1,sp,56
48665b90:	6e04      	li	a2,4
48665b92:	ea40      	jalr	v0
48665b94:	6f00      	li	a3,0
48665b96:	6900      	li	s1,0

    for (i = 0; i < RCP_RING_FOLDER_MAX; i++)
48665b98:	0006      	addiu	s0,sp,24
    {
        tmp_ring_folder.ring_type = tmp_ring_folder_type[i];
48665b9a:	e02d      	addu	v1,s0,s1
48665b9c:	f020 a3e0 	lbu	a3,32(v1)
48665ba0:	67bd      	move	a1,sp
48665ba2:	6e00      	li	a2,0
        tmp_ring_folder.code_type = 0;
48665ba4:	b20b      	lw	v0,48665bd0 <time_alarm_get_ring_folder+0x58>
        param = (0 << 8) | i; //load short name
        com_load_share_data(COM_SHARE_DATA_RING_FOLDER_SUB, tmp_ring_folder.folder_name, 12, param);
48665ba6:	c5f8      	sb	a3,24(a1)
48665ba8:	c5d9      	sb	a2,25(a1)
48665baa:	67f1      	move	a3,s1
48665bac:	6c01      	li	a0,1
48665bae:	f000 051a 	addiu	a1,sp,26
48665bb2:	ea40      	jalr	v0
48665bb4:	6e0c      	li	a2,12
48665bb6:	b208      	lw	v0,48665bd4 <time_alarm_get_ring_folder+0x5c>

        com_rcp_send_pkg_cont(&tmp_ring_folder, sizeof(ring_folder_infor_t));
48665bb8:	6790      	move	a0,s0
48665bba:	6d20      	li	a1,32
48665bbc:	ea40      	jalr	v0
48665bbe:	4121      	addiu	s1,s1,1
48665bc0:	5104      	slti	s1,4
48665bc2:	61ea      	btnez	48665b98 <time_alarm_get_ring_folder+0x20>
48665bc4:	6a00      	li	v0,0
    }

    return RESULT_NULL;
}
48665bc6:	647a      	restore	80,ra,s0-s1
48665bc8:	e8a0      	jrc	ra
48665bca:	0000      	addiu	s0,sp,0
48665bcc:	5f29      	sltiu	a3,41
48665bce:	482a      	addiu	s0,42
48665bd0:	5cd1      	sltiu	a0,209
48665bd2:	4846      	addiu	s0,70
48665bd4:	5801      	sltiu	s0,1
48665bd6:	48aa      	addiu	s0,-86

48665bd8 <time_alarm_builtin_ring_list>:
48665bd8:	64ec      	save	96,ra,s0

/*组织并发送内置闹铃列表*/
void time_alarm_builtin_ring_list(uint8 mode)
{
48665bda:	6d00      	li	a1,0
    ring_song_t tmp_ring_song;
    uint8 total_num;
    uint8 i;

    //cal all rings
    total_num = BUILDIN_RING_MAX;

    if (mode == GET_RING_ALL_TYPE)
    {
#if (SUPPORT_RING_FOLDER == 1)
        uint8 tmp_ring_foldernum[RCP_RING_FOLDER_MAX];

        time_alarm_record_list_operate(RECORD_LIST_READ_FOLDERNUM, tmp_ring_foldernum, 0);
        //闹铃目录
        for (i = 0; i < RCP_RING_FOLDER_MAX; i++)
        {
            total_num += tmp_ring_foldernum[i];
        }
#endif
    }

    com_rcp_send_pkg(total_num, 0, NULL, 0, sizeof(ring_song_t) * total_num);
48665bdc:	6b40      	li	v1,64
48665bde:	b20f      	lw	v0,48665c18 <time_alarm_builtin_ring_list+0x40>
48665be0:	d304      	sw	v1,16(sp)
48665be2:	6c01      	li	a0,1
48665be4:	67c5      	move	a2,a1
48665be6:	ea40      	jalr	v0
48665be8:	67e5      	move	a3,a1
48665bea:	6800      	li	s0,0
    //先发送内置铃声，如果是 GET_RING_ALL_TYPE 模式，后面将接着发送其他类型铃声
    for (i = 0; i < BUILDIN_RING_MAX; i++)
48665bec:	67bd      	move	a1,sp
    {
        tmp_ring_song.ring_type = RING_TYPE_BUILTIN;
48665bee:	6f03      	li	a3,3
48665bf0:	6e00      	li	a2,0
        tmp_ring_song.code_type = 0;
48665bf2:	b20b      	lw	v0,48665c1c <time_alarm_builtin_ring_list+0x44>

        com_load_share_data(COM_SHARE_DATA_RING_BUILDIN, tmp_ring_song.song_name, 12, i);
48665bf4:	c5f8      	sb	a3,24(a1)
48665bf6:	c5db      	sb	a2,27(a1)
48665bf8:	67f0      	move	a3,s0
48665bfa:	6c02      	li	a0,2
48665bfc:	0507      	addiu	a1,sp,28
48665bfe:	ea40      	jalr	v0
48665c00:	6e0c      	li	a2,12
48665c02:	b208      	lw	v0,48665c20 <time_alarm_builtin_ring_list+0x48>

        com_rcp_send_pkg_cont(&tmp_ring_song, sizeof(ring_song_t));
48665c04:	0406      	addiu	a0,sp,24
48665c06:	ea40      	jalr	v0
48665c08:	6d40      	li	a1,64
48665c0a:	4081      	addiu	a0,s0,1
48665c0c:	6704      	move	s0,a0
48665c0e:	e811      	zeb	s0
48665c10:	20ed      	beqz	s0,48665bec <time_alarm_builtin_ring_list+0x14>
48665c12:	646c      	restore	96,ra,s0
48665c14:	e8a0      	jrc	ra
48665c16:	0000      	addiu	s0,sp,0
48665c18:	5f29      	sltiu	a3,41
48665c1a:	482a      	addiu	s0,42
48665c1c:	5cd1      	sltiu	a0,209
48665c1e:	4846      	addiu	s0,70
48665c20:	5801      	sltiu	s0,1
48665c22:	48aa      	addiu	s0,-86

48665c24 <time_alarm_folder_ring_list>:
48665c24:	64f0      	save	128,ra,s0-s1
    }
}

/*组织并发送目录闹铃列表*/
void time_alarm_folder_ring_list(uint8 index, uint8 source_type, uint8 mode)
{
48665c26:	ed11      	zeb	a1
48665c28:	b22c      	lw	v0,48665cd8 <time_alarm_folder_ring_list+0xb4>
    ring_song_t tmp_ring_song;
    uint8 total_count, total_index, i;
    uint8 tmp_ring_foldernum[RCP_RING_FOLDER_MAX];
    uint32 vm_read_addr;
    int tmp_page, tmp_page_offset;

    time_alarm_record_list_operate(RECORD_LIST_READ_FOLDERNUM, tmp_ring_foldernum, 0);
48665c2a:	6724      	move	s1,a0
48665c2c:	d518      	sw	a1,96(sp)
48665c2e:	6706      	move	s0,a2
48665c30:	6c0a      	li	a0,10
48665c32:	0516      	addiu	a1,sp,88
48665c34:	ea40      	jalr	v0
48665c36:	6e00      	li	a2,0
48665c38:	e911      	zeb	s1
48665c3a:	0406      	addiu	a0,sp,24

    //song count
    total_count = tmp_ring_foldernum[index];
48665c3c:	e435      	addu	a1,a0,s1
48665c3e:	f040 a560 	lbu	v1,64(a1)
48665c42:	6a00      	li	v0,0
    total_index = 0;
48665c44:	d319      	sw	v1,100(sp)
48665c46:	e811      	zeb	s0
48665c48:	d21a      	sw	v0,104(sp)
48665c4a:	6762      	move	v1,v0
    for (i = 0; i < index; i++)
48665c4c:	ea23      	sltu	v0,s1
48665c4e:	600c      	bteqz	48665c68 <time_alarm_folder_ring_list+0x44>
48665c50:	e479      	addu	a2,a0,v1
    {
        total_index += tmp_ring_foldernum[i];
48665c52:	f040 a640 	lbu	v0,64(a2)
48665c56:	951a      	lw	a1,104(sp)
48665c58:	43c1      	addiu	a2,v1,1
48665c5a:	6766      	move	v1,a2
48665c5c:	e55d      	addu	a3,a1,v0
48665c5e:	eb11      	zeb	v1
48665c60:	ef11      	zeb	a3
48665c62:	eb23      	sltu	v1,s1
48665c64:	d71a      	sw	a3,104(sp)
48665c66:	17f3      	b	48665c4e <time_alarm_folder_ring_list+0x2a>
48665c68:	2809      	bnez	s0,48665c7c <time_alarm_folder_ring_list+0x58>
    }

    if (mode == GET_RING_ONE_TYPE)
48665c6a:	9319      	lw	v1,100(sp)
    { //如果是 GET_RING_ALL_TYPE 模式，那么在 tools_builtin_ring_list 发送命令头
        com_rcp_send_pkg(total_count, 0, NULL, 0, sizeof(ring_song_t) * total_count);
48665c6c:	b11c      	lw	s1,48665cdc <time_alarm_folder_ring_list+0xb8>
48665c6e:	3478      	sll	a0,v1,6
48665c70:	d404      	sw	a0,16(sp)
48665c72:	67b0      	move	a1,s0
48665c74:	6783      	move	a0,v1
48665c76:	67d0      	move	a2,s0
48665c78:	e940      	jalr	s1
48665c7a:	67f0      	move	a3,s0
48665c7c:	9719      	lw	a3,100(sp)
    }

    for (i = 0; i < total_count; i++)
48665c7e:	6900      	li	s1,0
48665c80:	2728      	beqz	a3,48665cd2 <time_alarm_folder_ring_list+0xae>
48665c82:	901a      	lw	s0,104(sp)
    {
        tmp_page = (total_index + i) / RING_FOLDER_FILENUM_PER_SEC;
48665c84:	e02d      	addu	v1,s0,s1
48665c86:	5300      	slti	v1,0
48665c88:	67a3      	move	a1,v1
48665c8a:	6001      	bteqz	48665c8e <time_alarm_folder_ring_list+0x6a>
48665c8c:	4d0f      	addiu	a1,15
48665c8e:	35b3      	sra	a1,4
48665c90:	32b0      	sll	v0,a1,4
        tmp_page_offset = (total_index + i) % RING_FOLDER_FILENUM_PER_SEC;
48665c92:	37a0      	sll	a3,a1,8

        vm_read_addr = (uint32) (VM_RING_FOLDER_BASE + tmp_page * 0x10000 + tmp_page_offset * RING_FOLDER_FILENAME_LEN);
48665c94:	e353      	subu	a0,v1,v0
48665c96:	36ec      	sll	a2,a3,3
48665c98:	e681      	addu	s0,a2,a0
48665c9a:	b312      	lw	v1,48665ce0 <time_alarm_folder_ring_list+0xbc>
48665c9c:	3514      	sll	a1,s0,5
48665c9e:	b212      	lw	v0,48665ce4 <time_alarm_folder_ring_list+0xc0>
        sys_vm_read(tmp_ring_song.song_name, vm_read_addr, RING_FOLDER_FILENAME_LEN);
48665ca0:	0007      	addiu	s0,sp,28
48665ca2:	e575      	addu	a1,v1
48665ca4:	6e20      	li	a2,32
48665ca6:	6790      	move	a0,s0
48665ca8:	ea40      	jalr	v0
48665caa:	6f12      	li	a3,18
48665cac:	679d      	move	a0,sp

        tmp_ring_song.ring_type = source_type;
48665cae:	f060 a4e0 	lbu	a3,96(a0)
48665cb2:	c4f8      	sb	a3,24(a0)
48665cb4:	1b30 96d1 	jal	48665b44 <ring_filename_type>
        tmp_ring_song.code_type = ring_filename_type(tmp_ring_song.song_name);
48665cb8:	6790      	move	a0,s0
48665cba:	67dd      	move	a2,sp
48665cbc:	b30b      	lw	v1,48665ce8 <time_alarm_folder_ring_list+0xc4>

        //sequencial packet
        com_rcp_send_pkg_cont(&tmp_ring_song, sizeof(ring_song_t));
48665cbe:	c65b      	sb	v0,27(a2)
48665cc0:	6d40      	li	a1,64
48665cc2:	eb40      	jalr	v1
48665cc4:	0406      	addiu	a0,sp,24
48665cc6:	41a1      	addiu	a1,s1,1
48665cc8:	6725      	move	s1,a1
48665cca:	9219      	lw	v0,100(sp)
48665ccc:	e911      	zeb	s1
48665cce:	e943      	sltu	s1,v0
48665cd0:	61d8      	btnez	48665c82 <time_alarm_folder_ring_list+0x5e>
48665cd2:	6470      	restore	128,ra,s0-s1
48665cd4:	e8a0      	jrc	ra
48665cd6:	0000      	addiu	s0,sp,0
48665cd8:	5a11      	sltiu	v0,17
48665cda:	4872      	addiu	s0,114
48665cdc:	5f29      	sltiu	a3,41
48665cde:	482a      	addiu	s0,42
48665ce0:	0000      	addiu	s0,sp,0
48665ce2:	001c      	addiu	s0,sp,112
48665ce4:	e901      	sdbbp	8
48665ce6:	bfc1      	lwu	a2,4(a3)
48665ce8:	5801      	sltiu	s0,1
48665cea:	48aa      	addiu	s0,-86

48665cec <time_alarm_get_ring_list>:
48665cec:	64c3      	save	24,ra
    }
}

/*获取闹铃文件列表*/
app_result_e time_alarm_get_ring_list(uint32 data1, uint32 data2)
{
48665cee:	ec11      	zeb	a0
    ring_type_e ring_type = (ring_type_e) data1;
48665cf0:	7403      	cmpi	a0,3
    uint8 i;

    //如果卡已拔出，那么将卡闹铃目录数目清0
#if (SUPPORT_RING_FOLDER == 1)
    if (get_card_state() == CARD_STATE_CARD_NULL)
    {
        uint8 tmp_ring_foldernum[RCP_RING_FOLDER_MAX];

        libc_memset(tmp_ring_foldernum, 0, RCP_RING_FOLDER_MAX);
        time_alarm_record_list_operate(RECORD_LIST_WRITE_FOLDERNUM, tmp_ring_foldernum, 0);
    }
#endif

    switch (ring_type)
48665cf2:	6c00      	li	a0,0
    {
        case RING_TYPE_BUILTIN: //内置闹铃
        time_alarm_builtin_ring_list(GET_RING_ONE_TYPE);
48665cf4:	6001      	bteqz	48665cf8 <time_alarm_get_ring_list+0xc>
48665cf6:	6c01      	li	a0,1
        break;

#if (SUPPORT_RING_FOLDER == 1)
        case RING_TYPE_FOLDER1: //第一个目录
        case RING_TYPE_FOLDER2: //第二个目录
        case RING_TYPE_FOLDER3: //第三个目录
        case RING_TYPE_FOLDER4: //第四个目录
        {
            uint8 index = (uint8) (ring_type - RING_TYPE_FOLDER1);
            time_alarm_folder_ring_list(index, RING_TYPE_FOLDER1 + index, GET_RING_ONE_TYPE);
        }
        break;
#endif

        default:
        time_alarm_builtin_ring_list(GET_RING_ALL_TYPE);
48665cf8:	1b30 96f6 	jal	48665bd8 <time_alarm_builtin_ring_list>
48665cfc:	6500      	nop
48665cfe:	6a00      	li	v0,0
#if (SUPPORT_RING_FOLDER == 1)
        for (i = 0; i < RCP_RING_FOLDER_MAX; i++)
        {
            time_alarm_folder_ring_list(i, RING_TYPE_FOLDER1 + i, GET_RING_ALL_TYPE);
        }
#endif
        break;
    }

    return RESULT_NULL;
}
48665d00:	6443      	restore	24,ra
48665d02:	e8a0      	jrc	ra

48665d04 <alarm_alarm_snooze>:
48665d04:	b203      	lw	v0,48665d0c <alarm_alarm_snooze+0x8>

app_result_e alarm_alarm_snooze(uint32 data1, uint32 data2)
{
    g_rcp_ctrl_quit_flag = TRUE;
48665d06:	6b01      	li	v1,1
48665d08:	c260      	sb	v1,0(v0)
48665d0a:	6aff      	li	v0,255
    return RESULT_ALARM_SNOOZE;
}
48665d0c:	e820      	jr	ra
48665d0e:	4a1b      	addiu	v0,27
48665d10:	a188      	lbu	a0,8(s1)
48665d12:	9fc1      	lw	a2,4(a3)

48665d14 <alarm_alarm_close>:
48665d14:	b203      	lw	v0,48665d20 <alarm_alarm_close+0xc>

app_result_e alarm_alarm_close(uint32 data1, uint32 data2)
{
    g_rcp_ctrl_quit_flag = TRUE;
48665d16:	6b01      	li	v1,1
48665d18:	c260      	sb	v1,0(v0)
48665d1a:	6aff      	li	v0,255
    return RESULT_ALARM_CLOSE;
}
48665d1c:	e820      	jr	ra
48665d1e:	4a1c      	addiu	v0,28
48665d20:	a188      	lbu	a0,8(s1)
48665d22:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_26:

486a5800 <tm_alarm_create_set_calendar_view>:
486a5800:	64c5      	save	40,ra

const key_event_map_t calendar_ke_maplist[];
void tm_alarm_set_calendar_view(view_update_e mode);
void tm_alarm_create_set_calendar_view(void)
{
486a5802:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_SUB;
486a5804:	6b01      	li	v1,1
486a5806:	c670      	sb	v1,16(a2)
486a5808:	b509      	lw	a1,486a582c <tm_alarm_create_set_calendar_view+0x2c>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 8000;
    create_view_param.ke_maplist = calendar_ke_maplist;
486a580a:	b30a      	lw	v1,486a5830 <tm_alarm_create_set_calendar_view+0x30>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = tm_alarm_set_calendar_view;
486a580c:	6a00      	li	v0,0
486a580e:	c651      	sb	v0,17(a2)
486a5810:	f743 6f00 	li	a3,8000
486a5814:	6c00      	li	a0,0
486a5816:	b208      	lw	v0,486a5834 <tm_alarm_create_set_calendar_view+0x34>
    com_view_add(COM_VIEW_ID_SET_CALENDAR, &create_view_param);
486a5818:	d505      	sw	a1,20(sp)
486a581a:	d406      	sw	a0,24(sp)
486a581c:	cee9      	sh	a3,18(a2)
486a581e:	d307      	sw	v1,28(sp)
486a5820:	6c81      	li	a0,129
486a5822:	ea40      	jalr	v0
486a5824:	0504      	addiu	a1,sp,16
486a5826:	6445      	restore	40,ra
486a5828:	e8a0      	jrc	ra
486a582a:	0000      	addiu	s0,sp,0
486a582c:	5810      	sltiu	s0,16
486a582e:	4876      	addiu	s0,118
486a5830:	5861      	sltiu	s0,97
486a5832:	486a      	addiu	s0,106
486a5834:	5d69      	sltiu	a1,105
486a5836:	485e      	addiu	s0,94

486a5838 <calendar_key_deal_switch_clock>:
486a5838:	64c3      	save	24,ra
}

app_result_e calendar_key_deal_switch_clock(void);
app_result_e calendar_key_deal_switch_menu(void);
app_result_e calendar_key_deal_add(void);
app_result_e calendar_key_deal_sub(void);
app_result_e calendar_key_deal_number_input(void);

void tm_alarm_set_calendar_view(view_update_e mode);
void calendar_handle(void);

const key_event_map_t __section__(".rodata.ke_maplist") calendar_ke_maplist[] =
{
    /*! 返回时钟功能 */
    { { KEY_PLAY, 0, KEY_TYPE_SHORT_UP | KEY_TYPE_LONG_UP, 0 }, calendar_key_deal_switch_clock },

    /*! 切换设置菜单 */
    { { KEY_ABREC, 0, KEY_TYPE_SHORT_UP, 0 }, calendar_key_deal_switch_menu },
    { { KEY_CLK, 0, KEY_TYPE_SHORT_UP, 0 }, calendar_key_deal_switch_menu },

    /*! 调节加 */
    { { KEY_NEXT, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, calendar_key_deal_add },
    { { KEY_NEXT_VOLADD, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, calendar_key_deal_add },

    /*! 调节减 */
    { { KEY_PREV, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, calendar_key_deal_sub },
    { { KEY_PREV_VOLSUB, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, calendar_key_deal_sub },

    /*! 数字按键调节 */
    { { KEY_NUMBER, 0, KEY_TYPE_SHORT_UP | KEY_TYPE_LONG_UP, 0 }, calendar_key_deal_number_input },

    /*! 结束标志 */
    { { KEY_NULL, 0, KEY_TYPE_NULL, 0 }, NULL },
};

app_result_e calendar_key_deal_switch_clock(void)
{
486a583a:	b203      	lw	v0,486a5844 <calendar_key_deal_switch_clock+0xc>
    //tm_alarm_create_clock_view();
    com_view_remove_top_view();
486a583c:	eac0      	jalrc	v0
486a583e:	6a00      	li	v0,0

    return RESULT_NULL;
}
486a5840:	6443      	restore	24,ra
486a5842:	e8a0      	jrc	ra
486a5844:	5e39      	sltiu	a2,57
486a5846:	485e      	addiu	s0,94

486a5848 <__tm_alarm_set_calendar_redraw>:
486a5848:	b405      	lw	a0,486a585c <__tm_alarm_set_calendar_redraw+0x14>

app_result_e calendar_key_deal_switch_menu(void)
{
    app_result_e result;

    result = set_calendar_switch_deal(g_p_set_calendar);
    if (result == RESULT_BACK_SCENE_DISPATCH)
    {
        com_view_remove_top_view();
        result = RESULT_NULL;
    }
    else
    {
        tm_alarm_set_calendar_view(VIEW_UPDATE_REDRAW);
        restart_app_timer(g_p_set_calendar->twinkling_timer_id);
        g_p_set_calendar->twinkling_flag = TRUE;
        g_p_set_calendar->digit_flag = FALSE;
    }

    return result;
}

app_result_e calendar_key_deal_add(void)
{
    set_calendar_add_deal(g_p_set_calendar);

    tm_alarm_set_calendar_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_calendar->twinkling_timer_id);
    g_p_set_calendar->twinkling_flag = TRUE;

    g_p_set_calendar->digit_flag = FALSE;
    return RESULT_NULL;
}

app_result_e calendar_key_deal_sub(void)
{
    set_calendar_sub_deal(g_p_set_calendar);

    tm_alarm_set_calendar_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_calendar->twinkling_timer_id);
    g_p_set_calendar->twinkling_flag = TRUE;

    g_p_set_calendar->digit_flag = FALSE;
    return RESULT_NULL;
}

app_result_e calendar_key_deal_number_input(void)
{
    uint8 number = (uint8) (g_p_view_ke->val - KEY_NUM0);

    if (g_p_set_calendar->digit_flag == FALSE)
    {
        g_p_set_calendar->now_digits = 0;
        switch (g_p_set_calendar->setting_digits)
        {
            case 2:
            *(g_p_set_calendar->setting_num8) = 0;
            break;

            case 4:
            *(g_p_set_calendar->setting_num16) = 0;
            break;

            default:
            break;
        }

        g_p_set_calendar->digit_flag = TRUE;
    }

    switch (g_p_set_calendar->setting_digits)
    {
        case 2:
        if (g_p_set_calendar->now_digits >= 2)
        {
            *(g_p_set_calendar->setting_num8) = number;
            g_p_set_calendar->now_digits = 1;
        }
        else
        {
            *(g_p_set_calendar->setting_num8) = (*(g_p_set_calendar->setting_num8) * 10) + number;
            g_p_set_calendar->now_digits++;
        }
        break;

        case 4:
        if (g_p_set_calendar->now_digits >= 4)
        {
            *(g_p_set_calendar->setting_num16) = number;
            g_p_set_calendar->now_digits = 1;
        }
        else
        {
            *(g_p_set_calendar->setting_num16) = (*(g_p_set_calendar->setting_num16) * 10) + number;
            g_p_set_calendar->now_digits++;
        }
        break;

        default:
        break;
    }

    tm_alarm_set_calendar_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_calendar->twinkling_timer_id);
    g_p_set_calendar->twinkling_flag = TRUE;

    return RESULT_NULL;
}

static void __tm_alarm_set_calendar_redraw(void)
{
    uint16 year, month, day;
    uint16 hour, minute;
    uint16 half1st = 0, half2nd = 0;
    bool half1st_twinkling = FALSE, half2nd_twinkling = FALSE;

    year = g_p_set_calendar->date.year;
    month = g_p_set_calendar->date.month;
    day = g_p_set_calendar->date.day;
    hour = g_p_set_calendar->time.hour;
    minute = g_p_set_calendar->time.minute;

    switch (g_p_set_calendar->calendar_state)
    {
        /*! 设置年份 */
        case calendar_year:
        half1st = year / 100;
        half2nd = year % 100;
        half1st_twinkling = g_p_set_calendar->twinkling_flag;
        half2nd_twinkling = g_p_set_calendar->twinkling_flag;
        break;

        /*! 设置月份 */
        case calendar_month:
        half1st = month;
        half2nd = day;
        half1st_twinkling = g_p_set_calendar->twinkling_flag;
        half2nd_twinkling = TRUE;
        break;

        /*! 设置日期 */
        case calendar_day:
        half1st = month;
        half2nd = day;
        half1st_twinkling = TRUE;
        half2nd_twinkling = g_p_set_calendar->twinkling_flag;
        break;

        /*! 设置小时 */
        case calendar_hour:
        half1st = hour;
        half2nd = minute;
        half1st_twinkling = g_p_set_calendar->twinkling_flag;
        half2nd_twinkling = TRUE;
        break;

        /*! 设置分钟 */
        case calendar_minute:
        half1st = hour;
        half2nd = minute;
        half1st_twinkling = TRUE;
        half2nd_twinkling = g_p_set_calendar->twinkling_flag;
        break;

        default:
        break;
    }

    led_display(LCD_COL, 0xff, 0); //清除:号
    led_display(0, (half1st / 10) + NUM_0, half1st_twinkling);
    led_display(1, (half1st % 10) + NUM_0, half1st_twinkling);
    led_display(2, (half2nd / 10) + NUM_0, half2nd_twinkling);
    led_display(3, (half2nd % 10) + NUM_0, half2nd_twinkling);

    if (g_p_set_calendar->twinkling_flag == TRUE)
486a584a:	9c60      	lw	v1,0(a0)
486a584c:	a356      	lbu	v0,22(v1)
486a584e:	7201      	cmpi	v0,1
486a5850:	6a00      	li	v0,0
    {
        g_p_set_calendar->twinkling_flag = FALSE;
486a5852:	6001      	bteqz	486a5856 <__tm_alarm_set_calendar_redraw+0xe>
486a5854:	6a01      	li	v0,1
    }
    else
    {
        g_p_set_calendar->twinkling_flag = TRUE;
486a5856:	e820      	jr	ra
486a5858:	c356      	sb	v0,22(v1)
486a585a:	0000      	addiu	s0,sp,0
486a585c:	99a4      	lw	a1,16(s1)
486a585e:	9fc1      	lw	a2,4(a3)

486a5860 <tm_alarm_set_calendar_view>:
486a5860:	64f4      	save	32,ra,s0-s1
    }
}

void tm_alarm_set_calendar_view(view_update_e mode)
{
486a5862:	67c4      	move	a2,a0
486a5864:	ee11      	zeb	a2
486a5866:	7601      	cmpi	a2,1
    switch (mode)
486a5868:	604b      	bteqz	486a5900 <tm_alarm_set_calendar_view+0xa0>
486a586a:	5602      	slti	a2,2
486a586c:	6002      	bteqz	486a5872 <tm_alarm_set_calendar_view+0x12>
486a586e:	2606      	beqz	a2,486a587c <tm_alarm_set_calendar_view+0x1c>
486a5870:	105b      	b	486a5928 <tm_alarm_set_calendar_view+0xc8>
486a5872:	7602      	cmpi	a2,2
486a5874:	6056      	bteqz	486a5922 <tm_alarm_set_calendar_view+0xc2>
486a5876:	7603      	cmpi	a2,3
486a5878:	6054      	bteqz	486a5922 <tm_alarm_set_calendar_view+0xc2>
486a587a:	1056      	b	486a5928 <tm_alarm_set_calendar_view+0xc8>
486a587c:	b036      	lw	s0,486a5954 <tm_alarm_set_calendar_view+0xf4>
    {
        case VIEW_UPDATE_CREATE:
        {
            g_p_set_calendar = sys_malloc(sizeof(set_calendar_var_t));
486a587e:	6c18      	li	a0,24
486a5880:	6d04      	li	a1,4
486a5882:	e840      	jalr	s0
486a5884:	6f16      	li	a3,22
486a5886:	67c2      	move	a2,v0
486a5888:	b232      	lw	v0,486a5950 <tm_alarm_set_calendar_view+0xf0>
486a588a:	dac0      	sw	a2,0(v0)
486a588c:	2e05      	bnez	a2,486a5898 <tm_alarm_set_calendar_view+0x38>
            if (g_p_set_calendar == NULL)
486a588e:	0c28      	la	a0,486a592c <tm_alarm_set_calendar_view+0xcc>
            {
                PRINT_ERR("set calendar view malloc fail!!");
486a5890:	67a6      	move	a1,a2
486a5892:	e840      	jalr	s0
486a5894:	6f4b      	li	a3,75
486a5896:	17ff      	b	486a5896 <tm_alarm_set_calendar_view+0x36>
                while (1)
486a5898:	b02e      	lw	s0,486a5950 <tm_alarm_set_calendar_view+0xf0>
                {
                    ; //nothing for QAC
                }
            }

            //读取日期和时间
            sys_get_date(&(g_p_set_calendar->date));
486a589a:	6d00      	li	a1,0
486a589c:	9880      	lw	a0,0(s0)
486a589e:	b12e      	lw	s1,486a5954 <tm_alarm_set_calendar_view+0xf4>
486a58a0:	67c5      	move	a2,a1
486a58a2:	e940      	jalr	s1
486a58a4:	6f26      	li	a3,38
486a58a6:	9880      	lw	a0,0(s0)
            if (g_p_set_calendar->date.year > 2099)
486a58a8:	ac60      	lhu	v1,0(a0)
486a58aa:	f021 5b14 	sltiu	v1,2100
486a58ae:	6107      	btnez	486a58be <tm_alarm_set_calendar_view+0x5e>
486a58b0:	f7c0 6d10 	li	a1,2000
            {
                g_p_set_calendar->date.year = 2000;
486a58b4:	cca0      	sh	a1,0(a0)
486a58b6:	6d00      	li	a1,0
                sys_set_date(&(g_p_set_calendar->date));
486a58b8:	67c5      	move	a2,a1
486a58ba:	e940      	jalr	s1
486a58bc:	6f25      	li	a3,37
486a58be:	98a0      	lw	a1,0(s0)
            }
            sys_get_time(&(g_p_set_calendar->time));
486a58c0:	6f24      	li	a3,36
486a58c2:	4584      	addiu	a0,a1,4
486a58c4:	6d00      	li	a1,0
486a58c6:	e940      	jalr	s1
486a58c8:	67c5      	move	a2,a1
486a58ca:	98c0      	lw	a2,0(s0)

            g_p_set_calendar->calendar_state = calendar_year;
486a58cc:	6f04      	li	a3,4
            g_p_set_calendar->setting_num16 = &(g_p_set_calendar->date.year);
            g_p_set_calendar->setting_digits = 4;
486a58ce:	c6f0      	sb	a3,16(a2)
486a58d0:	9880      	lw	a0,0(s0)
            g_p_set_calendar->now_digits = 0;
486a58d2:	6d00      	li	a1,0
486a58d4:	c4b1      	sb	a1,17(a0)
486a58d6:	9840      	lw	v0,0(s0)
            g_p_set_calendar->digit_flag = FALSE;
486a58d8:	c6b5      	sb	a1,21(a2)
486a58da:	c2b2      	sb	a1,18(v0)
486a58dc:	9860      	lw	v1,0(s0)

            g_p_set_calendar->write_date_falg = FALSE;
486a58de:	dec2      	sw	a2,8(a2)
486a58e0:	c3b3      	sb	a1,19(v1)
486a58e2:	98e0      	lw	a3,0(s0)
            g_p_set_calendar->write_time_falg = FALSE;
486a58e4:	6e01      	li	a2,1

            g_p_set_calendar->twinkling_flag = TRUE;
486a58e6:	c7b4      	sb	a1,20(a3)
486a58e8:	9880      	lw	a0,0(s0)
486a58ea:	b21d      	lw	v0,486a595c <tm_alarm_set_calendar_view+0xfc>
            g_p_set_calendar->twinkling_timer_id = set_app_timer(APP_TIMER_ATTRB_UI | (COM_VIEW_ID_SET_CALENDAR << 8),
486a58ec:	c4d6      	sb	a2,22(a0)
486a58ee:	b61b      	lw	a2,486a5958 <tm_alarm_set_calendar_view+0xf8>
486a58f0:	f110 6c00 	li	a0,33024
486a58f4:	f1e0 6d14 	li	a1,500
486a58f8:	ea40      	jalr	v0
486a58fa:	9800      	lw	s0,0(s0)
486a58fc:	c057      	sb	v0,23(s0)
486a58fe:	1011      	b	486a5922 <tm_alarm_set_calendar_view+0xc2>
486a5900:	b014      	lw	s0,486a5950 <tm_alarm_set_calendar_view+0xf0>
                    500, calendar_handle);

            __tm_alarm_set_calendar_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
            sys_write_rtc(g_p_set_calendar);
486a5902:	b318      	lw	v1,486a5960 <tm_alarm_set_calendar_view+0x100>
486a5904:	eb40      	jalr	v1
486a5906:	9880      	lw	a0,0(s0)
486a5908:	98c0      	lw	a2,0(s0)
            kill_app_timer(g_p_set_calendar->twinkling_timer_id);
486a590a:	b217      	lw	v0,486a5964 <tm_alarm_set_calendar_view+0x104>
486a590c:	ea40      	jalr	v0
486a590e:	8697      	lb	a0,23(a2)
486a5910:	9880      	lw	a0,0(s0)

            sys_free(g_p_set_calendar);
486a5912:	b211      	lw	v0,486a5954 <tm_alarm_set_calendar_view+0xf4>
486a5914:	6d04      	li	a1,4
486a5916:	6e00      	li	a2,0
486a5918:	ea40      	jalr	v0
486a591a:	6f17      	li	a3,23
486a591c:	6b00      	li	v1,0
            g_p_set_calendar = NULL;
486a591e:	d860      	sw	v1,0(s0)
486a5920:	1003      	b	486a5928 <tm_alarm_set_calendar_view+0xc8>
        }
        break;
486a5922:	1b50 9612 	jal	486a5848 <__tm_alarm_set_calendar_redraw>

        case VIEW_UPDATE_REDRAW:
        {
            __tm_alarm_set_calendar_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __tm_alarm_set_calendar_redraw();
486a5926:	6500      	nop
486a5928:	6474      	restore	32,ra,s0-s1
        }
        break;

        default:
        break;
    }
}
486a592a:	e8a0      	jrc	ra
486a592c:	453c      	daddiu	s1,a1,-4
486a592e:	203e      	beqz	s0,486a59ac <calendar_key_deal_number_input+0x44>
486a5930:	6573      	move	s3,v1
486a5932:	2074      	beqz	s0,486a5a1c <calendar_key_deal_sub>
486a5934:	6163      	btnez	486a59fc <calendar_key_deal_number_input+0x94>
486a5936:	656c      	move	t3,a0
486a5938:	646e      	restore	112,ra,s0
486a593a:	7261      	cmpi	v0,97
486a593c:	7620      	cmpi	a2,32
486a593e:	6569      	move	t3,s1
486a5940:	2077      	beqz	s0,486a5a30 <calendar_key_deal_sub+0x14>
486a5942:	616d      	btnez	486a5a1e <calendar_key_deal_sub+0x2>
486a5944:	6c6c      	li	a0,108
486a5946:	636f      	addiu	sp,888
486a5948:	6620      	0x6620
486a594a:	6961      	li	s1,97
486a594c:	216c      	beqz	s1,486a5a26 <calendar_key_deal_sub+0xa>
486a594e:	0021      	addiu	s0,sp,132
486a5950:	99a4      	lw	a1,16(s1)
486a5952:	9fc1      	lw	a2,4(a3)
486a5954:	e901      	sdbbp	8
486a5956:	bfc1      	lwu	a2,4(a3)
486a5958:	5ad5      	sltiu	v0,213
486a595a:	486a      	addiu	s0,106
486a595c:	5915      	sltiu	s1,21
486a595e:	488e      	addiu	s0,-114
486a5960:	5b39      	sltiu	v1,57
486a5962:	486a      	addiu	s0,106
486a5964:	5b01      	sltiu	v1,1
486a5966:	488e      	addiu	s0,-114

486a5968 <calendar_key_deal_number_input>:
486a5968:	64e3      	save	24,ra,s0
486a596a:	b42a      	lw	a0,486a5a10 <calendar_key_deal_number_input+0xa8>
486a596c:	b52a      	lw	a1,486a5a14 <calendar_key_deal_number_input+0xac>
486a596e:	9c60      	lw	v1,0(a0)
486a5970:	a340      	lbu	v0,0(v1)
486a5972:	4af0      	addiu	v0,-16
486a5974:	67c2      	move	a2,v0
486a5976:	9d40      	lw	v0,0(a1)
486a5978:	ee11      	zeb	a2
486a597a:	a272      	lbu	v1,18(v0)
486a597c:	2b10      	bnez	v1,486a599e <calendar_key_deal_number_input+0x36>
486a597e:	c271      	sb	v1,17(v0)
486a5980:	9d40      	lw	v0,0(a1)
486a5982:	a290      	lbu	a0,16(v0)
486a5984:	7402      	cmpi	a0,2
486a5986:	6003      	bteqz	486a598e <calendar_key_deal_number_input+0x26>
486a5988:	7404      	cmpi	a0,4
486a598a:	6004      	bteqz	486a5994 <calendar_key_deal_number_input+0x2c>
486a598c:	1005      	b	486a5998 <calendar_key_deal_number_input+0x30>
486a598e:	9ae3      	lw	a3,12(v0)
486a5990:	c760      	sb	v1,0(a3)
486a5992:	1002      	b	486a5998 <calendar_key_deal_number_input+0x30>
486a5994:	9a02      	lw	s0,8(v0)
486a5996:	c860      	sh	v1,0(s0)
486a5998:	9d60      	lw	v1,0(a1)
486a599a:	6a01      	li	v0,1
486a599c:	c352      	sb	v0,18(v1)
486a599e:	9d80      	lw	a0,0(a1)
486a59a0:	a450      	lbu	v0,16(a0)
486a59a2:	7202      	cmpi	v0,2
486a59a4:	6003      	bteqz	486a59ac <calendar_key_deal_number_input+0x44>
486a59a6:	7204      	cmpi	v0,4
486a59a8:	6014      	bteqz	486a59d2 <calendar_key_deal_number_input+0x6a>
486a59aa:	1023      	b	486a59f2 <calendar_key_deal_number_input+0x8a>
486a59ac:	a4f1      	lbu	a3,17(a0)
486a59ae:	9c83      	lw	a0,12(a0)
486a59b0:	5f02      	sltiu	a3,2
486a59b2:	6104      	btnez	486a59bc <calendar_key_deal_number_input+0x54>
486a59b4:	c4c0      	sb	a2,0(a0)
486a59b6:	9d60      	lw	v1,0(a1)
486a59b8:	6a01      	li	v0,1
486a59ba:	1009      	b	486a59ce <calendar_key_deal_number_input+0x66>
486a59bc:	a4e0      	lbu	a3,0(a0)
486a59be:	6a0a      	li	v0,10
486a59c0:	ef58      	mult	a3,v0
486a59c2:	eb12      	mflo	v1
486a59c4:	e3c1      	addu	s0,v1,a2
486a59c6:	c400      	sb	s0,0(a0)
486a59c8:	9d60      	lw	v1,0(a1)
486a59ca:	a3b1      	lbu	a1,17(v1)
486a59cc:	4541      	addiu	v0,a1,1
486a59ce:	c351      	sb	v0,17(v1)
486a59d0:	1010      	b	486a59f2 <calendar_key_deal_number_input+0x8a>
486a59d2:	a4b1      	lbu	a1,17(a0)
486a59d4:	5d04      	sltiu	a1,4
486a59d6:	9ca2      	lw	a1,8(a0)
486a59d8:	6103      	btnez	486a59e0 <calendar_key_deal_number_input+0x78>
486a59da:	6a01      	li	v0,1
486a59dc:	cdc0      	sh	a2,0(a1)
486a59de:	1008      	b	486a59f0 <calendar_key_deal_number_input+0x88>
486a59e0:	ade0      	lhu	a3,0(a1)
486a59e2:	6a0a      	li	v0,10
486a59e4:	ef58      	mult	a3,v0
486a59e6:	eb12      	mflo	v1
486a59e8:	e3c1      	addu	s0,v1,a2
486a59ea:	cd00      	sh	s0,0(a1)
486a59ec:	a4d1      	lbu	a2,17(a0)
486a59ee:	4641      	addiu	v0,a2,1
486a59f0:	c451      	sb	v0,17(a0)
486a59f2:	1b50 9618 	jal	486a5860 <tm_alarm_set_calendar_view>
486a59f6:	6c02      	li	a0,2
486a59f8:	b007      	lw	s0,486a5a14 <calendar_key_deal_number_input+0xac>
486a59fa:	b208      	lw	v0,486a5a18 <calendar_key_deal_number_input+0xb0>
486a59fc:	98c0      	lw	a2,0(s0)
486a59fe:	ea40      	jalr	v0
486a5a00:	8697      	lb	a0,23(a2)
486a5a02:	9880      	lw	a0,0(s0)
486a5a04:	6d01      	li	a1,1
486a5a06:	6a00      	li	v0,0
486a5a08:	c4b6      	sb	a1,22(a0)
486a5a0a:	6463      	restore	24,ra,s0
486a5a0c:	e8a0      	jrc	ra
486a5a0e:	0000      	addiu	s0,sp,0
486a5a10:	99e4      	lw	a3,16(s1)
486a5a12:	9fc1      	lw	a2,4(a3)
486a5a14:	99a4      	lw	a1,16(s1)
486a5a16:	9fc1      	lw	a2,4(a3)
486a5a18:	5a81      	sltiu	v0,129
486a5a1a:	488e      	addiu	s0,-114

486a5a1c <calendar_key_deal_sub>:
486a5a1c:	64e3      	save	24,ra,s0
486a5a1e:	b00b      	lw	s0,486a5a48 <calendar_key_deal_sub+0x2c>
486a5a20:	b20b      	lw	v0,486a5a4c <calendar_key_deal_sub+0x30>
486a5a22:	ea40      	jalr	v0
486a5a24:	9880      	lw	a0,0(s0)
486a5a26:	1b50 9618 	jal	486a5860 <tm_alarm_set_calendar_view>
486a5a2a:	6c02      	li	a0,2
486a5a2c:	98c0      	lw	a2,0(s0)
486a5a2e:	b209      	lw	v0,486a5a50 <calendar_key_deal_sub+0x34>
486a5a30:	ea40      	jalr	v0
486a5a32:	8697      	lb	a0,23(a2)
486a5a34:	9880      	lw	a0,0(s0)
486a5a36:	6d01      	li	a1,1
486a5a38:	c4b6      	sb	a1,22(a0)
486a5a3a:	9860      	lw	v1,0(s0)
486a5a3c:	6a00      	li	v0,0
486a5a3e:	c352      	sb	v0,18(v1)
486a5a40:	6a00      	li	v0,0
486a5a42:	6463      	restore	24,ra,s0
486a5a44:	e8a0      	jrc	ra
486a5a46:	0000      	addiu	s0,sp,0
486a5a48:	99a4      	lw	a1,16(s1)
486a5a4a:	9fc1      	lw	a2,4(a3)
486a5a4c:	5c05      	sltiu	a0,5
486a5a4e:	486a      	addiu	s0,106
486a5a50:	5a81      	sltiu	v0,129
486a5a52:	488e      	addiu	s0,-114

486a5a54 <calendar_key_deal_add>:
486a5a54:	64e3      	save	24,ra,s0
486a5a56:	b00b      	lw	s0,486a5a80 <calendar_key_deal_add+0x2c>
486a5a58:	b20b      	lw	v0,486a5a84 <calendar_key_deal_add+0x30>
486a5a5a:	ea40      	jalr	v0
486a5a5c:	9880      	lw	a0,0(s0)
486a5a5e:	1b50 9618 	jal	486a5860 <tm_alarm_set_calendar_view>
486a5a62:	6c02      	li	a0,2
486a5a64:	98c0      	lw	a2,0(s0)
486a5a66:	b209      	lw	v0,486a5a88 <calendar_key_deal_add+0x34>
486a5a68:	ea40      	jalr	v0
486a5a6a:	8697      	lb	a0,23(a2)
486a5a6c:	9880      	lw	a0,0(s0)
486a5a6e:	6d01      	li	a1,1
486a5a70:	c4b6      	sb	a1,22(a0)
486a5a72:	9860      	lw	v1,0(s0)
486a5a74:	6a00      	li	v0,0
486a5a76:	c352      	sb	v0,18(v1)
486a5a78:	6a00      	li	v0,0
486a5a7a:	6463      	restore	24,ra,s0
486a5a7c:	e8a0      	jrc	ra
486a5a7e:	0000      	addiu	s0,sp,0
486a5a80:	99a4      	lw	a1,16(s1)
486a5a82:	9fc1      	lw	a2,4(a3)
486a5a84:	5c81      	sltiu	a0,129
486a5a86:	486a      	addiu	s0,106
486a5a88:	5a81      	sltiu	v0,129
486a5a8a:	488e      	addiu	s0,-114

486a5a8c <calendar_key_deal_switch_menu>:
486a5a8c:	64f4      	save	32,ra,s0-s1
486a5a8e:	b10e      	lw	s1,486a5ac4 <calendar_key_deal_switch_menu+0x38>
486a5a90:	b20e      	lw	v0,486a5ac8 <calendar_key_deal_switch_menu+0x3c>
486a5a92:	ea40      	jalr	v0
486a5a94:	9980      	lw	a0,0(s1)
486a5a96:	7281      	cmpi	v0,129
486a5a98:	6702      	move	s0,v0
486a5a9a:	6104      	btnez	486a5aa4 <calendar_key_deal_switch_menu+0x18>
486a5a9c:	b30c      	lw	v1,486a5acc <calendar_key_deal_switch_menu+0x40>
486a5a9e:	eb40      	jalr	v1
486a5aa0:	6800      	li	s0,0
486a5aa2:	100d      	b	486a5abe <calendar_key_deal_switch_menu+0x32>
486a5aa4:	1b50 9618 	jal	486a5860 <tm_alarm_set_calendar_view>
486a5aa8:	6c02      	li	a0,2
486a5aaa:	9960      	lw	v1,0(s1)
486a5aac:	b209      	lw	v0,486a5ad0 <calendar_key_deal_switch_menu+0x44>
486a5aae:	ea40      	jalr	v0
486a5ab0:	8397      	lb	a0,23(v1)
486a5ab2:	99c0      	lw	a2,0(s1)
486a5ab4:	6f01      	li	a3,1
486a5ab6:	c6f6      	sb	a3,22(a2)
486a5ab8:	9980      	lw	a0,0(s1)
486a5aba:	6d00      	li	a1,0
486a5abc:	c4b2      	sb	a1,18(a0)
486a5abe:	6750      	move	v0,s0
486a5ac0:	6474      	restore	32,ra,s0-s1
486a5ac2:	e8a0      	jrc	ra
486a5ac4:	99a4      	lw	a1,16(s1)
486a5ac6:	9fc1      	lw	a2,4(a3)
486a5ac8:	5b6d      	sltiu	v1,109
486a5aca:	486a      	addiu	s0,106
486a5acc:	5e39      	sltiu	a2,57
486a5ace:	485e      	addiu	s0,94
486a5ad0:	5a81      	sltiu	v0,129
486a5ad2:	488e      	addiu	s0,-114

486a5ad4 <calendar_handle>:
486a5ad4:	64c3      	save	24,ra

//日历设置2Hz定时处理
void calendar_handle(void)
{
486a5ad6:	1b50 9618 	jal	486a5860 <tm_alarm_set_calendar_view>
    tm_alarm_set_calendar_view(VIEW_UPDATE_REDRAW);
486a5ada:	6c02      	li	a0,2
486a5adc:	6443      	restore	24,ra
486a5ade:	e8a0      	jrc	ra

486a5ae0 <is_month_valid>:
486a5ae0:	444f      	addiu	v0,a0,-1
}

static bool is_month_valid(uint8 month)
{
    if ((month >= 1) && (month <= 12))
486a5ae2:	5a0c      	sltiu	v0,12
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}
486a5ae4:	e820      	jr	ra
486a5ae6:	6758      	move	v0,t8

486a5ae8 <get_days_max>:
486a5ae8:	64f4      	save	32,ra,s0-s1

static uint8 get_days_max(date_t *this_date)
{
486a5aea:	a402      	lbu	s0,2(a0)
    uint8 days_max;
    bool is_leap;

    if (is_month_valid(this_date->month) == FALSE) //for QAM
486a5aec:	6724      	move	s1,a0
486a5aee:	1b50 96b8 	jal	486a5ae0 <is_month_valid>
486a5af2:	6790      	move	a0,s0
486a5af4:	651a      	move	t8,v0
    {
        return 0;
486a5af6:	221a      	beqz	v0,486a5b2c <get_days_max+0x44>
486a5af8:	a980      	lhu	a0,0(s1)
    }

    is_leap = (uint8) ((((this_date->year % 4) == 0) && ((this_date->year % 100) != 0))
486a5afa:	6a03      	li	v0,3
486a5afc:	ea8c      	and	v0,a0
486a5afe:	6d00      	li	a1,0
486a5b00:	2a05      	bnez	v0,486a5b0c <get_days_max+0x24>
486a5b02:	4a64      	addiu	v0,100
486a5b04:	ec5b      	divu	zero,a0,v0
486a5b06:	ea10      	mfhi	v0
486a5b08:	6500      	nop
486a5b0a:	2a06      	bnez	v0,486a5b18 <get_days_max+0x30>
486a5b0c:	f180 6e10 	li	a2,400
486a5b10:	ecdb      	divu	zero,a0,a2
486a5b12:	eb10      	mfhi	v1
486a5b14:	6500      	nop
486a5b16:	2b01      	bnez	v1,486a5b1a <get_days_max+0x32>
486a5b18:	6d01      	li	a1,1
486a5b1a:	b207      	lw	v0,486a5b34 <get_days_max+0x4c>
            || ((this_date->year % 400) == 0));
    days_max = day_table[this_date->month - 1];
486a5b1c:	e05d      	addu	a3,s0,v0
486a5b1e:	f7ff a77f 	lbu	v1,-1(a3)
486a5b22:	2503      	beqz	a1,486a5b2a <get_days_max+0x42>
    if ((is_leap == TRUE) && (this_date->month == 2))
486a5b24:	7002      	cmpi	s0,2
486a5b26:	6101      	btnez	486a5b2a <get_days_max+0x42>
486a5b28:	6b1d      	li	v1,29
    {
        days_max = 29;
486a5b2a:	651b      	move	t8,v1
    }

    return days_max;
486a5b2c:	6758      	move	v0,t8
}
486a5b2e:	6474      	restore	32,ra,s0-s1
486a5b30:	e8a0      	jrc	ra
486a5b32:	0000      	addiu	s0,sp,0
486a5b34:	5d04      	sltiu	a1,4
486a5b36:	486a      	addiu	s0,106

486a5b38 <sys_write_rtc>:
486a5b38:	64e3      	save	24,ra,s0

static bool is_day_valid(date_t *this_date)
{
    if ((this_date->day >= 1) && (this_date->day <= get_days_max(this_date)))
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

static bool is_hour_valid(uint8 hour)
{
    if (hour <= 23)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

static bool is_minute_valid(uint8 minute)
{
    if (minute <= 59)
    {
        return TRUE;
    }
    else
    {
        return FALSE;
    }
}

//写入rtc寄存器
void sys_write_rtc(set_calendar_var_t *set_calendar_var)
{
486a5b3a:	a453      	lbu	v0,19(a0)
    if (set_calendar_var->write_date_falg == TRUE)
486a5b3c:	6704      	move	s0,a0
486a5b3e:	7201      	cmpi	v0,1
486a5b40:	6105      	btnez	486a5b4c <sys_write_rtc+0x14>
486a5b42:	6d00      	li	a1,0
    {
        sys_set_date(&(set_calendar_var->date));
486a5b44:	b209      	lw	v0,486a5b68 <sys_write_rtc+0x30>
486a5b46:	67c5      	move	a2,a1
486a5b48:	ea40      	jalr	v0
486a5b4a:	6f25      	li	a3,37
486a5b4c:	a074      	lbu	v1,20(s0)
    }
    if (set_calendar_var->write_time_falg == TRUE)
486a5b4e:	7301      	cmpi	v1,1
486a5b50:	6108      	btnez	486a5b62 <sys_write_rtc+0x2a>
486a5b52:	6c00      	li	a0,0
    {
        set_calendar_var->time.second = 0;
486a5b54:	6d00      	li	a1,0
        sys_set_time(&(set_calendar_var->time));
486a5b56:	b205      	lw	v0,486a5b68 <sys_write_rtc+0x30>
486a5b58:	c086      	sb	a0,6(s0)
486a5b5a:	67c5      	move	a2,a1
486a5b5c:	4084      	addiu	a0,s0,4
486a5b5e:	ea40      	jalr	v0
486a5b60:	6f23      	li	a3,35
486a5b62:	6463      	restore	24,ra,s0
    }
}
486a5b64:	e8a0      	jrc	ra
486a5b66:	0000      	addiu	s0,sp,0
486a5b68:	e901      	sdbbp	8
486a5b6a:	bfc1      	lwu	a2,4(a3)

486a5b6c <set_calendar_switch_deal>:
486a5b6c:	64f5      	save	40,ra,s0-s1

app_result_e set_calendar_switch_deal(set_calendar_var_t *set_calendar_var)
{
486a5b6e:	a475      	lbu	v1,21(a0)
    app_result_e result = RESULT_NULL;

    switch (set_calendar_var->calendar_state)
486a5b70:	6a00      	li	v0,0
486a5b72:	5b06      	sltiu	v1,6
486a5b74:	6704      	move	s0,a0
486a5b76:	d204      	sw	v0,16(sp)
486a5b78:	6041      	bteqz	486a5bfc <.LBE7+0x10>
486a5b7a:	0d04      	la	a1,486a5b88 <set_calendar_switch_deal+0x1c>
486a5b7c:	3764      	sll	a3,v1,1
486a5b7e:	e7b9      	addu	a2,a3,a1
486a5b80:	8e80      	lh	a0,0(a2)
486a5b82:	e4ad      	addu	v1,a0,a1
486a5b84:	eb80      	jrc	v1
486a5b86:	0000      	addiu	s0,sp,0
486a5b88:	000d      	addiu	s0,sp,52
486a5b8a:	001f      	addiu	s0,sp,124
486a5b8c:	0033      	addiu	s0,sp,204
486a5b8e:	004f      	addiu	s0,sp,316
486a5b90:	0063      	addiu	s0,sp,396
486a5b92:	0071      	addiu	s0,sp,452

486a5b94 <.LBB2>:
486a5b94:	a840      	lhu	v0,0(s0)
486a5b96:	f03f 4a10 	addiu	v0,-2000

486a5b9a <.LBE2>:
486a5b9a:	5a64      	sltiu	v0,100
486a5b9c:	602d      	bteqz	486a5bf8 <.LBE7+0xc>
486a5b9e:	6b01      	li	v1,1
    {
        /*! 设置年份 */
        case calendar_year:
        if (is_year_valid(set_calendar_var->date.year) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_calendar_var->calendar_state = calendar_month;
486a5ba0:	4042      	addiu	v0,s0,2
            set_calendar_var->setting_num8 = &(set_calendar_var->date.month);
486a5ba2:	c075      	sb	v1,21(s0)
486a5ba4:	101e      	b	486a5be2 <.LBE6+0xa>
486a5ba6:	1b50 96b8 	jal	486a5ae0 <is_month_valid>
            set_calendar_var->setting_digits = 2;
        }
        break;

        /*! 设置月份 */
        case calendar_month:
        if (is_month_valid(set_calendar_var->date.month) == FALSE)
486a5baa:	a082      	lbu	a0,2(s0)
486a5bac:	2225      	beqz	v0,486a5bf8 <.LBE7+0xc>
486a5bae:	6c02      	li	a0,2
        {
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_calendar_var->calendar_state = calendar_day;
486a5bb0:	40a3      	addiu	a1,s0,3
            set_calendar_var->setting_num8 = &(set_calendar_var->date.day);
486a5bb2:	c095      	sb	a0,21(s0)
486a5bb4:	d8a3      	sw	a1,12(s0)
486a5bb6:	c090      	sb	a0,16(s0)
            set_calendar_var->setting_digits = 2;
486a5bb8:	1021      	b	486a5bfc <.LBE7+0x10>

486a5bba <.LBB4>:
        }
        break;
486a5bba:	a023      	lbu	s1,3(s0)
486a5bbc:	2106      	beqz	s1,486a5bca <.LBB4+0x10>
486a5bbe:	1b50 96ba 	jal	486a5ae8 <get_days_max>
486a5bc2:	6790      	move	a0,s0
486a5bc4:	ea23      	sltu	v0,s1
486a5bc6:	6a01      	li	v0,1
486a5bc8:	6001      	bteqz	486a5bcc <.LBE4>
486a5bca:	6a00      	li	v0,0

486a5bcc <.LBE4>:
486a5bcc:	2215      	beqz	v0,486a5bf8 <.LBE7+0xc>
486a5bce:	6e03      	li	a2,3

        /*! 设置日期 */
        case calendar_day:
        if (is_day_valid(&(set_calendar_var->date)) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_calendar_var->calendar_state = calendar_hour;
486a5bd0:	4044      	addiu	v0,s0,4
            set_calendar_var->setting_num8 = &(set_calendar_var->time.hour);
486a5bd2:	c0d5      	sb	a2,21(s0)
486a5bd4:	1006      	b	486a5be2 <.LBE6+0xa>

486a5bd6 <.LBB6>:
486a5bd6:	a0e4      	lbu	a3,4(s0)

486a5bd8 <.LBE6>:
486a5bd8:	5f18      	sltiu	a3,24
486a5bda:	600e      	bteqz	486a5bf8 <.LBE7+0xc>
486a5bdc:	6a04      	li	v0,4
            set_calendar_var->setting_digits = 2;
        }
        break;

        /*! 设置小时 */
        case calendar_hour:
        if (is_hour_valid(set_calendar_var->time.hour) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_calendar_var->calendar_state = calendar_minute;
486a5bde:	c055      	sb	v0,21(s0)
486a5be0:	4045      	addiu	v0,s0,5
            set_calendar_var->setting_num8 = &(set_calendar_var->time.minute);
486a5be2:	6b02      	li	v1,2
            set_calendar_var->setting_digits = 2;
486a5be4:	d843      	sw	v0,12(s0)
486a5be6:	c070      	sb	v1,16(s0)
486a5be8:	1009      	b	486a5bfc <.LBE7+0x10>

486a5bea <.LBB7>:
        }
        break;
486a5bea:	a0a5      	lbu	a1,5(s0)

486a5bec <.LBE7>:
486a5bec:	6c81      	li	a0,129

        /*! 设置分钟 */
        case calendar_minute:
        if (is_minute_valid(set_calendar_var->time.minute) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
486a5bee:	5d3c      	sltiu	a1,60
486a5bf0:	d404      	sw	a0,16(sp)
486a5bf2:	6004      	bteqz	486a5bfc <.LBE7+0x10>
486a5bf4:	6e05      	li	a2,5
            break;
        }
        else
        {
            set_calendar_var->calendar_state = calendar_finish;
486a5bf6:	c0d5      	sb	a2,21(s0)
486a5bf8:	6f81      	li	a3,129
        }
        /*已经finish，退出*/
        case calendar_finish:
        result = RESULT_BACK_SCENE_DISPATCH;
486a5bfa:	d704      	sw	a3,16(sp)
486a5bfc:	9204      	lw	v0,16(sp)
        break;

        default:
        break;
    }

    return result;
}
486a5bfe:	6475      	restore	40,ra,s0-s1
486a5c00:	e8a0      	jrc	ra
	...

486a5c04 <set_calendar_sub_deal>:
486a5c04:	64e3      	save	24,ra,s0

app_result_e set_calendar_sub_deal(set_calendar_var_t *set_calendar_var)
{
486a5c06:	a475      	lbu	v1,21(a0)
    app_result_e result = RESULT_NULL;

    switch (set_calendar_var->calendar_state)
486a5c08:	6704      	move	s0,a0
486a5c0a:	5b05      	sltiu	v1,5
486a5c0c:	6036      	bteqz	486a5c7a <set_calendar_sub_deal+0x76>
486a5c0e:	0a04      	la	v0,486a5c1c <set_calendar_sub_deal+0x18>
486a5c10:	3664      	sll	a2,v1,1
486a5c12:	e655      	addu	a1,a2,v0
486a5c14:	8d80      	lh	a0,0(a1)
486a5c16:	e44d      	addu	v1,a0,v0
486a5c18:	eb80      	jrc	v1
486a5c1a:	0000      	addiu	s0,sp,0
486a5c1c:	000b      	addiu	s0,sp,44
486a5c1e:	001d      	addiu	s0,sp,116
486a5c20:	002b      	addiu	s0,sp,172
486a5c22:	0041      	addiu	s0,sp,260
486a5c24:	004f      	addiu	s0,sp,316
486a5c26:	a8e0      	lhu	a3,0(s0)
    {
        /*! 设置年份 */
        case calendar_year:
        if (set_calendar_var->date.year > 2000)
486a5c28:	f7c0 5f11 	sltiu	a3,2001
486a5c2c:	474f      	addiu	v0,a3,-1
        {
            set_calendar_var->date.year--;
486a5c2e:	6002      	bteqz	486a5c34 <set_calendar_sub_deal+0x30>
486a5c30:	f021 6a13 	li	v0,2099
        }
        else
        {
            set_calendar_var->date.year = 2099;
486a5c34:	c840      	sh	v0,0(s0)
486a5c36:	100f      	b	486a5c56 <set_calendar_sub_deal+0x52>
486a5c38:	a062      	lbu	v1,2(s0)
        }
        set_calendar_var->write_date_falg = TRUE;
        break;

        /*! 设置月份 */
        case calendar_month:
        if (set_calendar_var->date.month > 1)
486a5c3a:	5b02      	sltiu	v1,2
486a5c3c:	434f      	addiu	v0,v1,-1
        {
            set_calendar_var->date.month--;
486a5c3e:	6001      	bteqz	486a5c42 <set_calendar_sub_deal+0x3e>
486a5c40:	6a0c      	li	v0,12
        }
        else
        {
            set_calendar_var->date.month = 12;
486a5c42:	c042      	sb	v0,2(s0)
486a5c44:	1008      	b	486a5c56 <set_calendar_sub_deal+0x52>
486a5c46:	a083      	lbu	a0,3(s0)
        }
        set_calendar_var->write_date_falg = TRUE;
        break;

        /*! 设置日期 */
        case calendar_day:
        if (set_calendar_var->date.day > 1)
486a5c48:	5c02      	sltiu	a0,2
486a5c4a:	444f      	addiu	v0,a0,-1
        {
            set_calendar_var->date.day--;
486a5c4c:	6003      	bteqz	486a5c54 <set_calendar_sub_deal+0x50>
486a5c4e:	1b50 96ba 	jal	486a5ae8 <get_days_max>
        }
        else
        {
            set_calendar_var->date.day = get_days_max(&(set_calendar_var->date));
486a5c52:	6790      	move	a0,s0
486a5c54:	c043      	sb	v0,3(s0)
486a5c56:	6a01      	li	v0,1
        }
        set_calendar_var->write_date_falg = TRUE;
486a5c58:	c053      	sb	v0,19(s0)
486a5c5a:	100f      	b	486a5c7a <set_calendar_sub_deal+0x76>
        break;
486a5c5c:	a044      	lbu	v0,4(s0)

        /*! 设置小时 */
        case calendar_hour:
        if (set_calendar_var->time.hour > 0)
486a5c5e:	2202      	beqz	v0,486a5c64 <set_calendar_sub_deal+0x60>
486a5c60:	424f      	addiu	v0,v0,-1
        {
            set_calendar_var->time.hour--;
486a5c62:	1001      	b	486a5c66 <set_calendar_sub_deal+0x62>
486a5c64:	6a17      	li	v0,23
        }
        else
        {
            set_calendar_var->time.hour = 23;
486a5c66:	c044      	sb	v0,4(s0)
486a5c68:	1006      	b	486a5c76 <set_calendar_sub_deal+0x72>
486a5c6a:	a045      	lbu	v0,5(s0)
        }
        set_calendar_var->write_time_falg = TRUE;
        break;

        /*! 设置分钟 */
        case calendar_minute:
        if (set_calendar_var->time.minute > 0)
486a5c6c:	2202      	beqz	v0,486a5c72 <set_calendar_sub_deal+0x6e>
486a5c6e:	424f      	addiu	v0,v0,-1
        {
            set_calendar_var->time.minute--;
486a5c70:	1001      	b	486a5c74 <set_calendar_sub_deal+0x70>
486a5c72:	6a3b      	li	v0,59
        }
        else
        {
            set_calendar_var->time.minute = 59;
486a5c74:	c045      	sb	v0,5(s0)
486a5c76:	6d01      	li	a1,1
        }
        set_calendar_var->write_time_falg = TRUE;
486a5c78:	c0b4      	sb	a1,20(s0)
486a5c7a:	6a00      	li	v0,0
        break;

        default:
        break;
    }

    return result;
}
486a5c7c:	6463      	restore	24,ra,s0
486a5c7e:	e8a0      	jrc	ra

486a5c80 <set_calendar_add_deal>:
486a5c80:	64e3      	save	24,ra,s0

app_result_e set_calendar_add_deal(set_calendar_var_t *set_calendar_var)
{
486a5c82:	a475      	lbu	v1,21(a0)
    app_result_e result = RESULT_NULL;

    switch (set_calendar_var->calendar_state)
486a5c84:	6704      	move	s0,a0
486a5c86:	5b05      	sltiu	v1,5
486a5c88:	6039      	bteqz	486a5cfc <set_calendar_add_deal+0x7c>
486a5c8a:	0a04      	la	v0,486a5c98 <set_calendar_add_deal+0x18>
486a5c8c:	3664      	sll	a2,v1,1
486a5c8e:	e655      	addu	a1,a2,v0
486a5c90:	8d80      	lh	a0,0(a1)
486a5c92:	e44d      	addu	v1,a0,v0
486a5c94:	eb80      	jrc	v1
486a5c96:	0000      	addiu	s0,sp,0
486a5c98:	000b      	addiu	s0,sp,44
486a5c9a:	001d      	addiu	s0,sp,116
486a5c9c:	002b      	addiu	s0,sp,172
486a5c9e:	0047      	addiu	s0,sp,284
486a5ca0:	0055      	addiu	s0,sp,340
486a5ca2:	a8e0      	lhu	a3,0(s0)
    {
        /*! 设置年份 */
        case calendar_year:
        if (set_calendar_var->date.year < 2099)
486a5ca4:	f021 5f13 	sltiu	a3,2099
486a5ca8:	4741      	addiu	v0,a3,1
        {
            set_calendar_var->date.year++;
486a5caa:	6102      	btnez	486a5cb0 <set_calendar_add_deal+0x30>
486a5cac:	f7c0 6a10 	li	v0,2000
        }
        else
        {
            set_calendar_var->date.year = 2000;
486a5cb0:	c840      	sh	v0,0(s0)
486a5cb2:	1012      	b	486a5cd8 <set_calendar_add_deal+0x58>
486a5cb4:	a062      	lbu	v1,2(s0)
        }
        set_calendar_var->write_date_falg = TRUE;
        break;

        /*! 设置月份 */
        case calendar_month:
        if (set_calendar_var->date.month < 12)
486a5cb6:	5b0c      	sltiu	v1,12
486a5cb8:	4341      	addiu	v0,v1,1
        {
            set_calendar_var->date.month++;
486a5cba:	6101      	btnez	486a5cbe <set_calendar_add_deal+0x3e>
486a5cbc:	6a01      	li	v0,1
        }
        else
        {
            set_calendar_var->date.month = 1;
486a5cbe:	c042      	sb	v0,2(s0)
486a5cc0:	100b      	b	486a5cd8 <set_calendar_add_deal+0x58>
486a5cc2:	1b50 96ba 	jal	486a5ae8 <get_days_max>
        }
        set_calendar_var->write_date_falg = TRUE;
        break;

        /*! 设置日期 */
        case calendar_day:
        if (set_calendar_var->date.day < get_days_max(&(set_calendar_var->date)))
486a5cc6:	6790      	move	a0,s0
486a5cc8:	a083      	lbu	a0,3(s0)
486a5cca:	67a4      	move	a1,a0
486a5ccc:	ed11      	zeb	a1
486a5cce:	ed43      	sltu	a1,v0
486a5cd0:	4441      	addiu	v0,a0,1
        {
            set_calendar_var->date.day++;
486a5cd2:	6101      	btnez	486a5cd6 <set_calendar_add_deal+0x56>
486a5cd4:	6a01      	li	v0,1
        }
        else
        {
            set_calendar_var->date.day = 1;
486a5cd6:	c043      	sb	v0,3(s0)
486a5cd8:	6a01      	li	v0,1
        }
        set_calendar_var->write_date_falg = TRUE;
486a5cda:	c053      	sb	v0,19(s0)
486a5cdc:	100f      	b	486a5cfc <set_calendar_add_deal+0x7c>
        break;
486a5cde:	a0c4      	lbu	a2,4(s0)

        /*! 设置小时 */
        case calendar_hour:
        if (set_calendar_var->time.hour < 23)
486a5ce0:	5e17      	sltiu	a2,23
486a5ce2:	4641      	addiu	v0,a2,1
        {
            set_calendar_var->time.hour++;
486a5ce4:	6101      	btnez	486a5ce8 <set_calendar_add_deal+0x68>
486a5ce6:	6a00      	li	v0,0
        }
        else
        {
            set_calendar_var->time.hour = 0;
486a5ce8:	c044      	sb	v0,4(s0)
486a5cea:	1006      	b	486a5cf8 <set_calendar_add_deal+0x78>
486a5cec:	a0e5      	lbu	a3,5(s0)
        }
        set_calendar_var->write_time_falg = TRUE;
        break;

        /*! 设置分钟 */
        case calendar_minute:
        if (set_calendar_var->time.minute < 59)
486a5cee:	5f3b      	sltiu	a3,59
486a5cf0:	4741      	addiu	v0,a3,1
        {
            set_calendar_var->time.minute++;
486a5cf2:	6101      	btnez	486a5cf6 <set_calendar_add_deal+0x76>
486a5cf4:	6a00      	li	v0,0
        }
        else
        {
            set_calendar_var->time.minute = 0;
486a5cf6:	c045      	sb	v0,5(s0)
486a5cf8:	6b01      	li	v1,1
        }
        set_calendar_var->write_time_falg = TRUE;
486a5cfa:	c074      	sb	v1,20(s0)
486a5cfc:	6a00      	li	v0,0

        break;

        default:
        break;
    }

    return result;
}
486a5cfe:	6463      	restore	24,ra,s0
486a5d00:	e8a0      	jrc	ra
486a5d02:	6500      	nop

486a5d04 <day_table>:
486a5d04:	1c1f 1e1f 1e1f 1f1f 1f1e 1f1e 0000 0000     ................
	...
Disassembly of section BANK_UI_1_27:

486e5800 <tm_alarm_create_set_alarm_view>:
486e5800:	64c5      	save	40,ra

const key_event_map_t alarm_ke_maplist[];
void tm_alarm_set_alarm_view(view_update_e mode);
void tm_alarm_create_set_alarm_view(void)
{
486e5802:	67dd      	move	a2,sp
    create_view_param_t create_view_param;

    create_view_param.type = VIEW_TYPE_SUB;
486e5804:	6b01      	li	v1,1
486e5806:	c670      	sb	v1,16(a2)
486e5808:	b509      	lw	a1,486e582c <tm_alarm_create_set_alarm_view+0x2c>
    create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
    create_view_param.overtime = 8000;
    create_view_param.ke_maplist = alarm_ke_maplist;
486e580a:	b30a      	lw	v1,486e5830 <tm_alarm_create_set_alarm_view+0x30>
    create_view_param.se_maplist = NULL;
    create_view_param.view_cb = tm_alarm_set_alarm_view;
486e580c:	6a00      	li	v0,0
486e580e:	c651      	sb	v0,17(a2)
486e5810:	f743 6f00 	li	a3,8000
486e5814:	6c00      	li	a0,0
486e5816:	b208      	lw	v0,486e5834 <tm_alarm_create_set_alarm_view+0x34>
    com_view_add(COM_VIEW_ID_SET_ALARM, &create_view_param);
486e5818:	d505      	sw	a1,20(sp)
486e581a:	d406      	sw	a0,24(sp)
486e581c:	cee9      	sh	a3,18(a2)
486e581e:	d307      	sw	v1,28(sp)
486e5820:	6c82      	li	a0,130
486e5822:	ea40      	jalr	v0
486e5824:	0504      	addiu	a1,sp,16
486e5826:	6445      	restore	40,ra
486e5828:	e8a0      	jrc	ra
486e582a:	0000      	addiu	s0,sp,0
486e582c:	5858      	sltiu	s0,88
486e582e:	4876      	addiu	s0,118
486e5830:	5861      	sltiu	s0,97
486e5832:	486e      	addiu	s0,110
486e5834:	5d69      	sltiu	a1,105
486e5836:	485e      	addiu	s0,94

486e5838 <alarm_key_deal_switch_clock>:
486e5838:	64c3      	save	24,ra
}

static const uint8 default_alarm_name[] = "default";

app_result_e alarm_key_deal_switch_clock(void);
app_result_e alarm_key_deal_switch_menu(void);
app_result_e alarm_key_deal_add(void);
app_result_e alarm_key_deal_sub(void);
app_result_e alarm_key_deal_number_input(void);

void tm_alarm_set_alarm_view(view_update_e mode);
void alarm_handle(void);

const key_event_map_t __section__(".rodata.ke_maplist") alarm_ke_maplist[] =
{
    /*! 返回时钟功能 */
    { { KEY_PLAY, 0, KEY_TYPE_SHORT_UP, 0 }, alarm_key_deal_switch_clock },

    /*! 切换设置菜单 */
    { { KEY_ABREC, 0, KEY_TYPE_SHORT_UP, 0 }, alarm_key_deal_switch_menu },
    { { KEY_CLK, 0, KEY_TYPE_SHORT_UP, 0 }, alarm_key_deal_switch_menu },

    /*! 调节加 */
    { { KEY_NEXT, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, alarm_key_deal_add },
    { { KEY_NEXT_VOLADD, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, alarm_key_deal_add },

    /*! 调节减 */
    { { KEY_PREV, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, alarm_key_deal_sub },
    { { KEY_PREV_VOLSUB, 0, KEY_TYPE_DOWN | KEY_TYPE_LONG | KEY_TYPE_HOLD, 0 }, alarm_key_deal_sub },

    /*! 数字按键调节 */
    { { KEY_NUMBER, 0, KEY_TYPE_SHORT_UP | KEY_TYPE_LONG_UP, 0 }, alarm_key_deal_number_input },

    /*! 结束标志 */
    { { KEY_NULL, 0, KEY_TYPE_NULL, 0 }, NULL },
};

app_result_e alarm_key_deal_switch_clock(void)
{
486e583a:	b203      	lw	v0,486e5844 <alarm_key_deal_switch_clock+0xc>
    //tm_alarm_create_clock_view();
    com_view_remove_top_view();
486e583c:	eac0      	jalrc	v0
486e583e:	6a00      	li	v0,0

    return RESULT_NULL;
}
486e5840:	6443      	restore	24,ra
486e5842:	e8a0      	jrc	ra
486e5844:	5e39      	sltiu	a2,57
486e5846:	485e      	addiu	s0,94

486e5848 <__tm_alarm_set_alarm_redraw>:
486e5848:	b405      	lw	a0,486e585c <__tm_alarm_set_alarm_redraw+0x14>

app_result_e alarm_key_deal_switch_menu(void)
{
    app_result_e result;

    result = set_alarm_switch_deal(g_p_set_alarm);
    if (result == RESULT_BACK_SCENE_DISPATCH)
    {
        com_view_remove_top_view();
        result = RESULT_NULL;
    }
    else
    {
        tm_alarm_set_alarm_view(VIEW_UPDATE_REDRAW);
        restart_app_timer(g_p_set_alarm->twinkling_timer_id);
        g_p_set_alarm->twinkling_flag = TRUE;
        g_p_set_calendar->digit_flag = FALSE;
    }

    return result;
}

app_result_e alarm_key_deal_add(void)
{
    set_alarm_add_deal(g_p_set_alarm);

    tm_alarm_set_alarm_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_alarm->twinkling_timer_id);
    g_p_set_alarm->twinkling_flag = TRUE;

    g_p_set_calendar->digit_flag = FALSE;
    return RESULT_NULL;
}

app_result_e alarm_key_deal_sub(void)
{
    set_alarm_sub_deal(g_p_set_alarm);

    tm_alarm_set_alarm_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_alarm->twinkling_timer_id);
    g_p_set_alarm->twinkling_flag = TRUE;

    g_p_set_calendar->digit_flag = FALSE;
    return RESULT_NULL;
}

app_result_e alarm_key_deal_number_input(void)
{
    uint8 number = (uint8) (g_p_view_ke->val - KEY_NUM0);

    if (g_p_set_alarm->digit_flag == FALSE)
    {
        g_p_set_alarm->now_digits = 0;
        switch (g_p_set_alarm->setting_digits)
        {
            case 2:
            *(g_p_set_alarm->setting_num8) = 0;
            break;

            case 4:
            *(g_p_set_alarm->setting_num16) = 0;
            break;

            default:
            break;
        }

        g_p_set_calendar->digit_flag = TRUE;
    }

    switch (g_p_set_alarm->setting_digits)
    {
        case 2:
        if (g_p_set_alarm->now_digits >= 2)
        {
            *(g_p_set_alarm->setting_num8) = number;
            g_p_set_alarm->now_digits = 1;
        }
        else
        {
            *(g_p_set_alarm->setting_num8) = (*(g_p_set_alarm->setting_num8) * 10) + number;
            g_p_set_alarm->now_digits++;
        }
        break;

        case 4:
        if (g_p_set_alarm->now_digits >= 4)
        {
            *(g_p_set_alarm->setting_num16) = number;
            g_p_set_alarm->now_digits = 1;
        }
        else
        {
            *(g_p_set_alarm->setting_num16) = (*(g_p_set_alarm->setting_num16) * 10) + number;
            g_p_set_alarm->now_digits++;
        }
        break;

        default:
        break;
    }

    tm_alarm_set_alarm_view(VIEW_UPDATE_REDRAW);
    restart_app_timer(g_p_set_alarm->twinkling_timer_id);
    g_p_set_alarm->twinkling_flag = TRUE;

    return RESULT_NULL;
}

static void __tm_alarm_set_alarm_redraw(void)
{
    uint16 hour, minute;
    bool hour_twinkling = FALSE;
    bool minute_twinkling = FALSE;

    hour = g_p_set_alarm->time.hour;
    minute = g_p_set_alarm->time.minute;

    switch (g_p_set_alarm->alarm_state)
    {
        /*! 设置开/关 */
        case alarm_onoff:
        break;

        /*! 设置小时 */
        case alarm_hour:
        hour_twinkling = g_p_set_alarm->twinkling_flag;
        minute_twinkling = TRUE;
        break;

        /*! 设置分钟 */
        case alarm_minute:
        hour_twinkling = TRUE;
        minute_twinkling = g_p_set_alarm->twinkling_flag;
        break;

        default:
        break;
    }

    led_display(LCD_COL, 0xff, 0); //清除:号
    if (g_p_set_alarm->alarm_state == alarm_onoff)
    {
        if (g_p_set_alarm->cur_alarm_record.alarm.alarm_onoff == TRUE)
        {
            led_display(0, NUM_O, g_p_set_alarm->twinkling_flag);
            led_display(1, NUM_N, g_p_set_alarm->twinkling_flag);
            led_display(2, NUM_0, 0);
            led_display(3, NUM_0, 0);
        }
        else
        {
            led_display(0, NUM_O, g_p_set_alarm->twinkling_flag);
            led_display(1, NUM_F, g_p_set_alarm->twinkling_flag);
            led_display(2, NUM_F, g_p_set_alarm->twinkling_flag);
            led_display(3, NUM_0, 0);
        }
    }
    else
    {
        led_display(0, (hour / 10) + NUM_0, hour_twinkling);
        led_display(1, (hour % 10) + NUM_0, hour_twinkling);
        led_display(2, (minute / 10) + NUM_0, minute_twinkling);
        led_display(3, (minute % 10) + NUM_0, minute_twinkling);
    }

    if (g_p_set_alarm->twinkling_flag == TRUE)
486e584a:	9c60      	lw	v1,0(a0)
486e584c:	a350      	lbu	v0,16(v1)
486e584e:	7201      	cmpi	v0,1
486e5850:	6a00      	li	v0,0
    {
        g_p_set_alarm->twinkling_flag = FALSE;
486e5852:	6001      	bteqz	486e5856 <__tm_alarm_set_alarm_redraw+0xe>
486e5854:	6a01      	li	v0,1
    }
    else
    {
        g_p_set_alarm->twinkling_flag = TRUE;
486e5856:	e820      	jr	ra
486e5858:	c350      	sb	v0,16(v1)
486e585a:	0000      	addiu	s0,sp,0
486e585c:	99a8      	lw	a1,32(s1)
486e585e:	9fc1      	lw	a2,4(a3)

486e5860 <tm_alarm_set_alarm_view>:
486e5860:	64f5      	save	40,ra,s0-s1
    }
}

void tm_alarm_set_alarm_view(view_update_e mode)
{
486e5862:	67c4      	move	a2,a0
486e5864:	ee11      	zeb	a2
486e5866:	7601      	cmpi	a2,1
    switch (mode)
486e5868:	604a      	bteqz	486e58fe <.LBB3>
486e586a:	5602      	slti	a2,2
486e586c:	6002      	bteqz	486e5872 <tm_alarm_set_alarm_view+0x12>
486e586e:	2608      	beqz	a2,486e5880 <.LBB2>
486e5870:	10ac      	b	486e59ca <.LBE3+0x8>
486e5872:	7602      	cmpi	a2,2
486e5874:	f0a0 6006 	bteqz	486e59c4 <.LBE3+0x2>
486e5878:	7603      	cmpi	a2,3
486e587a:	f0a0 6003 	bteqz	486e59c4 <.LBE3+0x2>
486e587e:	10a5      	b	486e59ca <.LBE3+0x8>

486e5880 <.LBB2>:
486e5880:	b05e      	lw	s0,486e59f8 <.LBE3+0x36>
    {
        case VIEW_UPDATE_CREATE:
        {
            alarm_alarm_t *p_alarm_alarm;

            g_p_set_alarm = sys_malloc(sizeof(set_alarm_var_t));
486e5882:	6c48      	li	a0,72
486e5884:	6d04      	li	a1,4
486e5886:	e840      	jalr	s0
486e5888:	6f16      	li	a3,22
486e588a:	67c2      	move	a2,v0
486e588c:	b25a      	lw	v0,486e59f4 <.LBE3+0x32>
486e588e:	dac0      	sw	a2,0(v0)
486e5890:	2e05      	bnez	a2,486e589c <.LBB2+0x1c>
            if (g_p_set_alarm == NULL)
486e5892:	0c50      	la	a0,486e59d0 <.LBE3+0xe>
            {
                PRINT_ERR("set alarm view malloc fail!!");
486e5894:	67a6      	move	a1,a2
486e5896:	e840      	jalr	s0
486e5898:	6f4b      	li	a3,75
486e589a:	17ff      	b	486e589a <.LBB2+0x1a>
                while (1)
486e589c:	b056      	lw	s0,486e59f4 <.LBE3+0x32>
                {
                    ; //nothing for QAC
                }
            }

            //音箱只对第一个闹钟进行设置
            time_alarm_record_list_operate(RECORD_LIST_READ_BYINDEX, &(g_p_set_alarm->cur_alarm_record), 0);
486e589e:	6c00      	li	a0,0
486e58a0:	98a0      	lw	a1,0(s0)
486e58a2:	b157      	lw	s1,486e59fc <.LBE3+0x3a>
486e58a4:	4d14      	addiu	a1,20
486e58a6:	e940      	jalr	s1
486e58a8:	67c4      	move	a2,a0
486e58aa:	98a0      	lw	a1,0(s0)
            p_alarm_alarm = &(g_p_set_alarm->cur_alarm_record.alarm);
486e58ac:	f020 a576 	lbu	v1,54(a1)
            g_p_set_alarm->alarm_onoff_bk = p_alarm_alarm->alarm_onoff;
486e58b0:	f040 c564 	sb	v1,68(a1)
486e58b4:	7301      	cmpi	v1,1

            //初始化闹钟时间
            if (p_alarm_alarm->alarm_onoff == TRUE)
486e58b6:	9880      	lw	a0,0(s0)
486e58b8:	6106      	btnez	486e58c6 <.LBB2+0x46>
486e58ba:	b252      	lw	v0,486e5a00 <.LBE3+0x3e>
            {
                libc_memcpy(&(g_p_set_alarm->time), &(p_alarm_alarm->alarm_time), sizeof(time_t));
486e58bc:	4d38      	addiu	a1,56
486e58be:	6e03      	li	a2,3
486e58c0:	ea40      	jalr	v0
486e58c2:	6f00      	li	a3,0
486e58c4:	1008      	b	486e58d6 <.LBB2+0x56>
486e58c6:	6d00      	li	a1,0
            }
            else
            { //初始化为当前时间，秒清0
                sys_get_time(&(g_p_set_alarm->time));
486e58c8:	b14c      	lw	s1,486e59f8 <.LBE3+0x36>
486e58ca:	67c5      	move	a2,a1
486e58cc:	e940      	jalr	s1
486e58ce:	6f24      	li	a3,36
486e58d0:	9880      	lw	a0,0(s0)
                g_p_set_alarm->time.second = 0;
486e58d2:	6d00      	li	a1,0
486e58d4:	c4a2      	sb	a1,2(a0)
486e58d6:	b648      	lw	a2,486e59f4 <.LBE3+0x32>
            }
            g_p_set_alarm->alarm_state = alarm_onoff;
486e58d8:	6d00      	li	a1,0
486e58da:	9e20      	lw	s1,0(a2)
486e58dc:	6b01      	li	v1,1
            g_p_set_alarm->setting_digits = 0;
            g_p_set_alarm->digit_flag = FALSE;

            g_p_set_alarm->twinkling_flag = TRUE;
486e58de:	c1ac      	sb	a1,12(s1)
486e58e0:	9e80      	lw	a0,0(a2)
486e58e2:	c1af      	sb	a1,15(s1)
486e58e4:	c4ae      	sb	a1,14(a0)
486e58e6:	9ee0      	lw	a3,0(a2)
486e58e8:	b248      	lw	v0,486e5a08 <.LBE3+0x46>
            g_p_set_alarm->twinkling_timer_id = set_app_timer(APP_TIMER_ATTRB_UI | (COM_VIEW_ID_SET_ALARM << 8), 500,
486e58ea:	c770      	sb	v1,16(a3)
486e58ec:	9e20      	lw	s1,0(a2)
486e58ee:	b646      	lw	a2,486e5a04 <.LBE3+0x42>
486e58f0:	f210 6c00 	li	a0,33280
486e58f4:	f1e0 6d14 	li	a1,500
486e58f8:	eac0      	jalrc	v0
486e58fa:	c151      	sb	v0,17(s1)
486e58fc:	1063      	b	486e59c4 <.LBE3+0x2>

486e58fe <.LBB3>:
486e58fe:	b03e      	lw	s0,486e59f4 <.LBE3+0x32>
                    alarm_handle);

            __tm_alarm_set_alarm_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
            alarm_record_t *p_alarm_record = &(g_p_set_alarm->cur_alarm_record);
486e5900:	98a0      	lw	a1,0(s0)
486e5902:	f040 a544 	lbu	v0,68(a1)
            alarm_alarm_t *p_alarm_alarm = &(p_alarm_record->alarm);

            //只要从off到on，或者on状态下更新了时间，就按照“音箱端受限闹钟”将某些属性恢复为受限属性值
            if (((g_p_set_alarm->alarm_onoff_bk == FALSE) && (p_alarm_alarm->alarm_onoff == TRUE))
486e5906:	6705      	move	s0,a1
486e5908:	4814      	addiu	s0,20
486e590a:	2a04      	bnez	v0,486e5914 <.LBB3+0x16>
486e590c:	f020 a0c2 	lbu	a2,34(s0)
486e5910:	7601      	cmpi	a2,1
486e5912:	6007      	bteqz	486e5922 <.LBB3+0x24>
486e5914:	f020 a0e2 	lbu	a3,34(s0)
486e5918:	7701      	cmpi	a3,1
486e591a:	6139      	btnez	486e598e <.LBB3+0x90>
486e591c:	a56f      	lbu	v1,15(a1)
486e591e:	7303      	cmpi	v1,3
486e5920:	6136      	btnez	486e598e <.LBB3+0x90>
486e5922:	6750      	move	v0,s0
                    || ((p_alarm_alarm->alarm_onoff == TRUE) && (g_p_set_alarm->alarm_state == alarm_finish)))
            { //默认ID为1，名字为default，每天重复，闹铃为内置闹铃第一首歌曲
                libc_memcpy(&(p_alarm_alarm->alarm_time), &(g_p_set_alarm->time), sizeof(time_t));
486e5924:	4a24      	addiu	v0,36
486e5926:	b137      	lw	s1,486e5a00 <.LBE3+0x3e>
486e5928:	6782      	move	a0,v0
486e592a:	d204      	sw	v0,16(sp)
486e592c:	6e03      	li	a2,3
486e592e:	e940      	jalr	s1
486e5930:	6f00      	li	a3,0
486e5932:	f020 a080 	lbu	a0,32(s0)
                if (p_alarm_alarm->alarm_id == 0)
486e5936:	2c03      	bnez	a0,486e593e <.LBB3+0x40>
486e5938:	6d01      	li	a1,1
                { //ID无效
                    p_alarm_alarm->alarm_id = 1;
486e593a:	f020 c0a0 	sb	a1,32(s0)
486e593e:	a020      	lbu	s1,0(s0)
                }
                if (p_alarm_alarm->alarm_name[0] == 0x00)
486e5940:	2912      	bnez	s1,486e5966 <.LBB3+0x68>
486e5942:	b32e      	lw	v1,486e59f8 <.LBE3+0x36>
                { //名字无效
                    sys_os_sched_lock();
486e5944:	6791      	move	a0,s1
486e5946:	67b1      	move	a1,s1
486e5948:	67d1      	move	a2,s1
486e594a:	eb40      	jalr	v1
486e594c:	6f33      	li	a3,51
486e594e:	b530      	lw	a1,486e5a0c <.LBE3+0x4a>
                    libc_memcpy(p_alarm_alarm->alarm_name, default_alarm_name, sizeof(default_alarm_name));
486e5950:	b32c      	lw	v1,486e5a00 <.LBE3+0x3e>
486e5952:	6790      	move	a0,s0
486e5954:	6e08      	li	a2,8
486e5956:	eb40      	jalr	v1
486e5958:	67f1      	move	a3,s1
486e595a:	b328      	lw	v1,486e59f8 <.LBE3+0x36>
                    sys_os_sched_unlock();
486e595c:	6791      	move	a0,s1
486e595e:	67b1      	move	a1,s1
486e5960:	67d1      	move	a2,s1
486e5962:	eb40      	jalr	v1
486e5964:	6f34      	li	a3,52
486e5966:	6f01      	li	a3,1
                }
                p_alarm_alarm->alarm_day = 0x7f;
                p_alarm_alarm->ring_type = RING_TYPE_BUILTIN;
                p_alarm_alarm->sound.ring_seq = 1;
486e5968:	6a7f      	li	v0,127
486e596a:	6c03      	li	a0,3
486e596c:	f020 c087 	sb	a0,39(s0)
486e5970:	d8ea      	sw	a3,40(s0)
486e5972:	f020 c0e1 	sb	a3,33(s0)
                p_alarm_alarm->alarm_used = 1;
486e5976:	f020 c043 	sb	v0,35(s0)
486e597a:	6790      	move	a0,s0
                libc_memcpy(&(p_alarm_record->last_time), &(p_alarm_alarm->alarm_time), sizeof(time_t));
486e597c:	9504      	lw	a1,16(sp)
486e597e:	b121      	lw	s1,486e5a00 <.LBE3+0x3e>
486e5980:	6e03      	li	a2,3
486e5982:	4c2c      	addiu	a0,44
486e5984:	e940      	jalr	s1
486e5986:	6f00      	li	a3,0
486e5988:	6e00      	li	a2,0
                p_alarm_record->snooze = 0;
486e598a:	f020 c0cf 	sb	a2,47(s0)
486e598e:	b11a      	lw	s1,486e59f4 <.LBE3+0x32>
            }

            time_alarm_record_list_operate(RECORD_LIST_ADD_BYINDEX, &(g_p_set_alarm->cur_alarm_record), 0);
486e5990:	6c06      	li	a0,6
486e5992:	99a0      	lw	a1,0(s1)
486e5994:	b11a      	lw	s1,486e59fc <.LBE3+0x3a>
486e5996:	4d14      	addiu	a1,20
486e5998:	e940      	jalr	s1
486e599a:	6e00      	li	a2,0
486e599c:	6d00      	li	a1,0
            //刷新闹钟定时设置
            time_alarm_record_list_operate(RECORD_LIST_UPDATE_ALARM, UPDATE_ALARM_ADD, 0);
486e599e:	67c5      	move	a2,a1
486e59a0:	e940      	jalr	s1
486e59a2:	6c03      	li	a0,3
486e59a4:	b414      	lw	a0,486e59f4 <.LBE3+0x32>
            kill_app_timer(g_p_set_alarm->twinkling_timer_id);
486e59a6:	b21b      	lw	v0,486e5a10 <.LBE3+0x4e>
486e59a8:	9ce0      	lw	a3,0(a0)
486e59aa:	ea40      	jalr	v0
486e59ac:	8791      	lb	a0,17(a3)
486e59ae:	b612      	lw	a2,486e59f4 <.LBE3+0x32>

            sys_free(g_p_set_alarm);
486e59b0:	b212      	lw	v0,486e59f8 <.LBE3+0x36>
486e59b2:	9e80      	lw	a0,0(a2)
486e59b4:	6d04      	li	a1,4
486e59b6:	6e00      	li	a2,0
486e59b8:	ea40      	jalr	v0
486e59ba:	6f17      	li	a3,23
486e59bc:	b50e      	lw	a1,486e59f4 <.LBE3+0x32>
            g_p_set_alarm = NULL;
486e59be:	6b00      	li	v1,0
486e59c0:	dd60      	sw	v1,0(a1)

486e59c2 <.LBE3>:
486e59c2:	1003      	b	486e59ca <.LBE3+0x8>
        }
        break;
486e59c4:	1b70 9612 	jal	486e5848 <__tm_alarm_set_alarm_redraw>

        case VIEW_UPDATE_REDRAW:
        {
            __tm_alarm_set_alarm_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __tm_alarm_set_alarm_redraw();
486e59c8:	6500      	nop
486e59ca:	6475      	restore	40,ra,s0-s1
        }
        break;

        default:
        break;
    }
}
486e59cc:	e8a0      	jrc	ra
486e59ce:	0000      	addiu	s0,sp,0
486e59d0:	453c      	daddiu	s1,a1,-4
486e59d2:	203e      	beqz	s0,486e5a50 <alarm_key_deal_number_input+0x3c>
486e59d4:	6573      	move	s3,v1
486e59d6:	2074      	beqz	s0,486e5ac0 <alarm_key_deal_number_input+0xac>
486e59d8:	6c61      	li	a0,97
486e59da:	7261      	cmpi	v0,97
486e59dc:	206d      	beqz	s0,486e5ab8 <alarm_key_deal_number_input+0xa4>
486e59de:	6976      	li	s1,118
486e59e0:	7765      	cmpi	a3,101
486e59e2:	6d20      	li	a1,32
486e59e4:	6c61      	li	a0,97
486e59e6:	6f6c      	li	a3,108
486e59e8:	2063      	beqz	s0,486e5ab0 <alarm_key_deal_number_input+0x9c>
486e59ea:	6166      	btnez	486e5ab8 <alarm_key_deal_number_input+0xa4>
486e59ec:	6c69      	li	a0,105
486e59ee:	2121      	beqz	s1,486e5a32 <alarm_key_deal_number_input+0x1e>
486e59f0:	0000      	addiu	s0,sp,0
486e59f2:	0000      	addiu	s0,sp,0
486e59f4:	99a8      	lw	a1,32(s1)
486e59f6:	9fc1      	lw	a2,4(a3)
486e59f8:	e901      	sdbbp	8
486e59fa:	bfc1      	lwu	a2,4(a3)
486e59fc:	5a11      	sltiu	v0,17
486e59fe:	4872      	addiu	s0,114
486e5a00:	e905      	break	8
486e5a02:	bfc1      	lwu	a2,4(a3)
486e5a04:	5b95      	sltiu	v1,149
486e5a06:	486e      	addiu	s0,110
486e5a08:	5915      	sltiu	s1,21
486e5a0a:	488e      	addiu	s0,-114
486e5a0c:	5ba0      	sltiu	v1,160
486e5a0e:	486e      	addiu	s0,110
486e5a10:	5b01      	sltiu	v1,1
486e5a12:	488e      	addiu	s0,-114

486e5a14 <alarm_key_deal_number_input>:
486e5a14:	64e3      	save	24,ra,s0
486e5a16:	b42a      	lw	a0,486e5abc <alarm_key_deal_number_input+0xa8>
486e5a18:	b52a      	lw	a1,486e5ac0 <alarm_key_deal_number_input+0xac>
486e5a1a:	9c60      	lw	v1,0(a0)
486e5a1c:	a340      	lbu	v0,0(v1)
486e5a1e:	4af0      	addiu	v0,-16
486e5a20:	67c2      	move	a2,v0
486e5a22:	9d40      	lw	v0,0(a1)
486e5a24:	ee11      	zeb	a2
486e5a26:	a26e      	lbu	v1,14(v0)
486e5a28:	2b11      	bnez	v1,486e5a4c <alarm_key_deal_number_input+0x38>
486e5a2a:	c26d      	sb	v1,13(v0)
486e5a2c:	9d40      	lw	v0,0(a1)
486e5a2e:	a28c      	lbu	a0,12(v0)
486e5a30:	7402      	cmpi	a0,2
486e5a32:	6003      	bteqz	486e5a3a <alarm_key_deal_number_input+0x26>
486e5a34:	7404      	cmpi	a0,4
486e5a36:	6004      	bteqz	486e5a40 <alarm_key_deal_number_input+0x2c>
486e5a38:	1005      	b	486e5a44 <alarm_key_deal_number_input+0x30>
486e5a3a:	9ae2      	lw	a3,8(v0)
486e5a3c:	c760      	sb	v1,0(a3)
486e5a3e:	1002      	b	486e5a44 <alarm_key_deal_number_input+0x30>
486e5a40:	9a01      	lw	s0,4(v0)
486e5a42:	c860      	sh	v1,0(s0)
486e5a44:	b420      	lw	a0,486e5ac4 <alarm_key_deal_number_input+0xb0>
486e5a46:	6a01      	li	v0,1
486e5a48:	9c60      	lw	v1,0(a0)
486e5a4a:	c352      	sb	v0,18(v1)
486e5a4c:	9d80      	lw	a0,0(a1)
486e5a4e:	a44c      	lbu	v0,12(a0)
486e5a50:	7202      	cmpi	v0,2
486e5a52:	6003      	bteqz	486e5a5a <alarm_key_deal_number_input+0x46>
486e5a54:	7204      	cmpi	v0,4
486e5a56:	6014      	bteqz	486e5a80 <alarm_key_deal_number_input+0x6c>
486e5a58:	1023      	b	486e5aa0 <alarm_key_deal_number_input+0x8c>
486e5a5a:	a4ed      	lbu	a3,13(a0)
486e5a5c:	9c82      	lw	a0,8(a0)
486e5a5e:	5f02      	sltiu	a3,2
486e5a60:	6104      	btnez	486e5a6a <alarm_key_deal_number_input+0x56>
486e5a62:	c4c0      	sb	a2,0(a0)
486e5a64:	9d60      	lw	v1,0(a1)
486e5a66:	6a01      	li	v0,1
486e5a68:	1009      	b	486e5a7c <alarm_key_deal_number_input+0x68>
486e5a6a:	a4e0      	lbu	a3,0(a0)
486e5a6c:	6a0a      	li	v0,10
486e5a6e:	ef58      	mult	a3,v0
486e5a70:	eb12      	mflo	v1
486e5a72:	e3c1      	addu	s0,v1,a2
486e5a74:	c400      	sb	s0,0(a0)
486e5a76:	9d60      	lw	v1,0(a1)
486e5a78:	a3ad      	lbu	a1,13(v1)
486e5a7a:	4541      	addiu	v0,a1,1
486e5a7c:	c34d      	sb	v0,13(v1)
486e5a7e:	1010      	b	486e5aa0 <alarm_key_deal_number_input+0x8c>
486e5a80:	a4ad      	lbu	a1,13(a0)
486e5a82:	5d04      	sltiu	a1,4
486e5a84:	9ca1      	lw	a1,4(a0)
486e5a86:	6103      	btnez	486e5a8e <alarm_key_deal_number_input+0x7a>
486e5a88:	6a01      	li	v0,1
486e5a8a:	cdc0      	sh	a2,0(a1)
486e5a8c:	1008      	b	486e5a9e <alarm_key_deal_number_input+0x8a>
486e5a8e:	ade0      	lhu	a3,0(a1)
486e5a90:	6a0a      	li	v0,10
486e5a92:	ef58      	mult	a3,v0
486e5a94:	eb12      	mflo	v1
486e5a96:	e3c1      	addu	s0,v1,a2
486e5a98:	cd00      	sh	s0,0(a1)
486e5a9a:	a4cd      	lbu	a2,13(a0)
486e5a9c:	4641      	addiu	v0,a2,1
486e5a9e:	c44d      	sb	v0,13(a0)
486e5aa0:	1b70 9618 	jal	486e5860 <tm_alarm_set_alarm_view>
486e5aa4:	6c02      	li	a0,2
486e5aa6:	b007      	lw	s0,486e5ac0 <alarm_key_deal_number_input+0xac>
486e5aa8:	b208      	lw	v0,486e5ac8 <alarm_key_deal_number_input+0xb4>
486e5aaa:	98c0      	lw	a2,0(s0)
486e5aac:	ea40      	jalr	v0
486e5aae:	8691      	lb	a0,17(a2)
486e5ab0:	9880      	lw	a0,0(s0)
486e5ab2:	6d01      	li	a1,1
486e5ab4:	6a00      	li	v0,0
486e5ab6:	c4b0      	sb	a1,16(a0)
486e5ab8:	6463      	restore	24,ra,s0
486e5aba:	e8a0      	jrc	ra
486e5abc:	99e4      	lw	a3,16(s1)
486e5abe:	9fc1      	lw	a2,4(a3)
486e5ac0:	99a8      	lw	a1,32(s1)
486e5ac2:	9fc1      	lw	a2,4(a3)
486e5ac4:	99a4      	lw	a1,16(s1)
486e5ac6:	9fc1      	lw	a2,4(a3)
486e5ac8:	5a81      	sltiu	v0,129
486e5aca:	488e      	addiu	s0,-114

486e5acc <alarm_key_deal_sub>:
486e5acc:	64e3      	save	24,ra,s0
486e5ace:	b00b      	lw	s0,486e5af8 <alarm_key_deal_sub+0x2c>
486e5ad0:	b20b      	lw	v0,486e5afc <alarm_key_deal_sub+0x30>
486e5ad2:	ea40      	jalr	v0
486e5ad4:	9880      	lw	a0,0(s0)
486e5ad6:	1b70 9618 	jal	486e5860 <tm_alarm_set_alarm_view>
486e5ada:	6c02      	li	a0,2
486e5adc:	98e0      	lw	a3,0(s0)
486e5ade:	b209      	lw	v0,486e5b00 <alarm_key_deal_sub+0x34>
486e5ae0:	ea40      	jalr	v0
486e5ae2:	8791      	lb	a0,17(a3)
486e5ae4:	98a0      	lw	a1,0(s0)
486e5ae6:	6e01      	li	a2,1
486e5ae8:	b407      	lw	a0,486e5b04 <alarm_key_deal_sub+0x38>
486e5aea:	c5d0      	sb	a2,16(a1)
486e5aec:	9c60      	lw	v1,0(a0)
486e5aee:	6a00      	li	v0,0
486e5af0:	c352      	sb	v0,18(v1)
486e5af2:	6a00      	li	v0,0
486e5af4:	6463      	restore	24,ra,s0
486e5af6:	e8a0      	jrc	ra
486e5af8:	99a8      	lw	a1,32(s1)
486e5afa:	9fc1      	lw	a2,4(a3)
486e5afc:	5bfd      	sltiu	v1,253
486e5afe:	486e      	addiu	s0,110
486e5b00:	5a81      	sltiu	v0,129
486e5b02:	488e      	addiu	s0,-114
486e5b04:	99a4      	lw	a1,16(s1)
486e5b06:	9fc1      	lw	a2,4(a3)

486e5b08 <alarm_key_deal_add>:
486e5b08:	64e3      	save	24,ra,s0
486e5b0a:	b00b      	lw	s0,486e5b34 <alarm_key_deal_add+0x2c>
486e5b0c:	b20b      	lw	v0,486e5b38 <alarm_key_deal_add+0x30>
486e5b0e:	ea40      	jalr	v0
486e5b10:	9880      	lw	a0,0(s0)
486e5b12:	1b70 9618 	jal	486e5860 <tm_alarm_set_alarm_view>
486e5b16:	6c02      	li	a0,2
486e5b18:	98e0      	lw	a3,0(s0)
486e5b1a:	b209      	lw	v0,486e5b3c <alarm_key_deal_add+0x34>
486e5b1c:	ea40      	jalr	v0
486e5b1e:	8791      	lb	a0,17(a3)
486e5b20:	98a0      	lw	a1,0(s0)
486e5b22:	6e01      	li	a2,1
486e5b24:	b407      	lw	a0,486e5b40 <alarm_key_deal_add+0x38>
486e5b26:	c5d0      	sb	a2,16(a1)
486e5b28:	9c60      	lw	v1,0(a0)
486e5b2a:	6a00      	li	v0,0
486e5b2c:	c352      	sb	v0,18(v1)
486e5b2e:	6a00      	li	v0,0
486e5b30:	6463      	restore	24,ra,s0
486e5b32:	e8a0      	jrc	ra
486e5b34:	99a8      	lw	a1,32(s1)
486e5b36:	9fc1      	lw	a2,4(a3)
486e5b38:	5c49      	sltiu	a0,73
486e5b3a:	486e      	addiu	s0,110
486e5b3c:	5a81      	sltiu	v0,129
486e5b3e:	488e      	addiu	s0,-114
486e5b40:	99a4      	lw	a1,16(s1)
486e5b42:	9fc1      	lw	a2,4(a3)

486e5b44 <alarm_key_deal_switch_menu>:
486e5b44:	64f4      	save	32,ra,s0-s1
486e5b46:	b10f      	lw	s1,486e5b80 <alarm_key_deal_switch_menu+0x3c>
486e5b48:	b20f      	lw	v0,486e5b84 <alarm_key_deal_switch_menu+0x40>
486e5b4a:	ea40      	jalr	v0
486e5b4c:	9980      	lw	a0,0(s1)
486e5b4e:	7281      	cmpi	v0,129
486e5b50:	6702      	move	s0,v0
486e5b52:	6104      	btnez	486e5b5c <alarm_key_deal_switch_menu+0x18>
486e5b54:	b30d      	lw	v1,486e5b88 <alarm_key_deal_switch_menu+0x44>
486e5b56:	eb40      	jalr	v1
486e5b58:	6800      	li	s0,0
486e5b5a:	100e      	b	486e5b78 <alarm_key_deal_switch_menu+0x34>
486e5b5c:	1b70 9618 	jal	486e5860 <tm_alarm_set_alarm_view>
486e5b60:	6c02      	li	a0,2
486e5b62:	9960      	lw	v1,0(s1)
486e5b64:	b20a      	lw	v0,486e5b8c <alarm_key_deal_switch_menu+0x48>
486e5b66:	ea40      	jalr	v0
486e5b68:	8391      	lb	a0,17(v1)
486e5b6a:	99e0      	lw	a3,0(s1)
486e5b6c:	6a01      	li	v0,1
486e5b6e:	b609      	lw	a2,486e5b90 <alarm_key_deal_switch_menu+0x4c>
486e5b70:	c750      	sb	v0,16(a3)
486e5b72:	9e80      	lw	a0,0(a2)
486e5b74:	6d00      	li	a1,0
486e5b76:	c4b2      	sb	a1,18(a0)
486e5b78:	6750      	move	v0,s0
486e5b7a:	6474      	restore	32,ra,s0-s1
486e5b7c:	e8a0      	jrc	ra
486e5b7e:	0000      	addiu	s0,sp,0
486e5b80:	99a8      	lw	a1,32(s1)
486e5b82:	9fc1      	lw	a2,4(a3)
486e5b84:	5ba9      	sltiu	v1,169
486e5b86:	486e      	addiu	s0,110
486e5b88:	5e39      	sltiu	a2,57
486e5b8a:	485e      	addiu	s0,94
486e5b8c:	5a81      	sltiu	v0,129
486e5b8e:	488e      	addiu	s0,-114
486e5b90:	99a4      	lw	a1,16(s1)
486e5b92:	9fc1      	lw	a2,4(a3)

486e5b94 <alarm_handle>:
486e5b94:	64c3      	save	24,ra

//闹钟设置2Hz定时处理
void alarm_handle(void)
{
486e5b96:	1b70 9618 	jal	486e5860 <tm_alarm_set_alarm_view>
    tm_alarm_set_alarm_view(VIEW_UPDATE_REDRAW);
486e5b9a:	6c02      	li	a0,2
486e5b9c:	6443      	restore	24,ra
486e5b9e:	e8a0      	jrc	ra

486e5ba0 <default_alarm_name>:
486e5ba0:	6564 6166 6c75 0074                         default.

486e5ba8 <set_alarm_switch_deal>:
486e5ba8:	a44f      	lbu	v0,15(a0)
{
    app_result_e result = RESULT_NULL;
    alarm_alarm_t *p_alarm_alarm = &(set_alarm_var->cur_alarm_record.alarm);

    switch (set_alarm_var->alarm_state)
486e5baa:	6764      	move	v1,a0
486e5bac:	7201      	cmpi	v0,1
486e5bae:	6d00      	li	a1,0
486e5bb0:	4b14      	addiu	v1,20
486e5bb2:	6012      	bteqz	486e5bd8 <.LBB2>
486e5bb4:	5202      	slti	v0,2
486e5bb6:	6002      	bteqz	486e5bbc <set_alarm_switch_deal+0x14>
486e5bb8:	2206      	beqz	v0,486e5bc6 <set_alarm_switch_deal+0x1e>
486e5bba:	101e      	b	486e5bf8 <.LBE3+0xc>
486e5bbc:	7202      	cmpi	v0,2
486e5bbe:	6015      	bteqz	486e5bea <.LBB3>
486e5bc0:	7203      	cmpi	v0,3
486e5bc2:	6019      	bteqz	486e5bf6 <.LBE3+0xa>
486e5bc4:	1019      	b	486e5bf8 <.LBE3+0xc>
486e5bc6:	f020 a342 	lbu	v0,34(v1)
    {
        /*! 设置开/关 */
        case alarm_onoff:
        if (p_alarm_alarm->alarm_onoff == FALSE)
486e5bca:	2213      	beqz	v0,486e5bf2 <.LBE3+0x6>
486e5bcc:	6e01      	li	a2,1
        { //关闭闹钟，直接返回Clock显示
            set_alarm_var->alarm_state = alarm_finish;
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_alarm_var->alarm_state = alarm_hour;
486e5bce:	6b02      	li	v1,2
            set_alarm_var->setting_num8 = &(set_alarm_var->time.hour);
            set_alarm_var->setting_digits = 2;
486e5bd0:	c4cf      	sb	a2,15(a0)
486e5bd2:	dc82      	sw	a0,8(a0)
486e5bd4:	c46c      	sb	v1,12(a0)
486e5bd6:	1010      	b	486e5bf8 <.LBE3+0xc>

486e5bd8 <.LBB2>:
        }
        break;
486e5bd8:	a4e0      	lbu	a3,0(a0)

486e5bda <.LBE2>:
486e5bda:	5f18      	sltiu	a3,24
486e5bdc:	600c      	bteqz	486e5bf6 <.LBE3+0xa>
486e5bde:	6b02      	li	v1,2

        /*! 设置小时 */
        case alarm_hour:
        if (is_hour_valid(set_alarm_var->time.hour) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
        }
        else
        {
            set_alarm_var->alarm_state = alarm_minute;
486e5be0:	4441      	addiu	v0,a0,1
            set_alarm_var->setting_num8 = &(set_alarm_var->time.minute);
486e5be2:	c46f      	sb	v1,15(a0)
486e5be4:	dc42      	sw	v0,8(a0)
486e5be6:	c46c      	sb	v1,12(a0)
            set_alarm_var->setting_digits = 2;
486e5be8:	1007      	b	486e5bf8 <.LBE3+0xc>

486e5bea <.LBB3>:
        }
        break;
486e5bea:	a4a1      	lbu	a1,1(a0)

486e5bec <.LBE3>:
486e5bec:	5d3c      	sltiu	a1,60
486e5bee:	6d81      	li	a1,129

        /*! 设置分钟 */
        case alarm_minute:
        if (is_minute_valid(set_alarm_var->time.minute) == FALSE)
        {
            result = RESULT_BACK_SCENE_DISPATCH;
486e5bf0:	6003      	bteqz	486e5bf8 <.LBE3+0xc>
486e5bf2:	6e03      	li	a2,3
            break;
        }
        else
        {
            set_alarm_var->alarm_state = alarm_finish;
486e5bf4:	c4cf      	sb	a2,15(a0)
486e5bf6:	6d81      	li	a1,129
        }
        /*已经finish，退出*/
        case alarm_finish:
        result = RESULT_BACK_SCENE_DISPATCH;
486e5bf8:	e820      	jr	ra
        break;

        default:
        break;
    }

    return result;
}
486e5bfa:	6745      	move	v0,a1

486e5bfc <set_alarm_sub_deal>:
486e5bfc:	a46f      	lbu	v1,15(a0)

app_result_e set_alarm_sub_deal(set_alarm_var_t *set_alarm_var)
{
    app_result_e result = RESULT_NULL;
    alarm_alarm_t *p_alarm_alarm = &(set_alarm_var->cur_alarm_record.alarm);

    switch (set_alarm_var->alarm_state)
486e5bfe:	67a4      	move	a1,a0
486e5c00:	7301      	cmpi	v1,1
486e5c02:	4d14      	addiu	a1,20
486e5c04:	6012      	bteqz	486e5c2a <set_alarm_sub_deal+0x2e>
486e5c06:	5302      	slti	v1,2
486e5c08:	6002      	bteqz	486e5c0e <set_alarm_sub_deal+0x12>
486e5c0a:	2304      	beqz	v1,486e5c14 <set_alarm_sub_deal+0x18>
486e5c0c:	101b      	b	486e5c44 <set_alarm_sub_deal+0x48>
486e5c0e:	7302      	cmpi	v1,2
486e5c10:	6013      	bteqz	486e5c38 <set_alarm_sub_deal+0x3c>
486e5c12:	1018      	b	486e5c44 <set_alarm_sub_deal+0x48>
486e5c14:	f020 a542 	lbu	v0,34(a1)
    {
        /*! 设置开/关 */
        case alarm_onoff:
        if (p_alarm_alarm->alarm_onoff == TRUE)
486e5c18:	7201      	cmpi	v0,1
486e5c1a:	6103      	btnez	486e5c22 <set_alarm_sub_deal+0x26>
486e5c1c:	f020 c562 	sb	v1,34(a1)
        {
            p_alarm_alarm->alarm_onoff = FALSE;
486e5c20:	1011      	b	486e5c44 <set_alarm_sub_deal+0x48>
486e5c22:	6b01      	li	v1,1
        }
        else
        {
            p_alarm_alarm->alarm_onoff = TRUE;
486e5c24:	f020 c562 	sb	v1,34(a1)
486e5c28:	100d      	b	486e5c44 <set_alarm_sub_deal+0x48>
        }
        break;
486e5c2a:	a440      	lbu	v0,0(a0)

        /*! 设置小时 */
        case alarm_hour:
        if (set_alarm_var->time.hour > 0)
486e5c2c:	2202      	beqz	v0,486e5c32 <set_alarm_sub_deal+0x36>
486e5c2e:	424f      	addiu	v0,v0,-1
        {
            set_alarm_var->time.hour--;
486e5c30:	1001      	b	486e5c34 <set_alarm_sub_deal+0x38>
486e5c32:	6a17      	li	v0,23
        }
        else
        {
            set_alarm_var->time.hour = 23;
486e5c34:	c440      	sb	v0,0(a0)
486e5c36:	1006      	b	486e5c44 <set_alarm_sub_deal+0x48>
        }
        break;
486e5c38:	a441      	lbu	v0,1(a0)

        /*! 设置分钟 */
        case alarm_minute:
        if (set_alarm_var->time.minute > 0)
486e5c3a:	2202      	beqz	v0,486e5c40 <set_alarm_sub_deal+0x44>
486e5c3c:	424f      	addiu	v0,v0,-1
        {
            set_alarm_var->time.minute--;
486e5c3e:	1001      	b	486e5c42 <set_alarm_sub_deal+0x46>
486e5c40:	6a3b      	li	v0,59
        }
        else
        {
            set_alarm_var->time.minute = 59;
486e5c42:	c441      	sb	v0,1(a0)
486e5c44:	e820      	jr	ra
        }
        break;

        default:
        break;
    }

    return result;
}
486e5c46:	6a00      	li	v0,0

486e5c48 <set_alarm_add_deal>:
486e5c48:	a44f      	lbu	v0,15(a0)

app_result_e set_alarm_add_deal(set_alarm_var_t *set_alarm_var)
{
    app_result_e result = RESULT_NULL;
    alarm_alarm_t *p_alarm_alarm = &(set_alarm_var->cur_alarm_record.alarm);

    switch (set_alarm_var->alarm_state)
486e5c4a:	6764      	move	v1,a0
486e5c4c:	7201      	cmpi	v0,1
486e5c4e:	6d00      	li	a1,0
486e5c50:	4b14      	addiu	v1,20
486e5c52:	6012      	bteqz	486e5c78 <set_alarm_add_deal+0x30>
486e5c54:	5202      	slti	v0,2
486e5c56:	6002      	bteqz	486e5c5c <set_alarm_add_deal+0x14>
486e5c58:	2204      	beqz	v0,486e5c62 <set_alarm_add_deal+0x1a>
486e5c5a:	101d      	b	486e5c96 <set_alarm_add_deal+0x4e>
486e5c5c:	7202      	cmpi	v0,2
486e5c5e:	6014      	bteqz	486e5c88 <set_alarm_add_deal+0x40>
486e5c60:	101a      	b	486e5c96 <set_alarm_add_deal+0x4e>
486e5c62:	f020 a342 	lbu	v0,34(v1)
    {
        /*! 设置开/关 */
        case alarm_onoff:
        if (p_alarm_alarm->alarm_onoff == TRUE)
486e5c66:	7201      	cmpi	v0,1
486e5c68:	6103      	btnez	486e5c70 <set_alarm_add_deal+0x28>
486e5c6a:	f020 c3a2 	sb	a1,34(v1)
        {
            p_alarm_alarm->alarm_onoff = FALSE;
486e5c6e:	1013      	b	486e5c96 <set_alarm_add_deal+0x4e>
486e5c70:	6c01      	li	a0,1
        }
        else
        {
            p_alarm_alarm->alarm_onoff = TRUE;
486e5c72:	f020 c382 	sb	a0,34(v1)
486e5c76:	100f      	b	486e5c96 <set_alarm_add_deal+0x4e>
        }
        break;
486e5c78:	a440      	lbu	v0,0(a0)

        /*! 设置小时 */
        case alarm_hour:
        if (set_alarm_var->time.hour < 23)
486e5c7a:	5a17      	sltiu	v0,23
486e5c7c:	6003      	bteqz	486e5c84 <set_alarm_add_deal+0x3c>
486e5c7e:	4261      	addiu	v1,v0,1
        {
            set_alarm_var->time.hour++;
486e5c80:	c460      	sb	v1,0(a0)
486e5c82:	1009      	b	486e5c96 <set_alarm_add_deal+0x4e>
486e5c84:	c4a0      	sb	a1,0(a0)
        }
        else
        {
            set_alarm_var->time.hour = 0;
486e5c86:	1007      	b	486e5c96 <set_alarm_add_deal+0x4e>
        }
        break;
486e5c88:	a441      	lbu	v0,1(a0)

        /*! 设置分钟 */
        case alarm_minute:
        if (set_alarm_var->time.minute < 59)
486e5c8a:	5a3b      	sltiu	v0,59
486e5c8c:	6003      	bteqz	486e5c94 <set_alarm_add_deal+0x4c>
486e5c8e:	42a1      	addiu	a1,v0,1
        {
            set_alarm_var->time.minute++;
486e5c90:	c4a1      	sb	a1,1(a0)
486e5c92:	1001      	b	486e5c96 <set_alarm_add_deal+0x4e>
486e5c94:	c4a1      	sb	a1,1(a0)
        }
        else
        {
            set_alarm_var->time.minute = 0;
486e5c96:	e820      	jr	ra
        }
        break;

        default:
        break;
    }

    return result;
}
486e5c98:	6a00      	li	v0,0
486e5c9a:	6500      	nop

486e5c9c <tm_alarm_alarm_ring_deal>:
486e5c9c:	64fc      	save	96,ra,s0-s1
 * \ingroup
 * \note
 *******************************************************************************/
app_result_e tm_alarm_alarm_ring_deal(alarm_ring_mode_e alarm_ring_mode)
{
486e5c9e:	6b00      	li	v1,0
    alarm_record_t cur_alarm_record;
    app_result_e result = RESULT_NULL;
486e5ca0:	b26b      	lw	v0,486e5e4c <.LBE2+0xe2>
    date_t alarm_date;

    //获取当前闹钟记录
    if (time_alarm_record_list_operate(RECORD_LIST_READ_CUR, &cur_alarm_record, 0) < 0)
486e5ca2:	6704      	move	s0,a0
486e5ca4:	d312      	sw	v1,72(sp)
486e5ca6:	6c02      	li	a0,2
486e5ca8:	0504      	addiu	a1,sp,16
486e5caa:	ea40      	jalr	v0
486e5cac:	67c3      	move	a2,v1
486e5cae:	5200      	slti	v0,0
486e5cb0:	e811      	zeb	s0
486e5cb2:	9212      	lw	v0,72(sp)
    {
        //没有当前有效闹钟记录
        return RESULT_NULL;
486e5cb4:	f080 611b 	btnez	486e5dee <.LBE2+0x84>
486e5cb8:	b166      	lw	s1,486e5e50 <.LBE2+0xe6>
    }

    //读取日期和时间
    sys_get_date(&alarm_date);
486e5cba:	0410      	addiu	a0,sp,64
486e5cbc:	67a2      	move	a1,v0
486e5cbe:	67c2      	move	a2,v0
486e5cc0:	e940      	jalr	s1
486e5cc2:	6f26      	li	a3,38
486e5cc4:	677d      	move	v1,sp
    if (alarm_date.year > 2099)
486e5cc6:	f040 ab80 	lhu	a0,64(v1)
486e5cca:	f021 5c14 	sltiu	a0,2100
486e5cce:	6109      	btnez	486e5ce2 <tm_alarm_alarm_ring_deal+0x46>
486e5cd0:	f7c0 6d10 	li	a1,2000
    {
        alarm_date.year = 2000;
486e5cd4:	f040 cba0 	sh	a1,64(v1)
486e5cd8:	9512      	lw	a1,72(sp)
        sys_set_date(&alarm_date);
486e5cda:	0410      	addiu	a0,sp,64
486e5cdc:	67c5      	move	a2,a1
486e5cde:	e940      	jalr	s1
486e5ce0:	6f25      	li	a3,37
486e5ce2:	2847      	bnez	s0,486e5d72 <.LBE2+0x8>
    }

    //刚进入，检测闹钟是否合法等
    if (alarm_ring_mode == ALARM_RING_ENTER)
486e5ce4:	9512      	lw	a1,72(sp)
    {
        PRINT_INFO("alarm enter");
486e5ce6:	0c44      	la	a0,486e5df4 <.LBE2+0x8a>
486e5ce8:	67c5      	move	a2,a1
486e5cea:	e940      	jalr	s1
486e5cec:	6f4b      	li	a3,75
486e5cee:	679d      	move	a0,sp

        if ((cur_alarm_record.snooze == 0) //只有初次起闹才需要匹配星期
486e5cf0:	f020 a4df 	lbu	a2,63(a0)
486e5cf4:	2e4c      	bnez	a2,486e5d8e <.LBE2+0x24>

486e5cf6 <.LBB2>:
486e5cf6:	f020 a4f3 	lbu	a3,51(a0)

486e5cfa <.LBB3>:
486e5cfa:	f040 ac60 	lhu	v1,64(a0)
486e5cfe:	f040 a482 	lbu	a0,66(a0)
486e5d02:	675d      	move	v0,sp
486e5d04:	5c03      	sltiu	a0,3
486e5d06:	f040 a2c3 	lbu	a2,67(v0)
486e5d0a:	6007      	bteqz	486e5d1a <.LBB3+0x20>
486e5d0c:	6744      	move	v0,a0
486e5d0e:	4a0c      	addiu	v0,12
486e5d10:	43af      	addiu	a1,v1,-1
486e5d12:	6782      	move	a0,v0
486e5d14:	6765      	move	v1,a1
486e5d16:	ec11      	zeb	a0
486e5d18:	eb31      	zeh	v1
486e5d1a:	6d64      	li	a1,100
486e5d1c:	ebbb      	divu	zero,v1,a1
486e5d1e:	ed12      	mflo	a1
486e5d20:	ea10      	mfhi	v0
486e5d22:	ed11      	zeb	a1
486e5d24:	33aa      	srl	v1,a1,2
486e5d26:	e26d      	addu	v1,v0,v1
486e5d28:	324a      	srl	v0,2
486e5d2a:	e34d      	addu	v1,v0
486e5d2c:	6a1a      	li	v0,26
486e5d2e:	ec58      	mult	a0,v0
486e5d30:	6c0a      	li	a0,10
486e5d32:	ea12      	mflo	v0
486e5d34:	35a4      	sll	a1,1
486e5d36:	4a1a      	addiu	v0,26
486e5d38:	ea9a      	div	zero,v0,a0
486e5d3a:	ec12      	mflo	a0
486e5d3c:	e38d      	addu	v1,a0
486e5d3e:	e3ab      	subu	v0,v1,a1
486e5d40:	e2d1      	addu	a0,v0,a2
486e5d42:	446f      	addiu	v1,a0,-1
486e5d44:	6743      	move	v0,v1
486e5d46:	ea91      	seb	v0
486e5d48:	5207      	slti	v0,7
486e5d4a:	6102      	btnez	486e5d50 <.LBB3+0x56>
486e5d4c:	4249      	addiu	v0,v0,-7
486e5d4e:	17fb      	b	486e5d46 <.LBB3+0x4c>
486e5d50:	5200      	slti	v0,0
486e5d52:	6003      	bteqz	486e5d5a <.LBE4>
486e5d54:	4247      	addiu	v0,v0,7
486e5d56:	ea91      	seb	v0
486e5d58:	17fb      	b	486e5d50 <.LBB3+0x56>

486e5d5a <.LBE4>:
486e5d5a:	ea11      	zeb	v0
486e5d5c:	6c01      	li	a0,1
486e5d5e:	2705      	beqz	a3,486e5d6a <.LBE2>
486e5d60:	6767      	move	v1,a3
486e5d62:	ea67      	srav	v1,v0
486e5d64:	eb8c      	and	v1,a0
486e5d66:	2b01      	bnez	v1,486e5d6a <.LBE2>
486e5d68:	6783      	move	a0,v1

486e5d6a <.LBE2>:
486e5d6a:	2c11      	bnez	a0,486e5d8e <.LBE2+0x24>
486e5d6c:	6801      	li	s0,1
        && (check_alarm_day(cur_alarm_record.alarm.alarm_day, &alarm_date) == FALSE))
        { //星期不匹配，更新闹钟时间后立即退出
          //更新下次闹钟时间，如果是只闹一次闹钟，那么将其关闭
            alarm_ring_mode = ALARM_RING_CLOSE;
486e5d6e:	d412      	sw	a0,72(sp)
            result = RESULT_NULL;
486e5d70:	100e      	b	486e5d8e <.LBE2+0x24>
486e5d72:	7003      	cmpi	s0,3
        }
    }
    else if (alarm_ring_mode == ALARM_RING_ENTER_CLOSE_AUTO)
486e5d74:	6107      	btnez	486e5d84 <.LBE2+0x1a>
486e5d76:	9512      	lw	a1,72(sp)
    {
        PRINT_INFO("alarm enter, but close auto!");
486e5d78:	0c23      	la	a0,486e5e04 <.LBE2+0x9a>
486e5d7a:	67c5      	move	a2,a1
486e5d7c:	e940      	jalr	s1
486e5d7e:	6f4b      	li	a3,75
486e5d80:	6801      	li	s0,1
        alarm_ring_mode = ALARM_RING_CLOSE;
486e5d82:	1005      	b	486e5d8e <.LBE2+0x24>
        result = RESULT_NULL;
486e5d84:	9512      	lw	a1,72(sp)
    }
    else
    {
        PRINT_INFO("alarm stop");
486e5d86:	0c29      	la	a0,486e5e28 <.LBE2+0xbe>
486e5d88:	67c5      	move	a2,a1
486e5d8a:	e940      	jalr	s1
486e5d8c:	6f4b      	li	a3,75
486e5d8e:	40cf      	addiu	a2,s0,-1
    }

    //关闭或者延时闹钟，重设闹钟时间
    if ((alarm_ring_mode == ALARM_RING_CLOSE) || (alarm_ring_mode == ALARM_RING_SNOOZE))
486e5d90:	5e02      	sltiu	a2,2
486e5d92:	6023      	bteqz	486e5dda <.LBE2+0x70>
486e5d94:	7002      	cmpi	s0,2
    {
        if (alarm_ring_mode == ALARM_RING_SNOOZE)
486e5d96:	610b      	btnez	486e5dae <.LBE2+0x44>
486e5d98:	b22f      	lw	v0,486e5e54 <.LBE2+0xea>
        {
            if ((sys_comval->snooze_max != 0)
486e5d9a:	9a80      	lw	a0,0(v0)
486e5d9c:	f020 a46a 	lbu	v1,42(a0)
486e5da0:	2306      	beqz	v1,486e5dae <.LBE2+0x44>
486e5da2:	67fd      	move	a3,sp
486e5da4:	f020 a7bf 	lbu	a1,63(a3)
486e5da8:	ed63      	sltu	a1,v1
486e5daa:	6101      	btnez	486e5dae <.LBE2+0x44>
486e5dac:	6801      	li	s0,1
                    && (cur_alarm_record.snooze >= sys_comval->snooze_max))
            {
                alarm_ring_mode = ALARM_RING_CLOSE;
486e5dae:	7001      	cmpi	s0,1
            }
        }

        if (alarm_ring_mode == ALARM_RING_CLOSE)
486e5db0:	b227      	lw	v0,486e5e4c <.LBE2+0xe2>
486e5db2:	6103      	btnez	486e5dba <.LBE2+0x50>
486e5db4:	6c03      	li	a0,3
        {
            time_alarm_record_list_operate(RECORD_LIST_UPDATE_ALARM, (void *) UPDATE_ALARM_CLOSE, 0);
486e5db6:	67a4      	move	a1,a0
486e5db8:	1002      	b	486e5dbe <.LBE2+0x54>
486e5dba:	6c03      	li	a0,3
        }
        else
        {
            time_alarm_record_list_operate(RECORD_LIST_UPDATE_ALARM, (void *) UPDATE_ALARM_SNOOZE, 0);
486e5dbc:	6d02      	li	a1,2
486e5dbe:	ea40      	jalr	v0
486e5dc0:	6e00      	li	a2,0
486e5dc2:	b326      	lw	v1,486e5e58 <.LBE2+0xee>
        }

        if (g_ap_switch_var.rtcalarm_poweron == TRUE)
486e5dc4:	a3dc      	lbu	a2,28(v1)
486e5dc6:	7601      	cmpi	a2,1
486e5dc8:	610b      	btnez	486e5de0 <.LBE2+0x76>
486e5dca:	6a00      	li	v0,0
        {
            g_ap_switch_var.rtcalarm_poweron = FALSE;
486e5dcc:	6c01      	li	a0,1
            g_ap_switch_var.rtcalarm_poweroff = TRUE;
486e5dce:	c35c      	sb	v0,28(v1)
486e5dd0:	c39d      	sb	a0,29(v1)
486e5dd2:	6bff      	li	v1,255
            result = RESULT_POWER_OFF;
486e5dd4:	4b0b      	addiu	v1,11
486e5dd6:	d312      	sw	v1,72(sp)
486e5dd8:	1003      	b	486e5de0 <.LBE2+0x76>
486e5dda:	6dff      	li	a1,255
        }
    }
    else
    {
        result = RESULT_ENTER_ALARM;
486e5ddc:	4d1a      	addiu	a1,26
486e5dde:	d512      	sw	a1,72(sp)
486e5de0:	9512      	lw	a1,72(sp)
    }

    PRINT_INFO_INT("alarm go to:", result);
486e5de2:	b21c      	lw	v0,486e5e50 <.LBE2+0xe6>
486e5de4:	0c15      	la	a0,486e5e38 <.LBE2+0xce>
486e5de6:	6e02      	li	a2,2
486e5de8:	ea40      	jalr	v0
486e5dea:	6f4b      	li	a3,75
486e5dec:	9212      	lw	v0,72(sp)

    return result;
486e5dee:	647c      	restore	96,ra,s0-s1
}
486e5df0:	e8a0      	jrc	ra
486e5df2:	0000      	addiu	s0,sp,0
486e5df4:	493c      	addiu	s1,60
486e5df6:	203e      	beqz	s0,486e5e74 <.LBE2+0x10a>
486e5df8:	6c61      	li	a0,97
486e5dfa:	7261      	cmpi	v0,97
486e5dfc:	206d      	beqz	s0,486e5ed8 <.LBE2+0x16e>
486e5dfe:	6e65      	li	a2,101
486e5e00:	6574      	move	s3,a0
486e5e02:	0072      	addiu	s0,sp,456
486e5e04:	493c      	addiu	s1,60
486e5e06:	203e      	beqz	s0,486e5e84 <.LBE2+0x11a>
486e5e08:	6c61      	li	a0,97
486e5e0a:	7261      	cmpi	v0,97
486e5e0c:	206d      	beqz	s0,486e5ee8 <.LBE2+0x17e>
486e5e0e:	6e65      	li	a2,101
486e5e10:	6574      	move	s3,a0
486e5e12:	2c72      	bnez	a0,486e5ef8 <.LBE2+0x18e>
486e5e14:	6220      	sw	ra,128(sp)
486e5e16:	7475      	cmpi	a0,117
486e5e18:	6320      	addiu	sp,256
486e5e1a:	6f6c      	li	a3,108
486e5e1c:	6573      	move	s3,v1
486e5e1e:	6120      	btnez	486e5e60 <.LBE2+0xf6>
486e5e20:	7475      	cmpi	a0,117
486e5e22:	216f      	beqz	s1,486e5f02 <.LBE2+0x198>
486e5e24:	0000      	addiu	s0,sp,0
486e5e26:	0000      	addiu	s0,sp,0
486e5e28:	493c      	addiu	s1,60
486e5e2a:	203e      	beqz	s0,486e5ea8 <.LBE2+0x13e>
486e5e2c:	6c61      	li	a0,97
486e5e2e:	7261      	cmpi	v0,97
486e5e30:	206d      	beqz	s0,486e5f0c <.LBE2+0x1a2>
486e5e32:	7473      	cmpi	a0,115
486e5e34:	706f      	cmpi	s0,111
486e5e36:	0000      	addiu	s0,sp,0
486e5e38:	493c      	addiu	s1,60
486e5e3a:	203e      	beqz	s0,486e5eb8 <.LBE2+0x14e>
486e5e3c:	6c61      	li	a0,97
486e5e3e:	7261      	cmpi	v0,97
486e5e40:	206d      	beqz	s0,486e5f1c <.LBE2+0x1b2>
486e5e42:	6f67      	li	a3,103
486e5e44:	7420      	cmpi	a0,32
486e5e46:	3a6f      	ld	v1,120(v0)
486e5e48:	0000      	addiu	s0,sp,0
486e5e4a:	0000      	addiu	s0,sp,0
486e5e4c:	5a11      	sltiu	v0,17
486e5e4e:	4872      	addiu	s0,114
486e5e50:	e901      	sdbbp	8
486e5e52:	bfc1      	lwu	a2,4(a3)
486e5e54:	999c      	lw	a0,112(s1)
486e5e56:	9fc1      	lw	a2,4(a3)
486e5e58:	a19c      	lbu	a0,28(s1)
486e5e5a:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_28:

48725800 <__time_alarm_update_alarm_close>:
48725800:	64e3      	save	24,ra,s0
    return ret;
}

static void __time_alarm_update_alarm_close(alarm_record_t *p_alarm_record)
{
48725802:	f020 a443 	lbu	v0,35(a0)
    if (p_alarm_record->alarm.alarm_day == 0)
48725806:	6704      	move	s0,a0
48725808:	2a02      	bnez	v0,4872580e <__time_alarm_update_alarm_close+0xe>
4872580a:	f020 c442 	sb	v0,34(a0)
    {
        p_alarm_record->alarm.alarm_onoff = FALSE;
4872580e:	6790      	move	a0,s0
    }
    libc_memcpy(&(p_alarm_record->last_time), &(p_alarm_record->alarm.alarm_time), sizeof(time_t));
48725810:	67b0      	move	a1,s0
48725812:	b206      	lw	v0,48725828 <__time_alarm_update_alarm_close+0x28>
48725814:	4c2c      	addiu	a0,44
48725816:	4d24      	addiu	a1,36
48725818:	6e03      	li	a2,3
4872581a:	ea40      	jalr	v0
4872581c:	6f00      	li	a3,0
4872581e:	6a00      	li	v0,0
    p_alarm_record->snooze = 0;
48725820:	f020 c04f 	sb	v0,47(s0)
48725824:	6463      	restore	24,ra,s0
48725826:	e8a0      	jrc	ra
48725828:	e905      	break	8
4872582a:	bfc1      	lwu	a2,4(a3)

4872582c <time_alarm_update_alarm>:
4872582c:	64f7      	save	56,ra,s0-s1
}

/* 更新下次闹钟时间，如果没有可用闹钟，就完全停止闹钟
 #define UPDATE_ALARM_ADD        0 //添加或修改闹钟记录
 #define UPDATE_ALARM_DEL        1 //删除闹钟记录
 #define UPDATE_ALARM_SNOOZE     2 //延时当前闹钟
 #define UPDATE_ALARM_CLOSE      3 //关闭当前闹钟，只关闭只闹一次的闹钟
 #define UPDATE_ALARM_GET_NEXT   4 //获取最近闹钟时间，排除掉当前正在闹的闹钟
 #define UPDATE_ALARM_JUST_CLOSE 5 //仅仅关闭当前闹钟
 #define UPDATE_ALARM_CLOSE_SAME 6 //关闭其他相同时间的闹钟
 */
uint8 time_alarm_update_alarm(uint8 mode)
{
4872582e:	b072      	lw	s0,487259f4 <.LBE2+0x10>
    uint32 tmp_cur_time, tmp_alarm_time;
    uint32 tmp_diff_time, tmp_diff_time_min;
    uint8 alarm_index, alarm_available;
    time_t alarm_time;
    alarm_record_t *p_cur_alarm_record = &(g_time_alarm_var.alarm_records[g_time_alarm_var.alarm_idx]);
48725830:	6d30      	li	a1,48
48725832:	a0c2      	lbu	a2,2(s0)
48725834:	ec11      	zeb	a0
48725836:	eeb8      	mult	a2,a1
48725838:	d406      	sw	a0,24(sp)
4872583a:	eb12      	mflo	v1
4872583c:	6790      	move	a0,s0
4872583e:	4c08      	addiu	a0,8
48725840:	6d00      	li	a1,0

    sys_get_time(&alarm_time);
48725842:	b26e      	lw	v0,487259f8 <.LBE2+0x14>
48725844:	e385      	addu	s1,v1,a0
48725846:	67c5      	move	a2,a1
48725848:	0404      	addiu	a0,sp,16
4872584a:	ea40      	jalr	v0
4872584c:	6f24      	li	a3,36
4872584e:	a042      	lbu	v0,2(s0)

    if (g_time_alarm_var.alarm_idx != 0xff)
48725850:	72ff      	cmpi	v0,255
48725852:	6032      	bteqz	487258b8 <time_alarm_update_alarm+0x8c>
48725854:	9706      	lw	a3,24(sp)
    {
        //贪睡延时
        if (mode == UPDATE_ALARM_SNOOZE)
48725856:	7702      	cmpi	a3,2
48725858:	6127      	btnez	487258a8 <time_alarm_update_alarm+0x7c>
4872585a:	67dd      	move	a2,sp
        {
            p_cur_alarm_record->last_time.second = alarm_time.second;
4872585c:	a692      	lbu	a0,18(a2)
4872585e:	a671      	lbu	v1,17(a2)
            p_cur_alarm_record->last_time.minute = (alarm_time.minute + sys_comval->snooze_timer) % 60;
48725860:	f020 c18e 	sb	a0,46(s1)
48725864:	b466      	lw	a0,487259fc <.LBE2+0x18>
48725866:	9c40      	lw	v0,0(a0)
48725868:	f020 a2a9 	lbu	a1,41(v0)
4872586c:	6a3c      	li	v0,60
4872586e:	e3bd      	addu	a3,v1,a1
48725870:	ef5a      	div	zero,a3,v0
48725872:	ed10      	mfhi	a1
48725874:	f020 c1ad 	sb	a1,45(s1)
48725878:	a6b0      	lbu	a1,16(a2)
            p_cur_alarm_record->last_time.hour = alarm_time.hour;
4872587a:	a6f1      	lbu	a3,17(a2)
            if ((alarm_time.minute + sys_comval->snooze_timer) >= 60)
4872587c:	f020 c1ac 	sb	a1,44(s1)
48725880:	9c60      	lw	v1,0(a0)
48725882:	f020 a389 	lbu	a0,41(v1)
48725886:	e789      	addu	v0,a3,a0
48725888:	523c      	slti	v0,60
4872588a:	6108      	btnez	4872589c <time_alarm_update_alarm+0x70>
4872588c:	6745      	move	v0,a1
            {
                p_cur_alarm_record->last_time.hour = (p_cur_alarm_record->last_time.hour + 1) % 24;
4872588e:	ea11      	zeb	v0
48725890:	4261      	addiu	v1,v0,1
48725892:	6f18      	li	a3,24
48725894:	ebfa      	div	zero,v1,a3
48725896:	ee10      	mfhi	a2
48725898:	f020 c1cc 	sb	a2,44(s1)
4872589c:	f020 a18f 	lbu	a0,47(s1)
            }
            p_cur_alarm_record->snooze++;
487258a0:	44a1      	addiu	a1,a0,1
487258a2:	f020 c1af 	sb	a1,47(s1)
487258a6:	1008      	b	487258b8 <time_alarm_update_alarm+0x8c>
487258a8:	9406      	lw	a0,24(sp)
        }
        //关闭只闹一次闹钟
        else if ((mode == UPDATE_ALARM_CLOSE) || (mode == UPDATE_ALARM_JUST_CLOSE))
487258aa:	7403      	cmpi	a0,3
487258ac:	6002      	bteqz	487258b2 <time_alarm_update_alarm+0x86>
487258ae:	7405      	cmpi	a0,5
487258b0:	6103      	btnez	487258b8 <time_alarm_update_alarm+0x8c>
487258b2:	1b90 9600 	jal	48725800 <__time_alarm_update_alarm_close>
        {
            __time_alarm_update_alarm_close(p_cur_alarm_record);
487258b6:	6791      	move	a0,s1
487258b8:	9606      	lw	a2,24(sp)
        }
        else
        {
            ; //for QAC
        }
    }

    if (mode == UPDATE_ALARM_JUST_CLOSE)
487258ba:	6a00      	li	v0,0
    { //关闭当前闹钟后即可返回
        return 0;
487258bc:	7605      	cmpi	a2,5
487258be:	f080 6016 	bteqz	487259ee <.LBE2+0xa>
487258c2:	675d      	move	v0,sp
    }

    //搜索最早打开了的闹钟
    tmp_cur_time = (uint32) (alarm_time.hour * 3600);
487258c4:	a270      	lbu	v1,16(v0)
487258c6:	f601 6d10 	li	a1,3600
487258ca:	67dd      	move	a2,sp
    tmp_cur_time += alarm_time.minute * 60;
487258cc:	a6f1      	lbu	a3,17(a2)
487258ce:	ebb8      	mult	v1,a1
487258d0:	693c      	li	s1,60
487258d2:	ec12      	mflo	a0
487258d4:	ef38      	mult	a3,s1
487258d6:	a652      	lbu	v0,18(a2)
    tmp_cur_time += alarm_time.second;
487258d8:	e812      	mflo	s0
487258da:	6f01      	li	a3,1
    tmp_diff_time_min = 0xffffffff;
487258dc:	e415      	addu	a1,a0,s0
487258de:	e54d      	addu	v1,a1,v0
487258e0:	68ff      	li	s0,255
    alarm_available = 0xff;
487258e2:	e9eb      	neg	s1,a3
487258e4:	d008      	sw	s0,32(sp)
487258e6:	d309      	sw	v1,36(sp)
487258e8:	d107      	sw	s1,28(sp)
487258ea:	6800      	li	s0,0
    for (alarm_index = 0; alarm_index < RCP_ALARM_MAX; alarm_index++)
487258ec:	9406      	lw	a0,24(sp)
    {
        if ((mode == UPDATE_ALARM_GET_NEXT) && (alarm_index == g_time_alarm_var.alarm_idx))
487258ee:	7404      	cmpi	a0,4
487258f0:	67d8      	move	a2,t8
487258f2:	5e01      	sltiu	a2,1
487258f4:	6738      	move	s1,t8
487258f6:	2104      	beqz	s1,48725900 <time_alarm_update_alarm+0xd4>
487258f8:	b53f      	lw	a1,487259f4 <.LBE2+0x10>
487258fa:	a5e2      	lbu	a3,2(a1)
487258fc:	ef0e      	xor	a3,s0
487258fe:	273d      	beqz	a3,4872597a <time_alarm_update_alarm+0x14e>
48725900:	9206      	lw	v0,24(sp)
        { //最近闹钟，但不包括当前正在闹的闹钟
            continue;
        }

        if ((mode == UPDATE_ALARM_CLOSE_SAME) && (alarm_index == g_time_alarm_var.alarm_idx))
48725902:	7206      	cmpi	v0,6
48725904:	6778      	move	v1,t8
48725906:	5b01      	sltiu	v1,1
48725908:	67b8      	move	a1,t8
4872590a:	2504      	beqz	a1,48725914 <time_alarm_update_alarm+0xe8>
4872590c:	b43a      	lw	a0,487259f4 <.LBE2+0x10>
4872590e:	a4c2      	lbu	a2,2(a0)
48725910:	ee0e      	xor	a2,s0
48725912:	2633      	beqz	a2,4872597a <time_alarm_update_alarm+0x14e>
48725914:	6e30      	li	a2,48
        { //只关闭其他闹钟
            continue;
        }

        p_cur_alarm_record = &(g_time_alarm_var.alarm_records[alarm_index]);
48725916:	e8d8      	mult	s0,a2
48725918:	b237      	lw	v0,487259f4 <.LBE2+0x10>
4872591a:	eb12      	mflo	v1
4872591c:	4a08      	addiu	v0,8
4872591e:	e351      	addu	a0,v1,v0
48725920:	f020 a4e1 	lbu	a3,33(a0)

        if (p_cur_alarm_record->alarm.alarm_used == 1)
48725924:	7701      	cmpi	a3,1
48725926:	6129      	btnez	4872597a <time_alarm_update_alarm+0x14e>
48725928:	f020 a4e2 	lbu	a3,34(a0)
        { //先支持ANSI编码
            if (p_cur_alarm_record->alarm.alarm_onoff == 1)
4872592c:	7701      	cmpi	a3,1
4872592e:	6125      	btnez	4872597a <time_alarm_update_alarm+0x14e>
48725930:	f020 a4cc 	lbu	a2,44(a0)
            {
                tmp_alarm_time = (uint32) (p_cur_alarm_record->last_time.hour * 3600);
48725934:	f601 6f10 	li	a3,3600
48725938:	eef8      	mult	a2,a3
4872593a:	f020 a46d 	lbu	v1,45(a0)
                tmp_alarm_time += p_cur_alarm_record->last_time.minute * 60;
4872593e:	6a3c      	li	v0,60
48725940:	ee12      	mflo	a2
48725942:	eb58      	mult	v1,v0
48725944:	f020 a44e 	lbu	v0,46(a0)
                tmp_alarm_time += p_cur_alarm_record->last_time.second;
48725948:	ef12      	mflo	a3
4872594a:	e6ed      	addu	v1,a2,a3
4872594c:	e34d      	addu	v1,v0
4872594e:	2503      	beqz	a1,48725956 <time_alarm_update_alarm+0x12a>

                //关闭其他相同时间的闹钟
                if (mode == UPDATE_ALARM_CLOSE_SAME)
48725950:	9209      	lw	v0,36(sp)
                {
                    if (tmp_alarm_time == tmp_cur_time)
48725952:	eb4a      	cmp	v1,v0
48725954:	600f      	bteqz	48725974 <time_alarm_update_alarm+0x148>
48725956:	9709      	lw	a3,36(sp)
                    {
                        __time_alarm_update_alarm_close(p_cur_alarm_record);
                        continue;
                    }
                }

                if (tmp_alarm_time > tmp_cur_time)
48725958:	ef63      	sltu	a3,v1
4872595a:	e3ef      	subu	v1,a3
4872595c:	6743      	move	v0,v1
                {
                    tmp_diff_time = tmp_alarm_time - tmp_cur_time;
4872595e:	6102      	btnez	48725964 <time_alarm_update_alarm+0x138>
48725960:	b628      	lw	a2,48725a00 <.LBE2+0x1c>
                }
                else
                {
                    tmp_diff_time = (tmp_alarm_time + 24 * 3600) - tmp_cur_time;
48725962:	e3c9      	addu	v0,v1,a2
48725964:	9307      	lw	v1,28(sp)
                }

                if (tmp_diff_time < tmp_diff_time_min)
48725966:	ea63      	sltu	v0,v1
48725968:	6002      	bteqz	4872596e <time_alarm_update_alarm+0x142>
4872596a:	d207      	sw	v0,28(sp)
                {
                    tmp_diff_time_min = tmp_diff_time;
4872596c:	d008      	sw	s0,32(sp)
                    alarm_available = alarm_index;
4872596e:	2505      	beqz	a1,4872597a <time_alarm_update_alarm+0x14e>
                }

                //关闭其他相同时间的闹钟
                if (mode == UPDATE_ALARM_CLOSE_SAME)
48725970:	5a06      	sltiu	v0,6
                {
                    if (tmp_diff_time <= 5)
48725972:	6003      	bteqz	4872597a <time_alarm_update_alarm+0x14e>
48725974:	1b90 9600 	jal	48725800 <__time_alarm_update_alarm_close>
                    {
                        __time_alarm_update_alarm_close(p_cur_alarm_record);
48725978:	6500      	nop
4872597a:	40a1      	addiu	a1,s0,1
4872597c:	6705      	move	s0,a1
4872597e:	e811      	zeb	s0
48725980:	5804      	sltiu	s0,4
48725982:	61b4      	btnez	487258ec <time_alarm_update_alarm+0xc0>
48725984:	9406      	lw	a0,24(sp)
                    }
                }
            }
        }
    }

    if (mode == UPDATE_ALARM_CLOSE_SAME)
48725986:	6a00      	li	v0,0
    {
        return 0;
48725988:	7406      	cmpi	a0,6
4872598a:	6031      	bteqz	487259ee <.LBE2+0xa>
4872598c:	292f      	bnez	s1,487259ec <.LBE2+0x8>
    }

    if (mode != UPDATE_ALARM_GET_NEXT)
4872598e:	9608      	lw	a2,32(sp)
    {
        if (alarm_available != 0xff)
48725990:	76ff      	cmpi	a2,255
48725992:	6010      	bteqz	487259b4 <.LBB2>
48725994:	4a30      	addiu	v0,48
        { //有打开了的闹钟，更新闹钟时间
            p_cur_alarm_record = &(g_time_alarm_var.alarm_records[alarm_available]);
48725996:	ee58      	mult	a2,v0
48725998:	b017      	lw	s0,487259f4 <.LBE2+0x10>
4872599a:	ee12      	mflo	a2
4872599c:	b217      	lw	v0,487259f8 <.LBE2+0x14>
            sys_set_alarm_time(&(p_cur_alarm_record->last_time));
4872599e:	e0d1      	addu	a0,s0,a2
487259a0:	6f27      	li	a3,39
487259a2:	4c34      	addiu	a0,52
487259a4:	67b1      	move	a1,s1
487259a6:	ea40      	jalr	v0
487259a8:	67d1      	move	a2,s1
487259aa:	67fd      	move	a3,sp
            g_time_alarm_var.alarm_idx = alarm_available;
487259ac:	f020 a740 	lbu	v0,32(a3)
487259b0:	c042      	sb	v0,2(s0)
487259b2:	101c      	b	487259ec <.LBE2+0x8>

487259b4 <.LBB2>:
487259b4:	b414      	lw	a0,48725a04 <.LBE2+0x20>
487259b6:	6a03      	li	v0,3
487259b8:	9ce0      	lw	a3,0(a0)
487259ba:	eb4b      	neg	v1,v0
487259bc:	ef6c      	and	a3,v1
487259be:	b313      	lw	v1,48725a08 <.LBE2+0x24>
487259c0:	f594 6d16 	li	a1,42390
487259c4:	dce0      	sw	a3,0(a0)
487259c6:	dba0      	sw	a1,0(v1)
487259c8:	9bc0      	lw	a2,0(v1)
487259ca:	f26b 7609 	cmpi	a2,23145
487259ce:	61fc      	btnez	487259c8 <.LBB2+0x14>
487259d0:	b40f      	lw	a0,48725a0c <.LBE2+0x28>
487259d2:	6d01      	li	a1,1
487259d4:	f3e0 6b1f 	li	v1,1023
487259d8:	9ce0      	lw	a3,0(a0)
487259da:	436f      	addiu	v1,v1,-1
487259dc:	efad      	or	a3,a1
487259de:	5300      	slti	v1,0
487259e0:	dce0      	sw	a3,0(a0)
487259e2:	60fa      	bteqz	487259d8 <.LBB2+0x24>

487259e4 <.LBE2>:
487259e4:	b504      	lw	a1,487259f4 <.LBE2+0x10>
        }
        else
        { //没有打开了的闹钟，关闭闹钟
            sys_set_alarm_disable();
            g_time_alarm_var.alarm_idx = 0xff;
487259e6:	6c01      	li	a0,1
487259e8:	ec8b      	neg	a0
487259ea:	c582      	sb	a0,2(a1)
487259ec:	9208      	lw	v0,32(sp)
        }
    }
    
    return alarm_available;
487259ee:	6477      	restore	56,ra,s0-s1
}
487259f0:	e8a0      	jrc	ra
487259f2:	0000      	addiu	s0,sp,0
487259f4:	5c70      	sltiu	a0,112
487259f6:	4872      	addiu	s0,114
487259f8:	e901      	sdbbp	8
487259fa:	bfc1      	lwu	a2,4(a3)
487259fc:	999c      	lw	a0,112(s1)
487259fe:	9fc1      	lw	a2,4(a3)
48725a00:	5180      	slti	s1,128
48725a02:	0001      	addiu	s0,sp,4
48725a04:	0000      	addiu	s0,sp,0
48725a06:	c012      	sb	s0,18(s0)
48725a08:	0004      	addiu	s0,sp,16
48725a0a:	c012      	sb	s0,18(s0)
48725a0c:	001c      	addiu	s0,sp,112
48725a0e:	c012      	sb	s0,18(s0)

48725a10 <time_alarm_record_list_operate>:
48725a10:	f00c 64f6 	save	a0-a2,48,ra,s0-s1
48725a14:	ec11      	zeb	a0
48725a16:	6d00      	li	a1,0
48725a18:	b190      	lw	s1,48725c58 <.LBE14+0x24>
48725a1a:	d404      	sw	a0,16(sp)
48725a1c:	67c5      	move	a2,a1
48725a1e:	6785      	move	a0,a1
48725a20:	d506      	sw	a1,24(sp)
48725a22:	d505      	sw	a1,20(sp)
48725a24:	e940      	jalr	s1
48725a26:	6f33      	li	a3,51
48725a28:	b18d      	lw	s1,48725c5c <.LBE14+0x28>
48725a2a:	b58e      	lw	a1,48725c60 <.LBE14+0x2c>
48725a2c:	b38b      	lw	v1,48725c58 <.LBE14+0x24>
48725a2e:	6791      	move	a0,s1
48725a30:	6ec8      	li	a2,200
48725a32:	eb40      	jalr	v1
48725a34:	6f12      	li	a3,18
48725a36:	a940      	lhu	v0,0(s1)
48725a38:	f5aa 720d 	cmpi	v0,21933
48725a3c:	6018      	bteqz	48725a6e <time_alarm_record_list_operate+0x5e>
48725a3e:	f5aa 6e0d 	li	a2,21933
48725a42:	6c01      	li	a0,1
48725a44:	ec8b      	neg	a0
48725a46:	9506      	lw	a1,24(sp)
48725a48:	b087      	lw	s0,48725c64 <.LBE14+0x30>
48725a4a:	c9c0      	sh	a2,0(s1)
48725a4c:	c182      	sb	a0,2(s1)
48725a4e:	6e04      	li	a2,4
48725a50:	4184      	addiu	a0,s1,4
48725a52:	e840      	jalr	s0
48725a54:	6f01      	li	a3,1
48725a56:	9506      	lw	a1,24(sp)
48725a58:	6791      	move	a0,s1
48725a5a:	4c08      	addiu	a0,8
48725a5c:	6ec0      	li	a2,192
48725a5e:	e840      	jalr	s0
48725a60:	6f01      	li	a3,1
48725a62:	b580      	lw	a1,48725c60 <.LBE14+0x2c>
48725a64:	b37d      	lw	v1,48725c58 <.LBE14+0x24>
48725a66:	6791      	move	a0,s1
48725a68:	6ec8      	li	a2,200
48725a6a:	eb40      	jalr	v1
48725a6c:	6f13      	li	a3,19
48725a6e:	9404      	lw	a0,16(sp)
48725a70:	5c0c      	sltiu	a0,12
48725a72:	f0c0 601f 	bteqz	48725c34 <.LBE14>
48725a76:	0a04      	la	v0,48725a84 <time_alarm_record_list_operate+0x74>
48725a78:	3684      	sll	a2,a0,1
48725a7a:	e64d      	addu	v1,a2,v0
48725a7c:	8ba0      	lh	a1,0(v1)
48725a7e:	e55d      	addu	a3,a1,v0
48725a80:	ef80      	jrc	a3
48725a82:	0000      	addiu	s0,sp,0
48725a84:	0019      	addiu	s0,sp,100
48725a86:	003b      	addiu	s0,sp,236
48725a88:	0079      	addiu	s0,sp,484
48725a8a:	0099      	addiu	s0,sp,612
48725a8c:	00a7      	addiu	s0,sp,668
48725a8e:	00d1      	addiu	s0,sp,836
48725a90:	00e3      	addiu	s0,sp,908
48725a92:	010d      	addiu	s1,sp,52
48725a94:	0137      	addiu	s1,sp,220
48725a96:	0165      	addiu	s1,sp,404
48725a98:	018f      	addiu	s1,sp,572
48725a9a:	019f      	addiu	s1,sp,636

48725a9c <.LBB4>:
48725a9c:	679d      	move	a0,sp
48725a9e:	f020 a458 	lbu	v0,56(a0)
48725aa2:	ea11      	zeb	v0
48725aa4:	5a04      	sltiu	v0,4
48725aa6:	6065      	bteqz	48725b72 <.LBB9+0xc>
48725aa8:	6e30      	li	a2,48
48725aaa:	ead8      	mult	v0,a2
48725aac:	b56c      	lw	a1,48725c5c <.LBE14+0x28>
48725aae:	1031      	b	48725b12 <.LBB6+0x16>

48725ab0 <.LBB5>:
48725ab0:	940d      	lw	a0,52(sp)
48725ab2:	b26d      	lw	v0,48725c64 <.LBE14+0x30>
48725ab4:	6e30      	li	a2,48
48725ab6:	ea40      	jalr	v0
48725ab8:	6f00      	li	a3,0
48725aba:	d006      	sw	s0,24(sp)
48725abc:	1018      	b	48725aee <.LBB5+0x3e>
48725abe:	671d      	move	s0,sp
48725ac0:	f020 a0d8 	lbu	a2,56(s0)
48725ac4:	b366      	lw	v1,48725c5c <.LBE14+0x28>
48725ac6:	ee11      	zeb	a2
48725ac8:	6800      	li	s0,0
48725aca:	6c30      	li	a0,48
48725acc:	4b08      	addiu	v1,8
48725ace:	e898      	mult	s0,a0
48725ad0:	ea12      	mflo	v0
48725ad2:	e275      	addu	a1,v0,v1
48725ad4:	f020 a5e1 	lbu	a3,33(a1)
48725ad8:	7701      	cmpi	a3,1
48725ada:	6104      	btnez	48725ae4 <.LBB5+0x34>
48725adc:	f020 a5e0 	lbu	a3,32(a1)
48725ae0:	efce      	xor	a3,a2
48725ae2:	27e6      	beqz	a3,48725ab0 <.LBB5>
48725ae4:	40a1      	addiu	a1,s0,1
48725ae6:	6705      	move	s0,a1
48725ae8:	e811      	zeb	s0
48725aea:	5804      	sltiu	s0,4
48725aec:	61f0      	btnez	48725ace <.LBB5+0x1e>
48725aee:	5804      	sltiu	s0,4
48725af0:	f0a0 6100 	btnez	48725c34 <.LBE14>
48725af4:	6e02      	li	a2,2
48725af6:	ebcb      	neg	v1,a2
48725af8:	d306      	sw	v1,24(sp)

48725afa <.LBE5>:
48725afa:	109c      	b	48725c34 <.LBE14>

48725afc <.LBB6>:
48725afc:	b558      	lw	a1,48725c5c <.LBE14+0x28>
48725afe:	6f02      	li	a3,2
48725b00:	a542      	lbu	v0,2(a1)
48725b02:	eceb      	neg	a0,a3
48725b04:	5a04      	sltiu	v0,4
48725b06:	d406      	sw	a0,24(sp)
48725b08:	f080 6014 	bteqz	48725c34 <.LBE14>
48725b0c:	6e30      	li	a2,48
48725b0e:	ead8      	mult	v0,a2
48725b10:	d206      	sw	v0,24(sp)
48725b12:	ea12      	mflo	v0
48725b14:	4d08      	addiu	a1,8
48725b16:	940d      	lw	a0,52(sp)
48725b18:	e2b5      	addu	a1,v0,a1
48725b1a:	107f      	b	48725c1a <.LBB13+0x8>

48725b1c <.LBB7>:
48725b1c:	67bd      	move	a1,sp
48725b1e:	f020 a594 	lbu	a0,52(a1)
48725b22:	b252      	lw	v0,48725c68 <.LBE14+0x34>
48725b24:	ea40      	jalr	v0
48725b26:	ec11      	zeb	a0
48725b28:	1045      	b	48725bb4 <.LBB10+0x24>

48725b2a <.LBB8>:
48725b2a:	b050      	lw	s0,48725c68 <.LBE14+0x34>
48725b2c:	e840      	jalr	s0
48725b2e:	6c04      	li	a0,4
48725b30:	6b01      	li	v1,1
48725b32:	ee6b      	neg	a2,v1
48725b34:	72ff      	cmpi	v0,255
48725b36:	6702      	move	s0,v0
48725b38:	d606      	sw	a2,24(sp)
48725b3a:	607c      	bteqz	48725c34 <.LBE14>
48725b3c:	6c30      	li	a0,48
48725b3e:	ea98      	mult	v0,a0
48725b40:	b74b      	lw	a3,48725c6c <.LBE14+0x38>
48725b42:	eb12      	mflo	v1
48725b44:	940d      	lw	a0,52(sp)
48725b46:	b248      	lw	v0,48725c64 <.LBE14+0x30>
48725b48:	e3f5      	addu	a1,v1,a3
48725b4a:	46c4      	addiu	a2,a2,4
48725b4c:	ea40      	jalr	v0
48725b4e:	6f00      	li	a3,0
48725b50:	d006      	sw	s0,24(sp)

48725b52 <.LBE8>:
48725b52:	1070      	b	48725c34 <.LBE14>
48725b54:	b245      	lw	v0,48725c68 <.LBE14+0x34>
48725b56:	ea40      	jalr	v0
48725b58:	6c05      	li	a0,5
48725b5a:	675d      	move	v0,sp
48725b5c:	b640      	lw	a2,48725c5c <.LBE14+0x28>
48725b5e:	f020 a2b4 	lbu	a1,52(v0)
48725b62:	c6a2      	sb	a1,2(a2)
48725b64:	1027      	b	48725bb4 <.LBB10+0x24>

48725b66 <.LBB9>:
48725b66:	67fd      	move	a3,sp
48725b68:	f020 a758 	lbu	v0,56(a3)
48725b6c:	ea11      	zeb	v0
48725b6e:	5a04      	sltiu	v0,4
48725b70:	6102      	btnez	48725b76 <.LBB9+0x10>
48725b72:	6f01      	li	a3,1
48725b74:	104b      	b	48725c0c <.LBB12+0x28>
48725b76:	6e30      	li	a2,48
48725b78:	ead8      	mult	v0,a2
48725b7a:	b439      	lw	a0,48725c5c <.LBE14+0x28>
48725b7c:	ed12      	mflo	a1
48725b7e:	4c08      	addiu	a0,8
48725b80:	e591      	addu	a0,a1,a0
48725b82:	b239      	lw	v0,48725c64 <.LBE14+0x30>
48725b84:	950d      	lw	a1,52(sp)
48725b86:	ea40      	jalr	v0
48725b88:	6f00      	li	a3,0
48725b8a:	6b01      	li	v1,1
48725b8c:	d305      	sw	v1,20(sp)

48725b8e <.LBE9>:
48725b8e:	1052      	b	48725c34 <.LBE14>

48725b90 <.LBB10>:
48725b90:	67fd      	move	a3,sp
48725b92:	f020 a7d8 	lbu	a2,56(a3)
48725b96:	ee11      	zeb	a2
48725b98:	5e04      	sltiu	a2,4
48725b9a:	6104      	btnez	48725ba4 <.LBB10+0x14>
48725b9c:	6b01      	li	v1,1
48725b9e:	ee6b      	neg	a2,v1
48725ba0:	d606      	sw	a2,24(sp)
48725ba2:	1048      	b	48725c34 <.LBE14>
48725ba4:	6b30      	li	v1,48
48725ba6:	ee78      	mult	a2,v1
48725ba8:	b52d      	lw	a1,48725c5c <.LBE14+0x28>
48725baa:	ef12      	mflo	a3
48725bac:	6c00      	li	a0,0
48725bae:	e7a9      	addu	v0,a3,a1
48725bb0:	f020 c289 	sb	a0,41(v0)
48725bb4:	6e01      	li	a2,1
48725bb6:	d605      	sw	a2,20(sp)

48725bb8 <.LBE10>:
48725bb8:	103d      	b	48725c34 <.LBE14>

48725bba <.LBB11>:
48725bba:	6c00      	li	a0,0
48725bbc:	b628      	lw	a2,48725c5c <.LBE14+0x28>
48725bbe:	6764      	move	v1,a0
48725bc0:	6d30      	li	a1,48
48725bc2:	ebb8      	mult	v1,a1
48725bc4:	ef12      	mflo	a3
48725bc6:	e7c9      	addu	v0,a3,a2
48725bc8:	f020 a249 	lbu	v0,41(v0)
48725bcc:	7201      	cmpi	v0,1
48725bce:	6103      	btnez	48725bd6 <.LBB11+0x1c>
48725bd0:	4441      	addiu	v0,a0,1
48725bd2:	6782      	move	a0,v0
48725bd4:	ec11      	zeb	a0
48725bd6:	43e1      	addiu	a3,v1,1
48725bd8:	6767      	move	v1,a3
48725bda:	eb11      	zeb	v1
48725bdc:	5b04      	sltiu	v1,4
48725bde:	61f1      	btnez	48725bc2 <.LBB11+0x8>
48725be0:	d406      	sw	a0,24(sp)

48725be2 <.LBE11>:
48725be2:	1028      	b	48725c34 <.LBE14>

48725be4 <.LBB12>:
48725be4:	d306      	sw	v1,24(sp)
48725be6:	100f      	b	48725c06 <.LBB12+0x22>
48725be8:	b41d      	lw	a0,48725c5c <.LBE14+0x28>
48725bea:	6b00      	li	v1,0
48725bec:	6d30      	li	a1,48
48725bee:	4c08      	addiu	a0,8
48725bf0:	ebb8      	mult	v1,a1
48725bf2:	ef12      	mflo	a3
48725bf4:	e789      	addu	v0,a3,a0
48725bf6:	f020 a2c1 	lbu	a2,33(v0)
48725bfa:	26f4      	beqz	a2,48725be4 <.LBB12>
48725bfc:	43c1      	addiu	a2,v1,1
48725bfe:	6766      	move	v1,a2
48725c00:	eb11      	zeb	v1
48725c02:	5b04      	sltiu	v1,4
48725c04:	61f5      	btnez	48725bf0 <.LBB12+0xc>
48725c06:	5b04      	sltiu	v1,4
48725c08:	6115      	btnez	48725c34 <.LBE14>
48725c0a:	6f02      	li	a3,2
48725c0c:	eceb      	neg	a0,a3
48725c0e:	d406      	sw	a0,24(sp)

48725c10 <.LBE12>:
48725c10:	1011      	b	48725c34 <.LBE14>

48725c12 <.LBB13>:
48725c12:	b513      	lw	a1,48725c5c <.LBE14+0x28>
48725c14:	940d      	lw	a0,52(sp)
48725c16:	45a4      	addiu	a1,a1,4
48725c18:	6e04      	li	a2,4
48725c1a:	b213      	lw	v0,48725c64 <.LBE14+0x30>
48725c1c:	ea40      	jalr	v0
48725c1e:	6f00      	li	a3,0

48725c20 <.LBE13>:
48725c20:	1009      	b	48725c34 <.LBE14>

48725c22 <.LBB14>:
48725c22:	b70f      	lw	a3,48725c5c <.LBE14+0x28>
48725c24:	950d      	lw	a1,52(sp)
48725c26:	b210      	lw	v0,48725c64 <.LBE14+0x30>
48725c28:	4784      	addiu	a0,a3,4
48725c2a:	6e04      	li	a2,4
48725c2c:	ea40      	jalr	v0
48725c2e:	6f00      	li	a3,0
48725c30:	6b01      	li	v1,1
48725c32:	d305      	sw	v1,20(sp)

48725c34 <.LBE14>:
48725c34:	9605      	lw	a2,20(sp)
48725c36:	2606      	beqz	a2,48725c44 <.LBE14+0x10>
48725c38:	b409      	lw	a0,48725c5c <.LBE14+0x28>
48725c3a:	b50a      	lw	a1,48725c60 <.LBE14+0x2c>
48725c3c:	b207      	lw	v0,48725c58 <.LBE14+0x24>
48725c3e:	6ec8      	li	a2,200
48725c40:	ea40      	jalr	v0
48725c42:	6f13      	li	a3,19
48725c44:	6c00      	li	a0,0
48725c46:	b205      	lw	v0,48725c58 <.LBE14+0x24>
48725c48:	67a4      	move	a1,a0
48725c4a:	67c4      	move	a2,a0
48725c4c:	ea40      	jalr	v0
48725c4e:	6f34      	li	a3,52
48725c50:	9206      	lw	v0,24(sp)
48725c52:	6476      	restore	48,ra,s0-s1
48725c54:	e8a0      	jrc	ra
48725c56:	0000      	addiu	s0,sp,0
48725c58:	e901      	sdbbp	8
48725c5a:	bfc1      	lwu	a2,4(a3)
48725c5c:	5c70      	sltiu	a0,112
48725c5e:	4872      	addiu	s0,114
48725c60:	0000      	addiu	s0,sp,0
48725c62:	0003      	addiu	s0,sp,12
48725c64:	e905      	break	8
48725c66:	bfc1      	lwu	a2,4(a3)
48725c68:	582d      	sltiu	s0,45
48725c6a:	4872      	addiu	s0,114
48725c6c:	5ca4      	sltiu	a0,164
48725c6e:	4872      	addiu	s0,114

48725c70 <g_time_alarm_var>:
	...
Disassembly of section BANK_UI_1_29:

48765800 <clock_ke_maplist>:
48765800:	0001 0002 5839 4866 0000 0000 0000 0000     ....9XfH........

48765810 <calendar_ke_maplist>:
48765810:	0001 0003 5839 486a 001d 0002 5a8d 486a     ....9XjH.....ZjH
48765820:	000b 0002 5a8d 486a 0003 001c 5a55 486a     .....ZjH....UZjH
48765830:	000e 001c 5a55 486a 0002 001c 5a1d 486a     ....UZjH.....ZjH
48765840:	000f 001c 5a1d 486a 001a 0003 5969 486a     .....ZjH....iYjH
	...

48765858 <alarm_ke_maplist>:
48765858:	0001 0002 5839 486e 001d 0002 5b45 486e     ....9XnH....E[nH
48765868:	000b 0002 5b45 486e 0003 001c 5b09 486e     ....E[nH.....[nH
48765878:	000e 001c 5b09 486e 0002 001c 5acd 486e     .....[nH.....ZnH
48765888:	000f 001c 5acd 486e 001a 0003 5a15 486e     .....ZnH.....ZnH
	...

487658a0 <com_ke_maplist>:
487658a0:	0007 0002 5921 4876 000a 0002 5989 4876     ....!YvH.....YvH
487658b0:	0005 021c 59a9 4876 000e 020c 59a9 4876     .....YvH.....YvH
487658c0:	0006 021c 59cd 4876 000f 020c 59cd 4876     .....YvH.....YvH
487658d0:	0008 0108 5bdd 4876 0008 0140 5b4d 4876     .....[vH..@.M[vH
487658e0:	0008 0120 5c0d 4876 000a 0108 5af9 4876     .. ..\vH.....ZvH
487658f0:	0010 0108 5b01 4876 001c 010a 5a15 4876     .....[vH.....ZvH
48765900:	0001 0108 5a15 4876 0007 0108 5b09 4876     .....ZvH.....[vH
48765910:	0001 0020 5b09 4876 0000 0000 0000 0000     .. ..[vH........

48765920 <com_key_deal_switch_app>:
48765920:	64c3      	save	24,ra
              com_app_deal_play_prev_next);
}
#endif

app_result_e com_key_deal_switch_app(void)
{
48765922:	6cff      	li	a0,255
    uint8 next_func_id;

    next_func_id = com_ap_switch_ask_next_func(RESULT_NEXT_FUNCTION);
48765924:	b214      	lw	v0,48765974 <.LBE2+0x48>
48765926:	ea40      	jalr	v0
48765928:	4c17      	addiu	a0,23

4876592a <.LBB2>:
4876592a:	b414      	lw	a0,48765978 <.LBE2+0x4c>

4876592c <.LBE2>:
4876592c:	a473      	lbu	v1,19(a0)
4876592e:	ea6e      	xor	v0,v1
48765930:	2a08      	bnez	v0,48765942 <.LBE2+0x16>
48765932:	6d00      	li	a1,0
    if (next_func_id == get_cur_func_id())
    {
        PRINT_WARNING("NO next APP to switch!!");
48765934:	b212      	lw	v0,4876597c <.LBE2+0x50>
48765936:	0c09      	la	a0,48765958 <.LBE2+0x2c>
48765938:	67c5      	move	a2,a1
4876593a:	ea40      	jalr	v0
4876593c:	6f4b      	li	a3,75
4876593e:	6a00      	li	v0,0
        return RESULT_NULL;
48765940:	1008      	b	48765952 <.LBE2+0x26>
48765942:	b610      	lw	a2,48765980 <.LBE2+0x54>
    }
    else
    {
        //过滤来不及响应的短按按键
        com_filter_keymsg_in_queue(g_p_view_ke->val, KEY_TYPE_SHORT_UP);
48765944:	b310      	lw	v1,48765984 <.LBE2+0x58>
48765946:	9ea0      	lw	a1,0(a2)
48765948:	a580      	lbu	a0,0(a1)
4876594a:	eb40      	jalr	v1
4876594c:	6d02      	li	a1,2
4876594e:	6aff      	li	v0,255
        return RESULT_NEXT_FUNCTION;
48765950:	4a17      	addiu	v0,23
48765952:	6443      	restore	24,ra
    }
}
48765954:	e8a0      	jrc	ra
48765956:	0000      	addiu	s0,sp,0
48765958:	573c      	slti	a3,60
4876595a:	203e      	beqz	s0,487659d8 <com_key_deal_volume_sub+0xc>
4876595c:	4f4e      	addiu	a3,78
4876595e:	6e20      	li	a2,32
48765960:	7865      	sd	v1,40(s0)
48765962:	2074      	beqz	s0,48765a4c <com_key_deal_shutoff+0x38>
48765964:	5041      	slti	s0,65
48765966:	2050      	beqz	s0,48765a08 <com_key_deal_switch_dae+0x14>
48765968:	6f74      	li	a3,116
4876596a:	7320      	cmpi	v1,32
4876596c:	6977      	li	s1,119
4876596e:	6374      	addiu	sp,928
48765970:	2168      	beqz	s1,48765a42 <com_key_deal_shutoff+0x2e>
48765972:	0021      	addiu	s0,sp,132
48765974:	5a95      	sltiu	v0,149
48765976:	483e      	addiu	s0,62
48765978:	a0c0      	lbu	a2,0(s0)
4876597a:	9fc1      	lw	a2,4(a3)
4876597c:	e901      	sdbbp	8
4876597e:	bfc1      	lwu	a2,4(a3)
48765980:	99e4      	lw	a3,16(s1)
48765982:	9fc1      	lw	a2,4(a3)
48765984:	5b39      	sltiu	v1,57
48765986:	484e      	addiu	s0,78

48765988 <com_key_deal_switch_mute>:
48765988:	64c3      	save	24,ra

app_result_e com_key_deal_switch_mute(void)
{
4876598a:	b206      	lw	v0,487659a0 <com_key_deal_switch_mute+0x18>
    if (g_ignore_switch_mute == FALSE)
4876598c:	a2c0      	lbu	a2,0(v0)
4876598e:	2e04      	bnez	a2,48765998 <com_key_deal_switch_mute+0x10>
48765990:	b205      	lw	v0,487659a4 <com_key_deal_switch_mute+0x1c>
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        com_switch_mute(1,0,NULL);
48765992:	6c01      	li	a0,1
48765994:	ea40      	jalr	v0
48765996:	67a6      	move	a1,a2
48765998:	6a00      	li	v0,0
#else
         com_switch_mute();
#endif
    }

    return RESULT_NULL;
}
4876599a:	6443      	restore	24,ra
4876599c:	e8a0      	jrc	ra
4876599e:	0000      	addiu	s0,sp,0
487659a0:	99ff      	lw	a3,124(s1)
487659a2:	9fc1      	lw	a2,4(a3)
487659a4:	5c09      	sltiu	a0,9
487659a6:	48be      	addiu	s0,-66

487659a8 <com_key_deal_volume_add>:
487659a8:	64e3      	save	24,ra,s0

app_result_e com_key_deal_volume_add(void)
{
487659aa:	b207      	lw	v0,487659c4 <com_key_deal_volume_add+0x1c>

    
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if (g_prev_next_ch_start == 0)
487659ac:	a200      	lbu	s0,0(v0)
487659ae:	2806      	bnez	s0,487659bc <com_key_deal_volume_add+0x14>
487659b0:	1af0 97dc 	jal	485e5f70 <com_creat_play_prev_next_timer>
#endif
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        //com_kill_play_prev_next_timer();
        com_creat_play_prev_next_timer();
487659b4:	6500      	nop
487659b6:	b305      	lw	v1,487659c8 <com_key_deal_volume_add+0x20>
#endif
        //libc_print("add##",0,0);
        com_volume_add(FALSE);
487659b8:	eb40      	jalr	v1
487659ba:	6790      	move	a0,s0
487659bc:	6a00      	li	v0,0
    }

    return RESULT_NULL;
}
487659be:	6463      	restore	24,ra,s0
487659c0:	e8a0      	jrc	ra
487659c2:	0000      	addiu	s0,sp,0
487659c4:	9a31      	lw	s1,68(v0)
487659c6:	9fc1      	lw	a2,4(a3)
487659c8:	580d      	sltiu	s0,13
487659ca:	4832      	addiu	s0,50

487659cc <com_key_deal_volume_sub>:
487659cc:	64e3      	save	24,ra,s0

app_result_e com_key_deal_volume_sub(void)
{
487659ce:	b207      	lw	v0,487659e8 <com_key_deal_volume_sub+0x1c>
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if (g_prev_next_ch_start == 0)
487659d0:	a200      	lbu	s0,0(v0)
487659d2:	2806      	bnez	s0,487659e0 <com_key_deal_volume_sub+0x14>
487659d4:	1af0 97dc 	jal	485e5f70 <com_creat_play_prev_next_timer>
#endif
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        //com_kill_play_prev_next_timer();
        com_creat_play_prev_next_timer();
487659d8:	6500      	nop
487659da:	b305      	lw	v1,487659ec <com_key_deal_volume_sub+0x20>
#endif
        com_volume_sub(FALSE);
487659dc:	eb40      	jalr	v1
487659de:	6790      	move	a0,s0
487659e0:	6a00      	li	v0,0
    }
    

    return RESULT_NULL;
}
487659e2:	6463      	restore	24,ra,s0
487659e4:	e8a0      	jrc	ra
487659e6:	0000      	addiu	s0,sp,0
487659e8:	9a31      	lw	s1,68(v0)
487659ea:	9fc1      	lw	a2,4(a3)
487659ec:	5851      	sltiu	s0,81
487659ee:	4832      	addiu	s0,50

487659f0 <com_key_deal_enter_clock>:
487659f0:	e820      	jr	ra

app_result_e com_key_deal_enter_clock(void)
{
#if (SUPPORT_LED_DRIVER == 1)
    if (sys_comval->support_led_display == 1)
    {
        tm_alarm_create_clock_view();
    }
#endif

    return RESULT_NULL;
}
487659f2:	6a00      	li	v0,0

487659f4 <com_key_deal_switch_dae>:
487659f4:	64c3      	save	24,ra

app_result_e com_key_deal_switch_dae(void)
{
487659f6:	b406      	lw	a0,48765a0c <com_key_deal_switch_dae+0x18>
    if (sys_comval->eq_enable == TRUE)
487659f8:	9c60      	lw	v1,0(a0)
487659fa:	f020 a351 	lbu	v0,49(v1)
487659fe:	7201      	cmpi	v0,1
48765a00:	6102      	btnez	48765a06 <com_key_deal_switch_dae+0x12>
48765a02:	b204      	lw	v0,48765a10 <com_key_deal_switch_dae+0x1c>
    {
        com_eq_next();
48765a04:	eac0      	jalrc	v0
48765a06:	6a00      	li	v0,0
    }

    return RESULT_NULL;
}
48765a08:	6443      	restore	24,ra
48765a0a:	e8a0      	jrc	ra
48765a0c:	999c      	lw	a0,112(s1)
48765a0e:	9fc1      	lw	a2,4(a3)
48765a10:	58b5      	sltiu	s0,181
48765a12:	489a      	addiu	s0,-102

48765a14 <com_key_deal_shutoff>:
48765a14:	64f4      	save	32,ra,s0-s1






app_result_e com_key_deal_shutoff(void)
{
48765a16:	b110      	lw	s1,48765a54 <com_key_deal_shutoff+0x40>
    app_result_e result = RESULT_NULL;

#ifdef ENABLE_TRUE_WIRELESS_STEREO
   if (g_bt_stack_cur_info.sim_a_en == 1)
48765a18:	6800      	li	s0,0
48765a1a:	f020 a157 	lbu	v0,55(s1)
48765a1e:	7201      	cmpi	v0,1
48765a20:	6107      	btnez	48765a30 <com_key_deal_shutoff+0x1c>
48765a22:	b20e      	lw	v0,48765a58 <com_key_deal_shutoff+0x44>
   {
        libc_print("sim",0,0);
48765a24:	0c0b      	la	a0,48765a50 <com_key_deal_shutoff+0x3c>
48765a26:	67b0      	move	a1,s0
48765a28:	67d0      	move	a2,s0
48765a2a:	ea40      	jalr	v0
48765a2c:	6f4b      	li	a3,75
48765a2e:	100c      	b	48765a48 <com_key_deal_shutoff+0x34>
48765a30:	b00b      	lw	s0,48765a5c <com_key_deal_shutoff+0x48>
   }
   else
#endif           
    {    
        com_filter_key_hold();
48765a32:	e8c0      	jalrc	s0
48765a34:	f020 a16e 	lbu	v1,46(s1)
#ifdef ENABLE_TRUE_WIRELESS_STEREO
       //if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
       if((g_bt_stack_cur_info.dev_role!=NORMAL_DEV)&&(g_app_info_vector[APP_TYPE_BTSTACK].used != 0))
48765a38:	2305      	beqz	v1,48765a44 <com_key_deal_shutoff+0x30>
48765a3a:	b50a      	lw	a1,48765a60 <com_key_deal_shutoff+0x4c>
48765a3c:	a58c      	lbu	a0,12(a1)
48765a3e:	2402      	beqz	a0,48765a44 <com_key_deal_shutoff+0x30>
48765a40:	b209      	lw	v0,48765a64 <com_key_deal_shutoff+0x50>
        {   
             //libc_print("_POWER_",0,0);
             com_btmanager_power_off();        
48765a42:	eac0      	jalrc	v0
48765a44:	68ff      	li	s0,255
        }  
#endif
    
        result = RESULT_POWER_OFF;
48765a46:	480b      	addiu	s0,11
48765a48:	6750      	move	v0,s0
    }
    
    return result;
}
48765a4a:	6474      	restore	32,ra,s0-s1
48765a4c:	e8a0      	jrc	ra
48765a4e:	0000      	addiu	s0,sp,0
48765a50:	6973      	li	s1,115
48765a52:	006d      	addiu	s0,sp,436
48765a54:	a2fc      	lbu	a3,28(v0)
48765a56:	9fc1      	lw	a2,4(a3)
48765a58:	e901      	sdbbp	8
48765a5a:	bfc1      	lwu	a2,4(a3)
48765a5c:	5e11      	sltiu	a2,17
48765a5e:	484e      	addiu	s0,78
48765a60:	a080      	lbu	a0,0(s0)
48765a62:	9fc1      	lw	a2,4(a3)
48765a64:	5e39      	sltiu	a2,57
48765a66:	4862      	addiu	s0,98

48765a68 <com_key_deal_enter_crecord>:
48765a68:	b50f      	lw	a1,48765aa4 <.LBE6+0x22>

app_result_e com_key_deal_enter_crecord(void)
{
    app_result_e result = RESULT_NULL;

    if (g_this_app_info->app_id != APP_ID_RECORD)
48765a6a:	6b00      	li	v1,0
48765a6c:	9d80      	lw	a0,0(a1)
48765a6e:	a441      	lbu	v0,1(a0)
48765a70:	7207      	cmpi	v0,7
48765a72:	6016      	bteqz	48765aa0 <.LBE6+0x1e>

48765a74 <.LBB4>:
48765a74:	b70d      	lw	a3,48765aa8 <.LBE6+0x26>
48765a76:	a780      	lbu	a0,0(a3)

48765a78 <.LBE4>:
48765a78:	67c4      	move	a2,a0
48765a7a:	ee11      	zeb	a2
48765a7c:	7603      	cmpi	a2,3
48765a7e:	6106      	btnez	48765a8c <.LBE6+0xa>

48765a80 <.LBB6>:
48765a80:	b50b      	lw	a1,48765aac <.LBE6+0x2a>

48765a82 <.LBE6>:
48765a82:	f100 4b0f 	addiu	v1,271
    {
        //传递参数,确定录音源
        if ((get_engine_type() == ENGINE_LINEIN) && (get_play_disk_type() == PLAY_DISK_LINEIN))
        {
            result = RESULT_RECORD_LINEIN_TOC;
48765a86:	a540      	lbu	v0,0(a1)
48765a88:	7204      	cmpi	v0,4
48765a8a:	600a      	bteqz	48765aa0 <.LBE6+0x1e>
48765a8c:	67c4      	move	a2,a0
48765a8e:	ee11      	zeb	a2
48765a90:	6f02      	li	a3,2
48765a92:	eeee      	xor	a2,a3
48765a94:	5e01      	sltiu	a2,1
48765a96:	6778      	move	v1,t8
48765a98:	5b01      	sltiu	v1,1
        }
        else if (get_engine_type() == ENGINE_RADIO)
        {
            result = RESULT_RECORD_FM_TOC;
48765a9a:	6798      	move	a0,t8
48765a9c:	f110 4460 	addiu	v1,a0,272
48765aa0:	e820      	jr	ra
        }
        else
        {
            result = RESULT_RECORD_MIC_TOC;
        }
    }

    return result;
}
48765aa2:	6743      	move	v0,v1
48765aa4:	9990      	lw	a0,64(s1)
48765aa6:	9fc1      	lw	a2,4(a3)
48765aa8:	a094      	lbu	a0,20(s0)
48765aaa:	9fc1      	lw	a2,4(a3)
48765aac:	a184      	lbu	a0,4(s1)
48765aae:	9fc1      	lw	a2,4(a3)

48765ab0 <com_key_deal_enter_urecord>:
48765ab0:	b50f      	lw	a1,48765aec <.LBE10+0x22>

app_result_e com_key_deal_enter_urecord(void)
{
    app_result_e result = RESULT_NULL;

    if (g_this_app_info->app_id != APP_ID_RECORD)
48765ab2:	6b00      	li	v1,0
48765ab4:	9d80      	lw	a0,0(a1)
48765ab6:	a441      	lbu	v0,1(a0)
48765ab8:	7207      	cmpi	v0,7
48765aba:	6016      	bteqz	48765ae8 <.LBE10+0x1e>

48765abc <.LBB8>:
48765abc:	b70d      	lw	a3,48765af0 <.LBE10+0x26>
48765abe:	a780      	lbu	a0,0(a3)

48765ac0 <.LBE8>:
48765ac0:	67c4      	move	a2,a0
48765ac2:	ee11      	zeb	a2
48765ac4:	7603      	cmpi	a2,3
48765ac6:	6106      	btnez	48765ad4 <.LBE10+0xa>

48765ac8 <.LBB10>:
48765ac8:	b50b      	lw	a1,48765af4 <.LBE10+0x2a>

48765aca <.LBE10>:
48765aca:	f100 4b12 	addiu	v1,274
    {
        //传递参数,确定录音源
        if ((get_engine_type() == ENGINE_LINEIN) && (get_play_disk_type() == PLAY_DISK_LINEIN))
        {
            result = RESULT_RECORD_LINEIN_TOU;
48765ace:	a540      	lbu	v0,0(a1)
48765ad0:	7204      	cmpi	v0,4
48765ad2:	600a      	bteqz	48765ae8 <.LBE10+0x1e>
48765ad4:	67c4      	move	a2,a0
48765ad6:	ee11      	zeb	a2
48765ad8:	6f02      	li	a3,2
48765ada:	eeee      	xor	a2,a3
48765adc:	5e01      	sltiu	a2,1
48765ade:	6778      	move	v1,t8
48765ae0:	5b01      	sltiu	v1,1
        }
        else if (get_engine_type() == ENGINE_RADIO)
        {
            result = RESULT_RECORD_FM_TOU;
48765ae2:	6798      	move	a0,t8
48765ae4:	f110 4463 	addiu	v1,a0,275
48765ae8:	e820      	jr	ra
        }
        else
        {
            result = RESULT_RECORD_MIC_TOU;
        }
    }

    return result;
}
48765aea:	6743      	move	v0,v1
48765aec:	9990      	lw	a0,64(s1)
48765aee:	9fc1      	lw	a2,4(a3)
48765af0:	a094      	lbu	a0,20(s0)
48765af2:	9fc1      	lw	a2,4(a3)
48765af4:	a184      	lbu	a0,4(s1)
48765af6:	9fc1      	lw	a2,4(a3)

48765af8 <com_key_deal_enter_record_cplay>:
48765af8:	6aff      	li	v0,255

app_result_e com_key_deal_enter_record_cplay(void)
{
    return RESULT_RECORD_CPLAY;
}
48765afa:	e820      	jr	ra
48765afc:	4a0e      	addiu	v0,14
	...

48765b00 <com_key_deal_enter_record_uplay>:
48765b00:	6aff      	li	v0,255

app_result_e com_key_deal_enter_record_uplay(void)
{
    return RESULT_RECORD_UPLAY;
}
48765b02:	e820      	jr	ra
48765b04:	4a0f      	addiu	v0,15
	...

48765b08 <com_key_deal_force_unlink>:
48765b08:	64c3      	save	24,ra

/*app_result_e com_key_deal_switch_tts_language(void)
{
    if (sys_comval->tts_language < (TTS_LANGUAGE_TOTAL - 1))
    {
        sys_comval->tts_language++;
    }
    else
    {
        sys_comval->tts_language = 0;
    }
    com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_LANGUAGE);

    return RESULT_NULL;
}*/

app_result_e com_key_deal_force_unlink(void)
{
48765b0a:	b30c      	lw	v1,48765b38 <com_key_deal_force_unlink+0x30>

    if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
48765b0c:	a34c      	lbu	v0,12(v1)
48765b0e:	2210      	beqz	v0,48765b30 <com_key_deal_force_unlink+0x28>
48765b10:	b20b      	lw	v0,48765b3c <com_key_deal_force_unlink+0x34>
    {
        com_btmanager_force_unlink();
48765b12:	eac0      	jalrc	v0
48765b14:	b20b      	lw	v0,48765b3c <com_key_deal_force_unlink+0x34>
        
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        //当用mode键同时做组对和解组对按键时候的播报处理
        if((g_bt_stack_cur_info.dev_role==0)&&(g_bt_stack_cur_info.conn_status==CONN_STATUS_WAIT_PAIR)
48765b16:	f020 a28e 	lbu	a0,46(v0)
48765b1a:	2c0a      	bnez	a0,48765b30 <com_key_deal_force_unlink+0x28>
48765b1c:	a2a0      	lbu	a1,0(v0)
48765b1e:	7501      	cmpi	a1,1
48765b20:	6107      	btnez	48765b30 <com_key_deal_force_unlink+0x28>
48765b22:	b709      	lw	a3,48765b44 <com_key_deal_force_unlink+0x3c>
48765b24:	a7cb      	lbu	a2,11(a3)
48765b26:	5e02      	sltiu	a2,2
48765b28:	6103      	btnez	48765b30 <com_key_deal_force_unlink+0x28>
48765b2a:	b208      	lw	v0,48765b48 <com_key_deal_force_unlink+0x40>
        	 &&(g_btmanager_gl_var.support_dev_num>1))
        {
            com_tts_state_play(TTS_MODE_ONLYONE,(void *) TTS_WAIT_BT_PAIR);
48765b2c:	ea40      	jalr	v0
48765b2e:	6d0f      	li	a1,15
48765b30:	6a00      	li	v0,0
        }
        else
        {
            //do nothing
        }
        //com_tts_state_play(TTS_MODE_ONLYONE,(void *) TTS_WAIT_BT_PAIR);
#endif
    }
    return RESULT_NULL;
}
48765b32:	6443      	restore	24,ra
48765b34:	e8a0      	jrc	ra
48765b36:	0000      	addiu	s0,sp,0
48765b38:	a080      	lbu	a0,0(s0)
48765b3a:	9fc1      	lw	a2,4(a3)
48765b3c:	5e61      	sltiu	a2,97
48765b3e:	4862      	addiu	s0,98
48765b40:	a2fc      	lbu	a3,28(v0)
48765b42:	9fc1      	lw	a2,4(a3)
48765b44:	a33c      	lbu	s1,28(v1)
48765b46:	9fc1      	lw	a2,4(a3)
48765b48:	5c8d      	sltiu	a0,141
48765b4a:	483a      	addiu	s0,58

48765b4c <com_key_deal_force_unlink_10s>:
48765b4c:	64c3      	save	24,ra


app_result_e com_key_deal_force_unlink_10s(void)
{
48765b4e:	b305      	lw	v1,48765b60 <com_key_deal_force_unlink_10s+0x14>

    //libc_print("ll m up",0,0);
#ifdef ENABLE_TRUE_WIRELESS_STEREO    
    if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
48765b50:	a34c      	lbu	v0,12(v1)
48765b52:	2202      	beqz	v0,48765b58 <com_key_deal_force_unlink_10s+0xc>
48765b54:	b204      	lw	v0,48765b64 <com_key_deal_force_unlink_10s+0x18>
    {
    	com_btmanager_clearpairlist();
48765b56:	eac0      	jalrc	v0
48765b58:	6a00      	li	v0,0
    }	
#endif    	
	  return RESULT_NULL;
}
48765b5a:	6443      	restore	24,ra
48765b5c:	e8a0      	jrc	ra
48765b5e:	0000      	addiu	s0,sp,0
48765b60:	a080      	lbu	a0,0(s0)
48765b62:	9fc1      	lw	a2,4(a3)
48765b64:	5eb5      	sltiu	a2,181
48765b66:	4862      	addiu	s0,98

48765b68 <com_key_deal_call_last>:
48765b68:	64c3      	save	24,ra

app_result_e com_key_deal_call_last(void)
{
48765b6a:	b305      	lw	v1,48765b7c <com_key_deal_call_last+0x14>
    if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
48765b6c:	a34c      	lbu	v0,12(v1)
48765b6e:	2202      	beqz	v0,48765b74 <com_key_deal_call_last+0xc>
48765b70:	b204      	lw	v0,48765b80 <com_key_deal_call_last+0x18>
    {
        com_btmanager_hfp_call_last();
48765b72:	eac0      	jalrc	v0
48765b74:	6a00      	li	v0,0
    }

    return RESULT_NULL;
}
48765b76:	6443      	restore	24,ra
48765b78:	e8a0      	jrc	ra
48765b7a:	0000      	addiu	s0,sp,0
48765b7c:	a080      	lbu	a0,0(s0)
48765b7e:	9fc1      	lw	a2,4(a3)
48765b80:	5a45      	sltiu	v0,69
48765b82:	4886      	addiu	s0,-122

48765b84 <com_key_deal_BQB_test>:
48765b84:	64c3      	save	24,ra

app_result_e com_key_deal_BQB_test(void)
{
48765b86:	b305      	lw	v1,48765b98 <com_key_deal_BQB_test+0x14>
    if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
48765b88:	a34c      	lbu	v0,12(v1)
48765b8a:	2202      	beqz	v0,48765b90 <com_key_deal_BQB_test+0xc>
48765b8c:	b204      	lw	v0,48765b9c <com_key_deal_BQB_test+0x18>
    {
        com_btmanager_BQB_test();
48765b8e:	eac0      	jalrc	v0
48765b90:	6a00      	li	v0,0
    }

    return RESULT_NULL;
}
48765b92:	6443      	restore	24,ra
48765b94:	e8a0      	jrc	ra
48765b96:	0000      	addiu	s0,sp,0
48765b98:	a080      	lbu	a0,0(s0)
48765b9a:	9fc1      	lw	a2,4(a3)
48765b9c:	5ef1      	sltiu	a2,241
48765b9e:	4862      	addiu	s0,98

48765ba0 <com_key_deal_FT_test>:
48765ba0:	64e6      	save	48,ra,s0

app_result_e com_key_deal_FT_test(void)
{
48765ba2:	679d      	move	a0,sp
    testval_t test_flag;
    test_flag.magic = 0x55AA;
48765ba4:	6d01      	li	a1,1
    test_flag.api_flag = 0x01;
48765ba6:	c4b2      	sb	a1,18(a0)
48765ba8:	f5aa 6e0a 	li	a2,21930
48765bac:	b509      	lw	a1,48765bd0 <com_key_deal_FT_test+0x30>
    sys_vm_write(&test_flag, VM_API_FLAG, sizeof(testval_t));
48765bae:	b00a      	lw	s0,48765bd4 <com_key_deal_FT_test+0x34>
48765bb0:	ccc8      	sh	a2,16(a0)
48765bb2:	6f13      	li	a3,19
48765bb4:	0404      	addiu	a0,sp,16
48765bb6:	e840      	jalr	s0
48765bb8:	6e18      	li	a2,24
48765bba:	6d00      	li	a1,0
    sys_os_time_dly(300);   
48765bbc:	6cff      	li	a0,255
48765bbe:	4c2d      	addiu	a0,45
48765bc0:	67c5      	move	a2,a1
48765bc2:	e840      	jalr	s0
48765bc4:	6f31      	li	a3,49
48765bc6:	b205      	lw	v0,48765bd8 <com_key_deal_FT_test+0x38>
    act_writel((0 << WD_CTL_CLKSEL_SHIFT) | (1 << WD_CTL_WDEN) | (1 << WD_CTL_CLR), WD_CTL);//352ms
48765bc8:	6b11      	li	v1,17
48765bca:	da60      	sw	v1,0(v0)
48765bcc:	17ff      	b	48765bcc <com_key_deal_FT_test+0x2c>
    while(1)
48765bce:	0000      	addiu	s0,sp,0
48765bd0:	0000      	addiu	s0,sp,0
48765bd2:	0019      	addiu	s0,sp,100
48765bd4:	e901      	sdbbp	8
48765bd6:	bfc1      	lwu	a2,4(a3)
48765bd8:	001c      	addiu	s0,sp,112
48765bda:	c012      	sb	s0,18(s0)

48765bdc <com_key_deal_siri>:
48765bdc:	64c3      	save	24,ra
    {
        ;//wait for reset
    }
}

app_result_e com_key_deal_siri(void)
{
48765bde:	b407      	lw	a0,48765bf8 <com_key_deal_siri+0x1c>
#if (__SUPPORT_SIRI_ == 1)    
    if (g_btmanager_gl_var.enable_siri)
48765be0:	6b08      	li	v1,8
48765be2:	a453      	lbu	v0,19(a0)
48765be4:	ea6c      	and	v0,v1
48765be6:	2205      	beqz	v0,48765bf2 <com_key_deal_siri+0x16>
48765be8:	b605      	lw	a2,48765bfc <com_key_deal_siri+0x20>
    {
        //PRINT_INFO("com_key_deal_siri ");
        if (g_app_info_vector[APP_TYPE_BTSTACK].used != 0)
48765bea:	a6ac      	lbu	a1,12(a2)
48765bec:	2502      	beqz	a1,48765bf2 <com_key_deal_siri+0x16>
48765bee:	b205      	lw	v0,48765c00 <com_key_deal_siri+0x24>
        {
            com_btmanager_hfp_siri_handle();
48765bf0:	eac0      	jalrc	v0
48765bf2:	6a00      	li	v0,0
        }
    }
#endif //#if (__SUPPORT_SIRI_ == 1)
    return RESULT_NULL;
}
48765bf4:	6443      	restore	24,ra
48765bf6:	e8a0      	jrc	ra
48765bf8:	a33c      	lbu	s1,28(v1)
48765bfa:	9fc1      	lw	a2,4(a3)
48765bfc:	a080      	lbu	a0,0(s0)
48765bfe:	9fc1      	lw	a2,4(a3)
48765c00:	5ad1      	sltiu	v0,209
48765c02:	4886      	addiu	s0,-122

48765c04 <com_hid_send_key>:
48765c04:	e820      	jr	ra

app_result_e com_hid_send_key(void)
{
#ifdef __SUPPORT_HID_        
    msg_apps_t msg;
    app_result_e result = RESULT_NULL;
    //PRINT_INFO("com_hid_send_key\n");
    if (com_get_config_default(BTMANAGER_ENABLE_HID) !=0)
    {
        if ((g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].serv_conn & HID_CONNECTED) == 0)
        {
            //PRINT_INFO("MSG_BTSTACK_HID_CONNECT_SYNC\n");
            //消息类型(即消息名称)
            msg.type = MSG_BTSTACK_HID_CONNECT_SYNC;
        }
        else
        {
            //PRINT_INFO("MSG_BTSTACK_HID_SEND_SYNC\n");
            msg.type = MSG_BTSTACK_HID_SEND_SYNC;
            result = RESULT_HID_SEND_KEY_EVENT;
        }
        //发送同步消息
        // send_sync_msg(APP_ID_BTSTACK, &msg, NULL, 0);
        send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes, &msg, NULL, 0);

    }
#endif //#ifdef __SUPPORT_HID_        
    return RESULT_NULL;
}
48765c06:	6a00      	li	v0,0

48765c08 <com_hid_disconnect>:
48765c08:	e820      	jr	ra

app_result_e com_hid_disconnect(void)
{
#ifdef __SUPPORT_HID_        
    if (com_get_config_default(BTMANAGER_ENABLE_HID)!=0)
    {
        msg_apps_t msg;
        //PRINT_INFO("com_hid_disconnect\n");
        
        // PRINT_INFO("MSG_BTSTACK_HID_DISCONNECT_SYNC\n");
        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_HID_DISCONNECT_SYNC;
        //发送同步消息
        // send_sync_msg(APP_ID_BTSTACK, &msg, NULL, 0);
        send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes, &msg, NULL, 0);

    }
#endif //#ifdef __SUPPORT_HID_            
    return RESULT_NULL;
}
48765c0a:	6a00      	li	v0,0

48765c0c <com_key_deal_force_ble_unlink>:
48765c0c:	64c3      	save	24,ra

/*app_result_e com_key_deal_enter_ota(void)
{
    otaval_t g_otaval;
    uint8 ota_mode;
    //if (com_get_config_default(SETTING_APP_SUPPORT_OTA)!=0)
    sys_get_fw_info(&ota_mode, FW_INFO_OTA_MODE_ADDR, FW_INFO_OTA_MODE_LEN);
    if(ota_mode!=0)
    {
        PRINT_INFO("com_key_deal_enter_ota\n");

        g_otaval.magic = VRAM_MAGIC(VM_OTA_UPGRADE);
        g_otaval.ota_upgrade_flag = OTA_UPGRADE_ENABLE;
        
        sys_vm_write(&g_otaval, VM_OTA_UPGRADE, sizeof(otaval_t));

        sys_local_irq_save();
        ENABLE_WATCH_DOG(1);
        while(1)
        {
            ;//wait for reset
        }
    }
    return RESULT_NULL;
}*/

app_result_e com_key_deal_force_ble_unlink(void)
{
48765c0e:	b306      	lw	v1,48765c24 <.LBE12+0x8>
	  
	  if(g_bt_stack_cur_info.ble_con_flag !=0)
48765c10:	f020 a34d 	lbu	v0,45(v1)
48765c14:	2203      	beqz	v0,48765c1c <.LBE12>

48765c16 <.LBB12>:
48765c16:	1af0 97bc 	jal	485e5ef0 <com_btmanager_unlink_spp_ble_profile>
	  {
	      com_btmanager_unlink_spp_ble_profile(1);
48765c1a:	6c01      	li	a0,1

48765c1c <.LBE12>:
48765c1c:	6a00      	li	v0,0
	  }	  
	  return RESULT_NULL;
}
48765c1e:	6443      	restore	24,ra
48765c20:	e8a0      	jrc	ra
48765c22:	0000      	addiu	s0,sp,0
48765c24:	a2fc      	lbu	a3,28(v0)
48765c26:	9fc1      	lw	a2,4(a3)

48765c28 <is_key_val_match>:
48765c28:	ec11      	zeb	a0
extern const key_event_map_t com_ke_maplist_null[];
#endif

static bool is_key_val_match(key_value_e tb_val, key_value_e in_val)
{
48765c2a:	ed11      	zeb	a1
48765c2c:	ecaa      	cmp	a0,a1
    if (tb_val == in_val)
48765c2e:	6a01      	li	v0,1
    {
        return TRUE;
48765c30:	6006      	bteqz	48765c3e <is_key_val_match+0x16>
48765c32:	4df0      	addiu	a1,-16
    }

    if ((in_val >= KEY_NUM0) && (in_val <= KEY_NUM9) && (tb_val == KEY_NUMBER))
48765c34:	5d0a      	sltiu	a1,10
48765c36:	6002      	bteqz	48765c3c <is_key_val_match+0x14>
48765c38:	741a      	cmpi	a0,26
48765c3a:	6001      	bteqz	48765c3e <is_key_val_match+0x16>
48765c3c:	6a00      	li	v0,0
    {
        return TRUE;
    }

    return FALSE;
48765c3e:	e8a0      	jrc	ra

48765c40 <com_view_key_event>:
}
48765c40:	f00c 64f4 	save	a0-a2,32,ra,s0-s1

int com_view_key_event(key_event_t *p_ke, const key_event_map_t *app_ke_maplist, key_event_cb *ret_cb, bool only_com)
{
48765c44:	b629      	lw	a2,48765ce8 <com_view_key_event+0xa8>
    const key_event_map_t *this_ke_map;

    if ((g_view_infor[g_view_manager_infor.top].type == VIEW_TYPE_SUB)
48765c46:	6724      	move	s1,a0
48765c48:	a680      	lbu	a0,0(a2)
48765c4a:	b327      	lw	v1,48765ce4 <com_view_key_event+0xa4>
48765c4c:	3590      	sll	a1,a0,4
48765c4e:	e571      	addu	a0,a1,v1
48765c50:	a441      	lbu	v0,1(a0)
48765c52:	6707      	move	s0,a3
48765c54:	7201      	cmpi	v0,1
48765c56:	e811      	zeb	s0
48765c58:	6105      	btnez	48765c64 <com_view_key_event+0x24>
48765c5a:	8483      	lb	a0,3(a0)
48765c5c:	ef8f      	not	a3,a0
48765c5e:	2702      	beqz	a3,48765c64 <com_view_key_event+0x24>
48765c60:	b223      	lw	v0,48765cec <com_view_key_event+0xac>
            && (g_view_infor[g_view_manager_infor.top].timer_id != -1))
    {
        restart_app_timer(g_view_infor[g_view_manager_infor.top].timer_id);
48765c62:	eac0      	jalrc	v0
48765c64:	9209      	lw	v0,36(sp)
    }

    if ((app_ke_maplist != NULL) && (only_com == FALSE))
48765c66:	2219      	beqz	v0,48765c9a <com_view_key_event+0x5a>
48765c68:	2818      	bnez	s0,48765c9a <com_view_key_event+0x5a>
48765c6a:	6702      	move	s0,v0
    {
        this_ke_map = app_ke_maplist;
48765c6c:	a080      	lbu	a0,0(s0)
        for (;; this_ke_map++)
        {
            /* 达到用户最后一个映射，结束按键映射 */
            if (KEY_NULL == this_ke_map->ke.val)
48765c6e:	2415      	beqz	a0,48765c9a <com_view_key_event+0x5a>
48765c70:	1bb0 970a 	jal	48765c28 <is_key_val_match>
            {
                break;
            }

            /* 找到需要映射的按键, 进行映射 */
            if ((is_key_val_match(this_ke_map->ke.val, p_ke->val) == TRUE)
48765c74:	a1a0      	lbu	a1,0(s1)
48765c76:	7201      	cmpi	v0,1
48765c78:	610e      	btnez	48765c96 <com_view_key_event+0x56>
48765c7a:	a0a2      	lbu	a1,2(s0)
48765c7c:	a162      	lbu	v1,2(s1)
48765c7e:	ed6c      	and	a1,v1
48765c80:	250a      	beqz	a1,48765c96 <com_view_key_event+0x56>
48765c82:	a0a3      	lbu	a1,3(s0)
                    && ((this_ke_map->ke.type & p_ke->type) != 0))
            {
                *ret_cb = this_ke_map->cb;
                if (this_ke_map->ke.deal == KEY_DEAL_FILTER)
48765c84:	98c1      	lw	a2,4(s0)
48765c86:	940a      	lw	a0,40(sp)
48765c88:	7501      	cmpi	a1,1
48765c8a:	dcc0      	sw	a2,0(a0)
48765c8c:	6018      	bteqz	48765cbe <com_view_key_event+0x7e>
48765c8e:	7502      	cmpi	a1,2
                {
                    com_filter_key_hold();
                }
                else if (this_ke_map->ke.deal == KEY_DEAL_FILTER_UP)
48765c90:	601a      	bteqz	48765cc6 <com_view_key_event+0x86>
48765c92:	7503      	cmpi	a1,3
                {
                    com_filter_key_up();
                }
                else if (this_ke_map->ke.deal == KEY_DEAL_ITSELF)
48765c94:	101b      	b	48765ccc <com_view_key_event+0x8c>
48765c96:	4808      	addiu	s0,8
48765c98:	17e9      	b	48765c6c <com_view_key_event+0x2c>
48765c9a:	b019      	lw	s0,48765cfc <com_view_key_event+0xbc>
                {
                    com_filter_key_itself();
                }
                else
                {
                    ; //nothing for QAC
                }
                return 0;
            }
        }
    }

// OTA 版本不需要 common 中的按键
#ifdef OTA_VERSION
	this_ke_map = com_ke_maplist_null;
#else
    this_ke_map = com_ke_maplist;
48765c9c:	a080      	lbu	a0,0(s0)
#endif
    for (;; this_ke_map++)
    {
        /* 达到用户最后一个映射，结束按键映射 */
        if (KEY_NULL == this_ke_map->ke.val)
48765c9e:	241d      	beqz	a0,48765cda <com_view_key_event+0x9a>
48765ca0:	1bb0 970a 	jal	48765c28 <is_key_val_match>
        {
            break;
        }

        /* 找到需要映射的按键, 进行映射 */
        if ((is_key_val_match(this_ke_map->ke.val, p_ke->val) == TRUE)
48765ca4:	a1a0      	lbu	a1,0(s1)
48765ca6:	7201      	cmpi	v0,1
48765ca8:	6116      	btnez	48765cd6 <com_view_key_event+0x96>
48765caa:	a0e2      	lbu	a3,2(s0)
48765cac:	a142      	lbu	v0,2(s1)
48765cae:	ef4c      	and	a3,v0
48765cb0:	2712      	beqz	a3,48765cd6 <com_view_key_event+0x96>
48765cb2:	a043      	lbu	v0,3(s0)
                && ((this_ke_map->ke.type & p_ke->type) != 0))
        {
            *ret_cb = this_ke_map->cb;
            if (this_ke_map->ke.deal == KEY_DEAL_FILTER)
48765cb4:	9861      	lw	v1,4(s0)
48765cb6:	950a      	lw	a1,40(sp)
48765cb8:	7201      	cmpi	v0,1
48765cba:	dd60      	sw	v1,0(a1)
48765cbc:	6102      	btnez	48765cc2 <com_view_key_event+0x82>
48765cbe:	b20d      	lw	v0,48765cf0 <com_view_key_event+0xb0>
            {
                com_filter_key_hold();
48765cc0:	1007      	b	48765cd0 <com_view_key_event+0x90>
48765cc2:	7202      	cmpi	v0,2
            }
            else if (this_ke_map->ke.deal == KEY_DEAL_FILTER_UP)
48765cc4:	6102      	btnez	48765cca <com_view_key_event+0x8a>
48765cc6:	b20c      	lw	v0,48765cf4 <com_view_key_event+0xb4>
            {
                com_filter_key_up();
48765cc8:	1003      	b	48765cd0 <com_view_key_event+0x90>
48765cca:	7203      	cmpi	v0,3
            }
            else if (this_ke_map->ke.deal == KEY_DEAL_ITSELF)
48765ccc:	6102      	btnez	48765cd2 <com_view_key_event+0x92>
48765cce:	b20b      	lw	v0,48765cf8 <com_view_key_event+0xb8>
            {
                com_filter_key_itself();
48765cd0:	eac0      	jalrc	v0
48765cd2:	6a00      	li	v0,0
            }
            else
            {
                ; //nothing for QAC
            }
            return 0;
48765cd4:	1004      	b	48765cde <com_view_key_event+0x9e>
48765cd6:	4808      	addiu	s0,8
48765cd8:	17e1      	b	48765c9c <com_view_key_event+0x5c>
48765cda:	6c01      	li	a0,1
        }
    }

    return -1;
48765cdc:	ea8b      	neg	v0,a0
48765cde:	6474      	restore	32,ra,s0-s1
}
48765ce0:	e8a0      	jrc	ra
48765ce2:	0000      	addiu	s0,sp,0
48765ce4:	99ac      	lw	a1,48(s1)
48765ce6:	9fc1      	lw	a2,4(a3)
48765ce8:	99dc      	lw	a2,112(s1)
48765cea:	9fc1      	lw	a2,4(a3)
48765cec:	5a81      	sltiu	v0,129
48765cee:	488e      	addiu	s0,-114
48765cf0:	5e11      	sltiu	a2,17
48765cf2:	484e      	addiu	s0,78
48765cf4:	5e25      	sltiu	a2,37
48765cf6:	484e      	addiu	s0,78
48765cf8:	5e39      	sltiu	a2,57
48765cfa:	484e      	addiu	s0,78
48765cfc:	58a0      	sltiu	s0,160
48765cfe:	4876      	addiu	s0,118

48765d00 <com_view_key_check_dck>:
48765d00:	b610      	lw	a2,48765d40 <com_view_key_check_dck+0x40>

void com_view_key_check_dck(const key_event_map_t *app_ke_maplist)
{
    const key_event_map_t *this_ke_map;

    g_key_infor.dck_map = 0;
48765d02:	6a00      	li	v0,0
48765d04:	de40      	sw	v0,0(a2)
48765d06:	240d      	beqz	a0,48765d22 <com_view_key_check_dck+0x22>
    if (app_ke_maplist != NULL)
48765d08:	a4a0      	lbu	a1,0(a0)
    {
        this_ke_map = app_ke_maplist;
        for (;; this_ke_map++)
        {
            /* 达到用户最后一个映射，结束按键映射 */
            if (KEY_NULL == this_ke_map->ke.val)
48765d0a:	250b      	beqz	a1,48765d22 <com_view_key_check_dck+0x22>
48765d0c:	a4e2      	lbu	a3,2(a0)
            {
                break;
            }

            /* 找到需要映射的按键, 进行映射 */
            if ((this_ke_map->ke.type & KEY_TYPE_DBL_CLICK) != 0)
48765d0e:	6b20      	li	v1,32
48765d10:	ef6c      	and	a3,v1
48765d12:	2705      	beqz	a3,48765d1e <com_view_key_check_dck+0x1e>
48765d14:	4be1      	addiu	v1,-31
            {
                g_key_infor.dck_map |= (uint32) (1 << this_ke_map->ke.val);
48765d16:	ed64      	sllv	v1,a1
48765d18:	9ea0      	lw	a1,0(a2)
48765d1a:	ed6d      	or	a1,v1
48765d1c:	dea0      	sw	a1,0(a2)
48765d1e:	4c08      	addiu	a0,8
48765d20:	17f3      	b	48765d08 <com_view_key_check_dck+0x8>
48765d22:	b509      	lw	a1,48765d44 <com_view_key_check_dck+0x44>
            }
        }
    }

// OTA 版本不需要 common 中的按键
#ifdef OTA_VERSION
	this_ke_map = com_ke_maplist_null;
#else
    this_ke_map = com_ke_maplist;
48765d24:	a580      	lbu	a0,0(a1)
#endif
    for (;; this_ke_map++)
    {
        /* 达到用户最后一个映射，结束按键映射 */
        if (KEY_NULL == this_ke_map->ke.val)
48765d26:	240b      	beqz	a0,48765d3e <com_view_key_check_dck+0x3e>
48765d28:	a542      	lbu	v0,2(a1)
        {
            break;
        }

        /* 找到需要映射的按键, 进行映射 */
        if ((this_ke_map->ke.type & KEY_TYPE_DBL_CLICK) != 0)
48765d2a:	6b20      	li	v1,32
48765d2c:	ea6c      	and	v0,v1
48765d2e:	2205      	beqz	v0,48765d3a <com_view_key_check_dck+0x3a>
48765d30:	4be1      	addiu	v1,-31
        {
            g_key_infor.dck_map |= (uint32) (1 << this_ke_map->ke.val);
48765d32:	ec64      	sllv	v1,a0
48765d34:	9e80      	lw	a0,0(a2)
48765d36:	ec6d      	or	a0,v1
48765d38:	de80      	sw	a0,0(a2)
48765d3a:	4d08      	addiu	a1,8
48765d3c:	17f3      	b	48765d24 <com_view_key_check_dck+0x24>
48765d3e:	e8a0      	jrc	ra
48765d40:	a1cc      	lbu	a2,12(s1)
48765d42:	9fc1      	lw	a2,4(a3)
48765d44:	58a0      	sltiu	s0,160
48765d46:	4876      	addiu	s0,118

48765d48 <com_view_loop_key>:
48765d48:	f004 64f5 	save	a0,40,ra,s0-s1
48765d4c:	6a00      	li	v0,0
48765d4e:	d205      	sw	v0,20(sp)
48765d50:	4421      	addiu	s1,a0,1
48765d52:	67e2      	move	a3,v0

48765d54 <.L2>:
48765d54:	b014      	lw	s0,48765da4 <.L2+0x50>
48765d56:	b215      	lw	v0,48765da8 <.L2+0x54>
48765d58:	9861      	lw	v1,4(s0)
48765d5a:	6791      	move	a0,s1
48765d5c:	9ba1      	lw	a1,4(v1)
48765d5e:	ea40      	jalr	v0
48765d60:	0604      	addiu	a2,sp,16
48765d62:	2a0a      	bnez	v0,48765d78 <.L2+0x24>
48765d64:	9304      	lw	v1,16(sp)
48765d66:	231b      	beqz	v1,48765d9e <.L2+0x4a>
48765d68:	b411      	lw	a0,48765dac <.L2+0x58>
48765d6a:	eb40      	jalr	v1
48765d6c:	dc20      	sw	s1,0(a0)
48765d6e:	7283      	cmpi	v0,131
48765d70:	d205      	sw	v0,20(sp)
48765d72:	6115      	btnez	48765d9e <.L2+0x4a>
48765d74:	6f01      	li	a3,1
48765d76:	17ee      	b	48765d54 <.L2>
48765d78:	98a1      	lw	a1,4(s0)
48765d7a:	a542      	lbu	v0,2(a1)
48765d7c:	7201      	cmpi	v0,1
48765d7e:	6004      	bteqz	48765d88 <.L2+0x34>
48765d80:	220e      	beqz	v0,48765d9e <.L2+0x4a>
48765d82:	5204      	slti	v0,4
48765d84:	600c      	bteqz	48765d9e <.L2+0x4a>
48765d86:	1003      	b	48765d8e <.L2+0x3a>
48765d88:	b20a      	lw	v0,48765db0 <.L2+0x5c>
48765d8a:	eac0      	jalrc	v0
48765d8c:	1008      	b	48765d9e <.L2+0x4a>
48765d8e:	b309      	lw	v1,48765db0 <.L2+0x5c>
48765d90:	ebc0      	jalrc	v1
48765d92:	b409      	lw	a0,48765db4 <.L2+0x60>
48765d94:	950a      	lw	a1,40(sp)
48765d96:	b209      	lw	v0,48765db8 <.L2+0x64>
48765d98:	6e05      	li	a2,5
48765d9a:	ea40      	jalr	v0
48765d9c:	6f00      	li	a3,0
48765d9e:	9205      	lw	v0,20(sp)
48765da0:	6475      	restore	40,ra,s0-s1
48765da2:	e8a0      	jrc	ra
48765da4:	99dc      	lw	a2,112(s1)
48765da6:	9fc1      	lw	a2,4(a3)
48765da8:	5c41      	sltiu	a0,65
48765daa:	4876      	addiu	s0,118
48765dac:	99e4      	lw	a3,16(s1)
48765dae:	9fc1      	lw	a2,4(a3)
48765db0:	5e39      	sltiu	a2,57
48765db2:	485e      	addiu	s0,94
48765db4:	a0ec      	lbu	a3,12(s0)
48765db6:	9fc1      	lw	a2,4(a3)
48765db8:	e905      	break	8
48765dba:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_30:

487a5800 <com_se_maplist>:
487a5800:	00c0 0001 5921 487a 00c1 0000 5941 487a     ....!YzH....AYzH
487a5810:	00b0 0001 5945 487a 00b1 0000 5965 487a     ....EYzH....eYzH
487a5820:	00d0 0001 5969 487a 00d1 0000 599d 487a     ....iYzH.....YzH
487a5830:	0083 0001 59a1 487a 0090 0001 59b1 487a     .....YzH.....YzH
487a5840:	0082 0001 5a05 487a 00f0 0001 5a71 487a     .....ZzH....qZzH
487a5850:	0084 0001 5abd 487a 00fc 0001 5ac5 487a     .....ZzH.....ZzH
487a5860:	00f9 0001 5acd 487a 00fb 0001 5ad9 487a     .....ZzH.....ZzH
487a5870:	0140 0001 5b05 487a 00f1 0001 5b1d 487a     @....[zH.....[zH
487a5880:	00e0 0000 5b25 487a 00e1 0000 5b39 487a     ....%[zH....9[zH
487a5890:	0001 0001 5b4d 487a 0002 0001 5b61 487a     ....M[zH....a[zH
487a58a0:	0006 0001 5bad 487a 0007 0001 5bdd 487a     .....[zH.....[zH
487a58b0:	0003 0001 5c0d 487a 0004 0001 5c25 487a     .....\zH....%\zH
487a58c0:	0005 0001 5c45 487a 0008 0001 5c85 487a     ....E\zH.....\zH
487a58d0:	0009 0001 5c9d 487a 000a 0001 5cb5 487a     .....\zH.....\zH
487a58e0:	000b 0001 5ccd 487a 000c 0001 5ce5 487a     .....\zH.....\zH
487a58f0:	0409 0001 5a81 4896 0909 0001 5cfd 487a     .....Z.H.....\zH
487a5900:	040a 0001 5d31 487a 090a 0001 5d55 487a     ....1]zH....U]zH
487a5910:	0087 0001 5dbd 487a 0000 0000 0000 0000     .....]zH........

487a5920 <com_sys_deal_uhost_in>:
487a5920:	b507      	lw	a1,487a593c <com_sys_deal_uhost_in+0x1c>
app_result_e com_sys_deal_uhost_in(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    if ((sys_comval->hard_support_uhost == 1) && (sys_comval->support_uhostplay == 1))
487a5922:	6c00      	li	a0,0
487a5924:	9d60      	lw	v1,0(a1)
487a5926:	f020 a34d 	lbu	v0,45(v1)
487a592a:	7201      	cmpi	v0,1
487a592c:	6105      	btnez	487a5938 <com_sys_deal_uhost_in+0x18>
487a592e:	a3c3      	lbu	a2,3(v1)
487a5930:	7601      	cmpi	a2,1
487a5932:	6102      	btnez	487a5938 <com_sys_deal_uhost_in+0x18>
487a5934:	f100 4c03 	addiu	a0,259
    {
        //进入MUSIC应用
        result = RESULT_MUSIC_UPLAY;
487a5938:	e820      	jr	ra
    }

    return result;
}
487a593a:	6744      	move	v0,a0
487a593c:	999c      	lw	a0,112(s1)
487a593e:	9fc1      	lw	a2,4(a3)

487a5940 <com_sys_deal_uhost_out>:
487a5940:	e820      	jr	ra

app_result_e com_sys_deal_uhost_out(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    //已经在MUSIC中处理

    return result;
}
487a5942:	6a00      	li	v0,0

487a5944 <com_sys_deal_sdcard_in>:
487a5944:	b507      	lw	a1,487a5960 <com_sys_deal_sdcard_in+0x1c>

app_result_e com_sys_deal_sdcard_in(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    if ((sys_comval->hard_support_card == 1) && (sys_comval->support_cardplay == 1))
487a5946:	6c00      	li	a0,0
487a5948:	9d60      	lw	v1,0(a1)
487a594a:	f020 a34c 	lbu	v0,44(v1)
487a594e:	7201      	cmpi	v0,1
487a5950:	6105      	btnez	487a595c <com_sys_deal_sdcard_in+0x18>
487a5952:	a3c2      	lbu	a2,2(v1)
487a5954:	7601      	cmpi	a2,1
487a5956:	6102      	btnez	487a595c <com_sys_deal_sdcard_in+0x18>
487a5958:	f100 4c02 	addiu	a0,258
    {
        //进入MUSIC应用
#if (SUPPORT_RING_FOLDER == 1)
        if ((int8) sys_detect_disk(DRV_GROUP_STG_CARD) != -1)
        {
#ifdef __ESD_MODE_
            //g_ap_switch_var.result_alarm_ring_scan_backup = RESULT_MUSIC_CPLAY;
            //result = RESULT_ALARM_RING_FOLDER_SCAN;
#else
            g_ap_switch_var.result_alarm_ring_scan_backup = RESULT_MUSIC_CPLAY;
            result = RESULT_ALARM_RING_FOLDER_SCAN;
#endif
        }
#else

#ifdef __ESD_MODE_
        //result = RESULT_MUSIC_CPLAY;
#else
		result = RESULT_MUSIC_CPLAY;
487a595c:	e820      	jr	ra
#endif

#endif
    }

    return result;
}
487a595e:	6744      	move	v0,a0
487a5960:	999c      	lw	a0,112(s1)
487a5962:	9fc1      	lw	a2,4(a3)

487a5964 <com_sys_deal_sdcard_out>:
487a5964:	e820      	jr	ra

app_result_e com_sys_deal_sdcard_out(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    //已经在MUSIC中处理

    return result;
}
487a5966:	6a00      	li	v0,0

487a5968 <com_sys_deal_linein_in>:
487a5968:	b50a      	lw	a1,487a5990 <.LBE2+0x10>

app_result_e com_sys_deal_linein_in(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    if (sys_comval->support_linein == 1)
487a596a:	6b00      	li	v1,0
487a596c:	9d80      	lw	a0,0(a1)
487a596e:	a444      	lbu	v0,4(a0)
487a5970:	7201      	cmpi	v0,1
487a5972:	610b      	btnez	487a598a <.LBE2+0xa>
487a5974:	b708      	lw	a3,487a5994 <.LBE2+0x14>
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
       if((g_bt_stack_cur_info.dev_role != 2)&&(get_cur_func_id() != APP_FUNC_PLAYLINEIN))
487a5976:	f020 a7ce 	lbu	a2,46(a3)
487a597a:	7602      	cmpi	a2,2
487a597c:	6006      	bteqz	487a598a <.LBE2+0xa>

487a597e <.LBB2>:
487a597e:	b407      	lw	a0,487a5998 <.LBE2+0x18>

487a5980 <.LBE2>:
487a5980:	a453      	lbu	v0,19(a0)
487a5982:	7203      	cmpi	v0,3
487a5984:	6002      	bteqz	487a598a <.LBE2+0xa>
487a5986:	f100 4b04 	addiu	v1,260
#endif
       {
        //进入MUSIC应用
        result = RESULT_ENTER_LINEIN;
487a598a:	e820      	jr	ra
       }	
       
    }

    return result;
}
487a598c:	6743      	move	v0,v1
487a598e:	0000      	addiu	s0,sp,0
487a5990:	999c      	lw	a0,112(s1)
487a5992:	9fc1      	lw	a2,4(a3)
487a5994:	a2fc      	lbu	a3,28(v0)
487a5996:	9fc1      	lw	a2,4(a3)
487a5998:	a0c0      	lbu	a2,0(s0)
487a599a:	9fc1      	lw	a2,4(a3)

487a599c <com_sys_deal_linein_out>:
487a599c:	e820      	jr	ra

app_result_e com_sys_deal_linein_out(void *ev_param)
{
    app_result_e result = RESULT_NULL;

    //已经在LINEIN中处理

    return result;
}
487a599e:	6a00      	li	v0,0

487a59a0 <com_sys_deal_rtc_alarm>:
487a59a0:	64c3      	save	24,ra

app_result_e com_sys_deal_rtc_alarm(void *ev_param)
{
487a59a2:	b203      	lw	v0,487a59ac <com_sys_deal_rtc_alarm+0xc>
    app_result_e result = RESULT_NULL;

    //响应闹钟
    result = tm_alarm_alarm_ring_deal(ALARM_RING_ENTER);
487a59a4:	ea40      	jalr	v0
487a59a6:	6c00      	li	a0,0
487a59a8:	6443      	restore	24,ra

    return result;
}
487a59aa:	e8a0      	jrc	ra
487a59ac:	5c9d      	sltiu	a0,157
487a59ae:	486e      	addiu	s0,110

487a59b0 <com_sys_deal_usb_in>:
487a59b0:	64e4      	save	32,ra,s0

487a59b2 <.LBB4>:

app_result_e com_sys_deal_usb_in(void *ev_param)
{
487a59b2:	b012      	lw	s0,487a59f8 <.LBE4+0x3e>
487a59b4:	a074      	lbu	v1,20(s0)
487a59b6:	434f      	addiu	v0,v1,-1
487a59b8:	ea11      	zeb	v0

487a59ba <.LBE4>:
487a59ba:	5a02      	sltiu	v0,2
487a59bc:	6aff      	li	v0,255
    app_result_e result;

    //进入USB音箱应用
    if (get_apk_available() == TRUE)
    {
        result = com_rcp_dialog(DIALOG_BUTTON_INCLUDE, BUTTON_USBSOUND_CHARGE, DIALOG_MSG_USB_STICK, 1,
                com_dialog_check_usbdialog);
        if (result == RESULT_DIALOG_USB_SOUND)
        {
            if (get_cable_state() == CABLE_STATE_CABLE_IN)
            {
                result = RESULT_USB_SOUND;
            }
            else
            {
                result = RESULT_NULL;
            }
        }
        else if ((result == RESULT_DIALOG_ONLY_CHARGE) || (result == RESULT_DIALOG_CANCEL_AUTO))
        {
            result = RESULT_NULL;
        }
        else
        {
            //其他返回结果照样返回
        }
    }
    else
    {
#ifdef __ESD_MODE_
         result = RESULT_NULL;
#else
		 result = RESULT_USB_SOUND;
487a59be:	4a0a      	addiu	v0,10
487a59c0:	6018      	bteqz	487a59f2 <.LBE4+0x38>
487a59c2:	b40f      	lw	a0,487a59fc <.LBE4+0x42>
487a59c4:	b20f      	lw	v0,487a5a00 <.LBE4+0x46>
487a59c6:	d404      	sw	a0,16(sp)
487a59c8:	6c01      	li	a0,1
487a59ca:	6d05      	li	a1,5
487a59cc:	6e00      	li	a2,0
487a59ce:	ea40      	jalr	v0
487a59d0:	67e4      	move	a3,a0
487a59d2:	f200 7208 	cmpi	v0,520
487a59d6:	6106      	btnez	487a59e4 <.LBE4+0x2a>
487a59d8:	a0a7      	lbu	a1,7(s0)
487a59da:	6aff      	li	v0,255
487a59dc:	7501      	cmpi	a1,1
487a59de:	4a0a      	addiu	v0,10
487a59e0:	6008      	bteqz	487a59f2 <.LBE4+0x38>
487a59e2:	1006      	b	487a59f0 <.LBE4+0x36>
487a59e4:	f200 7209 	cmpi	v0,521
487a59e8:	6003      	bteqz	487a59f0 <.LBE4+0x36>
487a59ea:	f200 7207 	cmpi	v0,519
487a59ee:	6101      	btnez	487a59f2 <.LBE4+0x38>
487a59f0:	6a00      	li	v0,0
487a59f2:	6464      	restore	32,ra,s0
#endif
    }

    return result;
}
487a59f4:	e8a0      	jrc	ra
487a59f6:	0000      	addiu	s0,sp,0
487a59f8:	a0c0      	lbu	a2,0(s0)
487a59fa:	9fc1      	lw	a2,4(a3)
487a59fc:	5c91      	sltiu	a0,145
487a59fe:	4846      	addiu	s0,70
487a5a00:	5b31      	sltiu	v1,49
487a5a02:	4846      	addiu	s0,70

487a5a04 <com_sys_deal_lowpower>:
487a5a04:	64e3      	save	24,ra,s0

app_result_e com_sys_deal_lowpower(void *ev_param)
{
487a5a06:	b315      	lw	v1,487a5a58 <.LBE6+0xc>
    app_result_e result = RESULT_NULL;

    if (g_app_info_state.bat_value == 1)
487a5a08:	6800      	li	s0,0
487a5a0a:	a34a      	lbu	v0,10(v1)
487a5a0c:	7201      	cmpi	v0,1
487a5a0e:	610d      	btnez	487a5a2a <com_sys_deal_lowpower+0x26>
487a5a10:	b513      	lw	a1,487a5a5c <.LBE6+0x10>
    {
        //电量低，请充电
#ifdef ENABLE_TRUE_WIRELESS_STEREO
    if(g_bt_stack_cur_info.dev_role!=0)
487a5a12:	f020 a58e 	lbu	a0,46(a1)
487a5a16:	2403      	beqz	a0,487a5a1e <com_sys_deal_lowpower+0x1a>
487a5a18:	b612      	lw	a2,487a5a60 <.LBE6+0x14>
    {
        g_app_info_state_all.g_send_exit_mmm_tts=1;
487a5a1a:	6f01      	li	a3,1
487a5a1c:	c6e5      	sb	a3,5(a2)
487a5a1e:	b212      	lw	v0,487a5a64 <.LBE6+0x18>
    }
#endif
        com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_BAT_LOW_CHARGE);
487a5a20:	f010 6c00 	li	a0,32768
487a5a24:	ea40      	jalr	v0
487a5a26:	6d0a      	li	a1,10
487a5a28:	1013      	b	487a5a50 <.LBE6+0x4>
487a5a2a:	b510      	lw	a1,487a5a68 <.LBE6+0x1c>
	
    }
    else
    {
        //闪屏4次
        if (sys_comval->support_led_display == 1)
487a5a2c:	9d80      	lw	a0,0(a1)
487a5a2e:	f020 a465 	lbu	v1,37(a0)
487a5a32:	7301      	cmpi	v1,1
487a5a34:	610b      	btnez	487a5a4c <.LBE6>

487a5a36 <.LBB6>:
487a5a36:	6d00      	li	a1,0
        {
            uint8 twinkling_cnt;

            for (twinkling_cnt = 0; twinkling_cnt < 8; twinkling_cnt++)
            {
                if ((twinkling_cnt % 2) == 0)
                {
                    //清除led屏
                    led_flash_screen(0);
                }
                else
                {
                    //恢复led内容
                    led_flash_screen(1);
                }
                sys_os_time_dly(50);
487a5a38:	b20d      	lw	v0,487a5a6c <.LBE6+0x20>
487a5a3a:	67c5      	move	a2,a1
487a5a3c:	6c32      	li	a0,50
487a5a3e:	ea40      	jalr	v0
487a5a40:	6f31      	li	a3,49
487a5a42:	40c1      	addiu	a2,s0,1
487a5a44:	6706      	move	s0,a2
487a5a46:	e811      	zeb	s0
487a5a48:	5808      	sltiu	s0,8
487a5a4a:	61f5      	btnez	487a5a36 <.LBB6>

487a5a4c <.LBE6>:
487a5a4c:	68ff      	li	s0,255
            }
        }

        result = RESULT_LOW_POWER;
487a5a4e:	480c      	addiu	s0,12
487a5a50:	6750      	move	v0,s0
    }

    return result;
}
487a5a52:	6463      	restore	24,ra,s0
487a5a54:	e8a0      	jrc	ra
487a5a56:	0000      	addiu	s0,sp,0
487a5a58:	a0c0      	lbu	a2,0(s0)
487a5a5a:	9fc1      	lw	a2,4(a3)
487a5a5c:	a2fc      	lbu	a3,28(v0)
487a5a5e:	9fc1      	lw	a2,4(a3)
487a5a60:	a094      	lbu	a0,20(s0)
487a5a62:	9fc1      	lw	a2,4(a3)
487a5a64:	5c8d      	sltiu	a0,141
487a5a66:	483a      	addiu	s0,58
487a5a68:	999c      	lw	a0,112(s1)
487a5a6a:	9fc1      	lw	a2,4(a3)
487a5a6c:	e901      	sdbbp	8
487a5a6e:	bfc1      	lwu	a2,4(a3)

487a5a70 <com_sys_deal_full_charge>:
487a5a70:	64c3      	save	24,ra

app_result_e com_sys_deal_full_charge(void *ev_param)
{
487a5a72:	b410      	lw	a0,487a5ab0 <com_sys_deal_full_charge+0x40>
    //充电已满
    if (sys_comval->bat_charge_full_tts == 1)
487a5a74:	9c60      	lw	v1,0(a0)
487a5a76:	f020 a348 	lbu	v0,40(v1)
487a5a7a:	7201      	cmpi	v0,1
487a5a7c:	6105      	btnez	487a5a88 <com_sys_deal_full_charge+0x18>
487a5a7e:	b20e      	lw	v0,487a5ab4 <com_sys_deal_full_charge+0x44>
    {
        com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_CHARGE_FULL);
487a5a80:	f010 6c00 	li	a0,32768
487a5a84:	ea40      	jalr	v0
487a5a86:	6d0c      	li	a1,12
487a5a88:	6d00      	li	a1,0
    }
    PRINT_INFO("charge full!");
487a5a8a:	b20c      	lw	v0,487a5ab8 <com_sys_deal_full_charge+0x48>
487a5a8c:	0c04      	la	a0,487a5a9c <com_sys_deal_full_charge+0x2c>
487a5a8e:	67c5      	move	a2,a1
487a5a90:	ea40      	jalr	v0
487a5a92:	6f4b      	li	a3,75
487a5a94:	6a00      	li	v0,0

    return RESULT_NULL;
}
487a5a96:	6443      	restore	24,ra
487a5a98:	e8a0      	jrc	ra
487a5a9a:	0000      	addiu	s0,sp,0
487a5a9c:	493c      	addiu	s1,60
487a5a9e:	203e      	beqz	s0,487a5b1c <com_sys_deal_app_quit>
487a5aa0:	6863      	li	s0,99
487a5aa2:	7261      	cmpi	v0,97
487a5aa4:	6567      	move	v1,a3
487a5aa6:	6620      	0x6620
487a5aa8:	6c75      	li	a0,117
487a5aaa:	216c      	beqz	s1,487a5b84 <.LBE9+0x20>
487a5aac:	0000      	addiu	s0,sp,0
487a5aae:	0000      	addiu	s0,sp,0
487a5ab0:	999c      	lw	a0,112(s1)
487a5ab2:	9fc1      	lw	a2,4(a3)
487a5ab4:	5c8d      	sltiu	a0,141
487a5ab6:	483a      	addiu	s0,58
487a5ab8:	e901      	sdbbp	8
487a5aba:	bfc1      	lwu	a2,4(a3)

487a5abc <com_sys_deal_power_off>:
487a5abc:	6aff      	li	v0,255

app_result_e com_sys_deal_power_off(void *ev_param)
{
    return RESULT_POWER_OFF;
}
487a5abe:	e820      	jr	ra
487a5ac0:	4a0b      	addiu	v0,11
	...

487a5ac4 <com_sys_deal_idle_mode>:
487a5ac4:	6aff      	li	v0,255

app_result_e com_sys_deal_idle_mode(void *ev_param)
{
    return RESULT_IDLE_MODE;
}
487a5ac6:	e820      	jr	ra
487a5ac8:	4a2a      	addiu	v0,42
	...

487a5acc <com_sys_deal_system_enter_s2>:
487a5acc:	64c3      	save	24,ra

app_result_e com_sys_deal_system_enter_s2(void *ev_param)
{
487a5ace:	1b10 9621 	jal	48625884 <com_standby>
    app_result_e result = RESULT_NULL;
    uint32 wake_type = 0;

    wake_type = wake_type
#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
#if (SUPPORT_TK_DRIVER == TK_DRIVER_OUTER)
              | WAKE_TYPE_I2C_KEY
#endif
#else
              | WAKE_TYPE_ONOFF_KEY
              | WAKE_TYPE_PHY_KEY
#endif
#if 0 //默认不支持红外遥控唤醒，否则必须一直跑高频
              | WAKE_TYPE_IR_KEY
#endif
#if 0 //默认不支持插拔AUX和插拔卡唤醒
              | WAKE_TYPE_AUX_DETECT
              | WAKE_TYPE_CARD_DETECT
#endif
              | WAKE_TYPE_BT_RX;

    result = com_standby(wake_type);
487a5ad2:	6c13      	li	a0,19
487a5ad4:	6443      	restore	24,ra

    return result;
}
487a5ad6:	e8a0      	jrc	ra

487a5ad8 <com_sys_deal_system_enter_s3>:
487a5ad8:	64c3      	save	24,ra

app_result_e com_sys_deal_system_enter_s3(void *ev_param)
{
487a5ada:	6c00      	li	a0,0
    sys_disable_use_temp_pool();
487a5adc:	b208      	lw	v0,487a5afc <com_sys_deal_system_enter_s3+0x24>
487a5ade:	67c4      	move	a2,a0
487a5ae0:	6d0e      	li	a1,14
487a5ae2:	ea40      	jalr	v0
487a5ae4:	6f36      	li	a3,54
487a5ae6:	b207      	lw	v0,487a5b00 <com_sys_deal_system_enter_s3+0x28>
   
    sys_base_set_enter_s3bt_scene();
487a5ae8:	6c23      	li	a0,35
487a5aea:	6d01      	li	a1,1
487a5aec:	6e00      	li	a2,0
487a5aee:	ea40      	jalr	v0
487a5af0:	6f06      	li	a3,6
487a5af2:	6aff      	li	v0,255
    
    return RESULT_SYSTEM_ENTER_S3;
}
487a5af4:	4a26      	addiu	v0,38
487a5af6:	6443      	restore	24,ra
487a5af8:	e8a0      	jrc	ra
487a5afa:	0000      	addiu	s0,sp,0
487a5afc:	e901      	sdbbp	8
487a5afe:	bfc1      	lwu	a2,4(a3)
487a5b00:	e91d      	dmultu	s1,s0
487a5b02:	bfc1      	lwu	a2,4(a3)

487a5b04 <com_sys_deal_hfp_call>:
487a5b04:	b405      	lw	a0,487a5b18 <com_sys_deal_hfp_call+0x14>

app_result_e com_sys_deal_hfp_call(void *ev_param)
{
    if (g_this_app_info->app_id != APP_ID_BTCALL)
487a5b06:	9c60      	lw	v1,0(a0)
487a5b08:	a341      	lbu	v0,1(v1)
487a5b0a:	7203      	cmpi	v0,3
487a5b0c:	6aff      	li	v0,255
    {
        return RESULT_BLUETEETH_CALL_BACKGROUND;
487a5b0e:	4a09      	addiu	v0,9
487a5b10:	6101      	btnez	487a5b14 <com_sys_deal_hfp_call+0x10>
487a5b12:	6a00      	li	v0,0
    }
    else
    {
        return RESULT_NULL; //用来终止来电电话本播报TTS
487a5b14:	e8a0      	jrc	ra
    }
}
487a5b16:	0000      	addiu	s0,sp,0
487a5b18:	9990      	lw	a0,64(s1)
487a5b1a:	9fc1      	lw	a2,4(a3)

487a5b1c <com_sys_deal_app_quit>:
487a5b1c:	6aff      	li	v0,255

app_result_e com_sys_deal_app_quit(void *ev_param)
{
    return RESULT_APP_QUIT;
}
487a5b1e:	e820      	jr	ra
487a5b20:	4241      	addiu	v0,v0,1
	...

487a5b24 <com_sys_deal_headphone_in>:
487a5b24:	64c3      	save	24,ra

app_result_e com_sys_deal_headphone_in(void *ev_param)
{
487a5b26:	b204      	lw	v0,487a5b34 <com_sys_deal_headphone_in+0x10>
    SPEAKER_OUT_SWITCH(TRUE);
487a5b28:	ea40      	jalr	v0
487a5b2a:	6c01      	li	a0,1
487a5b2c:	6a00      	li	v0,0

    return RESULT_NULL;
}
487a5b2e:	6443      	restore	24,ra
487a5b30:	e8a0      	jrc	ra
487a5b32:	0000      	addiu	s0,sp,0
487a5b34:	5ba1      	sltiu	v1,161
487a5b36:	4832      	addiu	s0,50

487a5b38 <com_sys_deal_headphone_out>:
487a5b38:	64c3      	save	24,ra

app_result_e com_sys_deal_headphone_out(void *ev_param)
{
487a5b3a:	b204      	lw	v0,487a5b48 <com_sys_deal_headphone_out+0x10>
    SPEAKER_OUT_SWITCH(FALSE);
487a5b3c:	ea40      	jalr	v0
487a5b3e:	6c00      	li	a0,0
487a5b40:	6a00      	li	v0,0

    return RESULT_NULL;
}
487a5b42:	6443      	restore	24,ra
487a5b44:	e8a0      	jrc	ra
487a5b46:	0000      	addiu	s0,sp,0
487a5b48:	5ba1      	sltiu	v1,161
487a5b4a:	4832      	addiu	s0,50

487a5b4c <com_sys_deal_enter_btplay>:
487a5b4c:	b404      	lw	a0,487a5b5c <.LBE7+0xe>

487a5b4e <.LBE7>:
487a5b4e:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_btplay(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5b50:	a453      	lbu	v0,19(a0)
487a5b52:	2202      	beqz	v0,487a5b58 <.LBE7+0xa>
487a5b54:	f100 4b06 	addiu	v1,262

    if (get_cur_func_id() != APP_FUNC_BTPLAY)
    {
        result = RESULT_BLUETEETH_SOUND;
487a5b58:	e820      	jr	ra
    }

    return result;
}
487a5b5a:	6743      	move	v0,v1
487a5b5c:	a0c0      	lbu	a2,0(s0)
487a5b5e:	9fc1      	lw	a2,4(a3)

487a5b60 <com_sys_deal_enter_music>:
487a5b60:	64f4      	save	32,ra,s0-s1

487a5b62 <.LBB9>:

app_result_e com_sys_deal_enter_music(void *ev_param)
{
487a5b62:	b211      	lw	v0,487a5ba4 <.LBE9+0x40>

487a5b64 <.LBE9>:
487a5b64:	6800      	li	s0,0
    app_result_e result = RESULT_NULL;
487a5b66:	a253      	lbu	v0,19(v0)
487a5b68:	7202      	cmpi	v0,2
487a5b6a:	6018      	bteqz	487a5b9c <.LBE9+0x38>
487a5b6c:	7201      	cmpi	v0,1
487a5b6e:	6016      	bteqz	487a5b9c <.LBE9+0x38>
487a5b70:	b10e      	lw	s1,487a5ba8 <.LBE9+0x44>

    if ((get_cur_func_id() != APP_FUNC_PLAYUHOST) && (get_cur_func_id() != APP_FUNC_PLAYCARD))
    {
        if ((int8) sys_detect_disk(DRV_GROUP_STG_UHOST) != (int8) (-1))
487a5b72:	6c02      	li	a0,2
487a5b74:	67b0      	move	a1,s0
487a5b76:	67d0      	move	a2,s0
487a5b78:	e940      	jalr	s1
487a5b7a:	6f09      	li	a3,9
487a5b7c:	ea91      	seb	v0
487a5b7e:	eb4f      	not	v1,v0
487a5b80:	2303      	beqz	v1,487a5b88 <.LBE9+0x24>
487a5b82:	f100 4803 	addiu	s0,259
        {
            result = RESULT_MUSIC_UPLAY;
487a5b86:	100a      	b	487a5b9c <.LBE9+0x38>
487a5b88:	6c01      	li	a0,1
        }
        else if ((int8) sys_detect_disk(DRV_GROUP_STG_CARD) != (int8) (-1))
487a5b8a:	67b0      	move	a1,s0
487a5b8c:	67d0      	move	a2,s0
487a5b8e:	e940      	jalr	s1
487a5b90:	6f09      	li	a3,9
487a5b92:	ea91      	seb	v0
487a5b94:	ec4f      	not	a0,v0
487a5b96:	2402      	beqz	a0,487a5b9c <.LBE9+0x38>
487a5b98:	68ff      	li	s0,255
        {
            result = RESULT_MUSIC_CPLAY;
487a5b9a:	4003      	addiu	s0,s0,3
487a5b9c:	6750      	move	v0,s0
        }
        else
        {
            //do nothing for QAC
        }
    }

    return result;
}
487a5b9e:	6474      	restore	32,ra,s0-s1
487a5ba0:	e8a0      	jrc	ra
487a5ba2:	0000      	addiu	s0,sp,0
487a5ba4:	a0c0      	lbu	a2,0(s0)
487a5ba6:	9fc1      	lw	a2,4(a3)
487a5ba8:	e901      	sdbbp	8
487a5baa:	bfc1      	lwu	a2,4(a3)

487a5bac <com_sys_deal_enter_card_music>:
487a5bac:	64e3      	save	24,ra,s0

487a5bae <.LBB11>:

app_result_e com_sys_deal_enter_card_music(void *ev_param)
{
487a5bae:	b30a      	lw	v1,487a5bd4 <.LBE11+0x24>

487a5bb0 <.LBE11>:
487a5bb0:	6800      	li	s0,0
    app_result_e result = RESULT_NULL;
487a5bb2:	a353      	lbu	v0,19(v1)
487a5bb4:	7201      	cmpi	v0,1
487a5bb6:	600b      	bteqz	487a5bce <.LBE11+0x1e>
487a5bb8:	b208      	lw	v0,487a5bd8 <.LBE11+0x28>

    if (get_cur_func_id() != APP_FUNC_PLAYCARD)
    {
        if ((int8) sys_detect_disk(DRV_GROUP_STG_CARD) != (int8) (-1))
487a5bba:	6c01      	li	a0,1
487a5bbc:	67b0      	move	a1,s0
487a5bbe:	67d0      	move	a2,s0
487a5bc0:	ea40      	jalr	v0
487a5bc2:	6f09      	li	a3,9
487a5bc4:	ea91      	seb	v0
487a5bc6:	ec4f      	not	a0,v0
487a5bc8:	2402      	beqz	a0,487a5bce <.LBE11+0x1e>
487a5bca:	f100 4802 	addiu	s0,258
        {
            result = RESULT_MUSIC_CPLAY;
487a5bce:	6750      	move	v0,s0
        }
    }

    return result;
}
487a5bd0:	6463      	restore	24,ra,s0
487a5bd2:	e8a0      	jrc	ra
487a5bd4:	a0c0      	lbu	a2,0(s0)
487a5bd6:	9fc1      	lw	a2,4(a3)
487a5bd8:	e901      	sdbbp	8
487a5bda:	bfc1      	lwu	a2,4(a3)

487a5bdc <com_sys_deal_enter_uhost_music>:
487a5bdc:	64e3      	save	24,ra,s0

487a5bde <.LBB13>:

app_result_e com_sys_deal_enter_uhost_music(void *ev_param)
{
487a5bde:	b30a      	lw	v1,487a5c04 <.LBE13+0x24>

487a5be0 <.LBE13>:
487a5be0:	6800      	li	s0,0
    app_result_e result = RESULT_NULL;
487a5be2:	a353      	lbu	v0,19(v1)
487a5be4:	7202      	cmpi	v0,2
487a5be6:	600b      	bteqz	487a5bfe <.LBE13+0x1e>
487a5be8:	b208      	lw	v0,487a5c08 <.LBE13+0x28>

    if (get_cur_func_id() != APP_FUNC_PLAYUHOST)
    {
        if ((int8) sys_detect_disk(DRV_GROUP_STG_UHOST) != (int8) (-1))
487a5bea:	6c02      	li	a0,2
487a5bec:	67b0      	move	a1,s0
487a5bee:	67d0      	move	a2,s0
487a5bf0:	ea40      	jalr	v0
487a5bf2:	6f09      	li	a3,9
487a5bf4:	ea91      	seb	v0
487a5bf6:	ec4f      	not	a0,v0
487a5bf8:	2402      	beqz	a0,487a5bfe <.LBE13+0x1e>
487a5bfa:	f100 4803 	addiu	s0,259
        {
            result = RESULT_MUSIC_UPLAY;
487a5bfe:	6750      	move	v0,s0
        }
    }

    return result;
}
487a5c00:	6463      	restore	24,ra,s0
487a5c02:	e8a0      	jrc	ra
487a5c04:	a0c0      	lbu	a2,0(s0)
487a5c06:	9fc1      	lw	a2,4(a3)
487a5c08:	e901      	sdbbp	8
487a5c0a:	bfc1      	lwu	a2,4(a3)

487a5c0c <com_sys_deal_enter_linein>:
487a5c0c:	b405      	lw	a0,487a5c20 <.LBE15+0x12>

487a5c0e <.LBE15>:
487a5c0e:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_linein(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5c10:	a453      	lbu	v0,19(a0)
487a5c12:	7203      	cmpi	v0,3
487a5c14:	6002      	bteqz	487a5c1a <.LBE15+0xc>
487a5c16:	f100 4b04 	addiu	v1,260

    if (get_cur_func_id() != APP_FUNC_PLAYLINEIN)
    {
        result = RESULT_ENTER_LINEIN;
487a5c1a:	e820      	jr	ra
    }

    return result;
}
487a5c1c:	6743      	move	v0,v1
487a5c1e:	0000      	addiu	s0,sp,0
487a5c20:	a0c0      	lbu	a2,0(s0)
487a5c22:	9fc1      	lw	a2,4(a3)

487a5c24 <com_sys_deal_enter_radio>:
487a5c24:	b406      	lw	a0,487a5c3c <.LBE17+0x16>

487a5c26 <.LBE17>:
487a5c26:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_radio(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5c28:	a453      	lbu	v0,19(a0)
487a5c2a:	7204      	cmpi	v0,4
487a5c2c:	6005      	bteqz	487a5c38 <.LBE17+0x12>
487a5c2e:	b505      	lw	a1,487a5c40 <.LBE17+0x1a>

    if (get_cur_func_id() != APP_FUNC_RADIO)
    {
        g_ap_switch_var.switch_to_radio_by_apkapp = TRUE;
487a5c30:	6e01      	li	a2,1
487a5c32:	6bff      	li	v1,255
        result = RESULT_RADIO;
487a5c34:	c5df      	sb	a2,31(a1)
487a5c36:	4366      	addiu	v1,v1,6
487a5c38:	e820      	jr	ra
    }

    return result;
}
487a5c3a:	6743      	move	v0,v1
487a5c3c:	a0c0      	lbu	a2,0(s0)
487a5c3e:	9fc1      	lw	a2,4(a3)
487a5c40:	a19c      	lbu	a0,28(s1)
487a5c42:	9fc1      	lw	a2,4(a3)

487a5c44 <com_sys_deal_enter_alarm>:
487a5c44:	64e3      	save	24,ra,s0

app_result_e com_sys_deal_enter_alarm(void *ev_param)
{
487a5c46:	b30b      	lw	v1,487a5c70 <.LBE19+0x26>

487a5c48 <.LBB19>:
    app_result_e result = RESULT_NULL;

    g_ap_switch_var.apk_alarm_flag = 1;
487a5c48:	b40b      	lw	a0,487a5c74 <.LBE19+0x2a>

487a5c4a <.LBE19>:
487a5c4a:	6d01      	li	a1,1
487a5c4c:	c3b0      	sb	a1,16(v1)
487a5c4e:	b70b      	lw	a3,487a5c78 <.LBE19+0x2e>
    g_ap_switch_var.apk_alarm_last_func = get_cur_func_id();
    g_ap_switch_var.apk_alarm_backup_cb = (void *) g_app_rcp_cmd_cb_tbl;
487a5c50:	b50b      	lw	a1,487a5c7c <.LBE19+0x32>
    g_ap_switch_var.apk_alarm_backup_global_cb = (void *) g_app_get_global_info;
487a5c52:	a453      	lbu	v0,19(a0)
487a5c54:	9fc0      	lw	a2,0(a3)
487a5c56:	9d80      	lw	a0,0(a1)
487a5c58:	6800      	li	s0,0
487a5c5a:	c351      	sb	v0,17(v1)
487a5c5c:	b209      	lw	v0,487a5c80 <.LBE19+0x36>
    com_rcp_set_callback(NULL, NULL);
487a5c5e:	db86      	sw	a0,24(v1)
487a5c60:	dbc5      	sw	a2,20(v1)
487a5c62:	6790      	move	a0,s0
487a5c64:	ea40      	jalr	v0
487a5c66:	67b0      	move	a1,s0
487a5c68:	6750      	move	v0,s0

#if (SUPPORT_LED_DRIVER == 1)
    if (sys_comval->support_led_display == 1)
    {
        tm_alarm_create_clock_view();
    }
#endif

    return result;
}
487a5c6a:	6463      	restore	24,ra,s0
487a5c6c:	e8a0      	jrc	ra
487a5c6e:	0000      	addiu	s0,sp,0
487a5c70:	a19c      	lbu	a0,28(s1)
487a5c72:	9fc1      	lw	a2,4(a3)
487a5c74:	a0c0      	lbu	a2,0(s0)
487a5c76:	9fc1      	lw	a2,4(a3)
487a5c78:	a24c      	lbu	v0,12(v0)
487a5c7a:	9fc1      	lw	a2,4(a3)
487a5c7c:	a250      	lbu	v0,16(v0)
487a5c7e:	9fc1      	lw	a2,4(a3)
487a5c80:	58a9      	sltiu	s0,169
487a5c82:	48b2      	addiu	s0,-78

487a5c84 <com_sys_deal_enter_record_cplay>:
487a5c84:	b405      	lw	a0,487a5c98 <.LBE23+0x12>

487a5c86 <.LBE23>:
487a5c86:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_record_cplay(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5c88:	a453      	lbu	v0,19(a0)
487a5c8a:	720a      	cmpi	v0,10
487a5c8c:	6002      	bteqz	487a5c92 <.LBE23+0xc>
487a5c8e:	f100 4b0d 	addiu	v1,269

    if (get_cur_func_id() != APP_FUNC_PLAYCRECORD)
    {
        result = RESULT_RECORD_CPLAY;
487a5c92:	e820      	jr	ra
    }

    return result;
}
487a5c94:	6743      	move	v0,v1
487a5c96:	0000      	addiu	s0,sp,0
487a5c98:	a0c0      	lbu	a2,0(s0)
487a5c9a:	9fc1      	lw	a2,4(a3)

487a5c9c <com_sys_deal_enter_record_uplay>:
487a5c9c:	b405      	lw	a0,487a5cb0 <.LBE25+0x12>

487a5c9e <.LBE25>:
487a5c9e:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_record_uplay(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5ca0:	a453      	lbu	v0,19(a0)
487a5ca2:	7209      	cmpi	v0,9
487a5ca4:	6002      	bteqz	487a5caa <.LBE25+0xc>
487a5ca6:	f100 4b0e 	addiu	v1,270

    if (get_cur_func_id() != APP_FUNC_PLAYURECORD)
    {
        result = RESULT_RECORD_UPLAY;
487a5caa:	e820      	jr	ra
    }

    return result;
}
487a5cac:	6743      	move	v0,v1
487a5cae:	0000      	addiu	s0,sp,0
487a5cb0:	a0c0      	lbu	a2,0(s0)
487a5cb2:	9fc1      	lw	a2,4(a3)

487a5cb4 <com_sys_deal_enter_crecord>:
487a5cb4:	b405      	lw	a0,487a5cc8 <.LBE27+0x12>

487a5cb6 <.LBE27>:
487a5cb6:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_crecord(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5cb8:	a453      	lbu	v0,19(a0)
487a5cba:	720d      	cmpi	v0,13
487a5cbc:	6002      	bteqz	487a5cc2 <.LBE27+0xc>
487a5cbe:	f100 4b11 	addiu	v1,273

    if (get_cur_func_id() != APP_FUNC_MICREC_TOC)
    {
        result = RESULT_RECORD_MIC_TOC;
487a5cc2:	e820      	jr	ra
    }

    return result;
}
487a5cc4:	6743      	move	v0,v1
487a5cc6:	0000      	addiu	s0,sp,0
487a5cc8:	a0c0      	lbu	a2,0(s0)
487a5cca:	9fc1      	lw	a2,4(a3)

487a5ccc <com_sys_deal_enter_urecord>:
487a5ccc:	b405      	lw	a0,487a5ce0 <.LBE29+0x12>

487a5cce <.LBE29>:
487a5cce:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_urecord(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5cd0:	a453      	lbu	v0,19(a0)
487a5cd2:	7215      	cmpi	v0,21
487a5cd4:	6002      	bteqz	487a5cda <.LBE29+0xc>
487a5cd6:	f100 4b14 	addiu	v1,276

    if (get_cur_func_id() != APP_FUNC_MICREC_TOU)
    {
        result = RESULT_RECORD_MIC_TOU;
487a5cda:	e820      	jr	ra
    }

    return result;
}
487a5cdc:	6743      	move	v0,v1
487a5cde:	0000      	addiu	s0,sp,0
487a5ce0:	a0c0      	lbu	a2,0(s0)
487a5ce2:	9fc1      	lw	a2,4(a3)

487a5ce4 <com_sys_deal_enter_usound>:
487a5ce4:	b405      	lw	a0,487a5cf8 <.LBE31+0x12>

487a5ce6 <.LBE31>:
487a5ce6:	6b00      	li	v1,0

app_result_e com_sys_deal_enter_usound(void *ev_param)
{
    app_result_e result = RESULT_NULL;
487a5ce8:	a453      	lbu	v0,19(a0)
487a5cea:	7205      	cmpi	v0,5
487a5cec:	6002      	bteqz	487a5cf2 <.LBE31+0xc>
487a5cee:	f100 4b09 	addiu	v1,265

    if (get_cur_func_id() != APP_FUNC_USOUND)
    {
        result = RESULT_USB_SOUND;
487a5cf2:	e820      	jr	ra
    }

    return result;
}
487a5cf4:	6743      	move	v0,v1
487a5cf6:	0000      	addiu	s0,sp,0
487a5cf8:	a0c0      	lbu	a2,0(s0)
487a5cfa:	9fc1      	lw	a2,4(a3)

487a5cfc <com_sys_deal_btstack_hd_err>:
487a5cfc:	64e3      	save	24,ra,s0

app_result_e com_sys_deal_btstack_hd_err(void *ev_param)
{
487a5cfe:	b009      	lw	s0,487a5d20 <com_sys_deal_btstack_hd_err+0x24>
    //先卸载掉BT STACK，并断电
    com_btmanager_exit(FALSE, TRUE);
487a5d00:	6c00      	li	a0,0
487a5d02:	e840      	jalr	s0
487a5d04:	6d01      	li	a1,1
487a5d06:	b008      	lw	s0,487a5d24 <com_sys_deal_btstack_hd_err+0x28>

    //再装载BT STACK
    g_need_auto_connect_timeout = 1;
487a5d08:	b408      	lw	a0,487a5d28 <com_sys_deal_btstack_hd_err+0x2c>
    g_neednot_tts_play_reset = 1;
487a5d0a:	6d01      	li	a1,1
487a5d0c:	b308      	lw	v1,487a5d2c <com_sys_deal_btstack_hd_err+0x30>
    com_btmanager_init(FALSE);
487a5d0e:	c4a0      	sb	a1,0(a0)
487a5d10:	c0a0      	sb	a1,0(s0)
487a5d12:	eb40      	jalr	v1
487a5d14:	6c00      	li	a0,0
487a5d16:	6a00      	li	v0,0
    g_need_auto_connect_timeout = 0;
487a5d18:	c040      	sb	v0,0(s0)
487a5d1a:	6a00      	li	v0,0

    return RESULT_NULL;
}
487a5d1c:	6463      	restore	24,ra,s0
487a5d1e:	e8a0      	jrc	ra
487a5d20:	5969      	sltiu	s1,105
487a5d22:	48b6      	addiu	s0,-74
487a5d24:	9a26      	lw	s1,24(v0)
487a5d26:	9fc1      	lw	a2,4(a3)
487a5d28:	9a29      	lw	s1,36(v0)
487a5d2a:	9fc1      	lw	a2,4(a3)
487a5d2c:	5801      	sltiu	s0,1
487a5d2e:	48c6      	addiu	s0,-58

487a5d30 <com_att_switch_app>:
487a5d30:	9c80      	lw	a0,0(a0)

app_result_e com_att_switch_app(void *ev_param)
{
    uint32 ret_val;
    uint32 app_func = *(uint32 *)ev_param;  
487a5d32:	6aff      	li	v0,255

    if(app_func == APP_ATT_FUNC_ID_BTPLAY)
    {
        ret_val = RESULT_BLUETEETH_SOUND;
487a5d34:	4247      	addiu	v0,v0,7
487a5d36:	240d      	beqz	a0,487a5d52 <com_att_switch_app+0x22>
487a5d38:	7401      	cmpi	a0,1
    }
    else if(app_func == APP_ATT_FUNC_ID_BTCALL)
487a5d3a:	4241      	addiu	v0,v0,1
    {
        ret_val = RESULT_BLUETEETH_CALL;
487a5d3c:	600a      	bteqz	487a5d52 <com_att_switch_app+0x22>
487a5d3e:	7402      	cmpi	a0,2
    }
    else if(app_func == APP_ATT_FUNC_ID_CARDPLAY)
487a5d40:	424b      	addiu	v0,v0,-5
    {
        ret_val = RESULT_MUSIC_CPLAY;
487a5d42:	6007      	bteqz	487a5d52 <com_att_switch_app+0x22>
487a5d44:	7403      	cmpi	a0,3
    }
    else if(app_func == APP_ATT_FUNC_ID_LINEIN)
487a5d46:	4242      	addiu	v0,v0,2
    {
        ret_val = RESULT_ENTER_LINEIN;
487a5d48:	6004      	bteqz	487a5d52 <com_att_switch_app+0x22>
487a5d4a:	7404      	cmpi	a0,4
    }
    else if(app_func == APP_ATT_FUNC_ID_RADIO)
487a5d4c:	4241      	addiu	v0,v0,1
    {
        ret_val = RESULT_RADIO;
487a5d4e:	6001      	bteqz	487a5d52 <com_att_switch_app+0x22>
487a5d50:	6a00      	li	v0,0
    }
    else
    {
        ret_val = RESULT_NULL;
487a5d52:	e8a0      	jrc	ra

487a5d54 <com_tws_switch_app>:
    }

    return ret_val;
}
487a5d54:	64c3      	save	24,ra

app_result_e com_tws_switch_app(void *ev_param)
{
487a5d56:	6cff      	li	a0,255
	 uint8 next_func_id;

   next_func_id = com_ap_switch_ask_next_func(RESULT_NEXT_FUNCTION);
487a5d58:	b214      	lw	v0,487a5da8 <.LBE33+0x48>
487a5d5a:	ea40      	jalr	v0
487a5d5c:	4c17      	addiu	a0,23

487a5d5e <.LBB33>:
487a5d5e:	b414      	lw	a0,487a5dac <.LBE33+0x4c>

487a5d60 <.LBE33>:
487a5d60:	a473      	lbu	v1,19(a0)
487a5d62:	ea6e      	xor	v0,v1
487a5d64:	2a08      	bnez	v0,487a5d76 <.LBE33+0x16>
487a5d66:	6d00      	li	a1,0
   if (next_func_id == get_cur_func_id())
   {
       PRINT_WARNING("NO next APP to switch!!");
487a5d68:	b212      	lw	v0,487a5db0 <.LBE33+0x50>
487a5d6a:	0c09      	la	a0,487a5d8c <.LBE33+0x2c>
487a5d6c:	67c5      	move	a2,a1
487a5d6e:	ea40      	jalr	v0
487a5d70:	6f4b      	li	a3,75
487a5d72:	6a00      	li	v0,0
       return RESULT_NULL;
487a5d74:	1008      	b	487a5d86 <.LBE33+0x26>
487a5d76:	b610      	lw	a2,487a5db4 <.LBE33+0x54>
   }
   else
   {
       //过滤来不及响应的短按按键
       com_filter_keymsg_in_queue(g_p_view_ke->val, KEY_TYPE_SHORT_UP);
487a5d78:	b310      	lw	v1,487a5db8 <.LBE33+0x58>
487a5d7a:	9ea0      	lw	a1,0(a2)
487a5d7c:	a580      	lbu	a0,0(a1)
487a5d7e:	eb40      	jalr	v1
487a5d80:	6d02      	li	a1,2
487a5d82:	6aff      	li	v0,255
       return RESULT_NEXT_FUNCTION;
487a5d84:	4a17      	addiu	v0,23
487a5d86:	6443      	restore	24,ra
   }	
}
487a5d88:	e8a0      	jrc	ra
487a5d8a:	0000      	addiu	s0,sp,0
487a5d8c:	573c      	slti	a3,60
487a5d8e:	203e      	beqz	s0,487a5e0c <com_view_sys_event+0x2c>
487a5d90:	4f4e      	addiu	a3,78
487a5d92:	6e20      	li	a2,32
487a5d94:	7865      	sd	v1,40(s0)
487a5d96:	2074      	beqz	s0,487a5e80 <.L16+0x3c>
487a5d98:	5041      	slti	s0,65
487a5d9a:	2050      	beqz	s0,487a5e3c <com_view_loop_sys+0x20>
487a5d9c:	6f74      	li	a3,116
487a5d9e:	7320      	cmpi	v1,32
487a5da0:	6977      	li	s1,119
487a5da2:	6374      	addiu	sp,928
487a5da4:	2168      	beqz	s1,487a5e76 <.L16+0x32>
487a5da6:	0021      	addiu	s0,sp,132
487a5da8:	5a95      	sltiu	v0,149
487a5daa:	483e      	addiu	s0,62
487a5dac:	a0c0      	lbu	a2,0(s0)
487a5dae:	9fc1      	lw	a2,4(a3)
487a5db0:	e901      	sdbbp	8
487a5db2:	bfc1      	lwu	a2,4(a3)
487a5db4:	99e4      	lw	a3,16(s1)
487a5db6:	9fc1      	lw	a2,4(a3)
487a5db8:	5b39      	sltiu	v1,57
487a5dba:	484e      	addiu	s0,78

487a5dbc <com_mpu_error_deal>:
487a5dbc:	64e3      	save	24,ra,s0

app_result_e com_mpu_error_deal(void *ev_param)
{
487a5dbe:	6c00      	li	a0,0
    //出现mpu error,表明临时缓冲区有错误，需要先清除临时缓冲区
	sys_clear_temp_pool();
487a5dc0:	b007      	lw	s0,487a5ddc <com_mpu_error_deal+0x20>
487a5dc2:	67c4      	move	a2,a0
487a5dc4:	6d0d      	li	a1,13
487a5dc6:	e840      	jalr	s0
487a5dc8:	6f36      	li	a3,54
487a5dca:	6c00      	li	a0,0

    //出现mpu error后系统会禁止使用临时缓冲区，这里重新使能这部分空间的使用
	sys_enable_use_temp_pool();
487a5dcc:	6d0f      	li	a1,15
487a5dce:	67c4      	move	a2,a0
487a5dd0:	e840      	jalr	s0
487a5dd2:	6f36      	li	a3,54
487a5dd4:	6a00      	li	v0,0

	return RESULT_NULL;
}
487a5dd6:	6463      	restore	24,ra,s0
487a5dd8:	e8a0      	jrc	ra
487a5dda:	0000      	addiu	s0,sp,0
487a5ddc:	e901      	sdbbp	8
487a5dde:	bfc1      	lwu	a2,4(a3)

487a5de0 <com_view_sys_event>:
487a5de0:	ef11      	zeb	a3

extern const sys_event_map_t com_se_maplist[];

int com_view_sys_event(sys_event_t *p_se, const sys_event_map_t *app_se_maplist, sys_event_ret_t *p_ret, bool only_com)
{
487a5de2:	2508      	beqz	a1,487a5df4 <com_view_sys_event+0x14>
    const sys_event_map_t *this_se_map;

    if ((app_se_maplist != NULL) && (only_com == FALSE))
487a5de4:	2f07      	bnez	a3,487a5df4 <com_view_sys_event+0x14>
487a5de6:	ad60      	lhu	v1,0(a1)
    {
        this_se_map = app_se_maplist;
        for (;; this_se_map++)
        {
            if (MSG_NULL == this_se_map->se.msg_type)
487a5de8:	2305      	beqz	v1,487a5df4 <com_view_sys_event+0x14>
487a5dea:	ac40      	lhu	v0,0(a0)
            {
                break;
            }

            if (this_se_map->se.msg_type == p_se->msg_type)
487a5dec:	ea6e      	xor	v0,v1
487a5dee:	2208      	beqz	v0,487a5e00 <com_view_sys_event+0x20>
487a5df0:	4d08      	addiu	a1,8
487a5df2:	17f9      	b	487a5de6 <com_view_sys_event+0x6>
487a5df4:	b509      	lw	a1,487a5e18 <com_view_sys_event+0x38>
            {
                p_ret->ret_cb = this_se_map->cb;
                p_ret->ret_option = this_se_map->se.msg_option;
                return 0;
            }
        }
    }

    this_se_map = com_se_maplist;
487a5df6:	ad60      	lhu	v1,0(a1)
    for (;; this_se_map++)
    {
        if (MSG_NULL == this_se_map->se.msg_type)
487a5df8:	230b      	beqz	v1,487a5e10 <com_view_sys_event+0x30>
487a5dfa:	ace0      	lhu	a3,0(a0)
        {
            break;
        }

        if (this_se_map->se.msg_type == p_se->msg_type)
487a5dfc:	ef6e      	xor	a3,v1
487a5dfe:	2f06      	bnez	a3,487a5e0c <com_view_sys_event+0x2c>
487a5e00:	9d81      	lw	a0,4(a1)
        {
            p_ret->ret_cb = this_se_map->cb;
487a5e02:	6a00      	li	v0,0
            p_ret->ret_option = this_se_map->se.msg_option;
            return 0;
487a5e04:	de80      	sw	a0,0(a2)
487a5e06:	a562      	lbu	v1,2(a1)
487a5e08:	e820      	jr	ra
487a5e0a:	c664      	sb	v1,4(a2)
487a5e0c:	4d08      	addiu	a1,8
487a5e0e:	17f3      	b	487a5df6 <com_view_sys_event+0x16>
487a5e10:	6d01      	li	a1,1
        }
    }

    return -1;
487a5e12:	e820      	jr	ra
}
487a5e14:	eaab      	neg	v0,a1
487a5e16:	0000      	addiu	s0,sp,0
487a5e18:	5800      	sltiu	s0,0
487a5e1a:	487a      	addiu	s0,122

487a5e1c <com_view_loop_sys>:
487a5e1c:	f004 64f7 	save	a0,56,ra,s0-s1
487a5e20:	b318      	lw	v1,487a5e80 <.L16+0x3c>
487a5e22:	6900      	li	s1,0
487a5e24:	a340      	lbu	v0,0(v1)
487a5e26:	ed11      	zeb	a1
487a5e28:	5a03      	sltiu	v0,3
487a5e2a:	d508      	sw	a1,32(sp)
487a5e2c:	67f1      	move	a3,s1
487a5e2e:	d109      	sw	s1,36(sp)
487a5e30:	6003      	bteqz	487a5e38 <com_view_loop_sys+0x1c>
487a5e32:	b515      	lw	a1,487a5e84 <.L16+0x40>
487a5e34:	9d82      	lw	a0,8(a1)
487a5e36:	d409      	sw	a0,36(sp)
487a5e38:	930e      	lw	v1,56(sp)
487a5e3a:	67dd      	move	a2,sp
487a5e3c:	9b80      	lw	a0,0(v1)
487a5e3e:	6a00      	li	v0,0
487a5e40:	ce88      	sh	a0,16(a2)
487a5e42:	c652      	sb	v0,18(a2)

487a5e44 <.L16>:
487a5e44:	9509      	lw	a1,36(sp)
487a5e46:	b211      	lw	v0,487a5e88 <.L16+0x44>
487a5e48:	0404      	addiu	a0,sp,16
487a5e4a:	ea40      	jalr	v0
487a5e4c:	0606      	addiu	a2,sp,24
487a5e4e:	2a14      	bnez	v0,487a5e78 <.L16+0x34>
487a5e50:	9006      	lw	s0,24(sp)
487a5e52:	2012      	beqz	s0,487a5e78 <.L16+0x34>
487a5e54:	9708      	lw	a3,32(sp)
487a5e56:	7701      	cmpi	a3,1
487a5e58:	6107      	btnez	487a5e68 <.L16+0x24>
487a5e5a:	67dd      	move	a2,sp
487a5e5c:	a63c      	lbu	s1,28(a2)
487a5e5e:	6d01      	li	a1,1
487a5e60:	e9ac      	and	s1,a1
487a5e62:	2102      	beqz	s1,487a5e68 <.L16+0x24>
487a5e64:	6985      	li	s1,133
487a5e66:	1008      	b	487a5e78 <.L16+0x34>
487a5e68:	930e      	lw	v1,56(sp)
487a5e6a:	e840      	jalr	s0
487a5e6c:	9b81      	lw	a0,4(v1)
487a5e6e:	7284      	cmpi	v0,132
487a5e70:	6722      	move	s1,v0
487a5e72:	6102      	btnez	487a5e78 <.L16+0x34>
487a5e74:	6f01      	li	a3,1
487a5e76:	17e6      	b	487a5e44 <.L16>
487a5e78:	6751      	move	v0,s1
487a5e7a:	6477      	restore	56,ra,s0-s1
487a5e7c:	e8a0      	jrc	ra
487a5e7e:	0000      	addiu	s0,sp,0
487a5e80:	99dc      	lw	a2,112(s1)
487a5e82:	9fc1      	lw	a2,4(a3)
487a5e84:	99ac      	lw	a1,48(s1)
487a5e86:	9fc1      	lw	a2,4(a3)
487a5e88:	5de1      	sltiu	a1,225
487a5e8a:	487a      	addiu	s0,122
	...
Disassembly of section BANK_UI_1_31:

487e5800 <BANK_UI_1_31>:
	...
Disassembly of section BANK_UI_1_32:

48825800 <auto_connect_sync_rmt_device_list>:
48825800:	64f9      	save	72,ra,s0-s1
}

#endif


void __section__(".bank_4")com_btmanager_init(bool standby_exit)
{
    bool need_patch_download;
    bool need_power_on;
   
    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
    {
        return;
    }

#if (CASE_BOARD_TYPE == CASE_BOARD_DEMO)
    discrete_led_set(LED_ID_BT_LINK, LED_ALWAYS_ON, NULL);
#endif

    //BT MANAGER 全局变量初始化
    btmanager_global_var_init(standby_exit);

    //设置BT MANAGER状态为“上电初始化”
    change_btmanager_status(BTMANAGER_STATUS_POWERON);

    if (standby_exit == TRUE)
    {
        g_app_info_state.patch_download_flag = TRUE;
    }

    //判断是否是开机第一次进来
    if (g_app_info_state.patch_download_flag == FALSE)
    {
        g_bt_auto_connect_ctrl.auto_connect_type = AUTO_CONNECT_TYPE_STARTUP;
        if (g_need_auto_connect_timeout == 1)
        {
            g_bt_auto_connect_ctrl.auto_connect_type = AUTO_CONNECT_TYPE_TIMEOUT;
        }
        need_patch_download = TRUE;
    }
    else
    {
        g_bt_auto_connect_ctrl.auto_connect_type = AUTO_CONNECT_TYPE_MODE;
        need_patch_download = FALSE;
    }

    //判断是否需要上电
    if (g_app_info_state.bt_power_on == FALSE)
    {
        need_power_on = TRUE;
    }
    else
    {
        need_power_on = FALSE;
    }

    //启动蓝牙协议栈，会更新 g_bt_auto_connect_ctrl.enable_a2dp/enable_avrcp/enable_hfp 变量
    if (standby_exit == TRUE)
    {
        sys_disable_mem_use(SRAM_S3BT_BUFFER, SRAM_S3BT_BUFFER + SRAM_S3BT_SIZE);
        
        g_btmanager_gl_var.btstack_standby = FALSE;

        sys_vm_read(SRAM_S3BT_BUFFER, VM_S3BT_BT_STACK, VM_S3BT_BT_STACK_LEN);

        base_clear_vram_index(VM_S3BT_BT_STACK); 

        sys_base_set_exit_S3bt_scene();
    }
    install_bt_stack(standby_exit, need_patch_download, need_power_on);
    g_app_info_state.bt_power_on = TRUE;
    if (standby_exit == TRUE)
    {
        while (g_btmanager_gl_var.btstack_standby == FALSE)
        {
            sys_udelay(1);
        }

        sys_enable_mem_use(SRAM_S3BT_BUFFER, SRAM_S3BT_BUFFER + SRAM_S3BT_SIZE);
    }

    //获取设备配对列表，以决定是否回连
    if (standby_exit == FALSE)
    {
        auto_connect_sync_rmt_device_list();

        //打印版本号
        //print_btstack_ver();
    }

    //初始化完成时更新一次BTSTACK状态
    get_bt_stack_info();

    //自动化测试，回连控制由测试代码控制，不直接通过common控制
    if(g_app_info_state.autotest_mode == FALSE)
    {
        //创建回连定时器 2Hz定时器
        g_bt_auto_connect_ctrl.auto_connect_timer_id =
            set_app_timer(APP_TIMER_ATTRB_COM_CONTROL, 500, com_btmanager_autoconnect);
    }

    //从S3BT回来需要恢复蓝牙指示灯等UI提示
    if (standby_exit == TRUE)
    {
        com_btmanager_conn_status_change_handle(TRUE);
    }

    if (sys_shm_creat(SHARE_MEM_ID_BTSTACK_STATUS, &g_bt_stack_cur_info, sizeof(bt_stack_info_t)) == -1)
    {
        PRINT_ERR("btstack status shm create fail!!");
        while (1)
        {
            ; //nothing for QAC
        }
    }

    if ((g_btmanager_gl_var.enable_spp == 1) || (g_btmanager_gl_var.enable_ble == 1))
    {
        g_p_rcp_in_data_ctl = (bt_stack_pipe_t *) sys_shm_mount(SHARE_MEM_ID_BTRCPPIPE);
        if (g_p_rcp_in_data_ctl == NULL)
        {
            PRINT_ERR("btstack rcp in shm not exist!!");
            while (1)
            {
                ; //nothing for QAC
            }
        }
    }
	
}

void __section__(".bank_3") com_btmanager_exit(bool standby_enter, bool need_power_off)
{
    uint8 *temp_buffer;
    
    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
    {
        return;
    }

    if (g_bt_auto_connect_ctrl.auto_connect_timer_id != -1)
    {
        kill_app_timer(g_bt_auto_connect_ctrl.auto_connect_timer_id);
        g_bt_auto_connect_ctrl.auto_connect_timer_id = -1;
    }

    if (g_btmanager_gl_var.avrcp_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.avrcp_timer_id);
        g_btmanager_gl_var.avrcp_timer_id = -1;
    }

    if (g_btmanager_gl_var.a2dp_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.a2dp_timer_id);
        g_btmanager_gl_var.a2dp_timer_id = -1;
    }

    if (g_btmanager_gl_var.sniff_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.sniff_timer_id);
        g_btmanager_gl_var.sniff_timer_id = -1;
    }

    if (g_btmanager_gl_var.bat_rpt_timer_id != -1)
    {
        kill_app_timer(g_btmanager_gl_var.bat_rpt_timer_id);
        g_btmanager_gl_var.bat_rpt_timer_id = -1;
    }
        
    //for fast discover time kill 
    if (g_fast_discoverable_timer != -1)
    {
    	  libc_print("restart",0,0);
    	  kill_app_timer(g_fast_discoverable_timer);
        g_fast_discoverable_timer = -1;
    }   

    sys_shm_destroy(SHARE_MEM_ID_BTSTACK_STATUS);

    //关闭蓝牙指示灯
    discrete_led_set(LED_ID_BT_LINK, LED_ALWAYS_OFF, NULL);
#ifdef __PAIRED_HEADPHONE__
    if(g_app_info_state.charge_state != BAT_CHARGING)
    {
        //libc_print("off",0,0);
        discrete_led_set(LED_ID_BT_SYS, LED_ALWAYS_OFF, NULL);
    }
#endif

    if (standby_enter == TRUE)
    {//备份全局变量
        sd_sec_param_t sd_sec_param;

        libc_memset(SRAM_S3BT_BUFFER + 0x6000, 0x0, 0x200);

        temp_buffer = sys_malloc(sizeof(g_btmanager_gl_var) + sizeof(g_bt_auto_connect_ctrl));
        
        libc_memcpy(temp_buffer, &g_btmanager_gl_var, sizeof(g_btmanager_gl_var));
        libc_memcpy(temp_buffer + sizeof(g_btmanager_gl_var), &g_bt_auto_connect_ctrl, sizeof(g_bt_auto_connect_ctrl));

        //sd_sec_param.file_offset = NOR_S3BT_BT_MANAGER;
        //sd_sec_param.sram_addr = SRAM_S3BT_BUFFER;
        //sd_sec_param.sec_num = 1;
        //base_ext_vram_write(&sd_sec_param);

    }

    //卸载蓝牙协议栈
    if (standby_enter == TRUE)
    {
        g_btmanager_gl_var.btstack_standby = FALSE;
        libc_memset(SRAM_S3BT_BUFFER, 0x0, 0x6000);
    }
    uninstall_bt_stack(standby_enter, need_power_off);
    if (need_power_off == TRUE)
    {
        g_app_info_state.patch_download_flag = FALSE;
        g_app_info_state.bt_power_on = FALSE;
    }
    if (standby_enter == TRUE)
    {
        sd_sec_param_t sd_sec_param;

        while (g_btmanager_gl_var.btstack_standby == FALSE)
        {
            sys_udelay(1);
        }

        //sd_sec_param.file_offset = NOR_S3BT_BT_STACK;
        //sd_sec_param.sram_addr = SRAM_S3BT_BUFFER;
        //sd_sec_param.sec_num = 0x6000/0x200;
        //base_ext_vram_write(&sd_sec_param);

        //这里写入比较多的VRAM数据，需要特殊处理
        *(uint16 *)(SRAM_S3BT_BUFFER - 2) = VM_LARGE_DATA_TAG;
        
        sys_vm_write((SRAM_S3BT_BUFFER - 2), VM_S3BT_BT_STACK, VM_S3BT_BT_STACK_LEN);  

        //放到最后面再写，防止建表误判
        sys_vm_write(temp_buffer, VM_S3BT_BT_MANAGER, sizeof(g_btmanager_gl_var) + sizeof(g_bt_auto_connect_ctrl));

        sys_free(temp_buffer);
    }

    //删除BT STACK调频点
    adjust_freq_set_level(AP_BT_HIGH_PRIO,FREQ_NULL,FREQ_NULL);
}

static void btmanager_global_var_init(bool standby_exit)
{
    //uint8 temp_data[64];
    
    if (standby_exit == TRUE)
    {
    	uint8 *temp_data;

        temp_data = sys_malloc(sizeof(g_btmanager_gl_var) + sizeof(g_bt_auto_connect_ctrl));

        sys_vm_read(temp_data, VM_S3BT_BT_MANAGER, sizeof(g_btmanager_gl_var) + sizeof(g_bt_auto_connect_ctrl));

        libc_memcpy(&g_btmanager_gl_var, temp_data, sizeof(g_btmanager_gl_var));
        libc_memcpy(&g_bt_auto_connect_ctrl, (temp_data + sizeof(g_btmanager_gl_var)), sizeof(g_bt_auto_connect_ctrl));
        sys_free(temp_data);
    }
    else
    {//重新加载并初始化全局变量
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        send_once_flag=0;
        g_tws_m_linein_flag = 0;
#endif

        //初始化全局变量
        libc_memset(&g_btmanager_gl_var, 0x0, sizeof(g_btmanager_gl_var));

        //初始化非0变量
        g_btmanager_gl_var.avrcp_timer_id = -1;
        g_btmanager_gl_var.a2dp_timer_id = -1;
        g_btmanager_gl_var.sniff_timer_id = -1;
        g_btmanager_gl_var.bat_rpt_timer_id = -1;
        g_btmanager_gl_var.discoverable_flag = 0; //BT STACK默认不可见的
        
        //for fast disoverable mode 
        g_fast_discoverable_timer = -1;
        g_fast_discoverable_cnt = 0;

        //支持多少个远程设备
        g_btmanager_gl_var.support_dev_num = (uint8) com_get_config_default(BTMANAGER_SUPPORT_DEVICE_NUM);
        g_btmanager_gl_var.max_paired_num = (uint8) com_get_config_default(BTMANAGER_MAX_PAIRED_LIST_MEMBER);

        //初始化回连控制结构体
        libc_memset(&g_bt_auto_connect_ctrl, 0x0, sizeof(g_bt_auto_connect_ctrl));

        g_bt_auto_connect_ctrl.enable_auto_connect = (uint8) com_get_config_default(BTMANAGER_ENABLE_AUTO_CONNECT);
        g_bt_auto_connect_ctrl.reconnect_another_limit =
                (uint8) com_get_config_default(BTMANAGER_RECONNECT_ANOTHER_TIMES);
        g_bt_auto_connect_ctrl.auto_connect_count_timeout =
                (uint8) com_get_config_default(BTMANAGER_AUTO_CONNECT_COUNT_TIMEOUT);
        g_bt_auto_connect_ctrl.auto_connect_count_startup =
                (uint8) com_get_config_default(BTMANAGER_AUTO_CONNECT_COUNT_STARTUP);
        g_bt_auto_connect_ctrl.auto_connect_count_mode =
                (uint8) com_get_config_default(BTMANAGER_AUTO_CONNECT_COUNT_MODE);
        g_bt_auto_connect_ctrl.auto_connect_interval =
                (uint8) com_get_config_default(BTMANAGER_AUTO_CONNECT_INTERVAL);

        //g_bt_auto_connect_ctrl.connect_tick_cnt = 0;
        g_bt_auto_connect_ctrl.connect_tick_cnt = g_bt_auto_connect_ctrl.auto_connect_interval * 2;
    }

    if(g_btmanager_gl_var.support_dev_num > 1)
    {
        //支持的设备个数大于1个，则需要使用send buffer
        //需要系统去掉这部分空间的管理
        sys_disable_use_send_buffer();
    }

    g_btmanager_gl_var.last_call_last_timestamp = sys_get_ab_timer();

}

static void load_bt_stack_config(btstack_config_t *cfg)
{
// 配置管理，OTA时只需要SPP、BLE
#ifndef OTA_VERSION
    cfg->enable_a2dp = com_get_config_default(SETTING_APP_SUPPORT_BTPLAY);
    cfg->enable_a2dp_cp = com_get_config_default(BTMANAGER_ENABLE_A2DP_CP);
    cfg->enable_avdtp_aac = com_get_config_default(BTMANAGER_ENABLE_AVDTP_AAC);
    cfg->enable_avrcp = com_get_config_default(BTMANAGER_ENABLE_AVRCP);
    cfg->enable_avrcp_14 = com_get_config_default(BTMANAGER_ENABLE_AVRCP_14);
    cfg->enable_avrcp_volume_sync = com_get_config_default(BTMANAGER_ENABLE_AVRCP_VOLUME_SYNC);
    cfg->enable_hfp = (com_get_config_default(BTMANAGER_ENABLE_HFP) == 1)
            && (com_get_config_default(SETTING_APP_SUPPORT_BTCALL) == 1); //必须使能BTCALL应用才使能HFP服务
    cfg->enable_hfp_volume_sync = (cfg->enable_hfp == 1)
            && (com_get_config_default(BTMANAGER_ENABLE_HFP_VOLUME_SYNC) == 1); //必须使能HFP服务才使能HFP音量同步服务
    cfg->enable_hfp_bat_report = (cfg->enable_hfp == 1)
            && (com_get_config_default(BTMANAGER_ENABLE_HFP_BAT_REPORT) == 1); //先使能HFP服务才使能HFP电池电量同步服务
    cfg->enable_hfp_phonebook = (cfg->enable_hfp == 1)
            && (com_get_config_default(BTMANAGER_ENABLE_HFP_PHONEBOOK) == 1); //必须使能HFP服务才使能电话本同步服务
    cfg->enable_spp = com_get_config_default(BTMANAGER_ENABLE_SPP);
    cfg->enable_ble = com_get_config_default(BTMANAGER_ENABLE_BLE);
    cfg->enable_hid = com_get_config_default(BTMANAGER_ENABLE_HID);
    cfg->enable_3way_call = com_get_config_default(BTMANAGER_ENABLE_THREEWAY_CALL);
    cfg->enable_ancs = com_get_config_default(BTMANAGER_ENABLE_ANCS);
    cfg->enable_tip = com_get_config_default(BTMANAGER_ENABLE_TIP);
    cfg->enable_siri = com_get_config_default(BTMANAGER_ENABLE_SIRI);
#else
    cfg->enable_a2dp = com_get_config_default(SETTING_APP_SUPPORT_BTPLAY);
    cfg->enable_a2dp_cp = 0;
    cfg->enable_avdtp_aac = 0;
    cfg->enable_avrcp = 0;
    cfg->enable_avrcp_14 = 0;
    cfg->enable_avrcp_volume_sync = 0;
    cfg->enable_hfp = 0; //必须使能BTCALL应用才使能HFP服务
    cfg->enable_hfp_volume_sync = 0; //必须使能HFP服务才使能HFP音量同步服务
    cfg->enable_hfp_bat_report = 0; //必须使能HFP服务才使能HFP电池电量同步服务
    cfg->enable_hfp_phonebook = 0; //必须使能HFP服务才使能电话本同步服务
    cfg->enable_spp = 1;//com_get_config_default(BTMANAGER_ENABLE_SPP);
    cfg->enable_ble = 1;//com_get_config_default(BTMANAGER_ENABLE_BLE);
    cfg->enable_hid = 0;
    cfg->enable_3way_call = 0;
    cfg->enable_ancs = 0;
    cfg->enable_tip = 0;
    cfg->enable_siri = 0;

#endif

    if(g_app_info_state.stub_tools_type == STUB_PC_TOOL_ATT_MODE)
    {
        cfg->enable_hfp = 1;
        cfg->enable_a2dp = 1;
        cfg->enable_hfp_volume_sync = 0;
        cfg->enable_avrcp_volume_sync = 0;
    }
}

static void install_bt_stack(bool standby_exit, bool need_patch_download, bool need_power_on)
{
    msg_apps_t msg;
    create_app_param_t param;
    bt_stack_arg_t bt_stack_arg;
    uint8 save_bt_data;

    if(g_app_info_state.stub_tools_type != 0)
    {
        bt_stack_arg.work_mode = WORK_NORNAL | WORK_MEM_SMALL;    
    }
    else
    {
        bt_stack_arg.work_mode = WORK_NORNAL | WORK_MEM_NORMAL;    
    }
    
    bt_stack_arg.standby_exit = standby_exit;
    bt_stack_arg.need_patch_download = need_patch_download;
    bt_stack_arg.need_power_on = need_power_on;
    bt_stack_arg.uart_idle_timer = BT_UART_IDLE_TIMER;

    if (g_app_info_state.stub_tools_type == STUB_PC_TOOL_BTT_MODE)
    {
        bt_stack_arg.btt_test_mode = 1;
    }
    else
    {
        bt_stack_arg.btt_test_mode = 0;
    }
    load_bt_stack_config(&(bt_stack_arg.cfg));

    bt_stack_arg.volume = com_btmanager_avrcp_volume2avrcp_volume(sys_comval->volume[VOLUME_MODE_NORMAL]);

    sys_get_fw_info(&save_bt_data, FW_INFO_BT_SAVE_DATA, FW_INFO_BT_SAVE_DATA_LEN);

    if(save_bt_data == SAVE_BT_ALL)
    {
        bt_stack_arg.save_addr = 1;
        bt_stack_arg.save_name = 1;
    }
    else
    {
        if(save_bt_data == SAVE_BT_ADDR)
        {
            bt_stack_arg.save_addr = 1;
        }
        else
        {
            bt_stack_arg.save_addr = 0;
        }

        if(save_bt_data == SAVE_BT_NAME)
        {
            bt_stack_arg.save_name = 1;
        }
        else
        {
            bt_stack_arg.save_name = 0;
        }
    }

    bt_stack_arg.random_lap = com_btmanager_gen_random_lap();

    bt_stack_arg.max_paired_num = g_btmanager_gl_var.max_paired_num;
    bt_stack_arg.p_btstack_standby = &(g_btmanager_gl_var.btstack_standby);

    msg.type = MSG_CREAT_APP_EXT_SYNC;
    param.app_id = APP_ID_BTSTACK;
    param.data = &bt_stack_arg;
    msg.content.addr = &param;

    send_sync_msg(APP_ID_MANAGER, &msg, NULL, 0);

    //BT STACK 可以对 btstack_config_t cfg 进行修改，所以BT MANAGER 需要更新
    g_bt_auto_connect_ctrl.enable_a2dp = bt_stack_arg.cfg.enable_a2dp;
    g_bt_auto_connect_ctrl.enable_avrcp = bt_stack_arg.cfg.enable_avrcp;
    g_bt_auto_connect_ctrl.enable_hfp = bt_stack_arg.cfg.enable_hfp;
    g_bt_auto_connect_ctrl.enable_hid = bt_stack_arg.cfg.enable_hid;
    
    g_btmanager_gl_var.enable_spp = bt_stack_arg.cfg.enable_spp;
    g_btmanager_gl_var.enable_ble = bt_stack_arg.cfg.enable_ble;
    g_btmanager_gl_var.enable_avrcp_volume_sync = bt_stack_arg.cfg.enable_avrcp_volume_sync;
    g_btmanager_gl_var.enable_siri = bt_stack_arg.cfg.enable_siri;
}

static void uninstall_bt_stack(bool standby_enter, bool need_power_off)
{
    msg_apps_t msg;

    msg.type = MSG_KILL_APP_SYNC;
    msg.content.data[0] = APP_ID_BTSTACK;
    msg.content.data[1] = 0;
    if (standby_enter == TRUE)
    {
        msg.content.data[1] |= (1 << 0);
    }
    if (need_power_off == TRUE)
    {
        msg.content.data[1] |= (1 << 1);
    }

    //发送同步消息
    send_sync_msg(APP_ID_MANAGER, &msg, NULL, 0);
}

//获取设备配对列表，以决定是否回连
void __section__(".bank_2") auto_connect_sync_rmt_device_list(void)
{
48825802:	b4a3      	lw	a0,48825a8c <auto_connect_sync_rmt_device_list+0x28c>
    bt_paired_info_t *cur_list;

    msg_apps_t msg;
    uint8 i, j;
    uint8 auto_ptr = 0;
    uint8 support_dev_num_tmp;
    
    support_dev_num_tmp = g_btmanager_gl_var.support_dev_num;
48825804:	6d00      	li	a1,0
48825806:	d507      	sw	a1,28(sp)
48825808:	a44b      	lbu	v0,11(a0)
4882580a:	9607      	lw	a2,28(sp)

    cur_list = sys_malloc(sizeof(bt_paired_info_t));
4882580c:	b3a1      	lw	v1,48825a90 <auto_connect_sync_rmt_device_list+0x290>
4882580e:	d208      	sw	v0,32(sp)
48825810:	6cca      	li	a0,202
48825812:	6d04      	li	a1,4
48825814:	eb40      	jalr	v1
48825816:	6f16      	li	a3,22
48825818:	6722      	move	s1,v0
4882581a:	2a06      	bnez	v0,48825828 <auto_connect_sync_rmt_device_list+0x28>

    if(cur_list == NULL)
4882581c:	b39d      	lw	v1,48825a90 <auto_connect_sync_rmt_device_list+0x290>
    {
        libc_print("malloc pairlist fail", 0, 0);
4882581e:	0c76      	la	a0,488259f4 <auto_connect_sync_rmt_device_list+0x1f4>
48825820:	67a2      	move	a1,v0
48825822:	67c2      	move	a2,v0
48825824:	eb40      	jalr	v1
48825826:	6f4b      	li	a3,75
48825828:	b39b      	lw	v1,48825a94 <auto_connect_sync_rmt_device_list+0x294>
    }

#ifdef ENABLE_TRUE_WIRELESS_STEREO
    libc_memset(cur_list, 0x0, sizeof(bt_paired_info_t));
4882582a:	9507      	lw	a1,28(sp)
4882582c:	6791      	move	a0,s1
4882582e:	6eca      	li	a2,202
48825830:	eb40      	jalr	v1
48825832:	6f01      	li	a3,1
48825834:	9407      	lw	a0,28(sp)
    msg.type = MSG_BTSTACK_GET_TWS_PAIRED_LIST_SYNC;
    msg.content.addr = cur_list;
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48825836:	f0a1 6f08 	li	a3,2216
4882583a:	b298      	lw	v0,48825a98 <auto_connect_sync_rmt_device_list+0x298>
4882583c:	67c4      	move	a2,a0
4882583e:	d704      	sw	a3,16(sp)
48825840:	0504      	addiu	a1,sp,16
48825842:	67e4      	move	a3,a0
48825844:	ea40      	jalr	v0
48825846:	d105      	sw	s1,20(sp)
48825848:	f0c0 a1a8 	lbu	a1,200(s1)

    PRINT_INFO_INT("tws_dev_num:", cur_list->dev_num);
4882584c:	b391      	lw	v1,48825a90 <auto_connect_sync_rmt_device_list+0x290>
4882584e:	6e02      	li	a2,2
48825850:	0c6f      	la	a0,48825a0c <auto_connect_sync_rmt_device_list+0x20c>
48825852:	eb40      	jalr	v1
48825854:	6f4b      	li	a3,75
48825856:	f0c0 a1c8 	lbu	a2,200(s1)
    
    
    if ((cur_list->dev_num > 0) && (g_bt_auto_connect_ctrl.enable_auto_connect == 1))
4882585a:	262e      	beqz	a2,488258b8 <auto_connect_sync_rmt_device_list+0xb8>
4882585c:	b090      	lw	s0,48825a9c <auto_connect_sync_rmt_device_list+0x29c>
4882585e:	a080      	lbu	a0,0(s0)
48825860:	7401      	cmpi	a0,1
48825862:	612a      	btnez	488258b8 <auto_connect_sync_rmt_device_list+0xb8>
48825864:	b68f      	lw	a2,48825aa0 <auto_connect_sync_rmt_device_list+0x2a0>
    {
        if (g_ap_switch_var.forbid_auto_connect == FALSE)
48825866:	a6be      	lbu	a1,30(a2)
48825868:	2d02      	bnez	a1,4882586e <auto_connect_sync_rmt_device_list+0x6e>
4882586a:	6a01      	li	v0,1
        {
            g_bt_auto_connect_ctrl.need_auto_connect = 0x01;
4882586c:	c041      	sb	v0,1(s0)
4882586e:	a1b6      	lbu	a1,22(s1)
        }

        PRINT_INFO_INT("tws_mru_num:", cur_list->dev[0].mru_num);
48825870:	b388      	lw	v1,48825a90 <auto_connect_sync_rmt_device_list+0x290>
48825872:	0c6c      	la	a0,48825a20 <auto_connect_sync_rmt_device_list+0x220>
48825874:	6e02      	li	a2,2
48825876:	eb40      	jalr	v1
48825878:	6f4b      	li	a3,75
4882587a:	9707      	lw	a3,28(sp)

        libc_memcpy(g_bt_auto_connect_ctrl.dev_info[0].remote_addr.bytes,
4882587c:	b386      	lw	v1,48825a94 <auto_connect_sync_rmt_device_list+0x294>
4882587e:	6790      	move	a0,s0
48825880:	4c0e      	addiu	a0,14
48825882:	67b1      	move	a1,s1
48825884:	eb40      	jalr	v1
48825886:	6e06      	li	a2,6
48825888:	a1b7      	lbu	a1,23(s1)
                cur_list->dev[0].bd_addr.bytes, 6);
        g_bt_auto_connect_ctrl.dev_info[0].support_profile = cur_list->dev[0].support_profile;
4882588a:	6c01      	li	a0,1
        g_bt_auto_connect_ctrl.dev_info[0].conn_flag = 1;
4882588c:	c0b4      	sb	a1,20(s0)
4882588e:	c09d      	sb	a0,29(s0)
48825890:	a178      	lbu	v1,24(s1)

        g_bt_auto_connect_ctrl.dev_info[0].dev_type = cur_list->dev[0].dev_type;
48825892:	c07e      	sb	v1,30(s0)
48825894:	f0c0 a1e9 	lbu	a3,201(s1)
        g_bt_auto_connect_ctrl.tws_prior_role = cur_list->dev_role;
48825898:	7702      	cmpi	a3,2
        
        if (g_bt_auto_connect_ctrl.tws_prior_role == TWS_SLAVE)
4882589a:	c0e9      	sb	a3,9(s0)
4882589c:	6102      	btnez	488258a2 <auto_connect_sync_rmt_device_list+0xa2>
4882589e:	a8c5      	lhu	a2,10(s0)
        {
        	g_bt_auto_connect_ctrl.connect_tick_cnt = g_bt_auto_connect_ctrl.auto_connect_interval;
488258a0:	c8c6      	sh	a2,12(s0)
488258a2:	6c01      	li	a0,1
        }	

        auto_ptr = 1;
488258a4:	d407      	sw	a0,28(sp)
488258a6:	a0b4      	lbu	a1,20(s0)
        PRINT_INFO_INT("tws_profile:", g_bt_auto_connect_ctrl.dev_info[0].support_profile);
488258a8:	b37a      	lw	v1,48825a90 <auto_connect_sync_rmt_device_list+0x290>
488258aa:	6f4b      	li	a3,75
488258ac:	0c62      	la	a0,48825a34 <auto_connect_sync_rmt_device_list+0x234>
488258ae:	eb40      	jalr	v1
488258b0:	6e02      	li	a2,2
488258b2:	b27d      	lw	v0,48825aa4 <auto_connect_sync_rmt_device_list+0x2a4>
          
        check_id1 = 0;	             	
488258b4:	6f00      	li	a3,0
488258b6:	c2e0      	sb	a3,0(v0)
488258b8:	9408      	lw	a0,32(sp)
    }
    
    if (support_dev_num_tmp > 1)
488258ba:	5c02      	sltiu	a0,2
488258bc:	6103      	btnez	488258c4 <auto_connect_sync_rmt_device_list+0xc4>
488258be:	44af      	addiu	a1,a0,-1
    {
        support_dev_num_tmp--; 
488258c0:	ed11      	zeb	a1
488258c2:	d508      	sw	a1,32(sp)
488258c4:	b274      	lw	v0,48825a94 <auto_connect_sync_rmt_device_list+0x294>
    }
    
#endif    

    libc_memset(cur_list, 0x0, sizeof(bt_paired_info_t));
488258c6:	6791      	move	a0,s1
488258c8:	6d00      	li	a1,0
488258ca:	6eca      	li	a2,202
488258cc:	ea40      	jalr	v0
488258ce:	6f01      	li	a3,1
488258d0:	6c00      	li	a0,0
    msg.type = MSG_BTSTACK_GET_PAIRED_LIST_SYNC;
    msg.content.addr = cur_list;
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
488258d2:	f001 6f05 	li	a3,2053
488258d6:	b271      	lw	v0,48825a98 <auto_connect_sync_rmt_device_list+0x298>
488258d8:	67c4      	move	a2,a0
488258da:	d704      	sw	a3,16(sp)
488258dc:	0504      	addiu	a1,sp,16
488258de:	67e4      	move	a3,a0
488258e0:	ea40      	jalr	v0
488258e2:	d105      	sw	s1,20(sp)
488258e4:	f0c0 a1a8 	lbu	a1,200(s1)
    
    PRINT_INFO_INT("dev_num:", cur_list->dev_num);
488258e8:	b26a      	lw	v0,48825a90 <auto_connect_sync_rmt_device_list+0x290>
488258ea:	6e02      	li	a2,2
488258ec:	0c57      	la	a0,48825a48 <auto_connect_sync_rmt_device_list+0x248>
488258ee:	ea40      	jalr	v0
488258f0:	6f4b      	li	a3,75
488258f2:	f0c0 a1c8 	lbu	a2,200(s1)

    if ((cur_list->dev_num > 0) && (g_bt_auto_connect_ctrl.enable_auto_connect == 1))
488258f6:	2672      	beqz	a2,488259dc <auto_connect_sync_rmt_device_list+0x1dc>
488258f8:	b369      	lw	v1,48825a9c <auto_connect_sync_rmt_device_list+0x29c>
488258fa:	a380      	lbu	a0,0(v1)
488258fc:	7401      	cmpi	a0,1
488258fe:	616e      	btnez	488259dc <auto_connect_sync_rmt_device_list+0x1dc>
48825900:	b668      	lw	a2,48825aa0 <auto_connect_sync_rmt_device_list+0x2a0>
    {
        if (g_ap_switch_var.forbid_auto_connect == FALSE)
48825902:	a6be      	lbu	a1,30(a2)
48825904:	2d02      	bnez	a1,4882590a <auto_connect_sync_rmt_device_list+0x10a>
48825906:	6f01      	li	a3,1
        {
            g_bt_auto_connect_ctrl.need_auto_connect = 0x01;
48825908:	c3e1      	sb	a3,1(v1)
4882590a:	f0c0 a148 	lbu	v0,200(s1)
        }

        for (i = 0; i < cur_list->dev_num; i++)
4882590e:	6b00      	li	v1,0
48825910:	d306      	sw	v1,24(sp)
48825912:	2264      	beqz	v0,488259dc <auto_connect_sync_rmt_device_list+0x1dc>
48825914:	9206      	lw	v0,24(sp)
        {
            PRINT_INFO_INT("mru_num:", cur_list->dev[i].mru_num);
48825916:	6f19      	li	a3,25
48825918:	eaf8      	mult	v0,a3
4882591a:	b05e      	lw	s0,48825a90 <auto_connect_sync_rmt_device_list+0x290>
4882591c:	ed12      	mflo	a1
4882591e:	0c4f      	la	a0,48825a58 <auto_connect_sync_rmt_device_list+0x258>
48825920:	e539      	addu	a2,a1,s1
48825922:	a6b6      	lbu	a1,22(a2)
48825924:	6f4b      	li	a3,75
48825926:	e840      	jalr	s0
48825928:	6e02      	li	a2,2
4882592a:	9408      	lw	a0,32(sp)

            for (j = 0; j < support_dev_num_tmp; j++)
4882592c:	6800      	li	s0,0
4882592e:	244d      	beqz	a0,488259ca <auto_connect_sync_rmt_device_list+0x1ca>
48825930:	9306      	lw	v1,24(sp)
            {
                if (cur_list->dev[i].mru_num == (j + 1))
48825932:	6f19      	li	a3,25
48825934:	ebf8      	mult	v1,a3
48825936:	4081      	addiu	a0,s0,1
48825938:	ed12      	mflo	a1
4882593a:	e52d      	addu	v1,a1,s1
4882593c:	a3d6      	lbu	a2,22(v1)
4882593e:	d409      	sw	a0,36(sp)
48825940:	ee8e      	xor	a2,a0
48825942:	2e3c      	bnez	a2,488259bc <auto_connect_sync_rmt_device_list+0x1bc>
48825944:	9207      	lw	v0,28(sp)
                {
                    libc_memcpy(g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].remote_addr.bytes,
48825946:	6e12      	li	a2,18
48825948:	e21d      	addu	a3,v0,s0
4882594a:	d70a      	sw	a3,40(sp)
4882594c:	950a      	lw	a1,40(sp)
4882594e:	b454      	lw	a0,48825a9c <auto_connect_sync_rmt_device_list+0x29c>
48825950:	edd8      	mult	a1,a2
48825952:	4c0e      	addiu	a0,14
48825954:	e812      	mflo	s0
48825956:	b250      	lw	v0,48825a94 <auto_connect_sync_rmt_device_list+0x294>
48825958:	e091      	addu	a0,s0,a0
4882595a:	67a3      	move	a1,v1
4882595c:	6e06      	li	a2,6
4882595e:	6f00      	li	a3,0
48825960:	ea40      	jalr	v0
48825962:	d30c      	sw	v1,48(sp)
48825964:	950c      	lw	a1,48(sp)
                            cur_list->dev[i].bd_addr.bytes, 6);
                    g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].support_profile = cur_list->dev[i].support_profile;
48825966:	b44e      	lw	a0,48825a9c <auto_connect_sync_rmt_device_list+0x29c>
48825968:	a577      	lbu	v1,23(a1)
4882596a:	e081      	addu	s0,a0
4882596c:	6f01      	li	a3,1
                    g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].conn_flag = 1;
4882596e:	c074      	sb	v1,20(s0)
48825970:	c0fd      	sb	a3,29(s0)
48825972:	a5d8      	lbu	a2,24(a1)
#ifdef ENABLE_TRUE_WIRELESS_STEREO
                    g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].dev_type = cur_list->dev[i].dev_type;
48825974:	c0de      	sb	a2,30(s0)
48825976:	f0c0 a149 	lbu	v0,201(s1)
                    g_bt_auto_connect_ctrl.tws_prior_role = cur_list->dev_role;
4882597a:	7202      	cmpi	v0,2
                    if (g_bt_auto_connect_ctrl.tws_prior_role == TWS_SLAVE)
4882597c:	c449      	sb	v0,9(a0)
4882597e:	610d      	btnez	4882599a <auto_connect_sync_rmt_device_list+0x19a>
48825980:	acc5      	lhu	a2,10(a0)
                    {
                    	g_bt_auto_connect_ctrl.connect_tick_cnt = g_bt_auto_connect_ctrl.auto_connect_interval;
48825982:	ccc6      	sh	a2,12(a0)
48825984:	a07e      	lbu	v1,30(s0)
                    	
                    	//从箱如果连接过手机,也不进行手机回连
                    	if (g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].dev_type == NO_TWS_DEV)
48825986:	7301      	cmpi	v1,1
48825988:	6108      	btnez	4882599a <auto_connect_sync_rmt_device_list+0x19a>
4882598a:	6c00      	li	a0,0
                    	{
                    		g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].conn_flag = 0;
4882598c:	c09d      	sb	a0,29(s0)
4882598e:	6d00      	li	a1,0
                    		PRINT_INFO("not auto phone");
48825990:	b040      	lw	s0,48825a90 <auto_connect_sync_rmt_device_list+0x290>
48825992:	0c36      	la	a0,48825a68 <auto_connect_sync_rmt_device_list+0x268>
48825994:	67c5      	move	a2,a1
48825996:	e840      	jalr	s0
48825998:	6f4b      	li	a3,75
4882599a:	b244      	lw	v0,48825aa8 <auto_connect_sync_rmt_device_list+0x2a8>
                    	}	
                    }
                    once_auto_flag = 0;
4882599c:	b442      	lw	a0,48825aa4 <auto_connect_sync_rmt_device_list+0x2a4>
                    check_id1 = 0;	
4882599e:	6f00      	li	a3,0
488259a0:	c2e0      	sb	a3,0(v0)
488259a2:	c4e0      	sb	a3,0(a0)
488259a4:	900a      	lw	s0,40(sp)
#endif
                    PRINT_INFO_INT("profile:", g_bt_auto_connect_ctrl.dev_info[auto_ptr+j].support_profile);
488259a6:	6e12      	li	a2,18
488259a8:	e8d8      	mult	s0,a2
488259aa:	b53d      	lw	a1,48825a9c <auto_connect_sync_rmt_device_list+0x29c>
488259ac:	eb12      	mflo	v1
488259ae:	b239      	lw	v0,48825a90 <auto_connect_sync_rmt_device_list+0x290>
488259b0:	e3bd      	addu	a3,v1,a1
488259b2:	a7b4      	lbu	a1,20(a3)
488259b4:	0c32      	la	a0,48825a7c <auto_connect_sync_rmt_device_list+0x27c>
488259b6:	6e02      	li	a2,2
488259b8:	ea40      	jalr	v0
488259ba:	6f4b      	li	a3,75
488259bc:	677d      	move	v1,sp
488259be:	f020 a304 	lbu	s0,36(v1)
488259c2:	9508      	lw	a1,32(sp)
488259c4:	e811      	zeb	s0
488259c6:	e8a3      	sltu	s0,a1
488259c8:	61b3      	btnez	48825930 <auto_connect_sync_rmt_device_list+0x130>
488259ca:	9206      	lw	v0,24(sp)
488259cc:	42e1      	addiu	a3,v0,1
488259ce:	ef11      	zeb	a3
488259d0:	d706      	sw	a3,24(sp)
488259d2:	f0c0 a1c8 	lbu	a2,200(s1)
488259d6:	9406      	lw	a0,24(sp)
488259d8:	ecc3      	sltu	a0,a2
488259da:	619c      	btnez	48825914 <auto_connect_sync_rmt_device_list+0x114>
488259dc:	b22d      	lw	v0,48825a90 <auto_connect_sync_rmt_device_list+0x290>
                }
            }
        }
                	
    }

    sys_free(cur_list);
488259de:	6791      	move	a0,s1
488259e0:	6d04      	li	a1,4
488259e2:	6e00      	li	a2,0
488259e4:	ea40      	jalr	v0
488259e6:	6f17      	li	a3,23
488259e8:	b52e      	lw	a1,48825aa0 <auto_connect_sync_rmt_device_list+0x2a0>
    g_ap_switch_var.forbid_auto_connect = FALSE;
488259ea:	6b00      	li	v1,0
488259ec:	c57e      	sb	v1,30(a1)
488259ee:	6479      	restore	72,ra,s0-s1
488259f0:	e8a0      	jrc	ra
488259f2:	0000      	addiu	s0,sp,0
488259f4:	616d      	btnez	48825ad0 <print_btstack_ver+0x24>
488259f6:	6c6c      	li	a0,108
488259f8:	636f      	addiu	sp,888
488259fa:	7020      	cmpi	s0,32
488259fc:	6961      	li	s1,97
488259fe:	6c72      	li	a0,114
48825a00:	7369      	cmpi	v1,105
48825a02:	2074      	beqz	s0,48825aec <print_btstack_ver+0x40>
48825a04:	6166      	btnez	48825ad2 <print_btstack_ver+0x26>
48825a06:	6c69      	li	a0,105
48825a08:	0000      	addiu	s0,sp,0
48825a0a:	0000      	addiu	s0,sp,0
48825a0c:	493c      	addiu	s1,60
48825a0e:	203e      	beqz	s0,48825a8c <auto_connect_sync_rmt_device_list+0x28c>
48825a10:	7774      	cmpi	a3,116
48825a12:	5f73      	sltiu	a3,115
48825a14:	6564      	move	v1,a0
48825a16:	5f76      	sltiu	a3,118
48825a18:	756e      	cmpi	a1,110
48825a1a:	3a6d      	ld	v1,104(v0)
48825a1c:	0000      	addiu	s0,sp,0
48825a1e:	0000      	addiu	s0,sp,0
48825a20:	493c      	addiu	s1,60
48825a22:	203e      	beqz	s0,48825aa0 <auto_connect_sync_rmt_device_list+0x2a0>
48825a24:	7774      	cmpi	a3,116
48825a26:	5f73      	sltiu	a3,115
48825a28:	726d      	cmpi	v0,109
48825a2a:	5f75      	sltiu	a3,117
48825a2c:	756e      	cmpi	a1,110
48825a2e:	3a6d      	ld	v1,104(v0)
48825a30:	0000      	addiu	s0,sp,0
48825a32:	0000      	addiu	s0,sp,0
48825a34:	493c      	addiu	s1,60
48825a36:	203e      	beqz	s0,48825ab4 <print_btstack_ver+0x8>
48825a38:	7774      	cmpi	a3,116
48825a3a:	5f73      	sltiu	a3,115
48825a3c:	7270      	cmpi	v0,112
48825a3e:	666f      	0x666f
48825a40:	6c69      	li	a0,105
48825a42:	3a65      	ld	v1,40(v0)
48825a44:	0000      	addiu	s0,sp,0
48825a46:	0000      	addiu	s0,sp,0
48825a48:	493c      	addiu	s1,60
48825a4a:	203e      	beqz	s0,48825ac8 <print_btstack_ver+0x1c>
48825a4c:	6564      	move	v1,a0
48825a4e:	5f76      	sltiu	a3,118
48825a50:	756e      	cmpi	a1,110
48825a52:	3a6d      	ld	v1,104(v0)
48825a54:	0000      	addiu	s0,sp,0
48825a56:	0000      	addiu	s0,sp,0
48825a58:	493c      	addiu	s1,60
48825a5a:	203e      	beqz	s0,48825ad8 <print_btstack_ver+0x2c>
48825a5c:	726d      	cmpi	v0,109
48825a5e:	5f75      	sltiu	a3,117
48825a60:	756e      	cmpi	a1,110
48825a62:	3a6d      	ld	v1,104(v0)
48825a64:	0000      	addiu	s0,sp,0
48825a66:	0000      	addiu	s0,sp,0
48825a68:	493c      	addiu	s1,60
48825a6a:	203e      	beqz	s0,48825ae8 <print_btstack_ver+0x3c>
48825a6c:	6f6e      	li	a3,110
48825a6e:	2074      	beqz	s0,48825b58 <APP_AVRCP_Volume_Timer_Proc+0x30>
48825a70:	7561      	cmpi	a1,97
48825a72:	6f74      	li	a3,116
48825a74:	7020      	cmpi	s0,32
48825a76:	6f68      	li	a3,104
48825a78:	656e      	move	t3,a2
48825a7a:	0000      	addiu	s0,sp,0
48825a7c:	493c      	addiu	s1,60
48825a7e:	203e      	beqz	s0,48825afc <print_btstack_ver+0x50>
48825a80:	7270      	cmpi	v0,112
48825a82:	666f      	0x666f
48825a84:	6c69      	li	a0,105
48825a86:	3a65      	ld	v1,40(v0)
48825a88:	0000      	addiu	s0,sp,0
48825a8a:	0000      	addiu	s0,sp,0
48825a8c:	a33c      	lbu	s1,28(v1)
48825a8e:	9fc1      	lw	a2,4(a3)
48825a90:	e901      	sdbbp	8
48825a92:	bfc1      	lwu	a2,4(a3)
48825a94:	e905      	break	8
48825a96:	bfc1      	lwu	a2,4(a3)
48825a98:	0d15      	la	a1,48825aec <print_btstack_ver+0x40>
48825a9a:	bfc1      	lwu	a2,4(a3)
48825a9c:	a2c8      	lbu	a2,8(v0)
48825a9e:	9fc1      	lw	a2,4(a3)
48825aa0:	a19c      	lbu	a0,28(s1)
48825aa2:	9fc1      	lw	a2,4(a3)
48825aa4:	a35f      	lbu	v0,31(v1)
48825aa6:	9fc1      	lw	a2,4(a3)
48825aa8:	a361      	lbu	v1,1(v1)
48825aaa:	9fc1      	lw	a2,4(a3)

48825aac <print_btstack_ver>:
48825aac:	64f7      	save	56,ra,s0-s1
}

//打印BT STACK版本号
void __section__(".bank_2") print_btstack_ver(void)
{
48825aae:	0106      	addiu	s1,sp,24
    msg_apps_t msg;
    uint8 ver_buf[16];

    msg.type = MSG_BTSTACK_GET_BTSTACK_VER_SYNC;
    msg.content.addr = ver_buf;
48825ab0:	f001 6b12 	li	v1,2066
48825ab4:	6c00      	li	a0,0
    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48825ab6:	b21b      	lw	v0,48825b20 <print_btstack_ver+0x74>
48825ab8:	d304      	sw	v1,16(sp)
48825aba:	0504      	addiu	a1,sp,16
48825abc:	67c4      	move	a2,a0
48825abe:	67e4      	move	a3,a0
48825ac0:	ea40      	jalr	v0
48825ac2:	d105      	sw	s1,20(sp)
48825ac4:	b018      	lw	s0,48825b24 <print_btstack_ver+0x78>

    PRINT_INFO("BT STACK VER: ");
48825ac6:	6d00      	li	a1,0
48825ac8:	67c5      	move	a2,a1
48825aca:	0c0b      	la	a0,48825af4 <print_btstack_ver+0x48>
48825acc:	e840      	jalr	s0
48825ace:	6f4b      	li	a3,75
48825ad0:	6d00      	li	a1,0
    PRINT_INFO_STR(ver_buf);
48825ad2:	6791      	move	a0,s1
48825ad4:	67c5      	move	a2,a1
48825ad6:	e840      	jalr	s0
48825ad8:	6f4b      	li	a3,75
48825ada:	6d00      	li	a1,0

    PRINT_INFO("BT CONTROLLER VER: ");
48825adc:	67c5      	move	a2,a1
48825ade:	0c0b      	la	a0,48825b08 <print_btstack_ver+0x5c>
48825ae0:	e840      	jalr	s0
48825ae2:	6f4b      	li	a3,75
48825ae4:	6d00      	li	a1,0
    PRINT_INFO_STR(ver_buf + 8);
48825ae6:	0408      	addiu	a0,sp,32
48825ae8:	67c5      	move	a2,a1
48825aea:	e840      	jalr	s0
48825aec:	6f4b      	li	a3,75
48825aee:	6477      	restore	56,ra,s0-s1
48825af0:	e8a0      	jrc	ra
48825af2:	0000      	addiu	s0,sp,0
48825af4:	493c      	addiu	s1,60
48825af6:	203e      	beqz	s0,48825b74 <APP_AVRCP_Volume_Timer_Proc+0x4c>
48825af8:	5442      	slti	a0,66
48825afa:	5320      	slti	v1,32
48825afc:	4154      	daddiu	v0,s1,4
48825afe:	4b43      	addiu	v1,67
48825b00:	5620      	slti	a2,32
48825b02:	5245      	slti	v0,69
48825b04:	203a      	beqz	s0,48825b7a <APP_AVRCP_Volume_Timer_Proc+0x52>
48825b06:	0000      	addiu	s0,sp,0
48825b08:	493c      	addiu	s1,60
48825b0a:	203e      	beqz	s0,48825b88 <com_set_active_dev+0x4>
48825b0c:	5442      	slti	a0,66
48825b0e:	4320      	addiu	s1,v1,0
48825b10:	4e4f      	addiu	a2,79
48825b12:	5254      	slti	v0,84
48825b14:	4c4f      	addiu	a0,79
48825b16:	454c      	addiu	v0,a1,-4
48825b18:	2052      	beqz	s0,48825bbe <check_a2dp_status_ok+0x12>
48825b1a:	4556      	daddiu	v0,a1,6
48825b1c:	3a52      	ld	v0,144(v0)
48825b1e:	0020      	addiu	s0,sp,128
48825b20:	0d15      	la	a1,48825b74 <APP_AVRCP_Volume_Timer_Proc+0x4c>
48825b22:	bfc1      	lwu	a2,4(a3)
48825b24:	e901      	sdbbp	8
48825b26:	bfc1      	lwu	a2,4(a3)

48825b28 <APP_AVRCP_Volume_Timer_Proc>:
48825b28:	64e3      	save	24,ra,s0
48825b2a:	b413      	lw	a0,48825b74 <APP_AVRCP_Volume_Timer_Proc+0x4c>
48825b2c:	b213      	lw	v0,48825b78 <APP_AVRCP_Volume_Timer_Proc+0x50>
48825b2e:	9c60      	lw	v1,0(a0)
48825b30:	6e02      	li	a2,2
48825b32:	a31b      	lbu	s0,27(v1)
48825b34:	0c0c      	la	a0,48825b64 <APP_AVRCP_Volume_Timer_Proc+0x3c>
48825b36:	67b0      	move	a1,s0
48825b38:	ea40      	jalr	v0
48825b3a:	6f4b      	li	a3,75
48825b3c:	5809      	sltiu	s0,9
48825b3e:	4041      	addiu	v0,s0,1
48825b40:	6101      	btnez	48825b44 <APP_AVRCP_Volume_Timer_Proc+0x1c>
48825b42:	404f      	addiu	v0,s0,-1
48825b44:	6782      	move	a0,v0
48825b46:	701f      	cmpi	s0,31
48825b48:	ec11      	zeb	a0
48825b4a:	6002      	bteqz	48825b50 <APP_AVRCP_Volume_Timer_Proc+0x28>
48825b4c:	b20c      	lw	v0,48825b7c <APP_AVRCP_Volume_Timer_Proc+0x54>
48825b4e:	eac0      	jalrc	v0
48825b50:	b20b      	lw	v0,48825b78 <APP_AVRCP_Volume_Timer_Proc+0x50>
48825b52:	ea40      	jalr	v0
48825b54:	6790      	move	a0,s0
48825b56:	b50b      	lw	a1,48825b80 <APP_AVRCP_Volume_Timer_Proc+0x58>
48825b58:	6e01      	li	a2,1
48825b5a:	eecb      	neg	a2
48825b5c:	c5c8      	sb	a2,8(a1)
48825b5e:	6463      	restore	24,ra,s0
48825b60:	e8a0      	jrc	ra
48825b62:	0000      	addiu	s0,sp,0
48825b64:	493c      	addiu	s1,60
48825b66:	203e      	beqz	s0,48825be4 <check_a2dp_status_ok+0x38>
48825b68:	7075      	cmpi	s0,117
48825b6a:	6164      	btnez	48825c34 <com_set_ble_discoverable+0xc>
48825b6c:	6574      	move	s3,a0
48825b6e:	7620      	cmpi	a2,32
48825b70:	6c6f      	li	a0,111
48825b72:	003a      	addiu	s0,sp,232
48825b74:	999c      	lw	a0,112(s1)
48825b76:	9fc1      	lw	a2,4(a3)
48825b78:	e901      	sdbbp	8
48825b7a:	bfc1      	lwu	a2,4(a3)
48825b7c:	597d      	sltiu	s1,125
48825b7e:	4886      	addiu	s0,-122
48825b80:	a33c      	lbu	s1,28(v1)
48825b82:	9fc1      	lw	a2,4(a3)

48825b84 <com_set_active_dev>:
48825b84:	64c4      	save	32,ra
48825b86:	ec31      	zeh	a0
48825b88:	677d      	move	v1,sp
48825b8a:	d404      	sw	a0,16(sp)
48825b8c:	b206      	lw	v0,48825ba4 <com_set_active_dev+0x20>
48825b8e:	6c00      	li	a0,0
48825b90:	c3b4      	sb	a1,20(v1)
48825b92:	67c4      	move	a2,a0
48825b94:	0504      	addiu	a1,sp,16
48825b96:	ea40      	jalr	v0
48825b98:	67e4      	move	a3,a0
48825b9a:	b204      	lw	v0,48825ba8 <com_set_active_dev+0x24>
48825b9c:	eac0      	jalrc	v0
48825b9e:	6444      	restore	32,ra
48825ba0:	e8a0      	jrc	ra
48825ba2:	0000      	addiu	s0,sp,0
48825ba4:	0d15      	la	a1,48825bf8 <check_a2dp_status_ok+0x4c>
48825ba6:	bfc1      	lwu	a2,4(a3)
48825ba8:	0501      	addiu	a1,sp,4
48825baa:	bfc1      	lwu	a2,4(a3)

48825bac <check_a2dp_status_ok>:
48825bac:	64e3      	save	24,ra,s0
48825bae:	67a4      	move	a1,a0
48825bb0:	b00e      	lw	s0,48825be8 <check_a2dp_status_ok+0x3c>
48825bb2:	f001 6c08 	li	a0,2056
48825bb6:	e840      	jalr	s0
48825bb8:	ed11      	zeb	a1
48825bba:	b00d      	lw	s0,48825bec <check_a2dp_status_ok+0x40>
48825bbc:	8068      	lb	v1,8(s0)
48825bbe:	ea6f      	not	v0,v1
48825bc0:	2a11      	bnez	v0,48825be4 <check_a2dp_status_ok+0x38>
48825bc2:	a093      	lbu	a0,19(s0)
48825bc4:	6d04      	li	a1,4
48825bc6:	ecac      	and	a0,a1
48825bc8:	240d      	beqz	a0,48825be4 <check_a2dp_status_ok+0x38>
48825bca:	b70a      	lw	a3,48825bf0 <check_a2dp_status_ok+0x44>
48825bcc:	f020 a7ce 	lbu	a2,46(a3)
48825bd0:	7602      	cmpi	a2,2
48825bd2:	6008      	bteqz	48825be4 <check_a2dp_status_ok+0x38>
48825bd4:	b608      	lw	a2,48825bf4 <check_a2dp_status_ok+0x48>
48825bd6:	b209      	lw	v0,48825bf8 <check_a2dp_status_ok+0x4c>
48825bd8:	f71f 6c03 	li	a0,65283
48825bdc:	f7a1 6d00 	li	a1,4000
48825be0:	eac0      	jalrc	v0
48825be2:	c048      	sb	v0,8(s0)
48825be4:	6463      	restore	24,ra,s0
48825be6:	e8a0      	jrc	ra
48825be8:	5b85      	sltiu	v1,133
48825bea:	4882      	addiu	s0,-126
48825bec:	a33c      	lbu	s1,28(v1)
48825bee:	9fc1      	lw	a2,4(a3)
48825bf0:	a2fc      	lbu	a3,28(v0)
48825bf2:	9fc1      	lw	a2,4(a3)
48825bf4:	5b29      	sltiu	v1,41
48825bf6:	4882      	addiu	s0,-126
48825bf8:	5c4d      	sltiu	a0,77
48825bfa:	488e      	addiu	s0,-114

48825bfc <com_set_discoverable>:
48825bfc:	64c4      	save	32,ra
48825bfe:	b609      	lw	a2,48825c20 <com_set_discoverable+0x24>
48825c00:	ec11      	zeb	a0
48825c02:	677d      	move	v1,sp
48825c04:	c68e      	sb	a0,14(a2)
48825c06:	c394      	sb	a0,20(v1)
48825c08:	f001 6d03 	li	a1,2051
48825c0c:	6c00      	li	a0,0
48825c0e:	b206      	lw	v0,48825c24 <com_set_discoverable+0x28>
48825c10:	d504      	sw	a1,16(sp)
48825c12:	67c4      	move	a2,a0
48825c14:	0504      	addiu	a1,sp,16
48825c16:	ea40      	jalr	v0
48825c18:	67e4      	move	a3,a0
48825c1a:	6444      	restore	32,ra
48825c1c:	e8a0      	jrc	ra
48825c1e:	0000      	addiu	s0,sp,0
48825c20:	a33c      	lbu	s1,28(v1)
48825c22:	9fc1      	lw	a2,4(a3)
48825c24:	0d15      	la	a1,48825c78 <com_call_handle+0x10>
48825c26:	bfc1      	lwu	a2,4(a3)

48825c28 <com_set_ble_discoverable>:
48825c28:	64c4      	save	32,ra
48825c2a:	677d      	move	v1,sp
48825c2c:	c394      	sb	a0,20(v1)
48825c2e:	f001 6d10 	li	a1,2064
48825c32:	6c00      	li	a0,0
48825c34:	b204      	lw	v0,48825c44 <com_set_ble_discoverable+0x1c>
48825c36:	d504      	sw	a1,16(sp)
48825c38:	67c4      	move	a2,a0
48825c3a:	0504      	addiu	a1,sp,16
48825c3c:	ea40      	jalr	v0
48825c3e:	67e4      	move	a3,a0
48825c40:	6444      	restore	32,ra
48825c42:	e8a0      	jrc	ra
48825c44:	0d15      	la	a1,48825c94 <com_call_handle+0x2c>
48825c46:	bfc1      	lwu	a2,4(a3)

48825c48 <com_bt_sniff_control>:
48825c48:	64c4      	save	32,ra
48825c4a:	f001 6e0a 	li	a2,2058
48825c4e:	d604      	sw	a2,16(sp)
48825c50:	677d      	move	v1,sp
48825c52:	6e00      	li	a2,0
48825c54:	b204      	lw	v0,48825c64 <com_bt_sniff_control+0x1c>
48825c56:	c3b4      	sb	a1,20(v1)
48825c58:	67e6      	move	a3,a2
48825c5a:	ea40      	jalr	v0
48825c5c:	0504      	addiu	a1,sp,16
48825c5e:	6444      	restore	32,ra
48825c60:	e8a0      	jrc	ra
48825c62:	0000      	addiu	s0,sp,0
48825c64:	0d15      	la	a1,48825cb8 <start_avrcp_volume_update_timer+0x18>
48825c66:	bfc1      	lwu	a2,4(a3)

48825c68 <com_call_handle>:
48825c68:	64e4      	save	32,ra,s0
48825c6a:	6bff      	li	v1,255
48825c6c:	4b41      	addiu	v1,65
48825c6e:	b00a      	lw	s0,48825c94 <com_call_handle+0x2c>
48825c70:	6c05      	li	a0,5
48825c72:	d304      	sw	v1,16(sp)
48825c74:	0504      	addiu	a1,sp,16
48825c76:	6e00      	li	a2,0
48825c78:	e840      	jalr	s0
48825c7a:	6f18      	li	a3,24
48825c7c:	b007      	lw	s0,48825c98 <com_call_handle+0x30>
48825c7e:	8087      	lb	a0,7(s0)
48825c80:	ea8f      	not	v0,a0
48825c82:	2205      	beqz	v0,48825c8e <com_call_handle+0x26>
48825c84:	b206      	lw	v0,48825c9c <com_call_handle+0x34>
48825c86:	eac0      	jalrc	v0
48825c88:	6d01      	li	a1,1
48825c8a:	ecab      	neg	a0,a1
48825c8c:	c087      	sb	a0,7(s0)
48825c8e:	6464      	restore	32,ra,s0
48825c90:	e8a0      	jrc	ra
48825c92:	0000      	addiu	s0,sp,0
48825c94:	e901      	sdbbp	8
48825c96:	bfc1      	lwu	a2,4(a3)
48825c98:	a33c      	lbu	s1,28(v1)
48825c9a:	9fc1      	lw	a2,4(a3)
48825c9c:	5b01      	sltiu	v1,1
48825c9e:	488e      	addiu	s0,-114

48825ca0 <start_avrcp_volume_update_timer>:
48825ca0:	64e3      	save	24,ra,s0
48825ca2:	6d00      	li	a1,0
48825ca4:	b013      	lw	s0,48825cf0 <start_avrcp_volume_update_timer+0x50>
48825ca6:	0c0e      	la	a0,48825cdc <start_avrcp_volume_update_timer+0x3c>
48825ca8:	67c5      	move	a2,a1
48825caa:	e840      	jalr	s0
48825cac:	6f4b      	li	a3,75
48825cae:	b012      	lw	s0,48825cf4 <start_avrcp_volume_update_timer+0x54>
48825cb0:	8068      	lb	v1,8(s0)
48825cb2:	ea6f      	not	v0,v1
48825cb4:	2a11      	bnez	v0,48825cd8 <start_avrcp_volume_update_timer+0x38>
48825cb6:	a093      	lbu	a0,19(s0)
48825cb8:	6d04      	li	a1,4
48825cba:	ecac      	and	a0,a1
48825cbc:	240d      	beqz	a0,48825cd8 <start_avrcp_volume_update_timer+0x38>
48825cbe:	b70f      	lw	a3,48825cf8 <start_avrcp_volume_update_timer+0x58>
48825cc0:	f020 a7ce 	lbu	a2,46(a3)
48825cc4:	7602      	cmpi	a2,2
48825cc6:	6008      	bteqz	48825cd8 <start_avrcp_volume_update_timer+0x38>
48825cc8:	b60d      	lw	a2,48825cfc <start_avrcp_volume_update_timer+0x5c>
48825cca:	b20e      	lw	v0,48825d00 <start_avrcp_volume_update_timer+0x60>
48825ccc:	f71f 6c03 	li	a0,65283
48825cd0:	f7a1 6d00 	li	a1,4000
48825cd4:	eac0      	jalrc	v0
48825cd6:	c048      	sb	v0,8(s0)
48825cd8:	6463      	restore	24,ra,s0
48825cda:	e8a0      	jrc	ra
48825cdc:	493c      	addiu	s1,60
48825cde:	203e      	beqz	s0,48825d5c <start_battery_report_update_timer+0x18>
48825ce0:	7323      	cmpi	v1,35
48825ce2:	6174      	btnez	48825dcc <change_btmanager_status+0x8>
48825ce4:	7574      	cmpi	a1,116
48825ce6:	2073      	beqz	s0,48825dce <change_btmanager_status+0xa>
48825ce8:	6863      	li	s0,99
48825cea:	6e61      	li	a2,97
48825cec:	6567      	move	v1,a3
48825cee:	0000      	addiu	s0,sp,0
48825cf0:	e901      	sdbbp	8
48825cf2:	bfc1      	lwu	a2,4(a3)
48825cf4:	a33c      	lbu	s1,28(v1)
48825cf6:	9fc1      	lw	a2,4(a3)
48825cf8:	a2fc      	lbu	a3,28(v0)
48825cfa:	9fc1      	lw	a2,4(a3)
48825cfc:	5b29      	sltiu	v1,41
48825cfe:	4882      	addiu	s0,-126
48825d00:	5c4d      	sltiu	a0,77
48825d02:	488e      	addiu	s0,-114

48825d04 <com_btmanager_a2dp_handle_kill_a2dp_timer>:
48825d04:	64e3      	save	24,ra,s0
48825d06:	b006      	lw	s0,48825d1c <com_btmanager_a2dp_handle_kill_a2dp_timer+0x18>
48825d08:	b206      	lw	v0,48825d20 <com_btmanager_a2dp_handle_kill_a2dp_timer+0x1c>
48825d0a:	ea40      	jalr	v0
48825d0c:	8087      	lb	a0,7(s0)
48825d0e:	b306      	lw	v1,48825d24 <com_btmanager_a2dp_handle_kill_a2dp_timer+0x20>
48825d10:	ebc0      	jalrc	v1
48825d12:	6a01      	li	v0,1
48825d14:	ea4b      	neg	v0
48825d16:	c047      	sb	v0,7(s0)
48825d18:	6463      	restore	24,ra,s0
48825d1a:	e8a0      	jrc	ra
48825d1c:	a33c      	lbu	s1,28(v1)
48825d1e:	9fc1      	lw	a2,4(a3)
48825d20:	5b01      	sltiu	v1,1
48825d22:	488e      	addiu	s0,-114
48825d24:	053d      	addiu	a1,sp,244
48825d26:	bfc1      	lwu	a2,4(a3)

48825d28 <com_btmanager_a2dp_handle_kill_avrcp_timer>:
48825d28:	64e3      	save	24,ra,s0
48825d2a:	b005      	lw	s0,48825d3c <com_btmanager_a2dp_handle_kill_avrcp_timer+0x14>
48825d2c:	b205      	lw	v0,48825d40 <com_btmanager_a2dp_handle_kill_avrcp_timer+0x18>
48825d2e:	ea40      	jalr	v0
48825d30:	8088      	lb	a0,8(s0)
48825d32:	6a01      	li	v0,1
48825d34:	ea4b      	neg	v0
48825d36:	c048      	sb	v0,8(s0)
48825d38:	6463      	restore	24,ra,s0
48825d3a:	e8a0      	jrc	ra
48825d3c:	a33c      	lbu	s1,28(v1)
48825d3e:	9fc1      	lw	a2,4(a3)
48825d40:	5b01      	sltiu	v1,1
48825d42:	488e      	addiu	s0,-114

48825d44 <start_battery_report_update_timer>:
48825d44:	64e3      	save	24,ra,s0
48825d46:	b00a      	lw	s0,48825d6c <start_battery_report_update_timer+0x28>
48825d48:	808a      	lb	a0,10(s0)
48825d4a:	ea8f      	not	v0,a0
48825d4c:	2205      	beqz	v0,48825d58 <start_battery_report_update_timer+0x14>
48825d4e:	b209      	lw	v0,48825d70 <start_battery_report_update_timer+0x2c>
48825d50:	eac0      	jalrc	v0
48825d52:	6c01      	li	a0,1
48825d54:	eb8b      	neg	v1,a0
48825d56:	c06a      	sb	v1,10(s0)
48825d58:	b607      	lw	a2,48825d74 <start_battery_report_update_timer+0x30>
48825d5a:	b208      	lw	v0,48825d78 <start_battery_report_update_timer+0x34>
48825d5c:	f71f 6c03 	li	a0,65283
48825d60:	f3e0 6d08 	li	a1,1000
48825d64:	eac0      	jalrc	v0
48825d66:	c04a      	sb	v0,10(s0)
48825d68:	6463      	restore	24,ra,s0
48825d6a:	e8a0      	jrc	ra
48825d6c:	a33c      	lbu	s1,28(v1)
48825d6e:	9fc1      	lw	a2,4(a3)
48825d70:	5b01      	sltiu	v1,1
48825d72:	488e      	addiu	s0,-114
48825d74:	5c41      	sltiu	a0,65
48825d76:	4886      	addiu	s0,-122
48825d78:	5c4d      	sltiu	a0,77
48825d7a:	488e      	addiu	s0,-114

48825d7c <check_sniff_status_send_cmd>:
48825d7c:	64e3      	save	24,ra,s0
48825d7e:	6704      	move	s0,a0
48825d80:	e811      	zeb	s0
48825d82:	b20e      	lw	v0,48825db8 <check_sniff_status_send_cmd+0x3c>
48825d84:	67b0      	move	a1,s0
48825d86:	6e02      	li	a2,2
48825d88:	0c07      	la	a0,48825da4 <check_sniff_status_send_cmd+0x28>
48825d8a:	ea40      	jalr	v0
48825d8c:	6f4b      	li	a3,75
48825d8e:	6d12      	li	a1,18
48825d90:	e8b8      	mult	s0,a1
48825d92:	b40b      	lw	a0,48825dbc <check_sniff_status_send_cmd+0x40>
48825d94:	eb12      	mflo	v1
48825d96:	b20b      	lw	v0,48825dc0 <check_sniff_status_send_cmd+0x44>
48825d98:	e391      	addu	a0,v1,a0
48825d9a:	ea40      	jalr	v0
48825d9c:	6d01      	li	a1,1
48825d9e:	6463      	restore	24,ra,s0
48825da0:	e8a0      	jrc	ra
48825da2:	0000      	addiu	s0,sp,0
48825da4:	493c      	addiu	s1,60
48825da6:	203e      	beqz	s0,48825e24 <change_btmanager_status+0x60>
48825da8:	6863      	li	s0,99
48825daa:	6365      	addiu	sp,808
48825dac:	206b      	beqz	s0,48825e84 <change_btmanager_status+0xc0>
48825dae:	6e73      	li	a2,115
48825db0:	6669      	0x6669
48825db2:	3a66      	ld	v1,48(v0)
48825db4:	0000      	addiu	s0,sp,0
48825db6:	0000      	addiu	s0,sp,0
48825db8:	e901      	sdbbp	8
48825dba:	bfc1      	lwu	a2,4(a3)
48825dbc:	a301      	lbu	s0,1(v1)
48825dbe:	9fc1      	lw	a2,4(a3)
48825dc0:	5c49      	sltiu	a0,73
48825dc2:	4882      	addiu	s0,-126

48825dc4 <change_btmanager_status>:
48825dc4:	64e3      	save	24,ra,s0
48825dc6:	6704      	move	s0,a0
48825dc8:	e811      	zeb	s0
48825dca:	280c      	bnez	s0,48825de4 <change_btmanager_status+0x20>
48825dcc:	b238      	lw	v0,48825eac <change_btmanager_status+0xe8>
48825dce:	6c07      	li	a0,7
48825dd0:	6d01      	li	a1,1
48825dd2:	67d0      	move	a2,s0
48825dd4:	ea40      	jalr	v0
48825dd6:	6f03      	li	a3,3
48825dd8:	b236      	lw	v0,48825eb0 <change_btmanager_status+0xec>
48825dda:	0c1e      	la	a0,48825e50 <change_btmanager_status+0x8c>
48825ddc:	67b0      	move	a1,s0
48825dde:	67d0      	move	a2,s0
48825de0:	c20f      	sb	s0,15(v0)
48825de2:	1030      	b	48825e44 <change_btmanager_status+0x80>
48825de4:	7001      	cmpi	s0,1
48825de6:	610b      	btnez	48825dfe <change_btmanager_status+0x3a>
48825de8:	b231      	lw	v0,48825eac <change_btmanager_status+0xe8>
48825dea:	6c07      	li	a0,7
48825dec:	6d06      	li	a1,6
48825dee:	6e00      	li	a2,0
48825df0:	ea40      	jalr	v0
48825df2:	6f03      	li	a3,3
48825df4:	b42f      	lw	a0,48825eb0 <change_btmanager_status+0xec>
48825df6:	6b01      	li	v1,1
48825df8:	c46f      	sb	v1,15(a0)
48825dfa:	0c1b      	la	a0,48825e64 <change_btmanager_status+0xa0>
48825dfc:	1021      	b	48825e40 <change_btmanager_status+0x7c>
48825dfe:	7002      	cmpi	s0,2
48825e00:	6115      	btnez	48825e2c <change_btmanager_status+0x68>
48825e02:	b02c      	lw	s0,48825eb0 <change_btmanager_status+0xec>
48825e04:	a0af      	lbu	a1,15(s0)
48825e06:	7502      	cmpi	a1,2
48825e08:	6020      	bteqz	48825e4a <change_btmanager_status+0x86>
48825e0a:	b229      	lw	v0,48825eac <change_btmanager_status+0xe8>
48825e0c:	6c07      	li	a0,7
48825e0e:	6d0a      	li	a1,10
48825e10:	6e00      	li	a2,0
48825e12:	ea40      	jalr	v0
48825e14:	6f03      	li	a3,3
48825e16:	6f02      	li	a3,2
48825e18:	6d00      	li	a1,0
48825e1a:	b227      	lw	v0,48825eb4 <change_btmanager_status+0xf0>
48825e1c:	c0ef      	sb	a3,15(s0)
48825e1e:	67c5      	move	a2,a1
48825e20:	0c17      	la	a0,48825e7c <change_btmanager_status+0xb8>
48825e22:	ea40      	jalr	v0
48825e24:	6f4b      	li	a3,75
48825e26:	6e00      	li	a2,0
48825e28:	c0d0      	sb	a2,16(s0)
48825e2a:	100f      	b	48825e4a <change_btmanager_status+0x86>
48825e2c:	b220      	lw	v0,48825eac <change_btmanager_status+0xe8>
48825e2e:	6c07      	li	a0,7
48825e30:	6d0b      	li	a1,11
48825e32:	6e00      	li	a2,0
48825e34:	ea40      	jalr	v0
48825e36:	6f03      	li	a3,3
48825e38:	b41e      	lw	a0,48825eb0 <change_btmanager_status+0xec>
48825e3a:	6b03      	li	v1,3
48825e3c:	c46f      	sb	v1,15(a0)
48825e3e:	0c16      	la	a0,48825e94 <change_btmanager_status+0xd0>
48825e40:	6d00      	li	a1,0
48825e42:	67c5      	move	a2,a1
48825e44:	b21c      	lw	v0,48825eb4 <change_btmanager_status+0xf0>
48825e46:	ea40      	jalr	v0
48825e48:	6f4b      	li	a3,75
48825e4a:	6463      	restore	24,ra,s0
48825e4c:	e8a0      	jrc	ra
48825e4e:	0000      	addiu	s0,sp,0
48825e50:	493c      	addiu	s1,60
48825e52:	203e      	beqz	s0,48825ed0 <com_btmanager_set_scan_mode+0x18>
48825e54:	5442      	slti	a0,66
48825e56:	4d20      	addiu	a1,32
48825e58:	4e41      	addiu	a2,65
48825e5a:	4741      	addiu	v0,a3,1
48825e5c:	5245      	slti	v0,69
48825e5e:	4920      	addiu	s1,32
48825e60:	4c44      	addiu	a0,68
48825e62:	0045      	addiu	s0,sp,276
48825e64:	493c      	addiu	s1,60
48825e66:	203e      	beqz	s0,48825ee4 <com_btmanager_conn_status_change_handle+0x8>
48825e68:	5442      	slti	a0,66
48825e6a:	4d20      	addiu	a1,32
48825e6c:	4e41      	addiu	a2,65
48825e6e:	4741      	addiu	v0,a3,1
48825e70:	5245      	slti	v0,69
48825e72:	5720      	slti	a3,32
48825e74:	524f      	slti	v0,79
48825e76:	494b      	addiu	s1,75
48825e78:	474e      	addiu	v0,a3,-2
48825e7a:	0000      	addiu	s0,sp,0
48825e7c:	493c      	addiu	s1,60
48825e7e:	203e      	beqz	s0,48825efc <com_btmanager_conn_status_change_handle+0x20>
48825e80:	5442      	slti	a0,66
48825e82:	4d20      	addiu	a1,32
48825e84:	4e41      	addiu	a2,65
48825e86:	4741      	addiu	v0,a3,1
48825e88:	5245      	slti	v0,69
48825e8a:	4c20      	addiu	a0,32
48825e8c:	4e49      	addiu	a2,73
48825e8e:	494b      	addiu	s1,75
48825e90:	474e      	addiu	v0,a3,-2
48825e92:	0000      	addiu	s0,sp,0
48825e94:	493c      	addiu	s1,60
48825e96:	203e      	beqz	s0,48825f14 <com_btmanager_conn_status_change_handle+0x38>
48825e98:	5442      	slti	a0,66
48825e9a:	4d20      	addiu	a1,32
48825e9c:	4e41      	addiu	a2,65
48825e9e:	4741      	addiu	v0,a3,1
48825ea0:	5245      	slti	v0,69
48825ea2:	5020      	slti	s0,32
48825ea4:	574f      	slti	a3,79
48825ea6:	5245      	slti	v0,69
48825ea8:	4e4f      	addiu	a2,79
48825eaa:	0000      	addiu	s0,sp,0
48825eac:	e90d      	or	s1,s0
48825eae:	bfc1      	lwu	a2,4(a3)
48825eb0:	a33c      	lbu	s1,28(v1)
48825eb2:	9fc1      	lw	a2,4(a3)
48825eb4:	e901      	sdbbp	8
48825eb6:	bfc1      	lwu	a2,4(a3)

48825eb8 <com_btmanager_set_scan_mode>:
48825eb8:	64c4      	save	32,ra

void com_btmanager_set_scan_mode(uint8 mode)
{
48825eba:	677d      	move	v1,sp
    msg_apps_t msg;

    //g_btmanager_gl_var.discoverable_flag = mode;
    //0 is default mode 1 is fast mode 

    msg.type = MSG_BTSTACK_SET_SCAN_MODE;
    msg.content.data[0] = mode;
48825ebc:	c394      	sb	a0,20(v1)
48825ebe:	f021 6d0b 	li	a1,2091
48825ec2:	6c00      	li	a0,0

    send_sync_msg_btmanager(NULL, &msg, NULL, 0);
48825ec4:	b204      	lw	v0,48825ed4 <com_btmanager_set_scan_mode+0x1c>
48825ec6:	d504      	sw	a1,16(sp)
48825ec8:	67c4      	move	a2,a0
48825eca:	0504      	addiu	a1,sp,16
48825ecc:	ea40      	jalr	v0
48825ece:	67e4      	move	a3,a0
48825ed0:	6444      	restore	32,ra
48825ed2:	e8a0      	jrc	ra
48825ed4:	0d15      	la	a1,48825f24 <.LBB4>
48825ed6:	bfc1      	lwu	a2,4(a3)

48825ed8 <com_btstack_error_deal>:
48825ed8:	e8a0      	jrc	ra
	...

48825edc <com_btmanager_conn_status_change_handle>:
}


void __section__(".bank") com_btmanager_fast_discover_timer_proc(void)
{
	  g_fast_discoverable_cnt++;
	  if(g_fast_discoverable_cnt>=50)
	  {
	  	  kill_app_timer(g_fast_discoverable_timer);
        g_fast_discoverable_timer = -1;
        //send message to bt stack to change back san time
        com_btmanager_set_scan_mode(0);
	  } 
}


void __section__(".bank") com_btmanager_fast_discover_deal(uint8 type)
{
	   //init 
	   if(type == 1)
	   {
	       g_fast_discoverable_cnt = 0;
	       g_fast_discoverable_timer = set_app_timer(APP_TIMER_ATTRB_COM_CONTROL, 1000, com_btmanager_fast_discover_timer_proc);
	       //send message to bt stack to change back san time
	       com_btmanager_set_scan_mode(1);
	   }
	   else 
	   {
	   	  kill_app_timer(g_fast_discoverable_timer);
        g_fast_discoverable_timer = -1;
        //send message to bt stack to change back san time
        com_btmanager_set_scan_mode(0);
	   }
}

//有什么需要系统处理的可以通过发送系统消息来实现
void com_btmanager_conn_status_change_handle(bool init_flag)
{
    msg_apps_t msg;
    libc_print("--conn--",g_bt_stack_cur_info.conn_status,2);
    switch (g_bt_stack_cur_info.conn_status)
    {
        case CONN_STATUS_NONE:
        g_btmanager_gl_var.autoconnect_link_succ_flag = 0;
        g_need_reset_controller_timeout = 0;

        //关闭蓝牙指示灯
        discrete_led_set(LED_ID_BT_LINK, LED_ALWAYS_OFF, NULL);
        break;

        case CONN_STATUS_WAIT_PAIR:
        g_btmanager_gl_var.autoconnect_link_succ_flag = 0;
        g_need_reset_controller_timeout = 0;

        {
            led_duty_t bt_link_duty;

            bt_link_duty.cycle_count = -1;
            bt_link_duty.duty_on_time = 500;
            bt_link_duty.duty_off_time = 500;
            discrete_led_set(LED_ID_BT_LINK, LED_TWINKLE, &bt_link_duty);
#ifdef __PAIRED_HEADPHONE__
            bt_link_duty.cycle_count = -1;
            bt_link_duty.duty_on_time = 500;
            bt_link_duty.duty_off_time = 500;
            discrete_led_set(LED_ID_BT_SYS, LED_TWINKLE, &bt_link_duty);
#endif
        }

        if (init_flag == FALSE)
        {
            if (g_btmanager_gl_var.last_conn_status == CONN_STATUS_NONE)
            {
                //语音播报等待连接
                #if (SUPPORT_BT_COMMON_TTS == 1)
                com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_WAIT_BT_CON);
                #endif
            }
            else
            {
                //语音播报蓝牙断开&等待连接
                #if (SUPPORT_BT_COMMON_TTS == 1)
                com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_BT_DISCON);
                com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_WAIT_BT_CON);
                #endif
                #if (SUPPORT_BT_COMMON_KT == 1)
                keytone_play(KEYTONE_BTUNLINK, KEYTONE_NOBLOCK);
                #endif

                msg.type = MSG_BT_DISCONNECT;
                sys_mq_send(MQ_ID_SYS, &msg);
            }
        }
        //for set fast timer
        if(g_fast_discoverable_timer == -1)
        {
            //g_fast_discoverable_timer = set_app_timer(APP_TIMER_ATTRB_COM_CONTROL, 1000, com_btmanager_autoconnect);
            com_btmanager_fast_discover_deal(1);
        } 
        break;

        case CONN_STATUS_LINKED:
        g_btmanager_gl_var.autoconnect_link_succ_flag = 0;
        g_need_reset_controller_timeout = 0;

        //常亮蓝牙指示灯
        discrete_led_set(LED_ID_BT_LINK, LED_ALWAYS_ON, NULL);
#ifdef __PAIRED_HEADPHONE__        
        discrete_led_set(LED_ID_BT_SYS, LED_ALWAYS_OFF, NULL);
#endif        

        if (init_flag == FALSE)
        {
            //蓝牙连接成功
            #if (SUPPORT_BT_COMMON_TTS == 1)
            com_tts_state_play(TTS_MODE_ONLYONE | TTS_MODE_USEFIFO, (void *) TTS_BT_CON_OK);
            #endif
            #if (SUPPORT_BT_COMMON_KT == 1)
            keytone_play(KEYTONE_BTLINK, KEYTONE_NOBLOCK);
            #endif

            msg.type = MSG_BT_CONNECTED;
            sys_mq_send(MQ_ID_SYS, &msg);
        }
        
        if(g_fast_discoverable_timer != -1)
        {
        	  com_btmanager_fast_discover_deal(0);
        }
        
        break;

        case CONN_STATUS_ERROR:
        g_btmanager_gl_var.autoconnect_link_succ_flag = 0;
        g_need_reset_controller_timeout = 0;

        if (init_flag == FALSE)
        {
            com_btstack_error_deal();
        }
        break;

        default:
        break;
    }
}

//有什么需要系统处理的可以通过发送系统消息来实现
void com_btstack_error_deal(void)
{
    //硬件出错，立即退出，并设置测试失败
    if (g_bt_stack_cur_info.err_status == BT_ERR_HW)
    {
        //quit_bt_app(); //杀死bt stack，后续再统一设计
    }
    else if (g_bt_stack_cur_info.err_status == BT_ERR_PAGE_TIMEOUT)
    {
        //bt_clear_error(); //error不能由前台清除，要由协议栈自己调节

        //等待20s回连

    }
    else
    {
        ; //nothing for QAC
    }
}
48825edc:	64f7      	save	56,ra,s0-s1
48825ede:	b03f      	lw	s0,48825fd8 <.LBE6+0x86>
48825ee0:	ec11      	zeb	a0
48825ee2:	a0a0      	lbu	a1,0(s0)
48825ee4:	b33e      	lw	v1,48825fdc <.LBE6+0x8a>
48825ee6:	d408      	sw	a0,32(sp)
48825ee8:	6e02      	li	a2,2
48825eea:	0c39      	la	a0,48825fcc <.LBE6+0x7a>
48825eec:	eb40      	jalr	v1
48825eee:	6f4b      	li	a3,75
48825ef0:	a0c0      	lbu	a2,0(s0)
48825ef2:	7601      	cmpi	a2,1
48825ef4:	6012      	bteqz	48825f1a <.LBB3>
48825ef6:	5602      	slti	a2,2
48825ef8:	6002      	bteqz	48825efe <com_btmanager_conn_status_change_handle+0x22>
48825efa:	2606      	beqz	a2,48825f08 <com_btmanager_conn_status_change_handle+0x2c>
48825efc:	1065      	b	48825fc8 <.LBE6+0x76>
48825efe:	7603      	cmpi	a2,3
48825f00:	603c      	bteqz	48825f7a <.LBE6+0x28>
48825f02:	7604      	cmpi	a2,4
48825f04:	605c      	bteqz	48825fbe <.LBE6+0x6c>
48825f06:	1060      	b	48825fc8 <.LBE6+0x76>
48825f08:	b536      	lw	a1,48825fe0 <.LBE6+0x8e>
48825f0a:	b437      	lw	a0,48825fe4 <.LBE6+0x92>
48825f0c:	b237      	lw	v0,48825fe8 <.LBE6+0x96>
48825f0e:	c5d2      	sb	a2,18(a1)
48825f10:	c4c0      	sb	a2,0(a0)
48825f12:	67a6      	move	a1,a2
48825f14:	ea40      	jalr	v0
48825f16:	6786      	move	a0,a2
48825f18:	1057      	b	48825fc8 <.LBE6+0x76>

48825f1a <.LBB3>:
48825f1a:	673d      	move	s1,sp
48825f1c:	6801      	li	s0,1
48825f1e:	e80b      	neg	s0

48825f20 <.LBE3>:
48825f20:	b530      	lw	a1,48825fe0 <.LBE6+0x8e>
48825f22:	b231      	lw	v0,48825fe4 <.LBE6+0x92>

48825f24 <.LBB4>:
48825f24:	c118      	sb	s0,24(s1)
48825f26:	f1e0 6814 	li	s0,500

48825f2a <.LBE4>:
48825f2a:	6c00      	li	a0,0

48825f2c <.LBB5>:
48825f2c:	c90d      	sh	s0,26(s1)
48825f2e:	c90e      	sh	s0,28(s1)
48825f30:	b12e      	lw	s1,48825fe8 <.LBE6+0x96>

48825f32 <.LBE5>:
48825f32:	c592      	sb	a0,18(a1)
48825f34:	c280      	sb	a0,0(v0)

48825f36 <.LBB6>:
48825f36:	6d02      	li	a1,2
48825f38:	6c00      	li	a0,0
48825f3a:	e940      	jalr	s1
48825f3c:	0606      	addiu	a2,sp,24
48825f3e:	67fd      	move	a3,sp
48825f40:	6b01      	li	v1,1
48825f42:	eb6b      	neg	v1
48825f44:	0606      	addiu	a2,sp,24
48825f46:	c778      	sb	v1,24(a3)
48825f48:	cf0d      	sh	s0,26(a3)
48825f4a:	cf0e      	sh	s0,28(a3)
48825f4c:	6c01      	li	a0,1
48825f4e:	e940      	jalr	s1
48825f50:	6d02      	li	a1,2

48825f52 <.LBE6>:
48825f52:	9608      	lw	a2,32(sp)
48825f54:	2e0c      	bnez	a2,48825f6e <.LBE6+0x1c>
48825f56:	b723      	lw	a3,48825fe0 <.LBE6+0x8e>
48825f58:	a7c3      	lbu	a2,3(a3)
48825f5a:	2609      	beqz	a2,48825f6e <.LBE6+0x1c>
48825f5c:	6aff      	li	v0,255
48825f5e:	4a43      	addiu	v0,67
48825f60:	9608      	lw	a2,32(sp)
48825f62:	b31f      	lw	v1,48825fdc <.LBE6+0x8a>
48825f64:	d204      	sw	v0,16(sp)
48825f66:	6c05      	li	a0,5
48825f68:	0504      	addiu	a1,sp,16
48825f6a:	eb40      	jalr	v1
48825f6c:	6f18      	li	a3,24
48825f6e:	b620      	lw	a2,48825fec <.LBE6+0x9a>
48825f70:	8680      	lb	a0,0(a2)
48825f72:	ed8f      	not	a1,a0
48825f74:	6c01      	li	a0,1
48825f76:	251f      	beqz	a1,48825fb6 <.LBE6+0x64>
48825f78:	1027      	b	48825fc8 <.LBE6+0x76>
48825f7a:	b01b      	lw	s0,48825fe4 <.LBE6+0x92>
48825f7c:	6f00      	li	a3,0
48825f7e:	b319      	lw	v1,48825fe0 <.LBE6+0x8e>
48825f80:	c0e0      	sb	a3,0(s0)
48825f82:	6c00      	li	a0,0
48825f84:	b019      	lw	s0,48825fe8 <.LBE6+0x96>
48825f86:	67c4      	move	a2,a0
48825f88:	c3f2      	sb	a3,18(v1)
48825f8a:	e840      	jalr	s0
48825f8c:	6d01      	li	a1,1
48825f8e:	6d00      	li	a1,0
48825f90:	6c01      	li	a0,1
48825f92:	e840      	jalr	s0
48825f94:	67c5      	move	a2,a1
48825f96:	9208      	lw	v0,32(sp)
48825f98:	2a09      	bnez	v0,48825fac <.LBE6+0x5a>
48825f9a:	f140 4a01 	addiu	v0,321
48825f9e:	9608      	lw	a2,32(sp)
48825fa0:	b30f      	lw	v1,48825fdc <.LBE6+0x8a>
48825fa2:	d204      	sw	v0,16(sp)
48825fa4:	6c05      	li	a0,5
48825fa6:	0504      	addiu	a1,sp,16
48825fa8:	eb40      	jalr	v1
48825faa:	6f18      	li	a3,24
48825fac:	b410      	lw	a0,48825fec <.LBE6+0x9a>
48825fae:	84a0      	lb	a1,0(a0)
48825fb0:	eaaf      	not	v0,a1
48825fb2:	220a      	beqz	v0,48825fc8 <.LBE6+0x76>
48825fb4:	6c00      	li	a0,0
48825fb6:	1831 974e 	jal	48865d38 <com_btmanager_fast_discover_deal>
48825fba:	6500      	nop
48825fbc:	1005      	b	48825fc8 <.LBE6+0x76>
48825fbe:	b309      	lw	v1,48825fe0 <.LBE6+0x8e>
48825fc0:	b609      	lw	a2,48825fe4 <.LBE6+0x92>
48825fc2:	6f00      	li	a3,0
48825fc4:	c3f2      	sb	a3,18(v1)
48825fc6:	c6e0      	sb	a3,0(a2)
48825fc8:	6477      	restore	56,ra,s0-s1
48825fca:	e8a0      	jrc	ra
48825fcc:	2d2d      	bnez	a1,48826028 <.LBE6+0xd6>
48825fce:	6f63      	li	a3,99
48825fd0:	6e6e      	li	a2,110
48825fd2:	2d2d      	bnez	a1,4882602e <.LBE6+0xdc>
48825fd4:	0000      	addiu	s0,sp,0
48825fd6:	0000      	addiu	s0,sp,0
48825fd8:	a2fc      	lbu	a3,28(v0)
48825fda:	9fc1      	lw	a2,4(a3)
48825fdc:	e901      	sdbbp	8
48825fde:	bfc1      	lwu	a2,4(a3)
48825fe0:	a33c      	lbu	s1,28(v1)
48825fe2:	9fc1      	lw	a2,4(a3)
48825fe4:	9a27      	lw	s1,28(v0)
48825fe6:	9fc1      	lw	a2,4(a3)
48825fe8:	5885      	sltiu	s0,133
48825fea:	485e      	addiu	s0,94
48825fec:	a358      	lbu	v0,24(v1)
48825fee:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_33:

48865800 <com_btmanager_avrcp_op>:
48865800:	64c4      	save	32,ra
//return 0: ok
//return -1: opid invalid
//return -2: avrcp not connect 
int com_btmanager_avrcp_op(btplay_avrcp_opid_e opid)
{
48865802:	ec11      	zeb	a0
48865804:	6a01      	li	v0,1
    msg_apps_t msg;

    if (opid >= BTPLAY_AVRCP_MAXID)
    {
        return -1;
48865806:	5c08      	sltiu	a0,8
48865808:	ea4b      	neg	v0
4886580a:	6019      	bteqz	4886583e <com_btmanager_avrcp_op+0x3e>
4886580c:	b70e      	lw	a3,48865844 <com_btmanager_avrcp_op+0x44>
    }

//    if ((g_bt_stack_cur_info.serv_conn & AVRCP_CONNECTED_MY) == 0)
//    {
//        return -2;
//    }

    msg.type = MSG_BTSTACK_AVRCP_TX_OPID_SYNC;
    msg.content.data[0] = s_btstack_avrcp_ops[opid].op_type;
4886580e:	3684      	sll	a2,a0,1
48865810:	e6f5      	addu	a1,a2,a3
48865812:	f600 4a02 	addiu	v0,1538
48865816:	a560      	lbu	v1,0(a1)
48865818:	d204      	sw	v0,16(sp)
4886581a:	a541      	lbu	v0,1(a1)
    msg.content.data[1] = s_btstack_avrcp_ops[opid].op_id;
4886581c:	b50b      	lw	a1,48865848 <com_btmanager_avrcp_op+0x48>

    //发送同步消息
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes, &msg, NULL, 0);
4886581e:	6e12      	li	a2,18
48865820:	f020 a5e8 	lbu	a3,40(a1)
48865824:	679d      	move	a0,sp
48865826:	efd8      	mult	a3,a2
48865828:	c474      	sb	v1,20(a0)
4886582a:	eb12      	mflo	v1
4886582c:	c455      	sb	v0,21(a0)
4886582e:	6e00      	li	a2,0
48865830:	4585      	addiu	a0,a1,5
48865832:	b207      	lw	v0,4886584c <com_btmanager_avrcp_op+0x4c>
48865834:	e391      	addu	a0,v1,a0
48865836:	0504      	addiu	a1,sp,16
48865838:	ea40      	jalr	v0
4886583a:	67e6      	move	a3,a2
4886583c:	6a00      	li	v0,0

    return 0;
4886583e:	6444      	restore	32,ra
}
48865840:	e8a0      	jrc	ra
48865842:	0000      	addiu	s0,sp,0
48865844:	59ec      	sltiu	s1,236
48865846:	4886      	addiu	s0,-122
48865848:	a2fc      	lbu	a3,28(v0)
4886584a:	9fc1      	lw	a2,4(a3)
4886584c:	0d15      	la	a1,488658a0 <com_btmanager_avrcp_set_volume_to_soundbox+0x24>
4886584e:	bfc1      	lwu	a2,4(a3)

48865850 <com_btmanager_avrcp_ind>:
48865850:	64c3      	save	24,ra

#ifdef __BQB_TEST_PROFILE_
void com_btmanager_delay_report(void)
{
    msg_apps_t msg;

    msg.type = MSG_BTSTACK_DELAY_REPORT_SYNC;

    //发送同步消息
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes, &msg, NULL, 0);
}
#endif

app_result_e com_btmanager_avrcp_ind(uint8 op_id, bool tts_flag)
{
48865852:	ec11      	zeb	a0
48865854:	7441      	cmpi	a0,65
    app_result_e result = RESULT_NULL;

    switch (op_id)
48865856:	ed11      	zeb	a1
48865858:	6003      	bteqz	48865860 <com_btmanager_avrcp_ind+0x10>
4886585a:	7442      	cmpi	a0,66
4886585c:	6004      	bteqz	48865866 <com_btmanager_avrcp_ind+0x16>
4886585e:	1006      	b	4886586c <com_btmanager_avrcp_ind+0x1c>
48865860:	b205      	lw	v0,48865874 <com_btmanager_avrcp_ind+0x24>
    {
        case AVRCP_OPID_VOLUME_UP:
        com_volume_add(tts_flag);
48865862:	6785      	move	a0,a1
48865864:	1002      	b	4886586a <com_btmanager_avrcp_ind+0x1a>
48865866:	b205      	lw	v0,48865878 <com_btmanager_avrcp_ind+0x28>
        break;

        case AVRCP_OPID_VOLUME_DOWN:
        com_volume_sub(tts_flag);
48865868:	6785      	move	a0,a1
4886586a:	eac0      	jalrc	v0
4886586c:	6a00      	li	v0,0
        break;

        default:
        break;
    }

    return result;
}
4886586e:	6443      	restore	24,ra
48865870:	e8a0      	jrc	ra
48865872:	0000      	addiu	s0,sp,0
48865874:	580d      	sltiu	s0,13
48865876:	4832      	addiu	s0,50
48865878:	5851      	sltiu	s0,81
4886587a:	4832      	addiu	s0,50

4886587c <com_btmanager_avrcp_set_volume_to_soundbox>:
4886587c:	64c3      	save	24,ra

//NOTE:IPhone手机切换歌曲时，会将IPhone 0-16 <--> 0-127 AVRCP VOLUME 整齐音量值设置到音箱端，
//所以有可能音量会微调，这是正常情况
//小机往手机同步定时器已经启动时,不响应手机向小机同步音量
app_result_e com_btmanager_avrcp_set_volume_to_soundbox(uint8 vol, bool tts_flag)
{
4886587e:	b716      	lw	a3,488658d4 <com_btmanager_avrcp_set_volume_to_soundbox+0x58>
    app_result_e result = RESULT_NULL;
    uint16 tmp_volume, tmp_volume_remainder;

#ifndef ENABLE_TRUE_WIRELESS_STEREO
    if ((g_this_app_info->app_id == APP_ID_BTPLAY) && (g_btmanager_gl_var.avrcp_timer_id == -1))
#else    	
    if (((g_this_app_info->app_id == APP_ID_BTPLAY) || (g_this_app_info->app_id == APP_ID_LINEIN)) 
48865880:	ec11      	zeb	a0
48865882:	9fc0      	lw	a2,0(a3)
48865884:	ed11      	zeb	a1
48865886:	a661      	lbu	v1,1(a2)
48865888:	434f      	addiu	v0,v1,-1
4886588a:	ea11      	zeb	v0
4886588c:	5a02      	sltiu	v0,2
4886588e:	601f      	bteqz	488658ce <com_btmanager_avrcp_set_volume_to_soundbox+0x52>
48865890:	b612      	lw	a2,488658d8 <com_btmanager_avrcp_set_volume_to_soundbox+0x5c>
48865892:	8668      	lb	v1,8(a2)
48865894:	ea6f      	not	v0,v1
48865896:	2a1b      	bnez	v0,488658ce <com_btmanager_avrcp_set_volume_to_soundbox+0x52>
48865898:	3394      	sll	v1,a0,5
    	     && (g_btmanager_gl_var.avrcp_timer_id == -1))
#endif    	     
    {
        tmp_volume = (uint16) vol * VOLUME_VALUE_MAX;
4886589a:	e38b      	subu	v0,v1,a0
4886589c:	ea31      	zeh	v0
4886589e:	6f7f      	li	a3,127
        tmp_volume_remainder = tmp_volume % AVRCP_ABSOLUTE_VOLUME_MAX;
488658a0:	eafb      	divu	zero,v0,a3
488658a2:	ea12      	mflo	v0
        tmp_volume = tmp_volume / AVRCP_ABSOLUTE_VOLUME_MAX;
488658a4:	ec10      	mfhi	a0
        //if (tmp_volume_remainder >= (AVRCP_ABSOLUTE_VOLUME_MAX - VOLUME_VALUE_MAX))
        if (tmp_volume_remainder != 0)
488658a6:	ea31      	zeh	v0
488658a8:	2402      	beqz	a0,488658ae <com_btmanager_avrcp_set_volume_to_soundbox+0x32>
488658aa:	4241      	addiu	v0,v0,1
        { //防止音量在soundbox <--> phone 之间同步不对称
            tmp_volume++;
488658ac:	ea31      	zeh	v0
488658ae:	5a20      	sltiu	v0,32
        }
        tmp_volume = (tmp_volume > VOLUME_VALUE_MAX) ? VOLUME_VALUE_MAX : tmp_volume;
488658b0:	6101      	btnez	488658b4 <com_btmanager_avrcp_set_volume_to_soundbox+0x38>
488658b2:	6a1f      	li	v0,31
488658b4:	6782      	move	a0,v0
488658b6:	ec31      	zeh	a0
488658b8:	2d03      	bnez	a1,488658c0 <com_btmanager_avrcp_set_volume_to_soundbox+0x44>

        if (tts_flag == FALSE)
488658ba:	ec11      	zeb	a0
        {
          //  libc_print("tts flag F",0,0);
            com_volume_set((uint8) tmp_volume, SET_VOLUME_VIEW | SET_VOLUME_TTS);
488658bc:	45a3      	addiu	a1,a1,3
488658be:	1005      	b	488658ca <com_btmanager_avrcp_set_volume_to_soundbox+0x4e>
488658c0:	b608      	lw	a2,488658e0 <com_btmanager_avrcp_set_volume_to_soundbox+0x64>
        }
        else
        {
           //  libc_print("tts flag T",0,0);
            //TTS正在播放的过程中，不更新系统音量，避免TTS在播报的过程中音量被修改
           // if (g_tts_play_info.status == TTS_STATUS_PLAYING)
            if (g_tts_play_info.status >= TTS_STATUS_READY)
488658c2:	a6a4      	lbu	a1,4(a2)
488658c4:	2d04      	bnez	a1,488658ce <com_btmanager_avrcp_set_volume_to_soundbox+0x52>
488658c6:	ec11      	zeb	a0
            {
                
            }
            else
            {
                com_volume_set((uint8) tmp_volume, SET_VOLUME_TTS);
488658c8:	6d02      	li	a1,2
488658ca:	b205      	lw	v0,488658dc <com_btmanager_avrcp_set_volume_to_soundbox+0x60>
488658cc:	eac0      	jalrc	v0
488658ce:	6a00      	li	v0,0
            }
            //com_volume_set((uint8) tmp_volume, SET_VOLUME_TTS);
        }
    }

    return result;
}
488658d0:	6443      	restore	24,ra
488658d2:	e8a0      	jrc	ra
488658d4:	9990      	lw	a0,64(s1)
488658d6:	9fc1      	lw	a2,4(a3)
488658d8:	a33c      	lbu	s1,28(v1)
488658da:	9fc1      	lw	a2,4(a3)
488658dc:	587d      	sltiu	s0,125
488658de:	4832      	addiu	s0,50
488658e0:	a1f4      	lbu	a3,20(s1)
488658e2:	9fc1      	lw	a2,4(a3)

488658e4 <com_btmanager_avrcp_volume2avrcp_volume>:
488658e4:	ec11      	zeb	a0

uint8 com_btmanager_avrcp_volume2avrcp_volume(uint8 vol)
{
488658e6:	359c      	sll	a1,a0,7
    uint16 tmp_volume;

    tmp_volume = (uint16) vol;
    tmp_volume = (uint16) ((tmp_volume * AVRCP_ABSOLUTE_VOLUME_MAX) / VOLUME_VALUE_MAX);
488658e8:	e58b      	subu	v0,a1,a0
488658ea:	6b1f      	li	v1,31
488658ec:	ea7a      	div	zero,v0,v1
488658ee:	ea12      	mflo	v0

    return (uint8) tmp_volume;
}
488658f0:	e820      	jr	ra
488658f2:	ea11      	zeb	v0

488658f4 <__avrcp_update_volume_to_phone>:
488658f4:	64e4      	save	32,ra,s0

static int __avrcp_update_volume_to_phone(uint8 vol, uint8 *bd)
{
488658f6:	6705      	move	s0,a1
488658f8:	b208      	lw	v0,48865918 <__avrcp_update_volume_to_phone+0x24>
    msg_apps_t msg;

    msg.type = MSG_BTSTACK_AVRCP_VOLUME_SYNC;
    msg.content.data[0] = com_btmanager_avrcp_volume2avrcp_volume(vol);
488658fa:	f600 6d02 	li	a1,1538
488658fe:	ea40      	jalr	v0
48865900:	d504      	sw	a1,16(sp)
48865902:	677d      	move	v1,sp
48865904:	c354      	sb	v0,20(v1)
48865906:	6e00      	li	a2,0

    send_sync_msg_btmanager(bd, &msg, NULL, 0);
48865908:	b205      	lw	v0,4886591c <__avrcp_update_volume_to_phone+0x28>
4886590a:	6790      	move	a0,s0
4886590c:	0504      	addiu	a1,sp,16
4886590e:	ea40      	jalr	v0
48865910:	67e6      	move	a3,a2
48865912:	6a00      	li	v0,0

    return 0;
}
48865914:	6464      	restore	32,ra,s0
48865916:	e8a0      	jrc	ra
48865918:	58e5      	sltiu	s0,229
4886591a:	4886      	addiu	s0,-122
4886591c:	0d15      	la	a1,48865970 <com_btmanager_tws_send+0x50>
4886591e:	bfc1      	lwu	a2,4(a3)

48865920 <com_btmanager_tws_send>:
48865920:	64f6      	save	48,ra,s0-s1

#ifdef ENABLE_TRUE_WIRELESS_STEREO

//master to slave interface
#if 0
int com_btmanager_tws_send(uint8 data, uint8 *bd,uint32 type)
{
	msg_apps_t  tws_msg;
	
	  tws_msg.type = type;
	  data=com_btmanager_avrcp_volume2avrcp_volume(data);
	  tws_msg.content.data[0] = data;
	  libc_print("data:",data,2);
	  send_sync_msg_btmanager(bd, &tws_msg, NULL, 0);
	
	  return 0;

}

#endif

/*
    parameters:
    data:cmd flag
    data1~data3:cmd value
*/
int com_btmanager_tws_send(uint8 data,uint8 data1, uint8 data2,uint8 data3,uint32 type)
{
48865922:	6704      	move	s0,a0
48865924:	9210      	lw	v0,64(sp)
48865926:	6726      	move	s1,a2
48865928:	ef11      	zeb	a3
4886592a:	e811      	zeb	s0
4886592c:	ed11      	zeb	a1
4886592e:	e911      	zeb	s1
48865930:	d706      	sw	a3,24(sp)
48865932:	d204      	sw	v0,16(sp)
    
      msg_apps_t  tws_msg;
      tws_msg.type = type;
48865934:	2804      	bnez	s0,4886593e <com_btmanager_tws_send+0x1e>
      //tws_msg.type = MSG_BTSTACK_TWS_SEND_MSG_
      if(data==VOLUME_VALUE_FLAG)
48865936:	b20f      	lw	v0,48865970 <com_btmanager_tws_send+0x50>
      {
        data1=com_btmanager_avrcp_volume2avrcp_volume(data1);       
48865938:	ea40      	jalr	v0
4886593a:	6785      	move	a0,a1
4886593c:	67a2      	move	a1,v0
4886593e:	679d      	move	a0,sp
      }
      tws_msg.content.data[0] = data;
48865940:	a478      	lbu	v1,24(a0)
      tws_msg.content.data[1] = data1;
      tws_msg.content.data[2] = data2;
      tws_msg.content.data[3] = data3;
48865942:	b20d      	lw	v0,48865974 <com_btmanager_tws_send+0x54>
      libc_print("data1:",data1,2);
48865944:	c477      	sb	v1,23(a0)
48865946:	c414      	sb	s0,20(a0)
48865948:	c4b5      	sb	a1,21(a0)
4886594a:	c436      	sb	s1,22(a0)
4886594c:	6e02      	li	a2,2
4886594e:	0c07      	la	a0,48865968 <com_btmanager_tws_send+0x48>
48865950:	ea40      	jalr	v0
48865952:	6f4b      	li	a3,75
48865954:	6c00      	li	a0,0
      send_sync_msg_btmanager(NULL, &tws_msg, NULL, 0);
48865956:	b209      	lw	v0,48865978 <com_btmanager_tws_send+0x58>
48865958:	0504      	addiu	a1,sp,16
4886595a:	67c4      	move	a2,a0
4886595c:	ea40      	jalr	v0
4886595e:	67e4      	move	a3,a0
48865960:	6a00      	li	v0,0

      return 0;

}
48865962:	6476      	restore	48,ra,s0-s1
48865964:	e8a0      	jrc	ra
48865966:	0000      	addiu	s0,sp,0
48865968:	6164      	btnez	48865a32 <com_btmanager_hfp_call_req+0x36>
4886596a:	6174      	btnez	48865a54 <com_btmanager_hfp_call_last+0x10>
4886596c:	3a31      	ld	s1,136(v0)
4886596e:	0000      	addiu	s0,sp,0
48865970:	58e5      	sltiu	s0,229
48865972:	4886      	addiu	s0,-122
48865974:	e901      	sdbbp	8
48865976:	bfc1      	lwu	a2,4(a3)
48865978:	0d15      	la	a1,488659cc <com_btmanager_avrcp_update_volume_to_phone+0x50>
4886597a:	bfc1      	lwu	a2,4(a3)

4886597c <com_btmanager_avrcp_update_volume_to_phone>:
4886597c:	64e4      	save	32,ra,s0

#endif
int com_btmanager_avrcp_update_volume_to_phone(uint8 vol)
{
4886597e:	b319      	lw	v1,488659e0 <com_btmanager_avrcp_update_volume_to_phone+0x64>
    if (/*((g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].serv_conn & AVRCP_CONNECTED_MY) == 0)
48865980:	6a04      	li	v0,4
48865982:	a3f3      	lbu	a3,19(v1)
48865984:	6704      	move	s0,a0
48865986:	ef4c      	and	a3,v0
48865988:	e811      	zeb	s0
4886598a:	2f0d      	bnez	a3,488659a6 <com_btmanager_avrcp_update_volume_to_phone+0x2a>
4886598c:	b516      	lw	a1,488659e4 <com_btmanager_avrcp_update_volume_to_phone+0x68>
            ||*/ (g_btmanager_gl_var.enable_avrcp_volume_sync == 0))
    {

//支持主副箱同步音量，而不同步手机端音量
#ifdef ENABLE_TRUE_WIRELESS_STEREO
#if 0
            if(g_bt_stack_cur_info.dev_role!=0)
            {
                com_btmanager_tws_send(vol, NULL);  
            }
#else
        if(g_bt_stack_cur_info.dev_role!=0)
4886598e:	f020 a58e 	lbu	a0,46(a1)
48865992:	2422      	beqz	a0,488659d8 <com_btmanager_avrcp_update_volume_to_phone+0x5c>
48865994:	f0a1 6e04 	li	a2,2212
        {
            com_btmanager_tws_send(VOLUME_VALUE_FLAG, vol,NULL,NULL,MSG_BTSTACK_TWS_SEND_MSG_SYNC);  
48865998:	b214      	lw	v0,488659e8 <com_btmanager_avrcp_update_volume_to_phone+0x6c>
4886599a:	d604      	sw	a2,16(sp)
4886599c:	6787      	move	a0,a3
4886599e:	67b0      	move	a1,s0
488659a0:	ea40      	jalr	v0
488659a2:	67c7      	move	a2,a3
488659a4:	1019      	b	488659d8 <com_btmanager_avrcp_update_volume_to_phone+0x5c>
        }
#endif


#endif
        return 0;
488659a6:	701f      	cmpi	s0,31
    }

    //先调小一档，规避ios最大音量不能同步的问题
    if (vol == VOLUME_VALUE_MAX)
488659a8:	610c      	btnez	488659c2 <com_btmanager_avrcp_update_volume_to_phone+0x46>
488659aa:	b50f      	lw	a1,488659e4 <com_btmanager_avrcp_update_volume_to_phone+0x68>
    {
        __avrcp_update_volume_to_phone(vol - 1,
488659ac:	6a12      	li	v0,18
488659ae:	f020 a5c8 	lbu	a2,40(a1)
488659b2:	408f      	addiu	a0,s0,-1
488659b4:	ee58      	mult	a2,v0
488659b6:	45e5      	addiu	a3,a1,5
488659b8:	eb12      	mflo	v1
488659ba:	ec11      	zeb	a0
488659bc:	1831 963d 	jal	488658f4 <__avrcp_update_volume_to_phone>
488659c0:	e3f5      	addu	a1,v1,a3
488659c2:	b409      	lw	a0,488659e4 <com_btmanager_avrcp_update_volume_to_phone+0x68>
                g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes);
    }

    __avrcp_update_volume_to_phone(vol,
488659c4:	6d12      	li	a1,18
488659c6:	f020 a448 	lbu	v0,40(a0)
488659ca:	44e5      	addiu	a3,a0,5
488659cc:	eab8      	mult	v0,a1
488659ce:	6790      	move	a0,s0
488659d0:	eb12      	mflo	v1
488659d2:	1831 963d 	jal	488658f4 <__avrcp_update_volume_to_phone>
488659d6:	e3f5      	addu	a1,v1,a3
488659d8:	6a00      	li	v0,0
            g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.a2dp_active_id].addr.bytes);

    return 0;
}
488659da:	6464      	restore	32,ra,s0
488659dc:	e8a0      	jrc	ra
488659de:	0000      	addiu	s0,sp,0
488659e0:	a33c      	lbu	s1,28(v1)
488659e2:	9fc1      	lw	a2,4(a3)
488659e4:	a2fc      	lbu	a3,28(v0)
488659e6:	9fc1      	lw	a2,4(a3)
488659e8:	5921      	sltiu	s1,33
488659ea:	4886      	addiu	s0,-122

488659ec <s_btstack_avrcp_ops>:
488659ec:	4600 4400 4b00 4c00 4901 4801 4902 4802     .F.D.K.L.I.H.I.H

488659fc <com_btmanager_hfp_call_req>:
488659fc:	64c4      	save	32,ra
    HFP_EV_CANCEL_CALL_REQ, /* 2 BTCALL_HFP_HANGUP_CALL*/
};

int com_btmanager_hfp_call_req(btcall_hfp_req_e req)
{
488659fe:	ec11      	zeb	a0
48865a00:	6a01      	li	v0,1
    msg_apps_t msg;

    if (req >= BTCALL_HFP_MAX_REQ)
    {
        return -1;
48865a02:	5c03      	sltiu	a0,3
48865a04:	ea4b      	neg	v0
48865a06:	6016      	bteqz	48865a34 <com_btmanager_hfp_call_req+0x38>
48865a08:	b50c      	lw	a1,48865a38 <com_btmanager_hfp_call_req+0x3c>
    }

    //消息类型(即消息名称)
    msg.type = MSG_BTSTACK_HFP_CALL_REQ_SYNC;
    msg.content.data[0] = s_hfp_ev_codes[req];
48865a0a:	6e12      	li	a2,18

    //发送同步消息
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].addr.bytes, &msg, NULL, 0);
48865a0c:	e4ad      	addu	v1,a0,a1
48865a0e:	b50c      	lw	a1,48865a3c <com_btmanager_hfp_call_req+0x40>
48865a10:	f700 4a02 	addiu	v0,1794
48865a14:	f020 a5e9 	lbu	a3,41(a1)
48865a18:	d204      	sw	v0,16(sp)
48865a1a:	efd8      	mult	a3,a2
48865a1c:	a340      	lbu	v0,0(v1)
48865a1e:	679d      	move	a0,sp
48865a20:	eb12      	mflo	v1
48865a22:	c454      	sb	v0,20(a0)
48865a24:	6e00      	li	a2,0
48865a26:	4585      	addiu	a0,a1,5
48865a28:	b206      	lw	v0,48865a40 <com_btmanager_hfp_call_req+0x44>
48865a2a:	e391      	addu	a0,v1,a0
48865a2c:	0504      	addiu	a1,sp,16
48865a2e:	ea40      	jalr	v0
48865a30:	67e6      	move	a3,a2
48865a32:	6a00      	li	v0,0

    return 0;
48865a34:	6444      	restore	32,ra
}
48865a36:	e8a0      	jrc	ra
48865a38:	5c88      	sltiu	a0,136
48865a3a:	4886      	addiu	s0,-122
48865a3c:	a2fc      	lbu	a3,28(v0)
48865a3e:	9fc1      	lw	a2,4(a3)
48865a40:	0d15      	la	a1,48865a94 <com_btmanager_hfp_call_last+0x50>
48865a42:	bfc1      	lwu	a2,4(a3)

48865a44 <com_btmanager_hfp_call_last>:
48865a44:	64f5      	save	40,ra,s0-s1

int com_btmanager_hfp_call_last(void)
{
48865a46:	b31e      	lw	v1,48865abc <com_btmanager_hfp_call_last+0x78>
    msg_apps_t msg;
    uint32 cur_timestamp;

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
48865a48:	a34c      	lbu	v0,12(v1)
48865a4a:	2228      	beqz	v0,48865a9c <com_btmanager_hfp_call_last+0x58>
48865a4c:	6c00      	li	a0,0
    {
        return 0;
    }

    cur_timestamp = sys_get_ab_timer();
48865a4e:	b11d      	lw	s1,48865ac0 <com_btmanager_hfp_call_last+0x7c>
48865a50:	67a4      	move	a1,a0
48865a52:	67c4      	move	a2,a0
48865a54:	e940      	jalr	s1
48865a56:	6f1c      	li	a3,28
48865a58:	b51b      	lw	a1,48865ac4 <com_btmanager_hfp_call_last+0x80>
    if ((cur_timestamp - g_btmanager_gl_var.last_call_last_timestamp) < 2000)
48865a5a:	6702      	move	s0,v0
48865a5c:	9d86      	lw	a0,24(a1)
48865a5e:	e297      	subu	a1,v0,a0
48865a60:	f7c0 5d10 	sltiu	a1,2000
48865a64:	6005      	bteqz	48865a70 <com_btmanager_hfp_call_last+0x2c>
48865a66:	0c10      	la	a0,48865aa4 <com_btmanager_hfp_call_last+0x60>
    {
        PRINT_INFO_INT("ignore call last:", cur_timestamp - g_btmanager_gl_var.last_call_last_timestamp);
48865a68:	6e02      	li	a2,2
48865a6a:	e940      	jalr	s1
48865a6c:	6f4b      	li	a3,75
48865a6e:	1016      	b	48865a9c <com_btmanager_hfp_call_last+0x58>
        return 0;
48865a70:	b416      	lw	a0,48865ac8 <com_btmanager_hfp_call_last+0x84>
    }

    if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].hfp_status == HFP_STATUS_LINKED)
48865a72:	6a12      	li	v0,18
48865a74:	f020 a469 	lbu	v1,41(a0)
48865a78:	eb58      	mult	v1,v0
48865a7a:	eb12      	mflo	v1
48865a7c:	e39d      	addu	a3,v1,a0
48865a7e:	a7d3      	lbu	a2,19(a3)
48865a80:	7601      	cmpi	a2,1
48865a82:	610c      	btnez	48865a9c <com_btmanager_hfp_call_last+0x58>
48865a84:	f700 6e08 	li	a2,1800
    {
        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_HFP_CALL_LAST_SYNC;
48865a88:	d604      	sw	a2,16(sp)
48865a8a:	44a5      	addiu	a1,a0,5
        //发送同步消息
        send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].addr.bytes,
48865a8c:	6e00      	li	a2,0
48865a8e:	b210      	lw	v0,48865acc <com_btmanager_hfp_call_last+0x88>
48865a90:	e3b1      	addu	a0,v1,a1
48865a92:	67e6      	move	a3,a2
48865a94:	ea40      	jalr	v0
48865a96:	0504      	addiu	a1,sp,16
48865a98:	b40b      	lw	a0,48865ac4 <com_btmanager_hfp_call_last+0x80>
            &msg, NULL, 0);
        
        g_btmanager_gl_var.last_call_last_timestamp = cur_timestamp;
48865a9a:	dc06      	sw	s0,24(a0)
48865a9c:	6a00      	li	v0,0
    }

    return 0;
}
48865a9e:	6475      	restore	40,ra,s0-s1
48865aa0:	e8a0      	jrc	ra
48865aa2:	0000      	addiu	s0,sp,0
48865aa4:	493c      	addiu	s1,60
48865aa6:	203e      	beqz	s0,48865b24 <com_btmanager_hfp_siri_handle+0x54>
48865aa8:	6769      	move	v1,t1
48865aaa:	6f6e      	li	a3,110
48865aac:	6572      	move	s3,v0
48865aae:	6320      	addiu	sp,256
48865ab0:	6c61      	li	a0,97
48865ab2:	206c      	beqz	s0,48865b8c <com_btmanager_hfp_set_volume_to_soundbox+0x54>
48865ab4:	616c      	btnez	48865b8e <com_btmanager_hfp_set_volume_to_soundbox+0x56>
48865ab6:	7473      	cmpi	a0,115
48865ab8:	003a      	addiu	s0,sp,232
48865aba:	0000      	addiu	s0,sp,0
48865abc:	a080      	lbu	a0,0(s0)
48865abe:	9fc1      	lw	a2,4(a3)
48865ac0:	e901      	sdbbp	8
48865ac2:	bfc1      	lwu	a2,4(a3)
48865ac4:	a33c      	lbu	s1,28(v1)
48865ac6:	9fc1      	lw	a2,4(a3)
48865ac8:	a2fc      	lbu	a3,28(v0)
48865aca:	9fc1      	lw	a2,4(a3)
48865acc:	0d15      	la	a1,48865b20 <com_btmanager_hfp_siri_handle+0x50>
48865ace:	bfc1      	lwu	a2,4(a3)

48865ad0 <com_btmanager_hfp_siri_handle>:
48865ad0:	64f5      	save	40,ra,s0-s1

int com_btmanager_hfp_siri_handle(void)
{
48865ad2:	b315      	lw	v1,48865b24 <com_btmanager_hfp_siri_handle+0x54>
    msg_apps_t msg;
    uint32 cur_timestamp;

    if (g_app_info_vector[APP_TYPE_BTSTACK].used == 0)
48865ad4:	a34c      	lbu	v0,12(v1)
48865ad6:	2222      	beqz	v0,48865b1c <com_btmanager_hfp_siri_handle+0x4c>
48865ad8:	6c00      	li	a0,0
    {
        return 0;
    }
#if (__SUPPORT_SIRI_ == 1)
    cur_timestamp = sys_get_ab_timer();
48865ada:	b014      	lw	s0,48865b28 <com_btmanager_hfp_siri_handle+0x58>
48865adc:	67a4      	move	a1,a0
48865ade:	67c4      	move	a2,a0
48865ae0:	e840      	jalr	s0
48865ae2:	6f1c      	li	a3,28
48865ae4:	b012      	lw	s0,48865b2c <com_btmanager_hfp_siri_handle+0x5c>
    if ((cur_timestamp - g_btmanager_gl_var.last_call_last_timestamp) < 2000)
48865ae6:	6722      	move	s1,v0
48865ae8:	98a6      	lw	a1,24(s0)
48865aea:	e2b3      	subu	a0,v0,a1
48865aec:	f7c0 5c10 	sltiu	a0,2000
48865af0:	6115      	btnez	48865b1c <com_btmanager_hfp_siri_handle+0x4c>
48865af2:	a0d3      	lbu	a2,19(s0)
    {
        //PRINT_INFO_INT("ignore call last:", cur_timestamp - g_btmanager_gl_var.last_call_last_timestamp);
        return 0;
    }

    //if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].hfp_status == HFP_STATUS_LINKED)
    if(g_btmanager_gl_var.enable_siri!=0)
48865af4:	6f08      	li	a3,8
48865af6:	eeec      	and	a2,a3
48865af8:	2611      	beqz	a2,48865b1c <com_btmanager_hfp_siri_handle+0x4c>
48865afa:	b40e      	lw	a0,48865b30 <com_btmanager_hfp_siri_handle+0x60>
    {
        //消息类型(即消息名称)
        msg.type = MSG_BTSTACK_HFP_SET_SIRI_SYNC;
        //发送同步消息
        send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].addr.bytes,
48865afc:	6e12      	li	a2,18
48865afe:	f020 a4e9 	lbu	a3,41(a0)
48865b02:	f700 6a0b 	li	v0,1803
48865b06:	efd8      	mult	a3,a2
48865b08:	d204      	sw	v0,16(sp)
48865b0a:	ed12      	mflo	a1
48865b0c:	4465      	addiu	v1,a0,5
48865b0e:	6e00      	li	a2,0
48865b10:	b209      	lw	v0,48865b34 <com_btmanager_hfp_siri_handle+0x64>
48865b12:	e571      	addu	a0,a1,v1
48865b14:	67e6      	move	a3,a2
48865b16:	ea40      	jalr	v0
48865b18:	0504      	addiu	a1,sp,16
48865b1a:	d826      	sw	s1,24(s0)
                &msg, NULL, 0);

        g_btmanager_gl_var.last_call_last_timestamp = cur_timestamp;
48865b1c:	6a00      	li	v0,0
    }
#endif //#if (__SUPPORT_SIRI_ == 1)
    return 0;
}
48865b1e:	6475      	restore	40,ra,s0-s1
48865b20:	e8a0      	jrc	ra
48865b22:	0000      	addiu	s0,sp,0
48865b24:	a080      	lbu	a0,0(s0)
48865b26:	9fc1      	lw	a2,4(a3)
48865b28:	e901      	sdbbp	8
48865b2a:	bfc1      	lwu	a2,4(a3)
48865b2c:	a33c      	lbu	s1,28(v1)
48865b2e:	9fc1      	lw	a2,4(a3)
48865b30:	a2fc      	lbu	a3,28(v0)
48865b32:	9fc1      	lw	a2,4(a3)
48865b34:	0d15      	la	a1,48865b88 <com_btmanager_hfp_set_volume_to_soundbox+0x50>
48865b36:	bfc1      	lwu	a2,4(a3)

48865b38 <com_btmanager_hfp_set_volume_to_soundbox>:
48865b38:	64f4      	save	32,ra,s0-s1

app_result_e com_btmanager_hfp_set_volume_to_soundbox(uint8 vol, bool tts_flag)
{
48865b3a:	67c4      	move	a2,a0
48865b3c:	b415      	lw	a0,48865b90 <com_btmanager_hfp_set_volume_to_soundbox+0x58>
    app_result_e result = RESULT_NULL;
    uint8 tmp_volume;

    if (g_this_app_info->app_id == APP_ID_BTCALL)
48865b3e:	6725      	move	s1,a1
48865b40:	9c60      	lw	v1,0(a0)
48865b42:	ee11      	zeb	a2
48865b44:	a341      	lbu	v0,1(v1)
48865b46:	e911      	zeb	s1
48865b48:	7203      	cmpi	v0,3
48865b4a:	6114      	btnez	48865b74 <com_btmanager_hfp_set_volume_to_soundbox+0x3c>
48865b4c:	30d4      	sll	s0,a2,5
    {
        tmp_volume = vol;
        tmp_volume = (tmp_volume * VOLUME_VALUE_MAX / 15);
48865b4e:	e0df      	subu	a3,s0,a2
48865b50:	6d0f      	li	a1,15
48865b52:	efba      	div	zero,a3,a1
48865b54:	b210      	lw	v0,48865b94 <com_btmanager_hfp_set_volume_to_soundbox+0x5c>

        PRINT_INFO_INT("hfp set vol:", vol);
48865b56:	67a6      	move	a1,a2
48865b58:	0c09      	la	a0,48865b7c <com_btmanager_hfp_set_volume_to_soundbox+0x44>
48865b5a:	6e02      	li	a2,2
48865b5c:	6f4b      	li	a3,75
48865b5e:	ea40      	jalr	v0
48865b60:	e812      	mflo	s0
48865b62:	e811      	zeb	s0
48865b64:	b20d      	lw	v0,48865b98 <com_btmanager_hfp_set_volume_to_soundbox+0x60>
48865b66:	2903      	bnez	s1,48865b6e <com_btmanager_hfp_set_volume_to_soundbox+0x36>
        if (tts_flag == FALSE)
48865b68:	6790      	move	a0,s0
        {
            com_volume_set(tmp_volume, SET_VOLUME_VIEW | SET_VOLUME_TTS);
48865b6a:	6d03      	li	a1,3
48865b6c:	1002      	b	48865b72 <com_btmanager_hfp_set_volume_to_soundbox+0x3a>
48865b6e:	6790      	move	a0,s0
        }
        else
        {
            com_volume_set(tmp_volume, SET_VOLUME_TTS);
48865b70:	6d02      	li	a1,2
48865b72:	eac0      	jalrc	v0
48865b74:	6a00      	li	v0,0
        }
    }

    return result;
}
48865b76:	6474      	restore	32,ra,s0-s1
48865b78:	e8a0      	jrc	ra
48865b7a:	0000      	addiu	s0,sp,0
48865b7c:	493c      	addiu	s1,60
48865b7e:	203e      	beqz	s0,48865bfc <com_btmanager_hfp_battery_report_update+0x18>
48865b80:	6668      	0x6668
48865b82:	2070      	beqz	s0,48865c64 <com_btmanager_hfp_battery_report_enable>
48865b84:	6573      	move	s3,v1
48865b86:	2074      	beqz	s0,48865c70 <com_btmanager_hfp_battery_report_enable+0xc>
48865b88:	6f76      	li	a3,118
48865b8a:	3a6c      	ld	v1,96(v0)
48865b8c:	0000      	addiu	s0,sp,0
48865b8e:	0000      	addiu	s0,sp,0
48865b90:	9990      	lw	a0,64(s1)
48865b92:	9fc1      	lw	a2,4(a3)
48865b94:	e901      	sdbbp	8
48865b96:	bfc1      	lwu	a2,4(a3)
48865b98:	587d      	sltiu	s0,125
48865b9a:	4832      	addiu	s0,50

48865b9c <com_btmanager_hfp_update_volume_to_phone>:
48865b9c:	64c4      	save	32,ra

int com_btmanager_hfp_update_volume_to_phone(uint8 vol)
{
48865b9e:	b510      	lw	a1,48865bdc <com_btmanager_hfp_update_volume_to_phone+0x40>
    msg_apps_t msg;
    uint16 tmp_volume;

    if (g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].hfp_status == HFP_STATUS_NONE)
48865ba0:	6e12      	li	a2,18
48865ba2:	f020 a5e9 	lbu	a3,41(a1)
48865ba6:	ec11      	zeb	a0
48865ba8:	efd8      	mult	a3,a2
48865baa:	ee12      	mflo	a2
48865bac:	e6ad      	addu	v1,a2,a1
48865bae:	a353      	lbu	v0,19(v1)
48865bb0:	2212      	beqz	v0,48865bd6 <com_btmanager_hfp_update_volume_to_phone+0x3a>
48865bb2:	3390      	sll	v1,a0,4
    {
        return 0;
    }

    tmp_volume = (uint16) (vol * 15) / VOLUME_VALUE_MAX;
48865bb4:	e39f      	subu	a3,v1,a0
48865bb6:	ef31      	zeh	a3
48865bb8:	6c1f      	li	a0,31
48865bba:	ef9b      	divu	zero,a3,a0
48865bbc:	f700 6a02 	li	v0,1794

    msg.type = MSG_BTSTACK_HFP_VOLUME_SYNC;
48865bc0:	4585      	addiu	a0,a1,5
    msg.content.data[0] = (uint8) tmp_volume;
    send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[g_bt_stack_cur_info.hfp_active_id].addr.bytes, &msg, NULL, 0);
48865bc2:	67fd      	move	a3,sp
48865bc4:	d204      	sw	v0,16(sp)
48865bc6:	e691      	addu	a0,a2,a0
48865bc8:	b206      	lw	v0,48865be0 <com_btmanager_hfp_update_volume_to_phone+0x44>
48865bca:	6e00      	li	a2,0
48865bcc:	0504      	addiu	a1,sp,16
48865bce:	eb12      	mflo	v1
48865bd0:	c774      	sb	v1,20(a3)
48865bd2:	ea40      	jalr	v0
48865bd4:	67e6      	move	a3,a2
48865bd6:	6a00      	li	v0,0

    return 0;
}
48865bd8:	6444      	restore	32,ra
48865bda:	e8a0      	jrc	ra
48865bdc:	a2fc      	lbu	a3,28(v0)
48865bde:	9fc1      	lw	a2,4(a3)
48865be0:	0d15      	la	a1,48865c34 <com_btmanager_hfp_battery_report_update+0x50>
48865be2:	bfc1      	lwu	a2,4(a3)

48865be4 <com_btmanager_hfp_battery_report_update>:
48865be4:	64e4      	save	32,ra,s0

void com_btmanager_hfp_battery_report_update_handle(void)
{
    com_btmanager_hfp_battery_report_update(g_app_info_state.bat_value);

    g_btmanager_gl_var.bat_rpt_timer_id = -1;
}

int com_btmanager_hfp_battery_report_enable(uint8 *bd)
{
    msg_apps_t msg;

    msg.type = MSG_BTSTACK_HFP_BATTERY_SYNC;
    msg.content.data[0] = BATTERY_REPORT_CMD_ID_ENABLE;
    send_sync_msg_btmanager(bd, &msg, NULL, 0);

    return 0;
}

//应用bat_value分为0-9级
int com_btmanager_hfp_battery_report_update(uint8 bat_value)
{
48865be6:	b314      	lw	v1,48865c34 <com_btmanager_hfp_battery_report_update+0x50>
    msg_apps_t msg;
    uint8 tmp_bat;
    uint8 i;

    tmp_bat = bat_value * (BATTERY_REPORT_MAX - BATTERY_REPORT_MIN) / (BATTERY_GRADE_MAX - 0) + BATTERY_REPORT_MIN;

    msg.type = MSG_BTSTACK_HFP_BATTERY_SYNC;
    msg.content.data[0] = BATTERY_REPORT_CMD_ID_UPDATE;
    msg.content.data[1] = tmp_bat;

    for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
48865be8:	67bd      	move	a1,sp
48865bea:	a34b      	lbu	v0,11(v1)
48865bec:	f700 6f03 	li	a3,1795
48865bf0:	6e01      	li	a2,1
48865bf2:	d704      	sw	a3,16(sp)
48865bf4:	c5d4      	sb	a2,20(a1)
48865bf6:	c595      	sb	a0,21(a1)
48865bf8:	6800      	li	s0,0
48865bfa:	2218      	beqz	v0,48865c2c <com_btmanager_hfp_battery_report_update+0x48>
48865bfc:	6d12      	li	a1,18
    {
        if (g_bt_stack_cur_info.rmt_dev[i].hfp_attr.batt_supported == 1)
48865bfe:	e8b8      	mult	s0,a1
48865c00:	b40e      	lw	a0,48865c38 <com_btmanager_hfp_battery_report_update+0x54>
48865c02:	ed12      	mflo	a1
48865c04:	6b01      	li	v1,1
48865c06:	e59d      	addu	a3,a1,a0
48865c08:	a7ce      	lbu	a2,14(a3)
48865c0a:	32c6      	srl	v0,a2,1
48865c0c:	ea6c      	and	v0,v1
48865c0e:	2207      	beqz	v0,48865c1e <com_btmanager_hfp_battery_report_update+0x3a>
48865c10:	4485      	addiu	a0,a0,5
        {
            send_sync_msg_btmanager(g_bt_stack_cur_info.rmt_dev[i].addr.bytes, &msg, NULL, 0);
48865c12:	6e00      	li	a2,0
48865c14:	b20a      	lw	v0,48865c3c <com_btmanager_hfp_battery_report_update+0x58>
48865c16:	e591      	addu	a0,a1,a0
48865c18:	67e6      	move	a3,a2
48865c1a:	ea40      	jalr	v0
48865c1c:	0504      	addiu	a1,sp,16
48865c1e:	b606      	lw	a2,48865c34 <com_btmanager_hfp_battery_report_update+0x50>
48865c20:	40e1      	addiu	a3,s0,1
48865c22:	6707      	move	s0,a3
48865c24:	a66b      	lbu	v1,11(a2)
48865c26:	e811      	zeb	s0
48865c28:	e863      	sltu	s0,v1
48865c2a:	61e8      	btnez	48865bfc <com_btmanager_hfp_battery_report_update+0x18>
48865c2c:	6a00      	li	v0,0
        }
    }
    return 0;
}
48865c2e:	6464      	restore	32,ra,s0
48865c30:	e8a0      	jrc	ra
48865c32:	0000      	addiu	s0,sp,0
48865c34:	a33c      	lbu	s1,28(v1)
48865c36:	9fc1      	lw	a2,4(a3)
48865c38:	a2fc      	lbu	a3,28(v0)
48865c3a:	9fc1      	lw	a2,4(a3)
48865c3c:	0d15      	la	a1,48865c90 <com_hfp_old_sco_change+0x4>
48865c3e:	bfc1      	lwu	a2,4(a3)

48865c40 <com_btmanager_hfp_battery_report_update_handle>:
48865c40:	64c3      	save	24,ra
48865c42:	b506      	lw	a1,48865c58 <com_btmanager_hfp_battery_report_update_handle+0x18>
48865c44:	b206      	lw	v0,48865c5c <com_btmanager_hfp_battery_report_update_handle+0x1c>
48865c46:	ea40      	jalr	v0
48865c48:	a58a      	lbu	a0,10(a1)
48865c4a:	b206      	lw	v0,48865c60 <com_btmanager_hfp_battery_report_update_handle+0x20>
48865c4c:	6b01      	li	v1,1
48865c4e:	eb6b      	neg	v1
48865c50:	c26a      	sb	v1,10(v0)
48865c52:	6443      	restore	24,ra
48865c54:	e8a0      	jrc	ra
48865c56:	0000      	addiu	s0,sp,0
48865c58:	a0c0      	lbu	a2,0(s0)
48865c5a:	9fc1      	lw	a2,4(a3)
48865c5c:	5be5      	sltiu	v1,229
48865c5e:	4886      	addiu	s0,-122
48865c60:	a33c      	lbu	s1,28(v1)
48865c62:	9fc1      	lw	a2,4(a3)

48865c64 <com_btmanager_hfp_battery_report_enable>:
48865c64:	64c4      	save	32,ra
48865c66:	f700 6e03 	li	a2,1795
48865c6a:	d604      	sw	a2,16(sp)
48865c6c:	677d      	move	v1,sp
48865c6e:	6e00      	li	a2,0
48865c70:	6d00      	li	a1,0
48865c72:	b205      	lw	v0,48865c84 <com_btmanager_hfp_battery_report_enable+0x20>
48865c74:	c3b4      	sb	a1,20(v1)
48865c76:	67e6      	move	a3,a2
48865c78:	ea40      	jalr	v0
48865c7a:	0504      	addiu	a1,sp,16
48865c7c:	6a00      	li	v0,0
48865c7e:	6444      	restore	32,ra
48865c80:	e8a0      	jrc	ra
48865c82:	0000      	addiu	s0,sp,0
48865c84:	0d15      	la	a1,48865cd8 <.LBB2>
48865c86:	bfc1      	lwu	a2,4(a3)

48865c88 <s_hfp_ev_codes>:
48865c88:	2e2d 002e                                   -...

48865c8c <com_hfp_old_sco_change>:
48865c8c:	64c4      	save	32,ra
48865c8e:	ec11      	zeb	a0
48865c90:	6d12      	li	a1,18
48865c92:	ecb8      	mult	a0,a1
48865c94:	f700 6e0c 	li	a2,1804
48865c98:	eb12      	mflo	v1
48865c9a:	b406      	lw	a0,48865cb0 <com_hfp_old_sco_change+0x24>
48865c9c:	d604      	sw	a2,16(sp)
48865c9e:	b206      	lw	v0,48865cb4 <com_hfp_old_sco_change+0x28>
48865ca0:	6e00      	li	a2,0
48865ca2:	e391      	addu	a0,v1,a0
48865ca4:	0504      	addiu	a1,sp,16
48865ca6:	ea40      	jalr	v0
48865ca8:	67e6      	move	a3,a2
48865caa:	6444      	restore	32,ra
48865cac:	e8a0      	jrc	ra
48865cae:	0000      	addiu	s0,sp,0
48865cb0:	a301      	lbu	s0,1(v1)
48865cb2:	9fc1      	lw	a2,4(a3)
48865cb4:	0d15      	la	a1,48865d08 <com_btmanager_fast_discover_timer_proc+0x4>
48865cb6:	bfc1      	lwu	a2,4(a3)

48865cb8 <com_btmanager_ble_deal>:
48865cb8:	64f4      	save	32,ra,s0-s1
48865cba:	b010      	lw	s0,48865cf8 <.LBE2+0x1a>
48865cbc:	f020 a04e 	lbu	v0,46(s0)
48865cc0:	7202      	cmpi	v0,2
48865cc2:	610e      	btnez	48865ce0 <.LBE2+0x2>
48865cc4:	f020 a08d 	lbu	a0,45(s0)
48865cc8:	2c07      	bnez	a0,48865cd8 <.LBB2>
48865cca:	b20d      	lw	v0,48865cfc <.LBE2+0x1e>
48865ccc:	eac0      	jalrc	v0
48865cce:	f020 a06e 	lbu	v1,46(s0)
48865cd2:	b40c      	lw	a0,48865d00 <.LBE2+0x22>
48865cd4:	c474      	sb	v1,20(a0)
48865cd6:	100e      	b	48865cf4 <.LBE2+0x16>

48865cd8 <.LBB2>:
48865cd8:	1af0 97bc 	jal	485e5ef0 <com_btmanager_unlink_spp_ble_profile>
48865cdc:	6c01      	li	a0,1

48865cde <.LBE2>:
48865cde:	100a      	b	48865cf4 <.LBE2+0x16>
48865ce0:	b108      	lw	s1,48865d00 <.LBE2+0x22>
48865ce2:	a1b4      	lbu	a1,20(s1)
48865ce4:	7502      	cmpi	a1,2
48865ce6:	6103      	btnez	48865cee <.LBE2+0x10>
48865ce8:	b305      	lw	v1,48865cfc <.LBE2+0x1e>
48865cea:	eb40      	jalr	v1
48865cec:	6c01      	li	a0,1
48865cee:	f020 a0ce 	lbu	a2,46(s0)
48865cf2:	c1d4      	sb	a2,20(s1)
48865cf4:	6474      	restore	32,ra,s0-s1
48865cf6:	e8a0      	jrc	ra
48865cf8:	a2fc      	lbu	a3,28(v0)
48865cfa:	9fc1      	lw	a2,4(a3)
48865cfc:	5c29      	sltiu	a0,41
48865cfe:	4882      	addiu	s0,-126
48865d00:	a33c      	lbu	s1,28(v1)
48865d02:	9fc1      	lw	a2,4(a3)

48865d04 <com_btmanager_fast_discover_timer_proc>:
48865d04:	64e3      	save	24,ra,s0
48865d06:	b20a      	lw	v0,48865d2c <com_btmanager_fast_discover_timer_proc+0x28>
48865d08:	aa80      	lhu	a0,0(v0)
48865d0a:	4461      	addiu	v1,a0,1
48865d0c:	ca60      	sh	v1,0(v0)
48865d0e:	eb31      	zeh	v1
48865d10:	5b32      	sltiu	v1,50
48865d12:	610a      	btnez	48865d28 <com_btmanager_fast_discover_timer_proc+0x24>
48865d14:	b007      	lw	s0,48865d30 <com_btmanager_fast_discover_timer_proc+0x2c>
48865d16:	b208      	lw	v0,48865d34 <com_btmanager_fast_discover_timer_proc+0x30>
48865d18:	ea40      	jalr	v0
48865d1a:	8080      	lb	a0,0(s0)
48865d1c:	6d01      	li	a1,1
48865d1e:	edab      	neg	a1
48865d20:	c0a0      	sb	a1,0(s0)
48865d22:	1811 97ae 	jal	48825eb8 <com_btmanager_set_scan_mode>
48865d26:	6c00      	li	a0,0
48865d28:	6463      	restore	24,ra,s0
48865d2a:	e8a0      	jrc	ra
48865d2c:	a35a      	lbu	v0,26(v1)
48865d2e:	9fc1      	lw	a2,4(a3)
48865d30:	a358      	lbu	v0,24(v1)
48865d32:	9fc1      	lw	a2,4(a3)
48865d34:	5b01      	sltiu	v1,1
48865d36:	488e      	addiu	s0,-114

48865d38 <com_btmanager_fast_discover_deal>:
48865d38:	64e3      	save	24,ra,s0
48865d3a:	ec11      	zeb	a0
48865d3c:	7401      	cmpi	a0,1
48865d3e:	610d      	btnez	48865d5a <com_btmanager_fast_discover_deal+0x22>
48865d40:	b40d      	lw	a0,48865d74 <com_btmanager_fast_discover_deal+0x3c>
48865d42:	6d00      	li	a1,0
48865d44:	b60d      	lw	a2,48865d78 <com_btmanager_fast_discover_deal+0x40>
48865d46:	b20e      	lw	v0,48865d7c <com_btmanager_fast_discover_deal+0x44>
48865d48:	cca0      	sh	a1,0(a0)
48865d4a:	f3e0 6d08 	li	a1,1000
48865d4e:	ea40      	jalr	v0
48865d50:	6c03      	li	a0,3
48865d52:	b30c      	lw	v1,48865d80 <com_btmanager_fast_discover_deal+0x48>
48865d54:	6c01      	li	a0,1
48865d56:	c340      	sb	v0,0(v1)
48865d58:	1008      	b	48865d6a <com_btmanager_fast_discover_deal+0x32>
48865d5a:	b00a      	lw	s0,48865d80 <com_btmanager_fast_discover_deal+0x48>
48865d5c:	b20a      	lw	v0,48865d84 <com_btmanager_fast_discover_deal+0x4c>
48865d5e:	ea40      	jalr	v0
48865d60:	8080      	lb	a0,0(s0)
48865d62:	6e01      	li	a2,1
48865d64:	eecb      	neg	a2
48865d66:	c0c0      	sb	a2,0(s0)
48865d68:	6c00      	li	a0,0
48865d6a:	1811 97ae 	jal	48825eb8 <com_btmanager_set_scan_mode>
48865d6e:	6500      	nop
48865d70:	6463      	restore	24,ra,s0
48865d72:	e8a0      	jrc	ra
48865d74:	a35a      	lbu	v0,26(v1)
48865d76:	9fc1      	lw	a2,4(a3)
48865d78:	5d05      	sltiu	a1,5
48865d7a:	4886      	addiu	s0,-122
48865d7c:	5915      	sltiu	s1,21
48865d7e:	488e      	addiu	s0,-114
48865d80:	a358      	lbu	v0,24(v1)
48865d82:	9fc1      	lw	a2,4(a3)
48865d84:	5b01      	sltiu	v1,1
48865d86:	488e      	addiu	s0,-114
	...
Disassembly of section BANK_UI_1_34:

488a5800 <sample_sound_init>:
488a5800:	64e3      	save	24,ra,s0
 * \note
 */
/*******************************************************************************/
void sample_sound_init(void)
{
488a5802:	b00a      	lw	s0,488a5828 <sample_sound_init+0x28>
    enable_adc(1, 0);
488a5804:	6d00      	li	a1,0
488a5806:	67c5      	move	a2,a1
488a5808:	6c01      	li	a0,1
488a580a:	e840      	jalr	s0
488a580c:	6f0d      	li	a3,13
488a580e:	6d00      	li	a1,0

    set_adc_rate(16);
488a5810:	67c5      	move	a2,a1
488a5812:	6c10      	li	a0,16
488a5814:	e840      	jalr	s0
488a5816:	6f0f      	li	a3,15
488a5818:	6c02      	li	a0,2

    enable_ain(AI_SOURCE_ASEMIC, 6);
488a581a:	6d06      	li	a1,6
488a581c:	6e00      	li	a2,0
488a581e:	e840      	jalr	s0
488a5820:	6f08      	li	a3,8
488a5822:	6463      	restore	24,ra,s0
488a5824:	e8a0      	jrc	ra
488a5826:	0000      	addiu	s0,sp,0
488a5828:	e909      	entry	a0
488a582a:	bfc1      	lwu	a2,4(a3)

488a582c <sample_sound_exit>:
488a582c:	64e3      	save	24,ra,s0
}

/******************************************************************************/
/*!
 * \par  Description:
 * \退出采集函数
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \retval
 * \ingroup      bt_common_gen_addr.c
 * \note
 */
/*******************************************************************************/
void sample_sound_exit(void)
{
488a582e:	6d00      	li	a1,0
    disable_ain(AI_SOURCE_ASEMIC);
488a5830:	b006      	lw	s0,488a5848 <sample_sound_exit+0x1c>
488a5832:	67c5      	move	a2,a1
488a5834:	6c02      	li	a0,2
488a5836:	e840      	jalr	s0
488a5838:	6f09      	li	a3,9
488a583a:	6c00      	li	a0,0

    disable_adc();
488a583c:	67a4      	move	a1,a0
488a583e:	67c4      	move	a2,a0
488a5840:	e840      	jalr	s0
488a5842:	6f0e      	li	a3,14
488a5844:	6463      	restore	24,ra,s0
488a5846:	e8a0      	jrc	ra
488a5848:	e909      	entry	a0
488a584a:	bfc1      	lwu	a2,4(a3)

488a584c <sample_sound_data>:
488a584c:	64a1      	save	8,s0

488a584e <.LBB2>:
}

/******************************************************************************/
/*!
 * \par  Description:
 * \数据采集函数
 * \param[in]    arg 测试配置输入参数
 * \param[out]   none
 * \return       none
 * \retval
 * \ingroup      bt_common_gen_addr.c
 */
/*******************************************************************************/
uint32 sample_sound_data(void)
{
488a584e:	b424      	lw	a0,488a58dc <.LBE5+0xc>
488a5850:	6b02      	li	v1,2
488a5852:	9ca0      	lw	a1,0(a0)
488a5854:	6e00      	li	a2,0
488a5856:	ed6d      	or	a1,v1
488a5858:	dca0      	sw	a1,0(a0)
488a585a:	9c40      	lw	v0,0(a0)
488a585c:	6d01      	li	a1,1
488a585e:	eaad      	or	v0,a1
488a5860:	dc40      	sw	v0,0(a0)
488a5862:	b420      	lw	a0,488a58e0 <.LBE5+0x10>
488a5864:	f7e7 4b1e 	addiu	v1,16382
488a5868:	dcc0      	sw	a2,0(a0)
488a586a:	9ce0      	lw	a3,0(a0)
488a586c:	b01b      	lw	s0,488a58d8 <.LBE5+0x8>
488a586e:	ef6d      	or	a3,v1
488a5870:	dce0      	sw	a3,0(a0)
488a5872:	9c40      	lw	v0,0(a0)
488a5874:	6bb0      	li	v1,176
488a5876:	ea6d      	or	v0,v1
488a5878:	dc40      	sw	v0,0(a0)
488a587a:	9ce0      	lw	a3,0(a0)
488a587c:	b21a      	lw	v0,488a58e4 <.LBE5+0x14>
488a587e:	dce0      	sw	a3,0(a0)
488a5880:	b71a      	lw	a3,488a58e8 <.LBE5+0x18>
488a5882:	f140 4b10 	addiu	v1,336
488a5886:	da00      	sw	s0,0(v0)
488a5888:	df60      	sw	v1,0(a3)
488a588a:	9c40      	lw	v0,0(a0)
488a588c:	67e4      	move	a3,a0
488a588e:	eaad      	or	v0,a1
488a5890:	dc40      	sw	v0,0(a0)
488a5892:	9c60      	lw	v1,0(a0)
488a5894:	ebac      	and	v1,a1
488a5896:	2bfd      	bnez	v1,488a5892 <.LBB2+0x44>
488a5898:	4641      	addiu	v0,a2,1
488a589a:	67c2      	move	a2,v0
488a589c:	ee11      	zeb	a2
488a589e:	5e02      	sltiu	a2,2
488a58a0:	6004      	bteqz	488a58aa <.LBB2+0x5c>
488a58a2:	9c60      	lw	v1,0(a0)
488a58a4:	ebad      	or	v1,a1
488a58a6:	dc60      	sw	v1,0(a0)
488a58a8:	17f4      	b	488a5892 <.LBB2+0x44>
488a58aa:	df60      	sw	v1,0(a3)
488a58ac:	dc60      	sw	v1,0(a0)

488a58ae <.LBB5>:
488a58ae:	67a3      	move	a1,v1
488a58b0:	f200 6f00 	li	a3,512
488a58b4:	67d0      	move	a2,s0
488a58b6:	f3e0 6c1e 	li	a0,1022
488a58ba:	8e40      	lh	v0,0(a2)
488a58bc:	5200      	slti	v0,0
488a58be:	6762      	move	v1,v0
488a58c0:	6001      	bteqz	488a58c4 <.LBB5+0x16>
488a58c2:	eb4b      	neg	v1,v0
488a58c4:	448e      	addiu	a0,a0,-2
488a58c6:	5400      	slti	a0,0
488a58c8:	e575      	addu	a1,v1
488a58ca:	46c4      	addiu	a2,a2,4
488a58cc:	60f6      	bteqz	488a58ba <.LBB5+0xc>
488a58ce:	edfb      	divu	zero,a1,a3

488a58d0 <.LBE5>:
488a58d0:	ea12      	mflo	v0
    uint32 power_value;

    //mic只有一个左声道，使用左声道采集数据
    start_sample_sound(g_adc_buffer, sizeof(g_adc_buffer));

    //字节数据转换成uint16
    power_value = calculate_power_value(g_adc_buffer, sizeof(g_adc_buffer) / sizeof(short));

    return power_value;
}
488a58d2:	ea31      	zeh	v0
488a58d4:	6421      	restore	8,s0
488a58d6:	e8a0      	jrc	ra
488a58d8:	5a58      	sltiu	v0,88
488a58da:	488a      	addiu	s0,-118
488a58dc:	1010      	b	488a58fe <tick_ISR+0x12>
488a58de:	c005      	sb	s0,5(s0)
488a58e0:	0028      	addiu	s0,sp,160
488a58e2:	c00c      	sb	s0,12(s0)
488a58e4:	0034      	addiu	s0,sp,208
488a58e6:	c00c      	sb	s0,12(s0)
488a58e8:	003c      	addiu	s0,sp,240
488a58ea:	c00c      	sb	s0,12(s0)

488a58ec <tick_ISR>:
488a58ec:	64f4      	save	32,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 * \挂载的timer1中断函数
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \retval
 * \ingroup      bt_common_gen_addr.c
 */
/*******************************************************************************/
void tick_ISR(void)
{
488a58ee:	b109      	lw	s1,488a5910 <tick_ISR+0x24>
    if(g_sound_index < MAX_SAMPLE_CNT)
488a58f0:	a140      	lbu	v0,0(s1)
488a58f2:	5a32      	sltiu	v0,50
488a58f4:	600b      	bteqz	488a590c <tick_ISR+0x20>
488a58f6:	a1c0      	lbu	a2,0(s1)
    {
        g_sound_data[g_sound_index] = (uint16)sample_sound_data();
488a58f8:	b507      	lw	a1,488a5914 <tick_ISR+0x28>
488a58fa:	ee11      	zeb	a2
488a58fc:	30c4      	sll	s0,a2,1
488a58fe:	1851 9613 	jal	488a584c <sample_sound_data>
488a5902:	e0a1      	addu	s0,a1
488a5904:	a180      	lbu	a0,0(s1)
        g_sound_index++;
488a5906:	c840      	sh	v0,0(s0)
488a5908:	4461      	addiu	v1,a0,1
488a590a:	c160      	sb	v1,0(s1)
488a590c:	6474      	restore	32,ra,s0-s1
    }
}
488a590e:	e8a0      	jrc	ra
488a5910:	5ebc      	sltiu	a2,188
488a5912:	488a      	addiu	s0,-118
488a5914:	5e58      	sltiu	a2,88
488a5916:	488a      	addiu	s0,-118

488a5918 <tick_ISR_install>:
488a5918:	64c3      	save	24,ra

void tick_ISR_install(void)
{
488a591a:	b409      	lw	a0,488a593c <tick_ISR_install+0x24>
    timer_id = sys_set_irq_timer1(tick_ISR, 1);
488a591c:	b209      	lw	v0,488a5940 <tick_ISR_install+0x28>
488a591e:	6d01      	li	a1,1
488a5920:	6e00      	li	a2,0
488a5922:	ea40      	jalr	v0
488a5924:	6f21      	li	a3,33
488a5926:	b405      	lw	a0,488a5938 <tick_ISR_install+0x20>
488a5928:	ea91      	seb	v0
488a592a:	dc40      	sw	v0,0(a0)
488a592c:	b206      	lw	v0,488a5944 <tick_ISR_install+0x2c>
    g_sound_index = 0;
488a592e:	6b00      	li	v1,0
488a5930:	c260      	sb	v1,0(v0)
488a5932:	6443      	restore	24,ra
488a5934:	e8a0      	jrc	ra
488a5936:	0000      	addiu	s0,sp,0
488a5938:	5ec0      	sltiu	a2,192
488a593a:	488a      	addiu	s0,-118
488a593c:	58ed      	sltiu	s0,237
488a593e:	488a      	addiu	s0,-118
488a5940:	e901      	sdbbp	8
488a5942:	bfc1      	lwu	a2,4(a3)
488a5944:	5ebc      	sltiu	a2,188
488a5946:	488a      	addiu	s0,-118

488a5948 <tick_ISR_uninstall>:
488a5948:	64c3      	save	24,ra
}

void tick_ISR_uninstall(void)
{
488a594a:	b305      	lw	v1,488a595c <tick_ISR_uninstall+0x14>
    sys_del_irq_timer1((uint32)timer_id);
488a594c:	6d00      	li	a1,0
488a594e:	9b80      	lw	a0,0(v1)
488a5950:	b204      	lw	v0,488a5960 <tick_ISR_uninstall+0x18>
488a5952:	67c5      	move	a2,a1
488a5954:	ea40      	jalr	v0
488a5956:	6f22      	li	a3,34
488a5958:	6443      	restore	24,ra
488a595a:	e8a0      	jrc	ra
488a595c:	5ec0      	sltiu	a2,192
488a595e:	488a      	addiu	s0,-118
488a5960:	e901      	sdbbp	8
488a5962:	bfc1      	lwu	a2,4(a3)

488a5964 <gen_random_lap>:
488a5964:	64f4      	save	32,ra,s0-s1
}

/******************************************************************************/
/*!
 * \par  Description:
 * \生成蓝牙LAP域随机地址
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \retval
 * \ingroup      bt_common_gen_addr.c
 */
/*******************************************************************************/
uint32 gen_random_lap(void)
{
488a5966:	6c00      	li	a0,0
    uint8 i;

    uint32 temp_rand;

    uint32 high_val;

    sys_os_sched_lock();
488a5968:	b221      	lw	v0,488a59ec <gen_random_lap+0x88>
488a596a:	67a4      	move	a1,a0
488a596c:	67c4      	move	a2,a0
488a596e:	ea40      	jalr	v0
488a5970:	6f33      	li	a3,51
488a5972:	1851 9600 	jal	488a5800 <sample_sound_init>

    sample_sound_init();
488a5976:	6500      	nop
488a5978:	1851 9646 	jal	488a5918 <tick_ISR_install>

    tick_ISR_install();
488a597c:	6500      	nop
488a597e:	b41d      	lw	a0,488a59f0 <gen_random_lap+0x8c>

    while(1)
    {
        if(g_sound_index == MAX_SAMPLE_CNT)
488a5980:	a460      	lbu	v1,0(a0)
488a5982:	eb11      	zeb	v1
488a5984:	7332      	cmpi	v1,50
488a5986:	6108      	btnez	488a5998 <gen_random_lap+0x34>
488a5988:	1851 9652 	jal	488a5948 <tick_ISR_uninstall>
        {
            tick_ISR_uninstall();
488a598c:	6800      	li	s0,0
488a598e:	1851 960b 	jal	488a582c <sample_sound_exit>
            sample_sound_exit();
488a5992:	6500      	nop
488a5994:	6790      	move	a0,s0
            break;
        }

        sys_os_time_dly(2);
    }

    temp_rand = 0;

    for(i = 0; i < MAX_SAMPLE_CNT; i++)
488a5996:	100f      	b	488a59b6 <gen_random_lap+0x52>
488a5998:	6d00      	li	a1,0
488a599a:	b015      	lw	s0,488a59ec <gen_random_lap+0x88>
488a599c:	6c02      	li	a0,2
488a599e:	67c5      	move	a2,a1
488a59a0:	e840      	jalr	s0
488a59a2:	6f31      	li	a3,49
488a59a4:	17ec      	b	488a597e <gen_random_lap+0x1a>
488a59a6:	b214      	lw	v0,488a59f4 <gen_random_lap+0x90>
    {
        temp_rand += g_sound_data[i];
488a59a8:	3184      	sll	s1,a0,1
488a59aa:	e15d      	addu	a3,s1,v0
488a59ac:	afc0      	lhu	a2,0(a3)
488a59ae:	44a1      	addiu	a1,a0,1
488a59b0:	6785      	move	a0,a1
488a59b2:	e0c1      	addu	s0,a2
488a59b4:	ec11      	zeb	a0
488a59b6:	5c32      	sltiu	a0,50
488a59b8:	61f6      	btnez	488a59a6 <gen_random_lap+0x42>
488a59ba:	6c00      	li	a0,0
    }

    temp_rand += sys_random();
488a59bc:	b10c      	lw	s1,488a59ec <gen_random_lap+0x88>
488a59be:	67a4      	move	a1,a0
488a59c0:	67c4      	move	a2,a0
488a59c2:	e940      	jalr	s1
488a59c4:	6f35      	li	a3,53
488a59c6:	e041      	addu	s0,v0
488a59c8:	e831      	zeh	s0

    temp_rand &= 0xffff;
488a59ca:	6eff      	li	a2,255

    high_val = ((temp_rand >> 8) + (temp_rand & 0xff)) & 0xff;
488a59cc:	6750      	move	v0,s0
488a59ce:	3702      	srl	a3,s0,8
488a59d0:	eacc      	and	v0,a2
488a59d2:	e755      	addu	a1,a3,v0
488a59d4:	edcc      	and	a1,a2
488a59d6:	34a0      	sll	a0,a1,8

    temp_rand += (high_val << 16);
488a59d8:	3380      	sll	v1,a0,8
488a59da:	6c00      	li	a0,0

    sys_os_sched_unlock();
488a59dc:	e061      	addu	s0,v1
488a59de:	67a4      	move	a1,a0
488a59e0:	67c4      	move	a2,a0
488a59e2:	e940      	jalr	s1
488a59e4:	6f34      	li	a3,52
488a59e6:	6750      	move	v0,s0

    return temp_rand;
}
488a59e8:	6474      	restore	32,ra,s0-s1
488a59ea:	e8a0      	jrc	ra
488a59ec:	e901      	sdbbp	8
488a59ee:	bfc1      	lwu	a2,4(a3)
488a59f0:	5ebc      	sltiu	a2,188
488a59f2:	488a      	addiu	s0,-118
488a59f4:	5e58      	sltiu	a2,88
488a59f6:	488a      	addiu	s0,-118

488a59f8 <com_btmanager_gen_random_lap>:
488a59f8:	64f7      	save	56,ra,s0-s1

//生成蓝牙LAP域随机地址
uint32 com_btmanager_gen_random_lap(void)
{
488a59fa:	b117      	lw	s1,488a5a54 <.LBE8+0x20>
    uint32 bt_random_lap;
    uint16 btstack_magic;
    int32 ret_val;
    uint32 i;
    uint8 bt_addr[6];

    nvram_param_rw_t param_rw;

    sys_vm_read(&btstack_magic, VM_BTSTACK, sizeof(uint16));
488a59fc:	0404      	addiu	a0,sp,16
488a59fe:	6d00      	li	a1,0
488a5a00:	6e02      	li	a2,2
488a5a02:	e940      	jalr	s1
488a5a04:	6f12      	li	a3,18
488a5a06:	677d      	move	v1,sp

    if ((btstack_magic != VRAM_MAGIC(VM_BTSTACK)) && (btstack_magic != ATT_MAGIC))
488a5a08:	ab48      	lhu	v0,16(v1)
488a5a0a:	f5aa 720a 	cmpi	v0,21930
488a5a0e:	6013      	bteqz	488a5a36 <.LBE8+0x2>
488a5a10:	f3d5 720d 	cmpi	v0,43981
488a5a14:	6010      	bteqz	488a5a36 <.LBE8+0x2>

488a5a16 <.LBB8>:
488a5a16:	1ad0 96db 	jal	485a5b6c <keytone_play_deal_wait>
    {
        //如果还在播放按键音，要等待按键音播放完毕
        keytone_play_deal_wait();
488a5a1a:	6500      	nop
488a5a1c:	19d0 96f6 	jal	483a5bd8 <com_tts_state_play_wait>

        //如果还在播报TTS，要等待TTS播报完毕
        com_tts_state_play_wait();
488a5a20:	6500      	nop
488a5a22:	1851 9659 	jal	488a5964 <gen_random_lap>

        //生成随机数
        bt_random_lap = gen_random_lap();
488a5a26:	6500      	nop
488a5a28:	67a2      	move	a1,v0
        PRINT_INFO_INT("gen random lap:", bt_random_lap);    
488a5a2a:	0c06      	la	a0,488a5a40 <.LBE8+0xc>
488a5a2c:	6e02      	li	a2,2
488a5a2e:	6f4b      	li	a3,75
488a5a30:	e940      	jalr	s1
488a5a32:	6702      	move	s0,v0

488a5a34 <.LBE8>:
488a5a34:	1001      	b	488a5a38 <.LBE8+0x4>
488a5a36:	6800      	li	s0,0
    }
    else
    {
        bt_random_lap = 0;         
488a5a38:	6750      	move	v0,s0
    }

    return bt_random_lap;
}
488a5a3a:	6477      	restore	56,ra,s0-s1
488a5a3c:	e8a0      	jrc	ra
488a5a3e:	0000      	addiu	s0,sp,0
488a5a40:	493c      	addiu	s1,60
488a5a42:	203e      	beqz	s0,488a5ac0 <g_adc_buffer+0x68>
488a5a44:	6567      	move	v1,a3
488a5a46:	206e      	beqz	s0,488a5b24 <g_adc_buffer+0xcc>
488a5a48:	6172      	btnez	488a5b2e <g_adc_buffer+0xd6>
488a5a4a:	646e      	restore	112,ra,s0
488a5a4c:	6d6f      	li	a1,111
488a5a4e:	6c20      	li	a0,32
488a5a50:	7061      	cmpi	s0,97
488a5a52:	003a      	addiu	s0,sp,232
488a5a54:	e901      	sdbbp	8
488a5a56:	bfc1      	lwu	a2,4(a3)

488a5a58 <g_adc_buffer>:
	...

488a5e58 <g_sound_data>:
	...

488a5ebc <g_sound_index>:
488a5ebc:	0000 0000                                   ....

488a5ec0 <timer_id>:
	...
Disassembly of section BANK_UI_1_35:

488e5800 <__set_timer>:
488e5800:	64f7      	save	56,ra,s0-s1
/*! \cond */

//创建应用级定时器
static inline int8 __set_timer(timer_attrb_e attrb, timer_type_e type, uint8 tag, uint16 timeout, timer_proc func_proc)
{
488e5802:	d606      	sw	a2,24(sp)
488e5804:	6e01      	li	a2,1
    app_timer_t *tm;
    int8 timer_id = -1;
488e5806:	eacb      	neg	v0,a2
488e5808:	ed11      	zeb	a1
488e580a:	d208      	sw	v0,32(sp)
488e580c:	d505      	sw	a1,20(sp)
488e580e:	9312      	lw	v1,72(sp)
    int8 i;
    bool com_app_timer_flag = FALSE;
    app_timer_t *timers;
    uint8 count;

    //服务例程不能为NULL
    if (!func_proc)
488e5810:	9508      	lw	a1,32(sp)
    {
        return -1;
488e5812:	ec11      	zeb	a0
488e5814:	d404      	sw	a0,16(sp)
488e5816:	d707      	sw	a3,28(sp)
488e5818:	4241      	addiu	v0,v0,1
488e581a:	651d      	move	t8,a1
488e581c:	2362      	beqz	v1,488e58e2 <__set_timer+0xe2>
488e581e:	2761      	beqz	a3,488e58e2 <__set_timer+0xe2>
    }

    //定时周期不能为0
    if (0 == timeout)
488e5820:	7402      	cmpi	a0,2
    {
        return -1;
    }

    if (attrb == APP_TIMER_ATTRB_COM_UI)
488e5822:	6103      	btnez	488e582a <__set_timer+0x2a>
488e5824:	6c00      	li	a0,0
    {
        com_app_timer_flag = TRUE;
        attrb = APP_TIMER_ATTRB_UI;
488e5826:	4241      	addiu	v0,v0,1
488e5828:	d404      	sw	a0,16(sp)
488e582a:	9704      	lw	a3,16(sp)
    }
    if (attrb == APP_TIMER_ATTRB_COM_CONTROL)
488e582c:	7703      	cmpi	a3,3
488e582e:	6102      	btnez	488e5834 <__set_timer+0x34>
488e5830:	6a01      	li	v0,1
    {
        com_app_timer_flag = TRUE;
488e5832:	d204      	sw	v0,16(sp)
488e5834:	d209      	sw	v0,36(sp)
        attrb = APP_TIMER_ATTRB_CONTROL;
    }

    if (com_app_timer_flag == TRUE)
488e5836:	2231      	beqz	v0,488e589a <__set_timer+0x9a>
488e5838:	b433      	lw	a0,488e5904 <__set_timer+0x104>
    {
        timers = g_com_app_timer_vct;
488e583a:	6b08      	li	v1,8
        count = COM_APP_TIMER_MAX;
488e583c:	1032      	b	488e58a2 <__set_timer+0xa2>
488e583e:	67fd      	move	a3,sp
    }
    else
    {
        timers = g_app_timer_vector;
        count = g_app_timer_count;
    }

    //检索符合条件的可用软定时器
    for (i = 0; i < count; i++)
    {
        if (timers[i].state == TIMER_STATE_NOUSED)
        {
            timer_id = i;
            tm = timers + timer_id;

            //初始化软定时器
            tm->timeout = timeout;
488e5840:	afae      	lhu	a1,28(a3)
488e5842:	d208      	sw	v0,32(sp)
488e5844:	b233      	lw	v0,488e5910 <__set_timer+0x110>
            tm->timeout_off = 0;
            tm->timeout_expires = sys_get_ab_timer() + timeout;
488e5846:	6786      	move	a0,a2
488e5848:	c9a2      	sh	a1,4(s1)
488e584a:	c9c3      	sh	a2,6(s1)
488e584c:	67a6      	move	a1,a2
488e584e:	ea40      	jalr	v0
488e5850:	6f1c      	li	a3,28
488e5852:	9612      	lw	a2,72(sp)
            tm->func_proc = func_proc;
488e5854:	9307      	lw	v1,28(sp)
488e5856:	6f04      	li	a3,4
            tm->state = TIMER_STATE_RUNNING;
488e5858:	d9c3      	sw	a2,12(s1)
488e585a:	a1c0      	lbu	a2,0(s1)
488e585c:	9504      	lw	a1,16(sp)
            tm->attrb = attrb;
488e585e:	e271      	addu	a0,v0,v1
488e5860:	eaeb      	neg	v0,a3
488e5862:	ee4c      	and	a2,v0
488e5864:	6b0d      	li	v1,13
488e5866:	6a01      	li	v0,1
488e5868:	ee4d      	or	a2,v0
488e586a:	e8ac      	and	s0,a1
488e586c:	d982      	sw	a0,8(s1)
488e586e:	9505      	lw	a1,20(sp)
            tm->type = type;
488e5870:	ec6b      	neg	a0,v1
488e5872:	3708      	sll	a3,s0,2
488e5874:	ee8c      	and	a2,a0
488e5876:	6b11      	li	v1,17
488e5878:	eaac      	and	v0,a1
488e587a:	eeed      	or	a2,a3
488e587c:	ef6b      	neg	a3,v1
488e587e:	3450      	sll	a0,v0,4
488e5880:	eeec      	and	a2,a3
488e5882:	ee8d      	or	a2,a0
488e5884:	4ff0      	addiu	a3,-16
            tm->twinkle = FALSE;
488e5886:	eeec      	and	a2,a3
488e5888:	4fe0      	addiu	a3,-32
            tm->on_off = FALSE;
488e588a:	eeec      	and	a2,a3
488e588c:	c1c0      	sb	a2,0(s1)
488e588e:	675d      	move	v0,sp
            tm->tag = tag;
488e5890:	a2b8      	lbu	a1,24(v0)
488e5892:	6b00      	li	v1,0
            tm->count = 0;
488e5894:	c1a1      	sb	a1,1(s1)
488e5896:	c162      	sb	v1,2(s1)
488e5898:	1010      	b	488e58ba <__set_timer+0xba>
            break;
488e589a:	b31c      	lw	v1,488e5908 <__set_timer+0x108>
488e589c:	b61c      	lw	a2,488e590c <__set_timer+0x10c>
488e589e:	9b80      	lw	a0,0(v1)
488e58a0:	a660      	lbu	v1,0(a2)
488e58a2:	6a00      	li	v0,0
488e58a4:	230a      	beqz	v1,488e58ba <__set_timer+0xba>
488e58a6:	6803      	li	s0,3
488e58a8:	6724      	move	s1,a0
488e58aa:	a1c0      	lbu	a2,0(s1)
488e58ac:	ee0c      	and	a2,s0
488e58ae:	26c7      	beqz	a2,488e583e <__set_timer+0x3e>
488e58b0:	4241      	addiu	v0,v0,1
488e58b2:	ea91      	seb	v0
488e58b4:	ea62      	slt	v0,v1
488e58b6:	4910      	addiu	s1,16
488e58b8:	61f8      	btnez	488e58aa <__set_timer+0xaa>
488e58ba:	9409      	lw	a0,36(sp)
        }
    }

    if ((com_app_timer_flag == TRUE) && (timer_id != -1))
488e58bc:	2407      	beqz	a0,488e58cc <__set_timer+0xcc>
488e58be:	9308      	lw	v1,32(sp)
488e58c0:	ea6f      	not	v0,v1
488e58c2:	2204      	beqz	v0,488e58cc <__set_timer+0xcc>
488e58c4:	6d40      	li	a1,64
    { //高4bit置为0100表示COM软定时器
        timer_id |= 0x40;
488e58c6:	ed6d      	or	a1,v1
488e58c8:	ed91      	seb	a1
488e58ca:	d508      	sw	a1,32(sp)
488e58cc:	9608      	lw	a2,32(sp)
    }

    if (timer_id == -1)
488e58ce:	efcf      	not	a3,a2
488e58d0:	651e      	move	t8,a2
    {
        PRINT_ERR("set app timer fail!!");
        while (1)
        {
            ; //nothing
        }
    }

    return timer_id;
488e58d2:	2f07      	bnez	a3,488e58e2 <__set_timer+0xe2>
488e58d4:	6d00      	li	a1,0
488e58d6:	b00f      	lw	s0,488e5910 <__set_timer+0x110>
488e58d8:	0c04      	la	a0,488e58e8 <__set_timer+0xe8>
488e58da:	67c5      	move	a2,a1
488e58dc:	e840      	jalr	s0
488e58de:	6f4b      	li	a3,75
488e58e0:	17ff      	b	488e58e0 <__set_timer+0xe0>
488e58e2:	6758      	move	v0,t8
}
488e58e4:	6477      	restore	56,ra,s0-s1
488e58e6:	e8a0      	jrc	ra
488e58e8:	453c      	daddiu	s1,a1,-4
488e58ea:	203e      	beqz	s0,488e5968 <.LBB2+0x2>
488e58ec:	6573      	move	s3,v1
488e58ee:	2074      	beqz	s0,488e59d8 <modify_app_timer+0xc>
488e58f0:	7061      	cmpi	s0,97
488e58f2:	2070      	beqz	s0,488e59d4 <modify_app_timer+0x8>
488e58f4:	6974      	li	s1,116
488e58f6:	656d      	move	t3,a1
488e58f8:	2072      	beqz	s0,488e59de <modify_app_timer+0x12>
488e58fa:	6166      	btnez	488e59c8 <.LBE2+0xe>
488e58fc:	6c69      	li	a0,105
488e58fe:	2121      	beqz	s1,488e5942 <set_single_shot_app_timer+0x12>
488e5900:	0000      	addiu	s0,sp,0
488e5902:	0000      	addiu	s0,sp,0
488e5904:	a104      	lbu	s0,4(s1)
488e5906:	9fc1      	lw	a2,4(a3)
488e5908:	9988      	lw	a0,32(s1)
488e590a:	9fc1      	lw	a2,4(a3)
488e590c:	9998      	lw	a0,96(s1)
488e590e:	9fc1      	lw	a2,4(a3)
488e5910:	e901      	sdbbp	8
488e5912:	bfc1      	lwu	a2,4(a3)

488e5914 <set_app_timer>:
488e5914:	64c4      	save	32,ra
488e5916:	3282      	srl	v0,a0,8
488e5918:	d604      	sw	a2,16(sp)
488e591a:	67e5      	move	a3,a1
488e591c:	67c2      	move	a2,v0
488e591e:	ef31      	zeh	a3
488e5920:	ec11      	zeb	a0
488e5922:	6d00      	li	a1,0
488e5924:	1871 9600 	jal	488e5800 <__set_timer>
488e5928:	ee11      	zeb	a2
488e592a:	6444      	restore	32,ra
488e592c:	e8a0      	jrc	ra
	...

488e5930 <set_single_shot_app_timer>:
488e5930:	64c4      	save	32,ra
488e5932:	3282      	srl	v0,a0,8
488e5934:	d604      	sw	a2,16(sp)
488e5936:	67e5      	move	a3,a1
488e5938:	67c2      	move	a2,v0
488e593a:	ef31      	zeh	a3
488e593c:	ec11      	zeb	a0
488e593e:	6d01      	li	a1,1
488e5940:	1871 9600 	jal	488e5800 <__set_timer>
488e5944:	ee11      	zeb	a2
488e5946:	6444      	restore	32,ra
488e5948:	e8a0      	jrc	ra
	...

488e594c <set_twinkle_app_timer>:
488e594c:	64e4      	save	32,ra,s0
488e594e:	3682      	srl	a2,a0,8
488e5950:	6f01      	li	a3,1
488e5952:	ee11      	zeb	a2
488e5954:	6705      	move	s0,a1
488e5956:	ec11      	zeb	a0
488e5958:	6d00      	li	a1,0
488e595a:	1871 9600 	jal	488e5800 <__set_timer>
488e595e:	d704      	sw	a3,16(sp)
488e5960:	67c2      	move	a2,v0
488e5962:	ea4f      	not	v0
488e5964:	222a      	beqz	v0,488e59ba <.LBE2>

488e5966 <.LBB2>:
488e5966:	6bf0      	li	v1,240

static inline bool __set_timer_twinkle(int8 timer_id, twinkle_app_timer_param_t *twinkle_param)
{
    app_timer_t *tm;
    app_timer_t *timers;
    uint8 count;

    if ((timer_id & 0xf0) == 0x40)
488e5968:	ebcc      	and	v1,a2
488e596a:	7340      	cmpi	v1,64
488e596c:	6786      	move	a0,a2
488e596e:	6105      	btnez	488e597a <.LBB2+0x14>
488e5970:	6c0f      	li	a0,15
    {
        timer_id &= 0x0f;
488e5972:	b514      	lw	a1,488e59c0 <.LBE2+0x6>
        timers = g_com_app_timer_vct;
488e5974:	eccc      	and	a0,a2
488e5976:	6b08      	li	v1,8
        count = COM_APP_TIMER_MAX;
488e5978:	1004      	b	488e5982 <.LBB2+0x1c>
488e597a:	b213      	lw	v0,488e59c4 <.LBE2+0xa>
    }
    else
    {
        timers = g_app_timer_vector;
488e597c:	b713      	lw	a3,488e59c8 <.LBE2+0xe>
        count = g_app_timer_count;
488e597e:	9aa0      	lw	a1,0(v0)
488e5980:	a760      	lbu	v1,0(a3)
488e5982:	ef8f      	not	a3,a0
    }

    if ((timer_id == -1) || ((uint8) timer_id >= count)) //访问越界
488e5984:	271a      	beqz	a3,488e59ba <.LBE2>
488e5986:	6744      	move	v0,a0
488e5988:	ea11      	zeb	v0
488e598a:	ea63      	sltu	v0,v1
488e598c:	6016      	bteqz	488e59ba <.LBE2>
488e598e:	3490      	sll	a0,4
    {
        return FALSE;
    }

    tm = timers + timer_id;
488e5990:	e591      	addu	a0,a1,a0
488e5992:	a4a0      	lbu	a1,0(a0)

    tm->twinkle = TRUE;
488e5994:	6f20      	li	a3,32
488e5996:	eded      	or	a1,a3
488e5998:	c4a0      	sb	a1,0(a0)
488e599a:	a041      	lbu	v0,1(s0)
    tm->on_off = twinkle_param->on_off;
488e599c:	4fe1      	addiu	a3,-31
488e599e:	eaec      	and	v0,a3
488e59a0:	4fbe      	addiu	a3,-66
488e59a2:	3358      	sll	v1,v0,6
488e59a4:	efac      	and	a3,a1
488e59a6:	ef6d      	or	a3,v1
488e59a8:	c4e0      	sb	a3,0(a0)
488e59aa:	a040      	lbu	v0,0(s0)
    tm->count = twinkle_param->count;
488e59ac:	c442      	sb	v0,2(a0)
488e59ae:	a8e1      	lhu	a3,2(s0)
    tm->timeout = twinkle_param->timeout_on;
488e59b0:	98a2      	lw	a1,8(s0)
    tm->timeout_off = twinkle_param->timeout_off;
    tm->func_proc = twinkle_param->func_proc;
488e59b2:	cce2      	sh	a3,4(a0)
488e59b4:	a862      	lhu	v1,4(s0)
488e59b6:	dca3      	sw	a1,12(a0)
488e59b8:	cc63      	sh	v1,6(a0)

488e59ba <.LBE2>:
488e59ba:	6746      	move	v0,a2
488e59bc:	6464      	restore	32,ra,s0
488e59be:	e8a0      	jrc	ra
488e59c0:	a104      	lbu	s0,4(s1)
488e59c2:	9fc1      	lw	a2,4(a3)
488e59c4:	9988      	lw	a0,32(s1)
488e59c6:	9fc1      	lw	a2,4(a3)
488e59c8:	9998      	lw	a0,96(s1)
488e59ca:	9fc1      	lw	a2,4(a3)

488e59cc <modify_app_timer>:
488e59cc:	64f4      	save	32,ra,s0-s1
488e59ce:	ec91      	seb	a0
488e59d0:	6af0      	li	v0,240
488e59d2:	ea8c      	and	v0,a0
488e59d4:	6705      	move	s0,a1
488e59d6:	7240      	cmpi	v0,64
488e59d8:	e831      	zeh	s0
488e59da:	6105      	btnez	488e59e6 <modify_app_timer+0x1a>
488e59dc:	6b0f      	li	v1,15
488e59de:	b511      	lw	a1,488e5a20 <modify_app_timer+0x54>
488e59e0:	ec6c      	and	a0,v1
488e59e2:	6b08      	li	v1,8
488e59e4:	1004      	b	488e59ee <modify_app_timer+0x22>
488e59e6:	b710      	lw	a3,488e5a24 <modify_app_timer+0x58>
488e59e8:	b610      	lw	a2,488e5a28 <modify_app_timer+0x5c>
488e59ea:	9fa0      	lw	a1,0(a3)
488e59ec:	a660      	lbu	v1,0(a2)
488e59ee:	ea8f      	not	v0,a0
488e59f0:	2204      	beqz	v0,488e59fa <modify_app_timer+0x2e>
488e59f2:	67c4      	move	a2,a0
488e59f4:	ee11      	zeb	a2
488e59f6:	ee63      	sltu	a2,v1
488e59f8:	6102      	btnez	488e59fe <modify_app_timer+0x32>
488e59fa:	6a00      	li	v0,0
488e59fc:	100e      	b	488e5a1a <modify_app_timer+0x4e>
488e59fe:	3390      	sll	v1,a0,4
488e5a00:	e565      	addu	s1,a1,v1
488e5a02:	6750      	move	v0,s0
488e5a04:	200a      	beqz	s0,488e5a1a <modify_app_timer+0x4e>
488e5a06:	6c00      	li	a0,0
488e5a08:	b209      	lw	v0,488e5a2c <modify_app_timer+0x60>
488e5a0a:	67a4      	move	a1,a0
488e5a0c:	67c4      	move	a2,a0
488e5a0e:	c902      	sh	s0,4(s1)
488e5a10:	ea40      	jalr	v0
488e5a12:	6f1c      	li	a3,28
488e5a14:	e211      	addu	a0,v0,s0
488e5a16:	d982      	sw	a0,8(s1)
488e5a18:	6a01      	li	v0,1
488e5a1a:	6474      	restore	32,ra,s0-s1
488e5a1c:	e8a0      	jrc	ra
488e5a1e:	0000      	addiu	s0,sp,0
488e5a20:	a104      	lbu	s0,4(s1)
488e5a22:	9fc1      	lw	a2,4(a3)
488e5a24:	9988      	lw	a0,32(s1)
488e5a26:	9fc1      	lw	a2,4(a3)
488e5a28:	9998      	lw	a0,96(s1)
488e5a2a:	9fc1      	lw	a2,4(a3)
488e5a2c:	e901      	sdbbp	8
488e5a2e:	bfc1      	lwu	a2,4(a3)

488e5a30 <stop_app_timer>:
488e5a30:	ec91      	seb	a0
488e5a32:	6af0      	li	v0,240
488e5a34:	ea8c      	and	v0,a0
488e5a36:	7240      	cmpi	v0,64
488e5a38:	6105      	btnez	488e5a44 <stop_app_timer+0x14>
488e5a3a:	6b0f      	li	v1,15
488e5a3c:	b50e      	lw	a1,488e5a74 <stop_app_timer+0x44>
488e5a3e:	ec6c      	and	a0,v1
488e5a40:	6b08      	li	v1,8
488e5a42:	1004      	b	488e5a4c <stop_app_timer+0x1c>
488e5a44:	b70d      	lw	a3,488e5a78 <stop_app_timer+0x48>
488e5a46:	b60e      	lw	a2,488e5a7c <stop_app_timer+0x4c>
488e5a48:	9fa0      	lw	a1,0(a3)
488e5a4a:	a660      	lbu	v1,0(a2)
488e5a4c:	ea8f      	not	v0,a0
488e5a4e:	2204      	beqz	v0,488e5a58 <stop_app_timer+0x28>
488e5a50:	67c4      	move	a2,a0
488e5a52:	ee11      	zeb	a2
488e5a54:	ee63      	sltu	a2,v1
488e5a56:	6102      	btnez	488e5a5c <stop_app_timer+0x2c>
488e5a58:	e820      	jr	ra
488e5a5a:	6a00      	li	v0,0
488e5a5c:	3690      	sll	a2,a0,4
488e5a5e:	e5d1      	addu	a0,a1,a2
488e5a60:	a4a0      	lbu	a1,0(a0)
488e5a62:	6a04      	li	v0,4
488e5a64:	ef4b      	neg	a3,v0
488e5a66:	edec      	and	a1,a3
488e5a68:	4766      	addiu	v1,a3,6
488e5a6a:	ed6d      	or	a1,v1
488e5a6c:	6a01      	li	v0,1
488e5a6e:	e820      	jr	ra
488e5a70:	c4a0      	sb	a1,0(a0)
488e5a72:	0000      	addiu	s0,sp,0
488e5a74:	a104      	lbu	s0,4(s1)
488e5a76:	9fc1      	lw	a2,4(a3)
488e5a78:	9988      	lw	a0,32(s1)
488e5a7a:	9fc1      	lw	a2,4(a3)
488e5a7c:	9998      	lw	a0,96(s1)
488e5a7e:	9fc1      	lw	a2,4(a3)

488e5a80 <restart_app_timer>:
488e5a80:	64e3      	save	24,ra,s0
488e5a82:	ec91      	seb	a0
488e5a84:	6af0      	li	v0,240
488e5a86:	ea8c      	and	v0,a0
488e5a88:	7240      	cmpi	v0,64
488e5a8a:	6105      	btnez	488e5a96 <restart_app_timer+0x16>
488e5a8c:	6b0f      	li	v1,15
488e5a8e:	b519      	lw	a1,488e5af0 <restart_app_timer+0x70>
488e5a90:	ec6c      	and	a0,v1
488e5a92:	6b08      	li	v1,8
488e5a94:	1004      	b	488e5a9e <restart_app_timer+0x1e>
488e5a96:	b718      	lw	a3,488e5af4 <restart_app_timer+0x74>
488e5a98:	b618      	lw	a2,488e5af8 <restart_app_timer+0x78>
488e5a9a:	9fa0      	lw	a1,0(a3)
488e5a9c:	a660      	lbu	v1,0(a2)
488e5a9e:	ea8f      	not	v0,a0
488e5aa0:	2204      	beqz	v0,488e5aaa <restart_app_timer+0x2a>
488e5aa2:	67c4      	move	a2,a0
488e5aa4:	ee11      	zeb	a2
488e5aa6:	ee63      	sltu	a2,v1
488e5aa8:	6102      	btnez	488e5aae <restart_app_timer+0x2e>
488e5aaa:	6a00      	li	v0,0
488e5aac:	101e      	b	488e5aea <restart_app_timer+0x6a>
488e5aae:	3290      	sll	v0,a0,4
488e5ab0:	e541      	addu	s0,a1,v0
488e5ab2:	a0a0      	lbu	a1,0(s0)
488e5ab4:	6f04      	li	a3,4
488e5ab6:	ebeb      	neg	v1,a3
488e5ab8:	4385      	addiu	a0,v1,5
488e5aba:	ed6c      	and	a1,v1
488e5abc:	ed8d      	or	a1,a0
488e5abe:	4c5f      	addiu	a0,95
488e5ac0:	ecac      	and	a0,a1
488e5ac2:	7460      	cmpi	a0,96
488e5ac4:	c0a0      	sb	a1,0(s0)
488e5ac6:	b20e      	lw	v0,488e5afc <restart_app_timer+0x7c>
488e5ac8:	6107      	btnez	488e5ad8 <restart_app_timer+0x58>
488e5aca:	6c00      	li	a0,0
488e5acc:	67a4      	move	a1,a0
488e5ace:	67c4      	move	a2,a0
488e5ad0:	ea40      	jalr	v0
488e5ad2:	6f1c      	li	a3,28
488e5ad4:	a863      	lhu	v1,6(s0)
488e5ad6:	1006      	b	488e5ae4 <restart_app_timer+0x64>
488e5ad8:	6c00      	li	a0,0
488e5ada:	67a4      	move	a1,a0
488e5adc:	67c4      	move	a2,a0
488e5ade:	ea40      	jalr	v0
488e5ae0:	6f1c      	li	a3,28
488e5ae2:	a862      	lhu	v1,4(s0)
488e5ae4:	e279      	addu	a2,v0,v1
488e5ae6:	d8c2      	sw	a2,8(s0)
488e5ae8:	6a01      	li	v0,1
488e5aea:	6463      	restore	24,ra,s0
488e5aec:	e8a0      	jrc	ra
488e5aee:	0000      	addiu	s0,sp,0
488e5af0:	a104      	lbu	s0,4(s1)
488e5af2:	9fc1      	lw	a2,4(a3)
488e5af4:	9988      	lw	a0,32(s1)
488e5af6:	9fc1      	lw	a2,4(a3)
488e5af8:	9998      	lw	a0,96(s1)
488e5afa:	9fc1      	lw	a2,4(a3)
488e5afc:	e901      	sdbbp	8
488e5afe:	bfc1      	lwu	a2,4(a3)

488e5b00 <kill_app_timer>:
488e5b00:	ec91      	seb	a0
488e5b02:	6af0      	li	v0,240
488e5b04:	ea8c      	and	v0,a0
488e5b06:	7240      	cmpi	v0,64
488e5b08:	6105      	btnez	488e5b14 <kill_app_timer+0x14>
488e5b0a:	6b0f      	li	v1,15
488e5b0c:	b50d      	lw	a1,488e5b40 <kill_app_timer+0x40>
488e5b0e:	ec6c      	and	a0,v1
488e5b10:	6b08      	li	v1,8
488e5b12:	1004      	b	488e5b1c <kill_app_timer+0x1c>
488e5b14:	b70c      	lw	a3,488e5b44 <kill_app_timer+0x44>
488e5b16:	b60d      	lw	a2,488e5b48 <kill_app_timer+0x48>
488e5b18:	9fa0      	lw	a1,0(a3)
488e5b1a:	a660      	lbu	v1,0(a2)
488e5b1c:	ea8f      	not	v0,a0
488e5b1e:	2204      	beqz	v0,488e5b28 <kill_app_timer+0x28>
488e5b20:	67c4      	move	a2,a0
488e5b22:	ee11      	zeb	a2
488e5b24:	ee63      	sltu	a2,v1
488e5b26:	6102      	btnez	488e5b2c <kill_app_timer+0x2c>
488e5b28:	e820      	jr	ra
488e5b2a:	6a00      	li	v0,0
488e5b2c:	3290      	sll	v0,a0,4
488e5b2e:	e55d      	addu	a3,a1,v0
488e5b30:	a7a0      	lbu	a1,0(a3)
488e5b32:	6b04      	li	v1,4
488e5b34:	ec6b      	neg	a0,v1
488e5b36:	ed8c      	and	a1,a0
488e5b38:	6a01      	li	v0,1
488e5b3a:	e820      	jr	ra
488e5b3c:	c7a0      	sb	a1,0(a3)
488e5b3e:	0000      	addiu	s0,sp,0
488e5b40:	a104      	lbu	s0,4(s1)
488e5b42:	9fc1      	lw	a2,4(a3)
488e5b44:	9988      	lw	a0,32(s1)
488e5b46:	9fc1      	lw	a2,4(a3)
488e5b48:	9998      	lw	a0,96(s1)
488e5b4a:	9fc1      	lw	a2,4(a3)

488e5b4c <init_app_timers>:
488e5b4c:	ed11      	zeb	a1
488e5b4e:	6745      	move	v0,a1
488e5b50:	2516      	beqz	a1,488e5b7e <init_app_timers+0x32>
488e5b52:	b30c      	lw	v1,488e5b80 <init_app_timers+0x34>
488e5b54:	b20c      	lw	v0,488e5b84 <init_app_timers+0x38>
488e5b56:	db80      	sw	a0,0(v1)
488e5b58:	c2a0      	sb	a1,0(v0)
488e5b5a:	6e00      	li	a2,0
488e5b5c:	250c      	beqz	a1,488e5b76 <init_app_timers+0x2a>
488e5b5e:	6f04      	li	a3,4
488e5b60:	efeb      	neg	a3
488e5b62:	33d0      	sll	v1,a2,4
488e5b64:	e46d      	addu	v1,a0,v1
488e5b66:	a340      	lbu	v0,0(v1)
488e5b68:	eaec      	and	v0,a3
488e5b6a:	c340      	sb	v0,0(v1)
488e5b6c:	4641      	addiu	v0,a2,1
488e5b6e:	67c2      	move	a2,v0
488e5b70:	ee11      	zeb	a2
488e5b72:	eea3      	sltu	a2,a1
488e5b74:	61f6      	btnez	488e5b62 <init_app_timers+0x16>
488e5b76:	b405      	lw	a0,488e5b88 <init_app_timers+0x3c>
488e5b78:	6d00      	li	a1,0
488e5b7a:	c4a0      	sb	a1,0(a0)
488e5b7c:	6a01      	li	v0,1
488e5b7e:	e8a0      	jrc	ra
488e5b80:	9988      	lw	a0,32(s1)
488e5b82:	9fc1      	lw	a2,4(a3)
488e5b84:	9998      	lw	a0,96(s1)
488e5b86:	9fc1      	lw	a2,4(a3)
488e5b88:	998d      	lw	a0,52(s1)
488e5b8a:	9fc1      	lw	a2,4(a3)

488e5b8c <standby_restart_all_app_timer>:
488e5b8c:	f004 64f5 	save	a0,40,ra,s0-s1
488e5b90:	ed11      	zeb	a1
488e5b92:	d504      	sw	a1,16(sp)
488e5b94:	6900      	li	s1,0
488e5b96:	2522      	beqz	a1,488e5bdc <standby_restart_all_app_timer+0x50>
488e5b98:	930a      	lw	v1,40(sp)
488e5b9a:	3430      	sll	a0,s1,4
488e5b9c:	e381      	addu	s0,v1,a0
488e5b9e:	a060      	lbu	v1,0(s0)
488e5ba0:	6a03      	li	v0,3
488e5ba2:	ea6c      	and	v0,v1
488e5ba4:	7201      	cmpi	v0,1
488e5ba6:	6114      	btnez	488e5bd0 <standby_restart_all_app_timer+0x44>
488e5ba8:	6d60      	li	a1,96
488e5baa:	ebac      	and	v1,a1
488e5bac:	ebaa      	cmp	v1,a1
488e5bae:	b20d      	lw	v0,488e5be0 <standby_restart_all_app_timer+0x54>
488e5bb0:	6107      	btnez	488e5bc0 <standby_restart_all_app_timer+0x34>
488e5bb2:	6c00      	li	a0,0
488e5bb4:	67a4      	move	a1,a0
488e5bb6:	67c4      	move	a2,a0
488e5bb8:	ea40      	jalr	v0
488e5bba:	6f1c      	li	a3,28
488e5bbc:	a863      	lhu	v1,6(s0)
488e5bbe:	1006      	b	488e5bcc <standby_restart_all_app_timer+0x40>
488e5bc0:	6c00      	li	a0,0
488e5bc2:	67a4      	move	a1,a0
488e5bc4:	67c4      	move	a2,a0
488e5bc6:	ea40      	jalr	v0
488e5bc8:	6f1c      	li	a3,28
488e5bca:	a862      	lhu	v1,4(s0)
488e5bcc:	e279      	addu	a2,v0,v1
488e5bce:	d8c2      	sw	a2,8(s0)
488e5bd0:	4141      	addiu	v0,s1,1
488e5bd2:	6722      	move	s1,v0
488e5bd4:	9704      	lw	a3,16(sp)
488e5bd6:	e911      	zeb	s1
488e5bd8:	e9e3      	sltu	s1,a3
488e5bda:	61de      	btnez	488e5b98 <standby_restart_all_app_timer+0xc>
488e5bdc:	6475      	restore	40,ra,s0-s1
488e5bde:	e8a0      	jrc	ra
488e5be0:	e901      	sdbbp	8
488e5be2:	bfc1      	lwu	a2,4(a3)

488e5be4 <sys_timer_init>:
488e5be4:	64f4      	save	32,ra,s0-s1
 * \li  除了 config.app，前台应用在进入时必须调用该接口，否则背光，屏保，省电关机，
 *      定时关机，状态栏更新，等等功能将无法使用。
 *******************************************************************************/
void sys_timer_init(void)
{
488e5be6:	f71f 6901 	li	s1,65281
    sys_counter_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL | (APP_TIMER_TAG_SYS << 8), 500, sys_counter_handle);
488e5bea:	b00c      	lw	s0,488e5c18 <sys_timer_init+0x34>
488e5bec:	b60a      	lw	a2,488e5c14 <sys_timer_init+0x30>
488e5bee:	f1e0 6d14 	li	a1,500
488e5bf2:	e840      	jalr	s0
488e5bf4:	6791      	move	a0,s1
488e5bf6:	b60a      	lw	a2,488e5c1c <sys_timer_init+0x38>
488e5bf8:	6791      	move	a0,s1

    peripheral_detect_timer_id = set_app_timer(APP_TIMER_ATTRB_CONTROL | (APP_TIMER_TAG_SYS << 8), PER_DETECT_PERIOD, \
488e5bfa:	c640      	sb	v0,0(a2)
488e5bfc:	b609      	lw	a2,488e5c20 <sys_timer_init+0x3c>
488e5bfe:	e840      	jalr	s0
488e5c00:	6dc8      	li	a1,200
488e5c02:	b509      	lw	a1,488e5c24 <sys_timer_init+0x40>
488e5c04:	b409      	lw	a0,488e5c28 <sys_timer_init+0x44>
            peripheral_detect_handle);

    //电池及其充电检测处理
    //com_battery_charge_deal();

    //USB,UHOST,CARD,AUX检测
    g_detect_card_force_flag = 1;
488e5c06:	c540      	sb	v0,0(a1)
488e5c08:	6b01      	li	v1,1
488e5c0a:	b206      	lw	v0,488e5c20 <sys_timer_init+0x3c>
    peripheral_detect_handle();
488e5c0c:	ea40      	jalr	v0
488e5c0e:	c460      	sb	v1,0(a0)
488e5c10:	6474      	restore	32,ra,s0-s1
488e5c12:	e8a0      	jrc	ra
488e5c14:	58e5      	sltiu	s0,229
488e5c16:	482a      	addiu	s0,42
488e5c18:	5915      	sltiu	s1,21
488e5c1a:	488e      	addiu	s0,-114
488e5c1c:	99fd      	lw	a3,116(s1)
488e5c1e:	9fc1      	lw	a2,4(a3)
488e5c20:	5a3d      	sltiu	v0,61
488e5c22:	482a      	addiu	s0,42
488e5c24:	99fe      	lw	a3,120(s1)
488e5c26:	9fc1      	lw	a2,4(a3)
488e5c28:	9a00      	lw	s0,0(v0)
488e5c2a:	9fc1      	lw	a2,4(a3)

488e5c2c <sys_timer_exit>:
488e5c2c:	64e3      	save	24,ra,s0
}

/******************************************************************************/
/*!
 * \par  Description:
 *    删除系统计时软定时器和 headbar 周期更新软定时器，由前台应用退出应用时调用。
 * \param[in]    none
 * \param[out]   none
 * \return       none
 * \ingroup      misc_func
 * \note
 * \li  退出应用时，需要调用 sys_counter_exit，以删除 sys_counter_init 创建的软定时器。
 *******************************************************************************/
void sys_timer_exit(void)
{
488e5c2e:	b305      	lw	v1,488e5c40 <sys_timer_exit+0x14>
    kill_app_timer(sys_counter_timer_id);
488e5c30:	b005      	lw	s0,488e5c44 <sys_timer_exit+0x18>
488e5c32:	e840      	jalr	s0
488e5c34:	8380      	lb	a0,0(v1)
488e5c36:	b205      	lw	v0,488e5c48 <sys_timer_exit+0x1c>

    kill_app_timer(peripheral_detect_timer_id);
488e5c38:	e840      	jalr	s0
488e5c3a:	8280      	lb	a0,0(v0)
488e5c3c:	6463      	restore	24,ra,s0
488e5c3e:	e8a0      	jrc	ra
488e5c40:	99fd      	lw	a3,116(s1)
488e5c42:	9fc1      	lw	a2,4(a3)
488e5c44:	5b01      	sltiu	v1,1
488e5c46:	488e      	addiu	s0,-114
488e5c48:	99fe      	lw	a3,120(s1)
488e5c4a:	9fc1      	lw	a2,4(a3)

488e5c4c <set_single_shot_app_timer_btmamager>:
488e5c4c:	f00c 64f5 	save	a0-a2,40,ra,s0-s1
 *      是否被销毁了，这样就有可能重复创建相同的定时器。
 * \li  timeout不能为0，func_proc不能为空，否则返回失败。
 *******************************************************************************/
int8 set_single_shot_app_timer_btmamager(uint32 attrb_tagh, uint16 timeout, timer_proc func_proc)
{
488e5c50:	ed31      	zeh	a1
488e5c52:	6801      	li	s0,1
    timer_attrb_e attrb = APP_TIMER_ATTRB_CONTROL;
    timer_type_e type = TIMER_TYPE_SINGLE_SHOT;
    uint8 tag = APP_TIMER_TAG_SYS;

    app_timer_t *tm;
    int8 timer_id = -1;
488e5c54:	d504      	sw	a1,16(sp)
488e5c56:	e80b      	neg	s0
488e5c58:	6c00      	li	a0,0
    int8 i;

    //检索符合条件的可用软定时器
    for (i = 0; i < COM_APP_TIMER_MAX; i++)
488e5c5a:	b328      	lw	v1,488e5cf8 <set_single_shot_app_timer_btmamager+0xac>
    {
        if (g_com_app_timer_vct[i].state == TIMER_STATE_NOUSED)
488e5c5c:	3590      	sll	a1,a0,4
488e5c5e:	e565      	addu	s1,a1,v1
488e5c60:	a1c0      	lbu	a2,0(s1)
488e5c62:	6a03      	li	v0,3
488e5c64:	ee4c      	and	a2,v0
488e5c66:	2e28      	bnez	a2,488e5cb8 <set_single_shot_app_timer_btmamager+0x6c>
488e5c68:	67bd      	move	a1,sp
        {
            tm = g_com_app_timer_vct + i;
            //高4bit置为0100表示COM软定时器
            timer_id = 0x40 | i;

            //初始化软定时器
            tm->timeout = timeout;
488e5c6a:	ad68      	lhu	v1,16(a1)
488e5c6c:	6840      	li	s0,64
488e5c6e:	b224      	lw	v0,488e5cfc <set_single_shot_app_timer_btmamager+0xb0>
            tm->timeout_off = 0;
            tm->timeout_expires = sys_get_ab_timer() + timeout;
488e5c70:	67a6      	move	a1,a2
488e5c72:	c962      	sh	v1,4(s1)
488e5c74:	c9c3      	sh	a2,6(s1)
488e5c76:	6f1c      	li	a3,28
488e5c78:	e88d      	or	s0,a0
488e5c7a:	ea40      	jalr	v0
488e5c7c:	6786      	move	a0,a2
488e5c7e:	9704      	lw	a3,16(sp)
488e5c80:	6d04      	li	a1,4
            tm->func_proc = func_proc;
            tm->state = TIMER_STATE_RUNNING;
488e5c82:	e2f9      	addu	a2,v0,a3
488e5c84:	a1e0      	lbu	a3,0(s1)
488e5c86:	ebab      	neg	v1,a1
488e5c88:	4345      	addiu	v0,v1,5
488e5c8a:	ef6c      	and	a3,v1
488e5c8c:	ef4d      	or	a3,v0
488e5c8e:	4af2      	addiu	v0,-14
            tm->attrb = attrb;
488e5c90:	ef4c      	and	a3,v0
488e5c92:	4a11      	addiu	v0,17
488e5c94:	ef4d      	or	a3,v0
488e5c96:	4aeb      	addiu	v0,-21
            tm->type = type;
488e5c98:	ef4c      	and	a3,v0
488e5c9a:	4a21      	addiu	v0,33
488e5c9c:	940c      	lw	a0,48(sp)
488e5c9e:	ef4d      	or	a3,v0
488e5ca0:	4acf      	addiu	v0,-49
            tm->twinkle = FALSE;
488e5ca2:	ef4c      	and	a3,v0
488e5ca4:	4ae0      	addiu	v0,-32
            tm->on_off = FALSE;
488e5ca6:	d9c2      	sw	a2,8(s1)
488e5ca8:	d983      	sw	a0,12(s1)
488e5caa:	ef4c      	and	a3,v0
488e5cac:	6eff      	li	a2,255
488e5cae:	6c00      	li	a0,0
            tm->tag = tag;
            tm->count = 0;
488e5cb0:	c1e0      	sb	a3,0(s1)
488e5cb2:	c1c1      	sb	a2,1(s1)
488e5cb4:	c182      	sb	a0,2(s1)
488e5cb6:	1005      	b	488e5cc2 <set_single_shot_app_timer_btmamager+0x76>

            break;
488e5cb8:	44c1      	addiu	a2,a0,1
488e5cba:	6786      	move	a0,a2
488e5cbc:	ec91      	seb	a0
488e5cbe:	5408      	slti	a0,8
488e5cc0:	61cc      	btnez	488e5c5a <set_single_shot_app_timer_btmamager+0xe>
488e5cc2:	ec0f      	not	a0,s0
        }
    }

    if (timer_id == -1)
488e5cc4:	2c07      	bnez	a0,488e5cd4 <set_single_shot_app_timer_btmamager+0x88>
488e5cc6:	6d00      	li	a1,0
    {
        PRINT_ERR("set app timer fail!!");
488e5cc8:	b10d      	lw	s1,488e5cfc <set_single_shot_app_timer_btmamager+0xb0>
488e5cca:	0c05      	la	a0,488e5cdc <set_single_shot_app_timer_btmamager+0x90>
488e5ccc:	67c5      	move	a2,a1
488e5cce:	e940      	jalr	s1
488e5cd0:	6f4b      	li	a3,75
488e5cd2:	17ff      	b	488e5cd2 <set_single_shot_app_timer_btmamager+0x86>
        while (1)
488e5cd4:	6750      	move	v0,s0
        {
            ; //nothing
        }
    }

    return timer_id;
}
488e5cd6:	6475      	restore	40,ra,s0-s1
488e5cd8:	e8a0      	jrc	ra
488e5cda:	0000      	addiu	s0,sp,0
488e5cdc:	453c      	daddiu	s1,a1,-4
488e5cde:	203e      	beqz	s0,488e5d5c <set_single_shot_app_timer_btmamager+0x110>
488e5ce0:	6573      	move	s3,v1
488e5ce2:	2074      	beqz	s0,488e5dcc <set_single_shot_app_timer_btmamager+0x180>
488e5ce4:	7061      	cmpi	s0,97
488e5ce6:	2070      	beqz	s0,488e5dc8 <set_single_shot_app_timer_btmamager+0x17c>
488e5ce8:	6974      	li	s1,116
488e5cea:	656d      	move	t3,a1
488e5cec:	2072      	beqz	s0,488e5dd2 <set_single_shot_app_timer_btmamager+0x186>
488e5cee:	6166      	btnez	488e5dbc <set_single_shot_app_timer_btmamager+0x170>
488e5cf0:	6c69      	li	a0,105
488e5cf2:	2121      	beqz	s1,488e5d36 <set_single_shot_app_timer_btmamager+0xea>
488e5cf4:	0000      	addiu	s0,sp,0
488e5cf6:	0000      	addiu	s0,sp,0
488e5cf8:	a104      	lbu	s0,4(s1)
488e5cfa:	9fc1      	lw	a2,4(a3)
488e5cfc:	e901      	sdbbp	8
488e5cfe:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_36:

48925800 <update_peq_point>:
48925800:	f00c 64b2 	save	a0-a2,16,s0-s1
48925804:	6727      	move	s1,a3
48925806:	e991      	seb	s1
48925808:	6e00      	li	a2,0
4892580a:	ed91      	seb	a1
4892580c:	ee22      	slt	a2,s1
4892580e:	6704      	move	s0,a0
48925810:	653d      	move	t9,a1
48925812:	602f      	bteqz	48925872 <update_peq_point+0x72>
48925814:	e589      	addu	v0,a1,a0
48925816:	d200      	sw	v0,0(sp)
48925818:	6c0c      	li	a0,12
4892581a:	ee98      	mult	a2,a0
4892581c:	9206      	lw	v0,24(sp)
4892581e:	eb12      	mflo	v1
48925820:	67f9      	move	a3,t9
48925822:	e351      	addu	a0,v1,v0
48925824:	846a      	lb	v1,10(a0)
48925826:	46a1      	addiu	a1,a2,1
48925828:	e7c9      	addu	v0,a3,a2
4892582a:	d501      	sw	a1,4(sp)
4892582c:	2312      	beqz	v1,48925852 <update_peq_point+0x52>
4892582e:	374c      	sll	a3,v0,3
48925830:	e70d      	addu	v1,a3,s0
48925832:	9ca1      	lw	a1,4(a0)
48925834:	ace0      	lhu	a3,0(a0)
48925836:	cbac      	sh	a1,24(v1)
48925838:	cbeb      	sh	a3,22(v1)
4892583a:	aca1      	lhu	a1,2(a0)
4892583c:	cbad      	sh	a1,26(v1)
4892583e:	ac44      	lhu	v0,8(a0)
48925840:	7202      	cmpi	v0,2
48925842:	cb4e      	sh	v0,28(v1)
48925844:	6109      	btnez	48925858 <update_peq_point+0x58>
48925846:	2508      	beqz	a1,48925858 <update_peq_point+0x58>
48925848:	b20c      	lw	v0,48925878 <update_peq_point+0x78>
4892584a:	9a80      	lw	a0,0(v0)
4892584c:	f020 c4fd 	sb	a3,61(a0)
48925850:	1003      	b	48925858 <update_peq_point+0x58>
48925852:	374c      	sll	a3,v0,3
48925854:	e715      	addu	a1,a3,s0
48925856:	cd6d      	sh	v1,26(a1)
48925858:	6f0c      	li	a3,12
4892585a:	eef8      	mult	a2,a3
4892585c:	9200      	lw	v0,0(sp)
4892585e:	9506      	lw	a1,24(sp)
48925860:	ec12      	mflo	a0
48925862:	e2cd      	addu	v1,v0,a2
48925864:	e4a9      	addu	v0,a0,a1
48925866:	a2ca      	lbu	a2,10(v0)
48925868:	f0a0 c3d6 	sb	a2,182(v1)
4892586c:	9601      	lw	a2,4(sp)
4892586e:	ee22      	slt	a2,s1
48925870:	61d3      	btnez	48925818 <update_peq_point+0x18>
48925872:	6432      	restore	16,s0-s1
48925874:	e8a0      	jrc	ra
48925876:	0000      	addiu	s0,sp,0
48925878:	999c      	lw	a0,112(s1)
4892587a:	9fc1      	lw	a2,4(a3)

4892587c <update_peq_value>:
4892587c:	f008 64f8 	save	a0-a1,64,ra,s0-s1
48925880:	6706      	move	s0,a2
48925882:	6724      	move	s1,a0
48925884:	b3fc      	lw	v1,48925c74 <.LBE18+0x12>
48925886:	6c00      	li	a0,0
48925888:	e811      	zeb	s0
4892588a:	67a4      	move	a1,a0
4892588c:	67c4      	move	a2,a0
4892588e:	eb40      	jalr	v1
48925890:	6f33      	li	a3,51
48925892:	2832      	bnez	s0,489258f8 <.LBE3+0x2>

48925894 <.LBB3>:
48925894:	9411      	lw	a0,68(sp)
48925896:	a4a5      	lbu	a1,5(a0)
48925898:	c1a9      	sb	a1,9(s1)
4892589a:	8445      	lb	v0,5(a0)
4892589c:	7201      	cmpi	v0,1
4892589e:	6108      	btnez	489258b0 <.LBB3+0x1c>
489258a0:	9311      	lw	v1,68(sp)
489258a2:	9611      	lw	a2,68(sp)
489258a4:	83e6      	lb	a3,6(v1)
489258a6:	6791      	move	a0,s1
489258a8:	67b0      	move	a1,s0
489258aa:	1891 9600 	jal	48925800 <update_peq_point>
489258ae:	4e08      	addiu	a2,8
489258b0:	9311      	lw	v1,68(sp)
489258b2:	83c4      	lb	a2,4(v1)
489258b4:	7601      	cmpi	a2,1
489258b6:	611a      	btnez	489258ec <.LBB3+0x58>
489258b8:	aba0      	lhu	a1,0(v1)
489258ba:	b4f0      	lw	a0,48925c78 <.LBE18+0x16>
489258bc:	b2f0      	lw	v0,48925c7c <.LBE18+0x1a>
489258be:	c4a0      	sb	a1,0(a0)
489258c0:	aba1      	lhu	a1,2(v1)
489258c2:	c2a0      	sb	a1,0(v0)
489258c4:	a1ee      	lbu	a3,14(s1)
489258c6:	7701      	cmpi	a3,1
489258c8:	6109      	btnez	489258dc <.LBB3+0x48>
489258ca:	b7ee      	lw	a3,48925c80 <.LBE18+0x1e>
489258cc:	c1a3      	sb	a1,3(s1)
489258ce:	c102      	sb	s0,2(s1)
489258d0:	c104      	sb	s0,4(s1)
489258d2:	9f60      	lw	v1,0(a3)
489258d4:	a4c0      	lbu	a2,0(a0)
489258d6:	f020 c3d6 	sb	a2,54(v1)
489258da:	1004      	b	489258e4 <.LBB3+0x50>
489258dc:	c103      	sb	s0,3(s1)
489258de:	a440      	lbu	v0,0(a0)
489258e0:	c104      	sb	s0,4(s1)
489258e2:	c142      	sb	v0,2(s1)
489258e4:	a4a0      	lbu	a1,0(a0)
489258e6:	f120 c1b4 	sb	a1,308(s1)
489258ea:	11bb      	b	48925c62 <.LBE18>
489258ec:	c102      	sb	s0,2(s1)
489258ee:	c104      	sb	s0,4(s1)
489258f0:	c103      	sb	s0,3(s1)
489258f2:	f120 c114 	sb	s0,308(s1)

489258f6 <.LBE3>:
489258f6:	11b5      	b	48925c62 <.LBE18>
489258f8:	700b      	cmpi	s0,11
489258fa:	6106      	btnez	48925908 <.LBE4>

489258fc <.LBB4>:
489258fc:	9311      	lw	v1,68(sp)
489258fe:	6791      	move	a0,s1
48925900:	6d0e      	li	a1,14
48925902:	43c4      	addiu	a2,v1,4
48925904:	6f06      	li	a3,6
48925906:	1008      	b	48925918 <.LBB5+0xc>

48925908 <.LBE4>:
48925908:	700c      	cmpi	s0,12
4892590a:	610a      	btnez	48925920 <.LBE5+0x2>

4892590c <.LBB5>:
4892590c:	9211      	lw	v0,68(sp)
4892590e:	6f08      	li	a3,8
48925910:	6791      	move	a0,s1
48925912:	6d1c      	li	a1,28
48925914:	42c4      	addiu	a2,v0,4
48925916:	efeb      	neg	a3
48925918:	1891 9600 	jal	48925800 <update_peq_point>
4892591c:	6500      	nop

4892591e <.LBE5>:
4892591e:	11a1      	b	48925c62 <.LBE18>
48925920:	7001      	cmpi	s0,1
48925922:	610e      	btnez	48925940 <.LBE6+0x2>

48925924 <.LBB6>:
48925924:	9411      	lw	a0,68(sp)
48925926:	a4a4      	lbu	a1,4(a0)
48925928:	c1ab      	sb	a1,11(s1)
4892592a:	acc0      	lhu	a2,0(a0)
4892592c:	f0c0 c9d4 	sh	a2,212(s1)
48925930:	ac41      	lhu	v0,2(a0)
48925932:	5af1      	sltiu	v0,241
48925934:	4a88      	addiu	v0,-120
48925936:	6101      	btnez	4892593a <.LBB6+0x16>
48925938:	6a00      	li	v0,0
4892593a:	f0c0 c956 	sh	v0,214(s1)

4892593e <.LBE6>:
4892593e:	1191      	b	48925c62 <.LBE18>
48925940:	7002      	cmpi	s0,2
48925942:	610a      	btnez	48925958 <.LBE7+0x2>

48925944 <.LBB7>:
48925944:	9711      	lw	a3,68(sp)
48925946:	a784      	lbu	a0,4(a3)
48925948:	c18d      	sb	a0,13(s1)
4892594a:	af41      	lhu	v0,2(a3)
4892594c:	f0c0 c94a 	sh	v0,202(s1)
48925950:	af60      	lhu	v1,0(a3)
48925952:	f0c0 c96c 	sh	v1,204(s1)

48925956 <.LBE7>:
48925956:	1185      	b	48925c62 <.LBE18>
48925958:	7003      	cmpi	s0,3
4892595a:	610a      	btnez	48925970 <.LBE8+0x2>

4892595c <.LBB8>:
4892595c:	9511      	lw	a1,68(sp)
4892595e:	ade0      	lhu	a3,0(a1)
48925960:	f0c0 c1f9 	sb	a3,217(s1)
48925964:	ad61      	lhu	v1,2(a1)
48925966:	f0c0 c17a 	sb	v1,218(s1)
4892596a:	a5c4      	lbu	a2,4(a1)
4892596c:	c1cc      	sb	a2,12(s1)

4892596e <.LBE8>:
4892596e:	1179      	b	48925c62 <.LBE18>
48925970:	7004      	cmpi	s0,4
48925972:	610d      	btnez	4892598e <.LBE9+0x2>

48925974 <.LBB9>:
48925974:	9411      	lw	a0,68(sp)
48925976:	ac60      	lhu	v1,0(a0)
48925978:	f0e0 c978 	sh	v1,248(s1)
4892597c:	aca1      	lhu	a1,2(a0)
4892597e:	f0e0 c9ba 	sh	a1,250(s1)
48925982:	acc2      	lhu	a2,4(a0)
48925984:	f0e0 c9dc 	sh	a2,252(s1)
48925988:	a446      	lbu	v0,6(a0)
4892598a:	c14f      	sb	v0,15(s1)

4892598c <.LBE9>:
4892598c:	116a      	b	48925c62 <.LBE18>
4892598e:	7005      	cmpi	s0,5
48925990:	614a      	btnez	48925a26 <.LBE10+0x2>
48925992:	9211      	lw	v0,68(sp)
48925994:	f0e0 4100 	addiu	s0,s1,224

48925998 <.LBB10>:
48925998:	f240 6c18 	li	a0,600
4892599c:	ec8b      	neg	a0
4892599e:	6f02      	li	a3,2
489259a0:	d008      	sw	s0,32(sp)
489259a2:	f120 c984 	sh	a0,292(s1)
489259a6:	d106      	sw	s1,24(sp)
489259a8:	d207      	sw	v0,28(sp)
489259aa:	6711      	move	s0,s1
489259ac:	d704      	sw	a3,16(sp)
489259ae:	9408      	lw	a0,32(sp)
489259b0:	9507      	lw	a1,28(sp)
489259b2:	b2b5      	lw	v0,48925c84 <.LBE18+0x22>
489259b4:	6e06      	li	a2,6
489259b6:	ea40      	jalr	v0
489259b8:	6f00      	li	a3,0
489259ba:	f0e0 a880 	lhu	a0,224(s0)
489259be:	6d00      	li	a1,0
489259c0:	f0e0 c8a6 	sh	a1,230(s0)
489259c4:	67c4      	move	a2,a0
489259c6:	f120 8964 	lh	v1,292(s1)
489259ca:	9706      	lw	a3,24(sp)
489259cc:	eeb1      	seh	a2
489259ce:	ebc2      	slt	v1,a2
489259d0:	f100 cf9e 	sh	a0,286(a3)
489259d4:	6002      	bteqz	489259da <.LBB10+0x42>
489259d6:	f120 c984 	sh	a0,292(s1)
489259da:	9304      	lw	v1,16(sp)
489259dc:	9408      	lw	a0,32(sp)
489259de:	43cf      	addiu	a2,v1,-1
489259e0:	d604      	sw	a2,16(sp)
489259e2:	4c08      	addiu	a0,8
489259e4:	9207      	lw	v0,28(sp)
489259e6:	9306      	lw	v1,24(sp)
489259e8:	d408      	sw	a0,32(sp)
489259ea:	9404      	lw	a0,16(sp)
489259ec:	42e6      	addiu	a3,v0,6
489259ee:	43c2      	addiu	a2,v1,2
489259f0:	5400      	slti	a0,0
489259f2:	4808      	addiu	s0,8
489259f4:	d707      	sw	a3,28(sp)
489259f6:	d606      	sw	a2,24(sp)
489259f8:	60da      	bteqz	489259ae <.LBB10+0x16>
489259fa:	9211      	lw	v0,68(sp)
489259fc:	b49f      	lw	a0,48925c78 <.LBE18+0x16>
489259fe:	a2f2      	lbu	a3,18(v0)
48925a00:	7701      	cmpi	a3,1
48925a02:	c1ee      	sb	a3,14(s1)
48925a04:	610b      	btnez	48925a1c <.LBB10+0x84>
48925a06:	b29e      	lw	v0,48925c7c <.LBE18+0x1a>
48925a08:	b39e      	lw	v1,48925c80 <.LBE18+0x1e>
48925a0a:	a2e0      	lbu	a3,0(v0)
48925a0c:	c1a2      	sb	a1,2(s1)
48925a0e:	c1e3      	sb	a3,3(s1)
48925a10:	c1a4      	sb	a1,4(s1)
48925a12:	9ba0      	lw	a1,0(v1)
48925a14:	a4c0      	lbu	a2,0(a0)
48925a16:	f020 c5d6 	sb	a2,54(a1)
48925a1a:	1123      	b	48925c62 <.LBE18>
48925a1c:	c1a3      	sb	a1,3(s1)
48925a1e:	a4c0      	lbu	a2,0(a0)
48925a20:	c1a4      	sb	a1,4(s1)
48925a22:	c1c2      	sb	a2,2(s1)

48925a24 <.LBE10>:
48925a24:	111e      	b	48925c62 <.LBE18>
48925a26:	7006      	cmpi	s0,6
48925a28:	6112      	btnez	48925a4e <.LBE11+0x2>

48925a2a <.LBB11>:
48925a2a:	9411      	lw	a0,68(sp)
48925a2c:	b795      	lw	a3,48925c80 <.LBE18+0x1e>
48925a2e:	ac63      	lhu	v1,6(a0)
48925a30:	f0c0 c97c 	sh	v1,220(s1)
48925a34:	aca2      	lhu	a1,4(a0)
48925a36:	f0c0 c9be 	sh	a1,222(s1)
48925a3a:	acc4      	lhu	a2,8(a0)
48925a3c:	f120 c9c6 	sh	a2,294(s1)
48925a40:	ac40      	lhu	v0,0(a0)
48925a42:	c148      	sb	v0,8(s1)
48925a44:	9fa0      	lw	a1,0(a3)
48925a46:	ac61      	lhu	v1,2(a0)
48925a48:	f020 c574 	sb	v1,52(a1)

48925a4c <.LBE11>:
48925a4c:	110a      	b	48925c62 <.LBE18>
48925a4e:	7007      	cmpi	s0,7
48925a50:	612b      	btnez	48925aa8 <.LBE12>

48925a52 <.LBB12>:
48925a52:	b189      	lw	s1,48925c74 <.LBE18+0x12>
48925a54:	6c3c      	li	a0,60
48925a56:	6d04      	li	a1,4
48925a58:	6e00      	li	a2,0
48925a5a:	e940      	jalr	s1
48925a5c:	6f16      	li	a3,22
48925a5e:	9611      	lw	a2,68(sp)
48925a60:	b588      	lw	a1,48925c80 <.LBE18+0x1e>
48925a62:	6722      	move	s1,v0
48925a64:	9d60      	lw	v1,0(a1)
48925a66:	f020 a65c 	lbu	v0,60(a2)
48925a6a:	b087      	lw	s0,48925c84 <.LBE18+0x22>
48925a6c:	f020 c35b 	sb	v0,59(v1)
48925a70:	9de0      	lw	a3,0(a1)
48925a72:	f020 a69d 	lbu	a0,61(a2)
48925a76:	6e3c      	li	a2,60
48925a78:	f020 c79e 	sb	a0,62(a3)
48925a7c:	9511      	lw	a1,68(sp)
48925a7e:	6791      	move	a0,s1
48925a80:	e840      	jalr	s0
48925a82:	6f00      	li	a3,0
48925a84:	6791      	move	a0,s1
48925a86:	6d0a      	li	a1,10
48925a88:	6771      	move	v1,s1
48925a8a:	4c3c      	addiu	a0,60
48925a8c:	8b42      	lh	v0,4(v1)
48925a8e:	8be3      	lh	a3,6(v1)
48925a90:	eab8      	mult	v0,a1
48925a92:	ee12      	mflo	a2
48925a94:	efb8      	mult	a3,a1
48925a96:	cbc2      	sh	a2,4(v1)
48925a98:	e812      	mflo	s0
48925a9a:	cb03      	sh	s0,6(v1)
48925a9c:	4b0a      	addiu	v1,10
48925a9e:	eb82      	slt	v1,a0
48925aa0:	61f5      	btnez	48925a8c <.LBB12+0x3a>
48925aa2:	b57a      	lw	a1,48925c88 <.LBE18+0x26>
48925aa4:	6791      	move	a0,s1
48925aa6:	1027      	b	48925af6 <.LBB13+0x4a>

48925aa8 <.LBE12>:
48925aa8:	7008      	cmpi	s0,8
48925aaa:	612f      	btnez	48925b0a <.LBE13+0x2>

48925aac <.LBB13>:
48925aac:	b172      	lw	s1,48925c74 <.LBE18+0x12>
48925aae:	6c3c      	li	a0,60
48925ab0:	6d04      	li	a1,4
48925ab2:	6e00      	li	a2,0
48925ab4:	e940      	jalr	s1
48925ab6:	6f16      	li	a3,22
48925ab8:	9411      	lw	a0,68(sp)
48925aba:	b772      	lw	a3,48925c80 <.LBE18+0x1e>
48925abc:	f020 a47c 	lbu	v1,60(a0)
48925ac0:	9fa0      	lw	a1,0(a3)
48925ac2:	b071      	lw	s0,48925c84 <.LBE18+0x22>
48925ac4:	f020 c57c 	sb	v1,60(a1)
48925ac8:	9511      	lw	a1,68(sp)
48925aca:	6722      	move	s1,v0
48925acc:	6782      	move	a0,v0
48925ace:	6e3c      	li	a2,60
48925ad0:	e840      	jalr	s0
48925ad2:	6f00      	li	a3,0
48925ad4:	6791      	move	a0,s1
48925ad6:	6d0a      	li	a1,10
48925ad8:	6771      	move	v1,s1
48925ada:	4c3c      	addiu	a0,60
48925adc:	8be2      	lh	a3,4(v1)
48925ade:	8b43      	lh	v0,6(v1)
48925ae0:	efb8      	mult	a3,a1
48925ae2:	e812      	mflo	s0
48925ae4:	eab8      	mult	v0,a1
48925ae6:	cb02      	sh	s0,4(v1)
48925ae8:	ee12      	mflo	a2
48925aea:	cbc3      	sh	a2,6(v1)
48925aec:	4b0a      	addiu	v1,10
48925aee:	eb82      	slt	v1,a0
48925af0:	61f5      	btnez	48925adc <.LBB13+0x30>
48925af2:	b567      	lw	a1,48925c8c <.LBE18+0x2a>
48925af4:	6791      	move	a0,s1
48925af6:	b060      	lw	s0,48925c74 <.LBE18+0x12>
48925af8:	6e3c      	li	a2,60
48925afa:	e840      	jalr	s0
48925afc:	6f13      	li	a3,19
48925afe:	6791      	move	a0,s1
48925b00:	6d04      	li	a1,4
48925b02:	6e00      	li	a2,0
48925b04:	e840      	jalr	s0
48925b06:	6f17      	li	a3,23

48925b08 <.LBE13>:
48925b08:	10ac      	b	48925c62 <.LBE18>
48925b0a:	7009      	cmpi	s0,9
48925b0c:	6125      	btnez	48925b58 <.LBE14+0x2>

48925b0e <.LBB14>:
48925b0e:	b45d      	lw	a0,48925c80 <.LBE18+0x1e>
48925b10:	9211      	lw	v0,68(sp)
48925b12:	9cc0      	lw	a2,0(a0)
48925b14:	a26a      	lbu	v1,10(v0)
48925b16:	f040 c662 	sb	v1,66(a2)
48925b1a:	9ca0      	lw	a1,0(a0)
48925b1c:	f040 a562 	lbu	v1,66(a1)
48925b20:	2b04      	bnez	v1,48925b2a <.LBB14+0x1c>
48925b22:	c170      	sb	v1,16(s1)
48925b24:	9ce0      	lw	a3,0(a0)
48925b26:	f040 cf66 	sh	v1,70(a3)
48925b2a:	9711      	lw	a3,68(sp)
48925b2c:	6a64      	li	v0,100
48925b2e:	8f60      	lh	v1,0(a3)
48925b30:	eb58      	mult	v1,v0
48925b32:	9311      	lw	v1,68(sp)
48925b34:	ee12      	mflo	a2
48925b36:	f100 c9d8 	sh	a2,280(s1)
48925b3a:	aba1      	lhu	a1,2(v1)
48925b3c:	f100 c1b6 	sb	a1,278(s1)
48925b40:	abe2      	lhu	a3,4(v1)
48925b42:	f100 c9fa 	sh	a3,282(s1)
48925b46:	ab43      	lhu	v0,6(v1)
48925b48:	f100 c157 	sb	v0,279(s1)
48925b4c:	9ca0      	lw	a1,0(a0)
48925b4e:	9411      	lw	a0,68(sp)
48925b50:	acc4      	lhu	a2,8(a0)
48925b52:	f040 cdc8 	sh	a2,72(a1)

48925b56 <.LBE14>:
48925b56:	1085      	b	48925c62 <.LBE18>
48925b58:	700a      	cmpi	s0,10
48925b5a:	6122      	btnez	48925ba0 <.LBE15+0x2>

48925b5c <.LBB15>:
48925b5c:	9711      	lw	a3,68(sp)
48925b5e:	6a01      	li	v0,1
48925b60:	f080 a773 	lbu	v1,147(a3)
48925b64:	9411      	lw	a0,68(sp)
48925b66:	f080 a7b2 	lbu	a1,146(a3)
48925b6a:	c16a      	sb	v1,10(s1)
48925b6c:	f0c0 c14e 	sb	v0,206(s1)
48925b70:	9311      	lw	v1,68(sp)
48925b72:	4c0c      	addiu	a0,12
48925b74:	9bc0      	lw	a2,0(v1)
48925b76:	f0c0 c9d0 	sh	a2,208(s1)
48925b7a:	2d03      	bnez	a1,48925b82 <.LBB15+0x26>
48925b7c:	9bc1      	lw	a2,4(v1)
48925b7e:	f0c0 c1d2 	sb	a2,210(s1)
48925b82:	7504      	cmpi	a1,4
48925b84:	6104      	btnez	48925b8e <.LBB15+0x32>
48925b86:	9311      	lw	v1,68(sp)
48925b88:	9b41      	lw	v0,4(v1)
48925b8a:	f0c0 c153 	sb	v0,211(s1)
48925b8e:	36a0      	sll	a2,a1,8
48925b90:	b740      	lw	a3,48925c90 <.LBE18+0x2e>
48925b92:	35c0      	sll	a1,a2,8
48925b94:	b238      	lw	v0,48925c74 <.LBE18+0x12>
48925b96:	e5f5      	addu	a1,a3
48925b98:	6e80      	li	a2,128
48925b9a:	ea40      	jalr	v0
48925b9c:	6f13      	li	a3,19

48925b9e <.LBE15>:
48925b9e:	1061      	b	48925c62 <.LBE18>
48925ba0:	700f      	cmpi	s0,15
48925ba2:	611a      	btnez	48925bd8 <.LBE16+0x2>

48925ba4 <.LBB16>:
48925ba4:	9411      	lw	a0,68(sp)
48925ba6:	a4ae      	lbu	a1,14(a0)
48925ba8:	f120 c1b0 	sb	a1,304(s1)
48925bac:	ac40      	lhu	v0,0(a0)
48925bae:	f120 c95a 	sh	v0,314(s1)
48925bb2:	ac61      	lhu	v1,2(a0)
48925bb4:	f120 c97c 	sh	v1,316(s1)
48925bb8:	acc2      	lhu	a2,4(a0)
48925bba:	f120 c9de 	sh	a2,318(s1)
48925bbe:	ace3      	lhu	a3,6(a0)
48925bc0:	f140 c9e0 	sh	a3,320(s1)
48925bc4:	aca4      	lhu	a1,8(a0)
48925bc6:	f140 c9a2 	sh	a1,322(s1)
48925bca:	ac45      	lhu	v0,10(a0)
48925bcc:	f140 c944 	sh	v0,324(s1)
48925bd0:	ac66      	lhu	v1,12(a0)
48925bd2:	f140 c966 	sh	v1,326(s1)

48925bd6 <.LBE16>:
48925bd6:	1045      	b	48925c62 <.LBE18>
48925bd8:	700d      	cmpi	s0,13
48925bda:	611f      	btnez	48925c1a <.LBE17+0x2>
48925bdc:	9011      	lw	s0,68(sp)

48925bde <.LBB17>:
48925bde:	6b00      	li	v1,0
48925be0:	d005      	sw	s0,20(sp)
48925be2:	f140 99b8 	lw	a1,344(s1)
48925be6:	3070      	sll	s0,v1,4
48925be8:	e511      	addu	a0,a1,s0
48925bea:	b227      	lw	v0,48925c84 <.LBE18+0x22>
48925bec:	9505      	lw	a1,20(sp)
48925bee:	6e0e      	li	a2,14
48925bf0:	6f00      	li	a3,0
48925bf2:	ea40      	jalr	v0
48925bf4:	d30a      	sw	v1,40(sp)
48925bf6:	f140 9978 	lw	v1,344(s1)
48925bfa:	970a      	lw	a3,40(sp)
48925bfc:	9405      	lw	a0,20(sp)
48925bfe:	e061      	addu	s0,v1
48925c00:	4761      	addiu	v1,a3,1
48925c02:	6e00      	li	a2,0
48925c04:	4c0e      	addiu	a0,14
48925c06:	5303      	slti	v1,3
48925c08:	c8c7      	sh	a2,14(s0)
48925c0a:	d405      	sw	a0,20(sp)
48925c0c:	61ea      	btnez	48925be2 <.LBB17+0x4>
48925c0e:	9711      	lw	a3,68(sp)
48925c10:	f020 a78a 	lbu	a0,42(a3)
48925c14:	f120 c191 	sb	a0,305(s1)

48925c18 <.LBE17>:
48925c18:	1024      	b	48925c62 <.LBE18>
48925c1a:	700e      	cmpi	s0,14
48925c1c:	6122      	btnez	48925c62 <.LBE18>

48925c1e <.LBB18>:
48925c1e:	f120 a1d1 	lbu	a2,305(s1)
48925c22:	7601      	cmpi	a2,1
48925c24:	611e      	btnez	48925c62 <.LBE18>
48925c26:	9511      	lw	a1,68(sp)
48925c28:	b216      	lw	v0,48925c80 <.LBE18+0x1e>
48925c2a:	ad60      	lhu	v1,0(a1)
48925c2c:	f140 c968 	sh	v1,328(s1)
48925c30:	adc3      	lhu	a2,6(a1)
48925c32:	f140 c9ca 	sh	a2,330(s1)
48925c36:	ade2      	lhu	a3,4(a1)
48925c38:	9ac0      	lw	a2,0(v0)
48925c3a:	f140 c9ec 	sh	a3,332(s1)
48925c3e:	ad89      	lhu	a0,18(a1)
48925c40:	f140 c98e 	sh	a0,334(s1)
48925c44:	ad61      	lhu	v1,2(a1)
48925c46:	f040 c66a 	sb	v1,74(a2)
48925c4a:	ade7      	lhu	a3,14(a1)
48925c4c:	f140 c9f2 	sh	a3,338(s1)
48925c50:	ad88      	lhu	a0,16(a1)
48925c52:	f140 c994 	sh	a0,340(s1)
48925c56:	ad45      	lhu	v0,10(a1)
48925c58:	f140 c950 	sh	v0,336(s1)
48925c5c:	ad66      	lhu	v1,12(a1)
48925c5e:	f140 c976 	sh	v1,342(s1)

48925c62 <.LBE18>:
48925c62:	6c00      	li	a0,0
48925c64:	b204      	lw	v0,48925c74 <.LBE18+0x12>
48925c66:	67a4      	move	a1,a0
48925c68:	67c4      	move	a2,a0
48925c6a:	ea40      	jalr	v0
48925c6c:	6f34      	li	a3,52
48925c6e:	6478      	restore	64,ra,s0-s1
48925c70:	e8a0      	jrc	ra
48925c72:	0000      	addiu	s0,sp,0
48925c74:	e901      	sdbbp	8
48925c76:	bfc1      	lwu	a2,4(a3)
48925c78:	a2a7      	lbu	a1,7(v0)
48925c7a:	9fc1      	lw	a2,4(a3)
48925c7c:	a2a8      	lbu	a1,8(v0)
48925c7e:	9fc1      	lw	a2,4(a3)
48925c80:	999c      	lw	a0,112(s1)
48925c82:	9fc1      	lw	a2,4(a3)
48925c84:	e905      	break	8
48925c86:	bfc1      	lwu	a2,4(a3)
48925c88:	0000      	addiu	s0,sp,0
48925c8a:	0013      	addiu	s0,sp,76
48925c8c:	0000      	addiu	s0,sp,0
48925c8e:	0014      	addiu	s0,sp,80
48925c90:	0000      	addiu	s0,sp,0
48925c92:	0020      	addiu	s0,sp,128

48925c94 <aset_read_see_data>:
48925c94:	64e3      	save	24,ra,s0
48925c96:	b30a      	lw	v1,48925cbc <aset_read_see_data+0x28>
48925c98:	b20a      	lw	v0,48925cc0 <aset_read_see_data+0x2c>
48925c9a:	9b00      	lw	s0,0(v1)
48925c9c:	f300 6c0c 	li	a0,780
48925ca0:	67b0      	move	a1,s0
48925ca2:	ea40      	jalr	v0
48925ca4:	6e40      	li	a2,64
48925ca6:	2a06      	bnez	v0,48925cb4 <aset_read_see_data+0x20>
48925ca8:	b507      	lw	a1,48925cc4 <aset_read_see_data+0x30>
48925caa:	6e07      	li	a2,7
48925cac:	9d80      	lw	a0,0(a1)
48925cae:	1891 961f 	jal	4892587c <update_peq_value>
48925cb2:	67b0      	move	a1,s0
48925cb4:	6a00      	li	v0,0
48925cb6:	6463      	restore	24,ra,s0
48925cb8:	e8a0      	jrc	ra
48925cba:	0000      	addiu	s0,sp,0
48925cbc:	a2ac      	lbu	a1,12(v0)
48925cbe:	9fc1      	lw	a2,4(a3)
48925cc0:	5801      	sltiu	s0,1
48925cc2:	4852      	addiu	s0,82
48925cc4:	a2b0      	lbu	a1,16(v0)
48925cc6:	9fc1      	lw	a2,4(a3)

48925cc8 <aset_read_sew_data>:
48925cc8:	64e3      	save	24,ra,s0
48925cca:	b30a      	lw	v1,48925cf0 <aset_read_sew_data+0x28>
48925ccc:	b20a      	lw	v0,48925cf4 <aset_read_sew_data+0x2c>
48925cce:	9b00      	lw	s0,0(v1)
48925cd0:	f300 6c0d 	li	a0,781
48925cd4:	67b0      	move	a1,s0
48925cd6:	ea40      	jalr	v0
48925cd8:	6e40      	li	a2,64
48925cda:	2a06      	bnez	v0,48925ce8 <aset_read_sew_data+0x20>
48925cdc:	b507      	lw	a1,48925cf8 <aset_read_sew_data+0x30>
48925cde:	6e08      	li	a2,8
48925ce0:	9d80      	lw	a0,0(a1)
48925ce2:	1891 961f 	jal	4892587c <update_peq_value>
48925ce6:	67b0      	move	a1,s0
48925ce8:	6a00      	li	v0,0
48925cea:	6463      	restore	24,ra,s0
48925cec:	e8a0      	jrc	ra
48925cee:	0000      	addiu	s0,sp,0
48925cf0:	a2ac      	lbu	a1,12(v0)
48925cf2:	9fc1      	lw	a2,4(a3)
48925cf4:	5801      	sltiu	s0,1
48925cf6:	4852      	addiu	s0,82
48925cf8:	a2b0      	lbu	a1,16(v0)
48925cfa:	9fc1      	lw	a2,4(a3)

48925cfc <aset_read_SignalD_data>:
48925cfc:	64e3      	save	24,ra,s0
48925cfe:	b30a      	lw	v1,48925d24 <aset_read_SignalD_data+0x28>
48925d00:	b20a      	lw	v0,48925d28 <aset_read_SignalD_data+0x2c>
48925d02:	9b00      	lw	s0,0(v1)
48925d04:	f300 6c0e 	li	a0,782
48925d08:	67b0      	move	a1,s0
48925d0a:	ea40      	jalr	v0
48925d0c:	6e10      	li	a2,16
48925d0e:	2a06      	bnez	v0,48925d1c <aset_read_SignalD_data+0x20>
48925d10:	b507      	lw	a1,48925d2c <aset_read_SignalD_data+0x30>
48925d12:	6e09      	li	a2,9
48925d14:	9d80      	lw	a0,0(a1)
48925d16:	1891 961f 	jal	4892587c <update_peq_value>
48925d1a:	67b0      	move	a1,s0
48925d1c:	6a00      	li	v0,0
48925d1e:	6463      	restore	24,ra,s0
48925d20:	e8a0      	jrc	ra
48925d22:	0000      	addiu	s0,sp,0
48925d24:	a2ac      	lbu	a1,12(v0)
48925d26:	9fc1      	lw	a2,4(a3)
48925d28:	5801      	sltiu	s0,1
48925d2a:	4852      	addiu	s0,82
48925d2c:	a2b0      	lbu	a1,16(v0)
48925d2e:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_37:

48965800 <att_test_fread>:
48965800:	f004 64f8 	save	a0,64,ra,s0-s1

}

uint32 att_test_fread(uint8 *buffer, uint32 len, uint32 offset)
{
48965804:	6705      	move	s0,a1
48965806:	6f00      	li	a3,0
    int ret_val = 0;
48965808:	d60a      	sw	a2,40(sp)
    int read_len;
    uint8 cmd_data[16];
    uint32 loop_exit;
    att_fread_arg_t *att_fread_arg;
    stub_ext_param_t ext_param;
    uint32 true_offset = offset;
4896580a:	2058      	beqz	s0,489658bc <att_test_fread+0xbc>

    while (len > 0)
    {
        if (len > 1024)
        {
            read_len = 1024;
        }
        else
        {
            //保证读取的数据是4字节对齐
            read_len = (((int)len + 3) / 4) * 4;
        }

        att_fread_arg = (att_fread_arg_t *) cmd_data;
        att_fread_arg->lengthl = (uint16)(read_len & 0xffff);
        att_fread_arg->lengthh = (uint16)(read_len >> 16);
        att_fread_arg->offsetl = (uint16)(true_offset & 0xffff);
        att_fread_arg->offseth = (uint16)(true_offset >> 16);

        ext_param.opcode = STUB_CMD_ATT_FREAD;
        ext_param.payload_len = 8;
        ext_param.rw_buffer = (uint8 *) &cmd_data;
        
        ret_val = stub_ext_write(&ext_param);

        if (ret_val == 0)
        {
            ext_param.payload_len = (uint16)read_len;
            ext_param.rw_buffer = (uint8 *) 0x3a100;
            ret_val = stub_ext_read(&ext_param);

            if (ret_val == 0)
            {
                if (read_len == 1024)
                {
                    libc_memcpy(buffer, &(ext_param.rw_buffer[6]), read_len);
                }
                else
                {
                    //拷贝实际长度
                    libc_memcpy(buffer, &(ext_param.rw_buffer[6]), len);
            
                    read_len = (int)len;
                }
                       
                //回复ACK
                ext_param.opcode = STUB_CMD_ATT_ACK;
                ext_param.payload_len = 0;
                ext_param.rw_buffer = (uint8 *) &cmd_data;
                ret_val = stub_ext_write(&ext_param);              
            }
        }

        buffer += read_len;
        len -= (uint32)read_len;
        true_offset += (uint32)read_len;
4896580c:	f400 5801 	sltiu	s0,1025
48965810:	f400 6900 	li	s1,1024
48965814:	6006      	bteqz	48965822 <att_test_fread+0x22>
48965816:	4043      	addiu	v0,s0,3
48965818:	5200      	slti	v0,0
4896581a:	6001      	bteqz	4896581e <att_test_fread+0x1e>
4896581c:	4046      	addiu	v0,s0,6
4896581e:	324b      	sra	v0,2
48965820:	3148      	sll	s1,v0,2
48965822:	67bd      	move	a1,sp
48965824:	930a      	lw	v1,40(sp)
48965826:	add4      	lhu	a2,40(a1)
48965828:	679d      	move	a0,sp
4896582a:	3223      	sra	v0,s1,8
4896582c:	cc2d      	sh	s1,26(a0)
4896582e:	3743      	sra	a3,v0,8
48965830:	3462      	srl	a0,v1,8
48965832:	cdee      	sh	a3,28(a1)
48965834:	cdcb      	sh	a2,22(a1)
48965836:	3282      	srl	v0,a0,8
48965838:	67bd      	move	a1,sp
4896583a:	f400 6f08 	li	a3,1032
4896583e:	6e08      	li	a2,8
48965840:	0404      	addiu	a0,sp,16
48965842:	b321      	lw	v1,489658c4 <att_test_fread+0xc4>
48965844:	cdf0      	sh	a3,32(a1)
48965846:	cdd1      	sh	a2,34(a1)
48965848:	cd4c      	sh	v0,24(a1)
4896584a:	d409      	sw	a0,36(sp)
4896584c:	6f05      	li	a3,5
4896584e:	0408      	addiu	a0,sp,32
48965850:	6d01      	li	a1,1
48965852:	eb40      	jalr	v1
48965854:	6e00      	li	a2,0
48965856:	67e2      	move	a3,v0
48965858:	2a29      	bnez	v0,489658ac <att_test_fread+0xac>
4896585a:	b51c      	lw	a1,489658c8 <att_test_fread+0xc8>
4896585c:	67dd      	move	a2,sp
4896585e:	b31a      	lw	v1,489658c4 <att_test_fread+0xc4>
48965860:	ce31      	sh	s1,34(a2)
48965862:	d509      	sw	a1,36(sp)
48965864:	42e5      	addiu	a3,v0,5
48965866:	0408      	addiu	a0,sp,32
48965868:	67a2      	move	a1,v0
4896586a:	eb40      	jalr	v1
4896586c:	67c2      	move	a2,v0
4896586e:	67e2      	move	a3,v0
48965870:	2a1d      	bnez	v0,489658ac <att_test_fread+0xac>
48965872:	9209      	lw	v0,36(sp)
48965874:	f400 7100 	cmpi	s1,1024
48965878:	b315      	lw	v1,489658cc <att_test_fread+0xcc>
4896587a:	42a6      	addiu	a1,v0,6
4896587c:	6104      	btnez	48965886 <att_test_fread+0x86>
4896587e:	9410      	lw	a0,64(sp)
48965880:	eb40      	jalr	v1
48965882:	67d1      	move	a2,s1
48965884:	1004      	b	4896588e <att_test_fread+0x8e>
48965886:	9410      	lw	a0,64(sp)
48965888:	eb40      	jalr	v1
4896588a:	67d0      	move	a2,s0
4896588c:	6730      	move	s1,s0
4896588e:	679d      	move	a0,sp
48965890:	f4e0 6d1e 	li	a1,1278
48965894:	6b00      	li	v1,0
48965896:	0704      	addiu	a3,sp,16
48965898:	b20b      	lw	v0,489658c4 <att_test_fread+0xc4>
4896589a:	ccb0      	sh	a1,32(a0)
4896589c:	cc71      	sh	v1,34(a0)
4896589e:	d709      	sw	a3,36(sp)
489658a0:	0408      	addiu	a0,sp,32
489658a2:	6f05      	li	a3,5
489658a4:	6d01      	li	a1,1
489658a6:	ea40      	jalr	v0
489658a8:	6e00      	li	a2,0
489658aa:	67e2      	move	a3,v0
489658ac:	9310      	lw	v1,64(sp)
489658ae:	920a      	lw	v0,40(sp)
489658b0:	e331      	addu	a0,v1,s1
489658b2:	e239      	addu	a2,v0,s1
489658b4:	e023      	subu	s0,s1
489658b6:	d410      	sw	a0,64(sp)
489658b8:	d60a      	sw	a2,40(sp)
489658ba:	17a7      	b	4896580a <att_test_fread+0xa>
489658bc:	6747      	move	v0,a3
    }
    return ret_val;
}
489658be:	6478      	restore	64,ra,s0-s1
489658c0:	e8a0      	jrc	ra
489658c2:	0000      	addiu	s0,sp,0
489658c4:	e921      	sdbbp	9
489658c6:	bfc1      	lwu	a2,4(a3)
489658c8:	a100      	lbu	s0,0(s1)
489658ca:	0003      	addiu	s0,sp,12
489658cc:	e905      	break	8
489658ce:	bfc1      	lwu	a2,4(a3)

489658d0 <common_load_att_code>:
489658d0:	64f9      	save	72,ra,s0-s1

app_result_e common_load_att_code(int32 file_sys_id, uint8 stg_base)
{
489658d2:	ed11      	zeb	a1
489658d4:	b266      	lw	v0,48965a6c <.L19+0x110>
    int i;
    atf_head_t *atf_head;
    ap_head_t *head_buf;
    uint32 test_file_offset;
    int (*start)(int arg0, task_attr_t *task_attr);
    test_ap_info_t test_ap_info;
    uint32 ap_fp;

    head_buf = (ap_head_t *) att_temp_buffer;

    libc_memset(&test_ap_info, 0, sizeof(test_ap_info_t));
489658d6:	d50c      	sw	a1,48(sp)
489658d8:	0404      	addiu	a0,sp,16
489658da:	6d00      	li	a1,0
489658dc:	6e10      	li	a2,16
489658de:	ea40      	jalr	v0
489658e0:	6f01      	li	a3,1
489658e2:	920c      	lw	v0,48(sp)

    if (stg_base == DISK_S)
489658e4:	7240      	cmpi	v0,64
489658e6:	6a00      	li	v0,0
    {
        stub_ioctrl_set(SET_TIMEOUT, 20, 0);
        
        stub_ioctrl_set(SET_READ_MODE, 1, 0);

        sys_os_sched_lock();
        stub_set_debug_mode(0);

        aset_tools_open_ack(0x04fe);

        sys_mdelay(2);

        sys_disable_use_temp_pool();

        if(g_app_info_state.stub_phy_type == STUB_PHY_USB)
        {
            act_writeb(act_readb(Out2cs_hcin2cs)|0x02,Out2cs_hcin2cs);
        }
        //act_writeb(act_readb(In1cs_hcout1cs) | 0x02, In1cs_hcout1cs);

        retry:
        libc_print("  \r\nload acttest.ap", 0, 0);

        //直接读取文件
        att_test_fread(att_temp_buffer, sizeof(att_temp_buffer), 0);

        atf_head = (atf_head_t *)att_temp_buffer;

        for (i = 0; i < 15; i++)
        {
            if (libc_memcmp(atf_head->atf_dir[i].filename, "acttest.ap", 10) == 0)
            {
                test_ap_info.ap_file_offset = atf_head->atf_dir[i].offset;
                break;
            }
        }

        if (i >= 15)
        {
            goto retry;
        }

        att_test_fread(head_buf, sizeof(ap_head_t), atf_head->atf_dir[i].offset);

        if (libc_memcmp(head_buf->magic, "yqhx", 4) != 0)
        {
            goto retry;
        }
        if ((head_buf->text_length) != 0x00)
        {
            att_test_fread(head_buf->text_addr, head_buf->text_length, head_buf->text_offset + \
                test_ap_info.ap_file_offset);
        }

        stub_set_debug_mode(1);
        sys_os_sched_unlock();
    }
    else
    {
        return RESULT_NULL;
489658e8:	f0a0 6108 	btnez	48965a3c <.L19+0xe0>
489658ec:	b061      	lw	s0,48965a70 <.L19+0x114>
489658ee:	6782      	move	a0,v0
489658f0:	6d14      	li	a1,20
489658f2:	67c2      	move	a2,v0
489658f4:	e840      	jalr	s0
489658f6:	6f02      	li	a3,2
489658f8:	6c06      	li	a0,6
489658fa:	6d01      	li	a1,1
489658fc:	6e00      	li	a2,0
489658fe:	e840      	jalr	s0
48965900:	6f02      	li	a3,2
48965902:	6c00      	li	a0,0
48965904:	b15c      	lw	s1,48965a74 <.L19+0x118>
48965906:	67a4      	move	a1,a0
48965908:	67c4      	move	a2,a0
4896590a:	e940      	jalr	s1
4896590c:	6f33      	li	a3,51
4896590e:	6d00      	li	a1,0
48965910:	67c5      	move	a2,a1
48965912:	6c07      	li	a0,7
48965914:	e840      	jalr	s0
48965916:	6f02      	li	a3,2

48965918 <.LBB2>:
48965918:	f4e0 6b1e 	li	v1,1278

4896591c <.LBB3>:
4896591c:	67fd      	move	a3,sp
4896591e:	6a00      	li	v0,0
48965920:	060a      	addiu	a2,sp,40
48965922:	cf70      	sh	v1,32(a3)
48965924:	cf51      	sh	v0,34(a3)
48965926:	d609      	sw	a2,36(sp)
48965928:	0408      	addiu	a0,sp,32
4896592a:	6d01      	li	a1,1
4896592c:	6e00      	li	a2,0
4896592e:	e840      	jalr	s0
48965930:	6f05      	li	a3,5

48965932 <.LBE2>:
48965932:	6d00      	li	a1,0
48965934:	67c5      	move	a2,a1
48965936:	6c02      	li	a0,2
48965938:	e940      	jalr	s1
4896593a:	6f1d      	li	a3,29
4896593c:	6c00      	li	a0,0
4896593e:	6d0e      	li	a1,14
48965940:	67c4      	move	a2,a0
48965942:	e940      	jalr	s1
48965944:	6f36      	li	a3,54
48965946:	b54d      	lw	a1,48965a78 <.L19+0x11c>
48965948:	6c80      	li	a0,128
4896594a:	a54c      	lbu	v0,12(a1)
4896594c:	eb8b      	neg	v1,a0
4896594e:	ea6c      	and	v0,v1
48965950:	2a05      	bnez	v0,4896595c <.L19>
48965952:	b44b      	lw	a0,48965a7c <.L19+0x120>
48965954:	42a2      	addiu	a1,v0,2
48965956:	a420      	lbu	s1,0(a0)
48965958:	ed2d      	or	a1,s1
4896595a:	c4a0      	sb	a1,0(a0)

4896595c <.L19>:
4896595c:	6d00      	li	a1,0
4896595e:	b246      	lw	v0,48965a74 <.L19+0x118>
48965960:	67c5      	move	a2,a1
48965962:	0c38      	la	a0,48965a40 <.L19+0xe4>
48965964:	ea40      	jalr	v0
48965966:	6f4b      	li	a3,75
48965968:	b040      	lw	s0,48965a68 <.L19+0x10c>
4896596a:	6e00      	li	a2,0
4896596c:	f200 6d00 	li	a1,512
48965970:	18b1 9600 	jal	48965800 <att_test_fread>
48965974:	6790      	move	a0,s0
48965976:	b13d      	lw	s1,48965a68 <.L19+0x10c>
48965978:	b63c      	lw	a2,48965a68 <.L19+0x10c>
4896597a:	6800      	li	s0,0
4896597c:	4920      	addiu	s1,32
4896597e:	d60d      	sw	a2,52(sp)
48965980:	b23b      	lw	v0,48965a6c <.L19+0x110>
48965982:	6791      	move	a0,s1
48965984:	0d34      	la	a1,48965a54 <.L19+0xf8>
48965986:	6e0a      	li	a2,10
48965988:	ea40      	jalr	v0
4896598a:	6f02      	li	a3,2
4896598c:	2223      	beqz	v0,489659d4 <.L19+0x78>
4896598e:	970d      	lw	a3,52(sp)
48965990:	4001      	addiu	s0,s0,1
48965992:	4f20      	addiu	a3,32
48965994:	500f      	slti	s0,15
48965996:	d70d      	sw	a3,52(sp)
48965998:	4920      	addiu	s1,32
4896599a:	61f2      	btnez	48965980 <.L19+0x24>
4896599c:	500f      	slti	s0,15
4896599e:	60de      	bteqz	4896595c <.L19>
489659a0:	b532      	lw	a1,48965a68 <.L19+0x10c>
489659a2:	3414      	sll	a0,s0,5
489659a4:	e4a1      	addu	s0,a0,a1
489659a6:	98cc      	lw	a2,48(s0)
489659a8:	6785      	move	a0,a1
489659aa:	18b1 9600 	jal	48965800 <att_test_fread>
489659ae:	6d60      	li	a1,96
489659b0:	b32e      	lw	v1,48965a68 <.L19+0x10c>
489659b2:	b12f      	lw	s1,48965a6c <.L19+0x110>
489659b4:	4384      	addiu	a0,v1,4
489659b6:	0d2b      	la	a1,48965a60 <.L19+0x104>
489659b8:	6e04      	li	a2,4
489659ba:	e940      	jalr	s1
489659bc:	6f02      	li	a3,2
489659be:	2ace      	bnez	v0,4896595c <.L19>
489659c0:	b32a      	lw	v1,48965a68 <.L19+0x10c>
489659c2:	9ba3      	lw	a1,12(v1)
489659c4:	250b      	beqz	a1,489659dc <.L19+0x80>
489659c6:	9b42      	lw	v0,8(v1)
489659c8:	9605      	lw	a2,20(sp)
489659ca:	9b84      	lw	a0,16(v1)
489659cc:	18b1 9600 	jal	48965800 <att_test_fread>
489659d0:	e2d9      	addu	a2,v0,a2
489659d2:	1004      	b	489659dc <.L19+0x80>
489659d4:	910d      	lw	s1,52(sp)
489659d6:	99ec      	lw	a3,48(s1)
489659d8:	d705      	sw	a3,20(sp)
489659da:	17e0      	b	4896599c <.L19+0x40>
489659dc:	b125      	lw	s1,48965a70 <.L19+0x114>
489659de:	6c07      	li	a0,7
489659e0:	6d01      	li	a1,1
489659e2:	6e00      	li	a2,0
489659e4:	e940      	jalr	s1
489659e6:	6f02      	li	a3,2
489659e8:	6c00      	li	a0,0
489659ea:	b123      	lw	s1,48965a74 <.L19+0x118>
489659ec:	67a4      	move	a1,a0
489659ee:	67c4      	move	a2,a0
489659f0:	e940      	jalr	s1
489659f2:	6f34      	li	a3,52
489659f4:	67bd      	move	a1,sp
    }

    test_ap_info.info_size   = sizeof(test_ap_info_t);
489659f6:	f020 a510 	lbu	s0,48(a1)
    test_ap_info.test_stage  = 0;
    test_ap_info.base_type   = stg_base;
489659fa:	b61c      	lw	a2,48965a68 <.L19+0x10c>
    test_ap_info.stub_phy_type = g_app_info_state.stub_phy_type;

    start = (int(*)(int arg0, void *arg1)) head_buf->entry;
489659fc:	c512      	sb	s0,18(a1)
489659fe:	b01f      	lw	s0,48965a78 <.L19+0x11c>
48965a00:	6b00      	li	v1,0
48965a02:	a0ec      	lbu	a3,12(s0)
48965a04:	6a10      	li	v0,16
48965a06:	34fe      	srl	a0,a3,7
48965a08:	c571      	sb	v1,17(a1)
48965a0a:	c593      	sb	a0,19(a1)
48965a0c:	c550      	sb	v0,16(a1)
48965a0e:	9e50      	lw	v0,64(a2)
48965a10:	67a6      	move	a1,a2

    //该函数注意卡驱动和文件系统没有卸载
    //在测试ap中会进行卸载，务必确保测试ap卸载相关驱动
    start(&test_ap_info, &(head_buf->task_attr));
48965a12:	0404      	addiu	a0,sp,16
48965a14:	ea40      	jalr	v0
48965a16:	4d44      	addiu	a1,68
48965a18:	6c00      	li	a0,0

    g_app_info_state.autotest_mode = TRUE;

    sys_os_sched_unlock();
48965a1a:	6b01      	li	v1,1
48965a1c:	c06d      	sb	v1,13(s0)
48965a1e:	67a4      	move	a1,a0
48965a20:	67c4      	move	a2,a0
48965a22:	e940      	jalr	s1
48965a24:	6f34      	li	a3,52
48965a26:	6d00      	li	a1,0

    do  // config 应用挂起等待直到测试阶段 1;
    {
        sys_os_time_dly(10);
48965a28:	b213      	lw	v0,48965a74 <.L19+0x118>
48965a2a:	67c5      	move	a2,a1
48965a2c:	6c0a      	li	a0,10
48965a2e:	ea40      	jalr	v0
48965a30:	6f31      	li	a3,49
48965a32:	67bd      	move	a1,sp
    }
48965a34:	a5d1      	lbu	a2,17(a1)
48965a36:	26f7      	beqz	a2,48965a26 <.L19+0xca>
48965a38:	6aff      	li	v0,255
    while (test_ap_info.test_stage == 0);

    return RESULT_ENTER_ASQT_HF_TEST;
48965a3a:	4a24      	addiu	v0,36
48965a3c:	6479      	restore	72,ra,s0-s1
}
48965a3e:	e8a0      	jrc	ra
48965a40:	2020      	beqz	s0,48965a82 <com_sys_install_stub+0x2>
48965a42:	0a0d      	la	v0,48965a74 <.L19+0x118>
48965a44:	6f6c      	li	a3,108
48965a46:	6461      	restore	8,ra,s0
48965a48:	6120      	btnez	48965a8a <com_sys_install_stub+0xa>
48965a4a:	7463      	cmpi	a0,99
48965a4c:	6574      	move	s3,a0
48965a4e:	7473      	cmpi	a0,115
48965a50:	612e      	btnez	48965aae <com_sys_install_stub+0x2e>
48965a52:	0070      	addiu	s0,sp,448
48965a54:	6361      	addiu	sp,776
48965a56:	7474      	cmpi	a0,116
48965a58:	7365      	cmpi	v1,101
48965a5a:	2e74      	bnez	a2,48965b44 <att_temp_buffer+0x38>
48965a5c:	7061      	cmpi	s0,97
48965a5e:	0000      	addiu	s0,sp,0
48965a60:	7179      	cmpi	s1,121
48965a62:	7868      	sd	v1,64(s0)
48965a64:	0000      	addiu	s0,sp,0
48965a66:	0000      	addiu	s0,sp,0
48965a68:	5b0c      	sltiu	v1,12
48965a6a:	4896      	addiu	s0,-106
48965a6c:	e905      	break	8
48965a6e:	bfc1      	lwu	a2,4(a3)
48965a70:	e921      	sdbbp	9
48965a72:	bfc1      	lwu	a2,4(a3)
48965a74:	e901      	sdbbp	8
48965a76:	bfc1      	lwu	a2,4(a3)
48965a78:	a0c0      	lbu	a2,0(s0)
48965a7a:	9fc1      	lw	a2,4(a3)
48965a7c:	0013      	addiu	s0,sp,76
48965a7e:	c008      	sb	s0,8(s0)

48965a80 <com_sys_install_stub>:
48965a80:	64e6      	save	48,ra,s0

app_result_e com_sys_install_stub(void *ev_param)
{
48965a82:	0404      	addiu	a0,sp,16
    uint8 stub_type;
    msg_apps_t msg;
    msg_reply_t msg_reply;
    app_result_e result = RESULT_NULL;
    bool need_uninstall_led = FALSE;

#if(SUPPORT_LED_DRIVER == 1)
    if (sys_comval->support_led_display == 1)
    {
        //显示STUB
        led_display(NUMBER1, NUM_S, 1);
        led_display(NUMBER2, NUM_t, 1);
        led_display(NUMBER3, NUM_U, 1);
        led_display(NUMBER4, NUM_b, 1);

        need_uninstall_led = TRUE;
    }
#endif

    msg_reply.content = &stub_type;
48965a84:	f180 6b06 	li	v1,390

    msg.type = MSG_STUB_INSTALL_SYNC;
48965a88:	6800      	li	s0,0
48965a8a:	67fd      	move	a3,sp
    msg.content.data[0] = need_uninstall_led;
48965a8c:	b21a      	lw	v0,48965af4 <com_sys_install_stub+0x74>

    send_sync_msg(APP_ID_MANAGER, &msg, &msg_reply, 0);
48965a8e:	d409      	sw	a0,36(sp)
48965a90:	d306      	sw	v1,24(sp)
48965a92:	c71c      	sb	s0,28(a3)
48965a94:	6c0b      	li	a0,11
48965a96:	0506      	addiu	a1,sp,24
48965a98:	0608      	addiu	a2,sp,32
48965a9a:	ea40      	jalr	v0
48965a9c:	67f0      	move	a3,s0
48965a9e:	b417      	lw	a0,48965af8 <com_sys_install_stub+0x78>
    
    g_app_info_state_all.stub_mode_flag = 1;
48965aa0:	6e0f      	li	a2,15
48965aa2:	a446      	lbu	v0,6(a0)
48965aa4:	46a1      	addiu	a1,a2,1
48965aa6:	eacc      	and	v0,a2
48965aa8:	eaad      	or	v0,a1
48965aaa:	c446      	sb	v0,6(a0)
48965aac:	677d      	move	v1,sp

    if (stub_type == STUB_PC_TOOL_ASET_EQ_MODE)
48965aae:	a350      	lbu	v0,16(v1)
48965ab0:	7203      	cmpi	v0,3
48965ab2:	6002      	bteqz	48965ab8 <com_sys_install_stub+0x38>
48965ab4:	7207      	cmpi	v0,7
    {
        g_aset_run_state.err_cnt = 0;
        g_aset_run_state.run_state = ASET_TOOLS_NOT_WORK;
    }
    else if (stub_type == STUB_PC_TOOL_WAVES_ASET_MODE)
48965ab6:	6104      	btnez	48965ac0 <com_sys_install_stub+0x40>
48965ab8:	b511      	lw	a1,48965afc <com_sys_install_stub+0x7c>
    {
        g_aset_run_state.err_cnt = 0;
48965aba:	6e40      	li	a2,64
        g_aset_run_state.run_state = ASET_TOOLS_NOT_WORK;
48965abc:	c5c0      	sb	a2,0(a1)
48965abe:	1017      	b	48965aee <com_sys_install_stub+0x6e>
48965ac0:	7242      	cmpi	v0,66
    }
    else if (stub_type == STUB_PC_TOOL_BTT_MODE)
48965ac2:	6103      	btnez	48965aca <com_sys_install_stub+0x4a>
48965ac4:	68ff      	li	s0,255
    {
        result = RESULT_BLUETEETH_SOUND;
48965ac6:	4007      	addiu	s0,s0,7
48965ac8:	1012      	b	48965aee <com_sys_install_stub+0x6e>
48965aca:	7201      	cmpi	v0,1
    }
    else if (stub_type == STUB_PC_TOOL_ASQT_MODE)
48965acc:	6103      	btnez	48965ad4 <com_sys_install_stub+0x54>
48965ace:	68ff      	li	s0,255
    {
        result = RESULT_ENTER_ASQT_HF_TEST;
48965ad0:	4824      	addiu	s0,36
48965ad2:	100d      	b	48965aee <com_sys_install_stub+0x6e>
48965ad4:	7204      	cmpi	v0,4
    }
    else if (stub_type == STUB_PC_TOOL_ATT_MODE)
48965ad6:	610b      	btnez	48965aee <com_sys_install_stub+0x6e>
48965ad8:	b40a      	lw	a0,48965b00 <com_sys_install_stub+0x80>
    {
        sys_disable_mem_use(0x38000, 0x3c000);
48965ada:	b50b      	lw	a1,48965b04 <com_sys_install_stub+0x84>
48965adc:	b20b      	lw	v0,48965b08 <com_sys_install_stub+0x88>
48965ade:	67d0      	move	a2,s0
48965ae0:	ea40      	jalr	v0
48965ae2:	6f53      	li	a3,83
48965ae4:	6790      	move	a0,s0
        
        //不允许写VRAM
        //DISABLE_VRAM_WRITE();
        result = common_load_att_code(0, DISK_S);
48965ae6:	18b1 9634 	jal	489658d0 <common_load_att_code>
48965aea:	6d40      	li	a1,64
48965aec:	6702      	move	s0,v0
48965aee:	6750      	move	v0,s0
    }
    else
    {
        ; //nothing
    }

    return result;
}
48965af0:	6466      	restore	48,ra,s0
48965af2:	e8a0      	jrc	ra
48965af4:	5a65      	sltiu	v0,101
48965af6:	482e      	addiu	s0,46
48965af8:	a094      	lbu	a0,20(s0)
48965afa:	9fc1      	lw	a2,4(a3)
48965afc:	a2a4      	lbu	a1,4(v0)
48965afe:	9fc1      	lw	a2,4(a3)
48965b00:	8000      	lb	s0,0(s0)
48965b02:	0003      	addiu	s0,sp,12
48965b04:	c000      	sb	s0,0(s0)
48965b06:	0003      	addiu	s0,sp,12
48965b08:	e901      	sdbbp	8
48965b0a:	bfc1      	lwu	a2,4(a3)

48965b0c <att_temp_buffer>:
	...
Disassembly of section BANK_UI_1_38:

489a5800 <com_create_eq_view>:
489a5800:	63fe      	addiu	sp,-16
#include "common_func.h"

void com_set_eq_view(view_update_e mode);
void com_create_eq_view(void)
{
489a5802:	e820      	jr	ra
    create_view_param_t create_view_param;

#if (SUPPORT_LED_DRIVER == 1)
    if (sys_comval->support_led_display == 1)
    {
        create_view_param.type = VIEW_TYPE_MSG;
        create_view_param.unknown_key_deal = UNKNOWN_KEY_IGNORE;
        create_view_param.overtime = 3000;
        create_view_param.ke_maplist = NULL;
        create_view_param.se_maplist = NULL;
        create_view_param.view_cb = com_set_eq_view;
        com_view_add(COM_VIEW_ID_SET_EQ, &create_view_param);
    }
#endif
}
489a5804:	6302      	addiu	sp,16
	...

489a5808 <com_set_eq_view>:
489a5808:	e8a0      	jrc	ra
	...

489a580c <com_set_sound_eq>:

static void __com_set_eq_redraw(void)
{
    led_display(LCD_COL, 0xff, 0); //清除:号
    led_display(LCD_P1, 0xff, 0); //清除.号
    led_display(NUMBER1, 0, 0);
    led_display(NUMBER2, NUM_E, 1);
    led_display(NUMBER3, NUM_Q, 1);
    led_display(NUMBER4, NUM_0 + sys_comval->eq_type, 1);
}

void com_set_eq_view(view_update_e mode)
{
    switch (mode)
    {
        case VIEW_UPDATE_CREATE:
        {
            __com_set_eq_redraw();
        }
        break;

        case VIEW_UPDATE_DESTROY:
        {
        }
        break;

        case VIEW_UPDATE_REDRAW:
        {
            __com_set_eq_redraw();
        }
        break;

        case VIEW_UPDATE_STATUS:
        {
            __com_set_eq_redraw();
        }
        break;

        default:
        break;
489a580c:	64e5      	save	40,ra,s0
    }
}

/******************************************************************************/
/*!
 * \par  Description:
 *    设置EQ。
 * \param[in]    mode 设置EQ模式，0表示指定EQ，1表示向下切EQ，2表示向上切EQ
 * \param[in]    eq_type 指定EQ，只有mode为0时有效
 * \param[in]    eq_para 用户EQ参数，只有设置用户EQ有效
 *                       NULL表示使用系统当前的用户EQ参数，非NULL表示更新用户EQ参数
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 设置EQ成功
 * \retval           FALSE 设置EQ失败
 * \note
 *******************************************************************************/
bool com_set_sound_eq(uint8 mode, com_eqtype_e eq_type, uint8 *eq_para)
{
489a580e:	b726      	lw	a3,489a58a4 <com_set_sound_eq+0x98>
    daemode_param_t tmp_daemode_param;
    bool bret = TRUE;

    if (sys_comval->eq_enable == FALSE)
489a5810:	ec11      	zeb	a0
489a5812:	9f60      	lw	v1,0(a3)
489a5814:	ed11      	zeb	a1
489a5816:	f020 a351 	lbu	v0,49(v1)
489a581a:	651a      	move	t8,v0
    {
        return FALSE;
489a581c:	2240      	beqz	v0,489a589e <com_set_sound_eq+0x92>
489a581e:	7401      	cmpi	a0,1
    }

    switch (mode)
489a5820:	600a      	bteqz	489a5836 <com_set_sound_eq+0x2a>
489a5822:	5402      	slti	a0,2
489a5824:	6002      	bteqz	489a582a <com_set_sound_eq+0x1e>
489a5826:	2404      	beqz	a0,489a5830 <com_set_sound_eq+0x24>
489a5828:	1017      	b	489a5858 <com_set_sound_eq+0x4c>
489a582a:	7402      	cmpi	a0,2
489a582c:	600d      	bteqz	489a5848 <com_set_sound_eq+0x3c>
489a582e:	1014      	b	489a5858 <com_set_sound_eq+0x4c>
489a5830:	f020 c3b2 	sb	a1,50(v1)
    {
        case SETEQ_TYPE:
        sys_comval->eq_type = eq_type;
489a5834:	1011      	b	489a5858 <com_set_sound_eq+0x4c>
        break;
489a5836:	f020 a392 	lbu	a0,50(v1)

        case SETEQ_NEXT:
        if (sys_comval->eq_type == EQ_USR_DEF)
489a583a:	6a00      	li	v0,0
        {
            sys_comval->eq_type = EQ_NOR;
489a583c:	67a4      	move	a1,a0
489a583e:	ed11      	zeb	a1
489a5840:	7507      	cmpi	a1,7
489a5842:	6008      	bteqz	489a5854 <com_set_sound_eq+0x48>
489a5844:	4441      	addiu	v0,a0,1
        }
        else
        {
            sys_comval->eq_type++;
489a5846:	1006      	b	489a5854 <com_set_sound_eq+0x48>
489a5848:	f020 a352 	lbu	v0,50(v1)
        }
        break;

        case SETEQ_PREV:
        if (sys_comval->eq_type == EQ_NOR)
489a584c:	2a02      	bnez	v0,489a5852 <com_set_sound_eq+0x46>
489a584e:	6a07      	li	v0,7
        {
            sys_comval->eq_type = EQ_USR_DEF;
489a5850:	1001      	b	489a5854 <com_set_sound_eq+0x48>
489a5852:	424f      	addiu	v0,v0,-1
        }
        else
        {
            sys_comval->eq_type--;
489a5854:	f020 c352 	sb	v0,50(v1)
489a5858:	9f80      	lw	a0,0(a3)
        }
        break;

        default:
        break;
    }

    if (sys_comval->eq_type != EQ_USR_DEF)
489a585a:	f020 a472 	lbu	v1,50(a0)
489a585e:	7307      	cmpi	v1,7
489a5860:	6006      	bteqz	489a586e <com_set_sound_eq+0x62>
489a5862:	f000 0412 	addiu	a0,sp,18
    {
        libc_memset(tmp_daemode_param.eq_para, 0x00, MAX_GEQ_SEG);
489a5866:	6d00      	li	a1,0
489a5868:	6e07      	li	a2,7
489a586a:	6f01      	li	a3,1
489a586c:	1006      	b	489a587a <com_set_sound_eq+0x6e>
489a586e:	2607      	beqz	a2,489a587e <com_set_sound_eq+0x72>
    }
    else
    {
        if (eq_para != NULL)
489a5870:	67a6      	move	a1,a2
        {
            libc_memcpy(tmp_daemode_param.eq_para, eq_para, MAX_GEQ_SEG);
489a5872:	f000 0412 	addiu	a0,sp,18
489a5876:	6e07      	li	a2,7
489a5878:	6f00      	li	a3,0
489a587a:	b00c      	lw	s0,489a58a8 <com_set_sound_eq+0x9c>
489a587c:	e8c0      	jalrc	s0
489a587e:	b30a      	lw	v1,489a58a4 <com_set_sound_eq+0x98>
        }
    }

    tmp_daemode_param.dae_mode = DAE_MODE_EQ;
    tmp_daemode_param.param.cur_eqtype = sys_comval->eq_type;
489a5880:	67dd      	move	a2,sp
489a5882:	9ba0      	lw	a1,0(v1)
489a5884:	6c01      	li	a0,1
489a5886:	c690      	sb	a0,16(a2)
489a5888:	f020 a5f2 	lbu	a3,50(a1)
489a588c:	b008      	lw	s0,489a58ac <com_set_sound_eq+0xa0>

    bret = com_set_dae_config(&tmp_daemode_param);
489a588e:	c6f1      	sb	a3,17(a2)
489a5890:	e840      	jalr	s0
489a5892:	0404      	addiu	a0,sp,16
489a5894:	6702      	move	s0,v0
489a5896:	b207      	lw	v0,489a58b0 <com_set_sound_eq+0xa4>

    //更新DAE参数后，需要重新设置音量
    com_reset_sound_volume(0);
489a5898:	ea40      	jalr	v0
489a589a:	6c00      	li	a0,0
489a589c:	6518      	move	t8,s0

    return bret;
489a589e:	6758      	move	v0,t8
}
489a58a0:	6465      	restore	40,ra,s0
489a58a2:	e8a0      	jrc	ra
489a58a4:	999c      	lw	a0,112(s1)
489a58a6:	9fc1      	lw	a2,4(a3)
489a58a8:	e905      	break	8
489a58aa:	bfc1      	lwu	a2,4(a3)
489a58ac:	5e99      	sltiu	a2,153
489a58ae:	4846      	addiu	s0,70
489a58b0:	5af9      	sltiu	v0,249
489a58b2:	48be      	addiu	s0,-66

489a58b4 <com_eq_next>:
489a58b4:	64c5      	save	40,ra

void com_eq_next(void)
{
489a58b6:	6d00      	li	a1,0
    com_set_sound_eq(SETEQ_NEXT, 0, NULL);
489a58b8:	b203      	lw	v0,489a58c4 <com_eq_next+0x10>
489a58ba:	6c01      	li	a0,1
489a58bc:	ea40      	jalr	v0
489a58be:	67c5      	move	a2,a1
489a58c0:	6445      	restore	40,ra
489a58c2:	e8a0      	jrc	ra
489a58c4:	580d      	sltiu	s0,13
489a58c6:	489a      	addiu	s0,-102

489a58c8 <com_eq_prev>:
489a58c8:	64c5      	save	40,ra

    com_create_eq_view();
}

void com_eq_prev(void)
{
489a58ca:	6d00      	li	a1,0
    com_set_sound_eq(SETEQ_PREV, 0, NULL);
489a58cc:	b203      	lw	v0,489a58d8 <com_eq_prev+0x10>
489a58ce:	6c02      	li	a0,2
489a58d0:	ea40      	jalr	v0
489a58d2:	67c5      	move	a2,a1
489a58d4:	6445      	restore	40,ra
489a58d6:	e8a0      	jrc	ra
489a58d8:	580d      	sltiu	s0,13
489a58da:	489a      	addiu	s0,-102

489a58dc <com_eq_set>:
489a58dc:	64c5      	save	40,ra

    com_create_eq_view();
}

void com_eq_set(void)
{
489a58de:	6d00      	li	a1,0
    com_set_sound_eq(SETEQ_NEXT, 0, NULL);
489a58e0:	b203      	lw	v0,489a58ec <com_eq_set+0x10>
489a58e2:	6c01      	li	a0,1
489a58e4:	ea40      	jalr	v0
489a58e6:	67c5      	move	a2,a1
489a58e8:	6445      	restore	40,ra
489a58ea:	e8a0      	jrc	ra
489a58ec:	580d      	sltiu	s0,13
489a58ee:	489a      	addiu	s0,-102

489a58f0 <com_load_dae_config>:
489a58f0:	f014 64f2 	save	a0,144,ra,s0-s1
void load_standard_mode_mdrc_param(dae_config_t *p_dae_cfg, bool aux_flag);

//从config.bin加载DAE默认配置项
void com_load_dae_config(comval_t *setting_comval)
{
489a58f4:	b0be      	lw	s0,489a5bec <.LBE12+0x44>
    dae_config_t *p_dae_cfg;
    uint8 i;
    noise_reduction_config_t noise_reduction_temp;
    
    p_dae_cfg = &(setting_comval->dae_cfg);
            
    //音效库类型 
    p_dae_cfg->audiopp_type = (uint8) com_get_config_default(DAE_DEFAULT_TYPE);  
489a58f6:	6724      	move	s1,a0
489a58f8:	f200 6c08 	li	a0,520
489a58fc:	e840      	jalr	s0
489a58fe:	494c      	addiu	s1,76
489a5900:	f120 c153 	sb	v0,307(s1)
489a5904:	f200 6c0a 	li	a0,522
    
    p_dae_cfg->compressor_enable_standard_mode = (uint8) com_get_config_default(DAE_COMPRESSOR_ENABLE); 
489a5908:	e8c0      	jalrc	s0
489a590a:	f120 c150 	sb	v0,304(s1)
489a590e:	f200 6c0d 	li	a0,525
   
    p_dae_cfg->mdrc_enable_standard_mode = (uint8) com_get_config_default(DAE_MDRC_ENABLE_STANDARD_MODE);
489a5912:	e8c0      	jalrc	s0
489a5914:	f120 c151 	sb	v0,305(s1)
489a5918:	f1c0 6c03 	li	a0,451

    p_dae_cfg->precut_standard_mode = (int8) com_get_config_default(DAE_PRECUT_RATIO);
489a591c:	e8c0      	jalrc	s0
489a591e:	f120 c154 	sb	v0,308(s1)
489a5922:	6c00      	li	a0,0
    p_dae_cfg->dynamic_precut_standard_mode = 0;
    
    p_dae_cfg->compressor_threshold_diff = 0;
489a5924:	6a00      	li	v0,0
489a5926:	f120 c996 	sh	a0,310(s1)
489a592a:	f120 c155 	sb	v0,309(s1)
489a592e:	f1e0 6c15 	li	a0,501
    
    //CASE 层自定义 Graphics EQ 类型
    setting_comval->eq_enable = (uint8) com_get_config_default(DAE_GRAPHICS_EQ_ENABLE);
489a5932:	e8c0      	jalrc	s0
489a5934:	9724      	lw	a3,144(sp)
489a5936:	f1e0 6c16 	li	a0,502
    setting_comval->eq_type   = (uint8) com_get_config_default(DAE_GRAPHICS_EQ_TYPE);
489a593a:	f020 c751 	sb	v0,49(a3)
489a593e:	e8c0      	jalrc	s0
489a5940:	9524      	lw	a1,144(sp)
489a5942:	6e00      	li	a2,0

    setting_comval->highpass_cutoff = 0;
489a5944:	f020 c552 	sb	v0,50(a1)
489a5948:	f020 c5dd 	sb	a2,61(a1)
489a594c:	f020 c5df 	sb	a2,63(a1)
    setting_comval->aux_flag = FALSE;
489a5950:	f040 c5c1 	sb	a2,65(a1)
    setting_comval->dae_cfg_variable = FALSE; 
489a5954:	f1c0 6c02 	li	a0,450

#ifdef WAVES_ASET_TOOLS    
    p_dae_cfg->bypass = 1;   //使用WAVES pc tools，actions dae bypass模式 
    setting_comval->w_input_enable = (uint8) com_get_config_default(SETTING_APP_SUPPORT_WAVES_INPUT_PARAM);
#else
    p_dae_cfg->bypass = (uint8) com_get_config_default(DAE_BYPASS_ENABLE);
489a5958:	e8c0      	jalrc	s0
489a595a:	c141      	sb	v0,1(s1)
489a595c:	6b00      	li	v1,0
#endif

    p_dae_cfg->equivalent_gain = 0;
    p_dae_cfg->precut_ratio = 0;
    p_dae_cfg->mdrc_precut_ratio = 0;
    p_dae_cfg->makeup_gain = 0;
489a595e:	6a00      	li	v0,0
489a5960:	f1e0 6c00 	li	a0,480
    p_dae_cfg->post_precut_ratio = 0;

    p_dae_cfg->peq_enable = (uint8) com_get_config_default(DAE_PEQ_ENABLE);
489a5964:	c143      	sb	v0,3(s1)
489a5966:	c142      	sb	v0,2(s1)
489a5968:	c144      	sb	v0,4(s1)
489a596a:	c963      	sh	v1,6(s1)
489a596c:	e840      	jalr	s0
489a596e:	c148      	sb	v0,8(s1)
489a5970:	6c00      	li	a0,0
    for (i = 0; i < MAX_PEQ_SEG; i++)
489a5972:	c149      	sb	v0,9(s1)
489a5974:	d41c      	sw	a0,112(sp)

489a5976 <.LBB2>:
489a5976:	941c      	lw	a0,112(sp)
    {
        peq_config_t tmp_peq_config;

        com_get_config_struct((uint16) (DAE_PEQ_BANK0_SETTING + i), (uint8 *) &tmp_peq_config,          \
489a5978:	b29e      	lw	v0,489a5bf0 <.LBE12+0x48>
489a597a:	f1e0 4c01 	addiu	a0,481
489a597e:	0508      	addiu	a1,sp,32
489a5980:	ea40      	jalr	v0
489a5982:	6e0c      	li	a2,12
489a5984:	901c      	lw	s0,112(sp)
            sizeof(peq_config_t));
        libc_memcpy(&(p_dae_cfg->peq_bands[i]), &(tmp_peq_config.eq_data), sizeof(peq_band_t));
489a5986:	b29c      	lw	v0,489a5bf4 <.LBE12+0x4c>
489a5988:	350c      	sll	a1,s0,3
489a598a:	e1a1      	addu	s0,s1,a1
489a598c:	6790      	move	a0,s0
489a598e:	4c16      	addiu	a0,22
489a5990:	d41d      	sw	a0,116(sp)
489a5992:	0509      	addiu	a1,sp,36
489a5994:	6e08      	li	a2,8
489a5996:	ea40      	jalr	v0
489a5998:	6f00      	li	a3,0
489a599a:	a86e      	lhu	v1,28(s0)

        if ((p_dae_cfg->peq_bands[i].type == 2) && (p_dae_cfg->peq_bands[i].gain != 0))
489a599c:	7302      	cmpi	v1,2
489a599e:	6107      	btnez	489a59ae <.LBB2+0x38>
489a59a0:	88cd      	lh	a2,26(s0)
489a59a2:	2605      	beqz	a2,489a59ae <.LBB2+0x38>
489a59a4:	931d      	lw	v1,116(sp)
        {
            setting_comval->highpass_cutoff = (uint8)p_dae_cfg->peq_bands[i].cutoff;
489a59a6:	9724      	lw	a3,144(sp)
489a59a8:	ab80      	lhu	a0,0(v1)
489a59aa:	f020 c79d 	sb	a0,61(a3)
489a59ae:	941c      	lw	a0,112(sp)
        }

        p_dae_cfg->peq_band_enable_type[i] = (uint8)tmp_peq_config.default_value;
489a59b0:	67fd      	move	a3,sp
489a59b2:	af50      	lhu	v0,32(a3)
489a59b4:	e439      	addu	a2,a0,s1
489a59b6:	f0a0 c656 	sb	v0,182(a2)

489a59ba <.LBE2>:
489a59ba:	901c      	lw	s0,112(sp)
489a59bc:	40a1      	addiu	a1,s0,1
489a59be:	ed11      	zeb	a1
489a59c0:	5d14      	sltiu	a1,20
489a59c2:	d51c      	sw	a1,112(sp)
489a59c4:	61d8      	btnez	489a5976 <.LBB2>
489a59c6:	b08a      	lw	s0,489a5bec <.LBE12+0x44>
    }

    p_dae_cfg->spk_compensation_enable = (uint8) com_get_config_default(DAE_SPK_COMPENSATION_ENABLE);
489a59c8:	f1e0 6c17 	li	a0,503
489a59cc:	e8c0      	jalrc	s0

489a59ce <.LBB3>:
489a59ce:	b389      	lw	v1,489a5bf0 <.LBE12+0x48>
    {
        spk_compensation_config_t tmp_spk_compensation_cfg;

        p_dae_cfg->spk_comp_source = 0;

        com_get_config_struct(DAE_SPK_COMPENSATION_SETTING, \
489a59d0:	6d00      	li	a1,0
489a59d2:	f0c0 c1ae 	sb	a1,206(s1)
489a59d6:	f1e0 6c18 	li	a0,504
489a59da:	050c      	addiu	a1,sp,48
489a59dc:	6e0a      	li	a2,10
489a59de:	eb40      	jalr	v1
489a59e0:	c14a      	sb	v0,10(s1)
489a59e2:	67fd      	move	a3,sp
            (uint8 *) &tmp_spk_compensation_cfg, sizeof(spk_compensation_config_t));

        p_dae_cfg->spk_comp_filter_order = tmp_spk_compensation_cfg.filter_order;
489a59e4:	af5a      	lhu	v0,52(a3)

489a59e6 <.LBE3>:
489a59e6:	b082      	lw	s0,489a5bec <.LBE12+0x44>

489a59e8 <.LBB4>:
        p_dae_cfg->spk_comp_filter_QvalLeft = (uint8)tmp_spk_compensation_cfg.filter_QvalLeft;
        p_dae_cfg->spk_comp_filter_QvalRight = (uint8)tmp_spk_compensation_cfg.filter_QvalRight;
    }

    setting_comval->signal_energy_enable = (uint8) com_get_config_default(DAE_SIGNAL_ENERGY_ENABLE);
489a59e8:	f0c0 c950 	sh	v0,208(s1)
489a59ec:	af9b      	lhu	a0,54(a3)
489a59ee:	f0c0 c192 	sb	a0,210(s1)
489a59f2:	afdc      	lhu	a2,56(a3)

489a59f4 <.LBE4>:
489a59f4:	f1c0 6c1e 	li	a0,478

489a59f8 <.LBB5>:
489a59f8:	f0c0 c1d3 	sb	a2,211(s1)

489a59fc <.LBE5>:
489a59fc:	e8c0      	jalrc	s0
489a59fe:	9524      	lw	a1,144(sp)
489a5a00:	6800      	li	s0,0

489a5a02 <.LBB6>:
    setting_comval->signal_energy_used = 0;
489a5a02:	b37c      	lw	v1,489a5bf0 <.LBE12+0x48>

489a5a04 <.LBE6>:
    setting_comval->signal_variable_mode = 0;
    {
        enhanced_signal_config_t tmp_enhanced_signal_cfg;

        com_get_config_struct(DAE_SIGNAL_ENERGY_SETTING, (uint8 *) &tmp_enhanced_signal_cfg,            \
489a5a04:	f040 cd04 	sh	s0,68(a1)
489a5a08:	f040 c500 	sb	s0,64(a1)
489a5a0c:	f040 c542 	sb	v0,66(a1)

489a5a10 <.LBB7>:
489a5a10:	f1c0 6c1f 	li	a0,479
489a5a14:	0510      	addiu	a1,sp,64
489a5a16:	eb40      	jalr	v1
489a5a18:	6e0e      	li	a2,14
489a5a1a:	6a00      	li	v0,0
            sizeof(enhanced_signal_config_t));

        p_dae_cfg->energy_detect_enable = 0;
489a5a1c:	c150      	sb	v0,16(s1)
489a5a1e:	f100 c91c 	sh	s0,284(s1)
        p_dae_cfg->signal_energy_init = 0;
489a5a22:	67bd      	move	a1,sp
        p_dae_cfg->period = tmp_enhanced_signal_cfg.signal_cfg.period;
489a5a24:	f040 ad84 	lhu	a0,68(a1)
489a5a28:	f100 c998 	sh	a0,280(s1)
489a5a2c:	f040 ade6 	lhu	a3,70(a1)
        p_dae_cfg->period_count = (uint8)tmp_enhanced_signal_cfg.signal_cfg.period_count;
489a5a30:	f100 c1f6 	sb	a3,278(s1)
489a5a34:	f040 ad68 	lhu	v1,72(a1)
        p_dae_cfg->preadjust_db = tmp_enhanced_signal_cfg.signal_cfg.preadjust_db;
489a5a38:	f100 c97a 	sh	v1,282(s1)
489a5a3c:	f040 adca 	lhu	a2,74(a1)
        p_dae_cfg->preadjust_count = (uint8)tmp_enhanced_signal_cfg.signal_cfg.preadjust_count;
489a5a40:	f100 c1d7 	sb	a2,279(s1)
489a5a44:	9424      	lw	a0,144(sp)
        setting_comval->signal_energy_min = tmp_enhanced_signal_cfg.signal_cfg.signal_energy_min;
489a5a46:	f040 ad4c 	lhu	v0,76(a1)
489a5a4a:	f040 cc06 	sh	s0,70(a0)

489a5a4e <.LBE7>:
        setting_comval->signal_energy = 0;
489a5a4e:	b068      	lw	s0,489a5bec <.LBE12+0x44>

489a5a50 <.LBB8>:
    }

    setting_comval->dae_enhanced_enable = (uint8) com_get_config_default(DAE_ENHANCED_ENABLE);
489a5a50:	f040 cc48 	sh	v0,72(a0)

489a5a54 <.LBE8>:
489a5a54:	f1c0 6c0f 	li	a0,463
489a5a58:	e8c0      	jalrc	s0
489a5a5a:	9724      	lw	a3,144(sp)
489a5a5c:	b364      	lw	v1,489a5bec <.LBE12+0x44>
    setting_comval->dae_enhanced_peak_ratio = (uint8) com_get_config_default(DAE_ENHANCED_PEAK_RATIO);
489a5a5e:	f020 c75b 	sb	v0,59(a3)
489a5a62:	f1c0 6c16 	li	a0,470
489a5a66:	ebc0      	jalrc	v1
489a5a68:	9624      	lw	a2,144(sp)
489a5a6a:	b061      	lw	s0,489a5bec <.LBE12+0x44>
    setting_comval->dae_weaken_enable   = (uint8) com_get_config_default(DAE_WEAKEN_ENABLE);
489a5a6c:	f020 c65e 	sb	v0,62(a2)
489a5a70:	f1c0 6c17 	li	a0,471
489a5a74:	e8c0      	jalrc	s0
489a5a76:	9524      	lw	a1,144(sp)

489a5a78 <.LBB9>:
489a5a78:	b360      	lw	v1,489a5bf8 <.LBE12+0x50>

489a5a7a <.LBE9>:
    {
        dew_config_t tmp_dew_cfg;
        dew_band_t *p_dew_band;

        p_dew_band = sys_malloc(sizeof(dew_band_t)*MAX_DEW_SEG);
489a5a7a:	f020 c55c 	sb	v0,60(a1)

489a5a7e <.LBB10>:
489a5a7e:	6c3c      	li	a0,60
489a5a80:	6d04      	li	a1,4
489a5a82:	6e00      	li	a2,0
489a5a84:	eb40      	jalr	v1
489a5a86:	6f16      	li	a3,22
489a5a88:	d21e      	sw	v0,120(sp)
489a5a8a:	6800      	li	s0,0
        if (p_dew_band == NULL)
        {
            PRINT_ERR("dew bands malloc fail!!");
            while (1)
            {
                ; //nothing for QAC
            }
        }

        for (i = 0; i < MAX_DEW_SEG; i++)
489a5a8c:	2a07      	bnez	v0,489a5a9c <.LBB10+0x1e>
489a5a8e:	b15b      	lw	s1,489a5bf8 <.LBE12+0x50>
489a5a90:	0c50      	la	a0,489a5bd0 <.LBE12+0x28>
489a5a92:	67a2      	move	a1,v0
489a5a94:	67c2      	move	a2,v0
489a5a96:	e940      	jalr	s1
489a5a98:	6f4b      	li	a3,75
489a5a9a:	17ff      	b	489a5a9a <.LBB10+0x1c>
489a5a9c:	b255      	lw	v0,489a5bf0 <.LBE12+0x48>
        {
            com_get_config_struct(DAE_ENHANCED_BAND0_SETTING + (uint16)i, (uint8 *) &tmp_dew_cfg,       \
489a5a9e:	f1d0 4080 	addiu	a0,s0,464
489a5aa2:	0514      	addiu	a1,sp,80
489a5aa4:	ea40      	jalr	v0
489a5aa6:	6e0e      	li	a2,14
489a5aa8:	6e0a      	li	a2,10
                sizeof(dew_config_t));
            libc_memcpy(p_dew_band + i, &(tmp_dew_cfg.dew_band_setting), sizeof(dew_band_t));
489a5aaa:	e8d8      	mult	s0,a2
489a5aac:	931e      	lw	v1,120(sp)
489a5aae:	ef12      	mflo	a3
489a5ab0:	b251      	lw	v0,489a5bf4 <.LBE12+0x4c>
489a5ab2:	e3f1      	addu	a0,v1,a3
489a5ab4:	0515      	addiu	a1,sp,84
489a5ab6:	ea40      	jalr	v0
489a5ab8:	6f00      	li	a3,0
489a5aba:	40c1      	addiu	a2,s0,1
489a5abc:	6706      	move	s0,a2
489a5abe:	e811      	zeb	s0
489a5ac0:	5806      	sltiu	s0,6
489a5ac2:	61ec      	btnez	489a5a9c <.LBB10+0x1e>
489a5ac4:	b04d      	lw	s0,489a5bf8 <.LBE12+0x50>
        }

        sys_vm_write(p_dew_band, VM_DEW_PARAM_BASE, sizeof(dew_band_t)*MAX_DEW_SEG);
489a5ac6:	941e      	lw	a0,120(sp)
489a5ac8:	b54d      	lw	a1,489a5bfc <.LBE12+0x54>
489a5aca:	6e3c      	li	a2,60
489a5acc:	e840      	jalr	s0
489a5ace:	6f13      	li	a3,19
489a5ad0:	6800      	li	s0,0

        for (i = 0; i < MAX_DEW_SEG; i++)
489a5ad2:	b348      	lw	v1,489a5bf0 <.LBE12+0x48>
        {
            com_get_config_struct(DAE_WEAKEN_BAND0_SETTING + (uint16)i, (uint8 *) &tmp_dew_cfg,         \
489a5ad4:	f1d0 4088 	addiu	a0,s0,472
489a5ad8:	0514      	addiu	a1,sp,80
489a5ada:	eb40      	jalr	v1
489a5adc:	6e0e      	li	a2,14
489a5ade:	6e0a      	li	a2,10
                sizeof(dew_config_t));
            libc_memcpy(p_dew_band + i, &(tmp_dew_cfg.dew_band_setting), sizeof(dew_band_t));
489a5ae0:	e8d8      	mult	s0,a2
489a5ae2:	971e      	lw	a3,120(sp)
489a5ae4:	ed12      	mflo	a1
489a5ae6:	b244      	lw	v0,489a5bf4 <.LBE12+0x4c>
489a5ae8:	e7b1      	addu	a0,a3,a1
489a5aea:	0515      	addiu	a1,sp,84
489a5aec:	ea40      	jalr	v0
489a5aee:	6f00      	li	a3,0
489a5af0:	4081      	addiu	a0,s0,1
489a5af2:	6704      	move	s0,a0
489a5af4:	e811      	zeb	s0
489a5af6:	5806      	sltiu	s0,6
489a5af8:	61ec      	btnez	489a5ad2 <.LBB10+0x54>
489a5afa:	941e      	lw	a0,120(sp)
        }

        sys_vm_write(p_dew_band, VM_DEW_PARAM_BASE + 0x10000, sizeof(dew_band_t)*MAX_DEW_SEG);
489a5afc:	b03f      	lw	s0,489a5bf8 <.LBE12+0x50>
489a5afe:	b541      	lw	a1,489a5c00 <.LBE12+0x58>
489a5b00:	6e3c      	li	a2,60
489a5b02:	e840      	jalr	s0
489a5b04:	6f13      	li	a3,19
489a5b06:	941e      	lw	a0,120(sp)

        sys_free(p_dew_band);
489a5b08:	6f17      	li	a3,23
489a5b0a:	6d04      	li	a1,4
489a5b0c:	e840      	jalr	s0
489a5b0e:	6e00      	li	a2,0

489a5b10 <.LBE10>:
489a5b10:	b037      	lw	s0,489a5bec <.LBE12+0x44>
        p_dew_band = NULL;
    }

    p_dae_cfg->vbass_enable            = (uint8) com_get_config_default(DAE_VIRTUAL_BASS_ENABLE);
489a5b12:	f1c0 6c05 	li	a0,453
489a5b16:	e8c0      	jalrc	s0
489a5b18:	f1c0 6c06 	li	a0,454
    p_dae_cfg->vbass_cut_freq          =         com_get_config_default(DAE_VIRTUAL_BASS_CUTOFF_FREQ);
489a5b1c:	e840      	jalr	s0
489a5b1e:	c14b      	sb	v0,11(s1)
489a5b20:	f0c0 c954 	sh	v0,212(s1)
489a5b24:	f1c0 6c07 	li	a0,455
    p_dae_cfg->vbass_ratio             = (int16) com_get_config_default(DAE_VIRTUAL_BASS_RATIO) - 120;
489a5b28:	e8c0      	jalrc	s0
489a5b2a:	4a88      	addiu	v0,-120
489a5b2c:	f0c0 c956 	sh	v0,214(s1)
489a5b30:	f1c0 6c08 	li	a0,456
    p_dae_cfg->original_bass_ratio     = (int8)  com_get_config_default(DAE_ORIGINAL_BASS_RATIO);
489a5b34:	e8c0      	jalrc	s0
489a5b36:	f0c0 c158 	sb	v0,216(s1)
489a5b3a:	f1c0 6c0c 	li	a0,460
 
    p_dae_cfg->vsurround_enable        = (uint8) com_get_config_default(DAE_VIRTUAL_SURROUND_ENABLE);
489a5b3e:	e8c0      	jalrc	s0
489a5b40:	f1c0 6c0d 	li	a0,461
    p_dae_cfg->vsurround_angle         = (uint8) com_get_config_default(DAE_VIRTUAL_SURROUND_ANGLE);
489a5b44:	e840      	jalr	s0
489a5b46:	c14c      	sb	v0,12(s1)
489a5b48:	f0c0 c159 	sb	v0,217(s1)
489a5b4c:	f1c0 6c0e 	li	a0,462
    p_dae_cfg->vsurround_ratio         = (int8)  com_get_config_default(DAE_VIRTUAL_SURROUND_RATIO);
489a5b50:	e8c0      	jalrc	s0
489a5b52:	f0c0 c15a 	sb	v0,218(s1)
489a5b56:	f1c0 6c09 	li	a0,457

    p_dae_cfg->treble_enhance_enable   = (uint8) com_get_config_default(DAE_TREBLE_ENHANCE_ENABLE);
489a5b5a:	e8c0      	jalrc	s0
489a5b5c:	f1c0 6c0a 	li	a0,458
    p_dae_cfg->treble_enhance_cut_freq =         com_get_config_default(DAE_TREBLE_ENHANCE_CUTOFF_FREQ);
489a5b60:	e840      	jalr	s0
489a5b62:	c14d      	sb	v0,13(s1)
489a5b64:	f0c0 c94a 	sh	v0,202(s1)
489a5b68:	f1c0 6c0b 	li	a0,459
    p_dae_cfg->treble_enhance_ratio    = (int16) com_get_config_default(DAE_TREBLE_ENHANCE_RATIO);
489a5b6c:	e8c0      	jalrc	s0
489a5b6e:	f0c0 c94c 	sh	v0,204(s1)
489a5b72:	f1e0 6c19 	li	a0,505

    p_dae_cfg->mdrc_enable             = (uint8) com_get_config_default(DAE_MDRC_ENABLE);
489a5b76:	e8c0      	jalrc	s0
489a5b78:	f200 6c06 	li	a0,518
    p_dae_cfg->limiter_enable          = (uint8) com_get_config_default(DAE_LIMITER_ENABLE);
489a5b7c:	e840      	jalr	s0
489a5b7e:	c14e      	sb	v0,14(s1)

489a5b80 <.LBB11>:
489a5b80:	b31c      	lw	v1,489a5bf0 <.LBE12+0x48>
    {
        mdrc_config_t tmp_limiter_config;

        com_get_config_struct(DAE_LIMITER_SETTING, (uint8 *) &tmp_limiter_config, sizeof(tmp_limiter_config));
489a5b82:	0518      	addiu	a1,sp,96

489a5b84 <.LBE11>:
489a5b84:	c14f      	sb	v0,15(s1)

489a5b86 <.LBB12>:
489a5b86:	f200 6c07 	li	a0,519
489a5b8a:	eb40      	jalr	v1
489a5b8c:	6e0c      	li	a2,12
489a5b8e:	67bd      	move	a1,sp

        p_dae_cfg->limiter_threshold = tmp_limiter_config.mdrc_data.threshold;
489a5b90:	f060 adc4 	lhu	a2,100(a1)
489a5b94:	f0e0 c9d8 	sh	a2,248(s1)
489a5b98:	f060 ade6 	lhu	a3,102(a1)
        p_dae_cfg->limiter_attack_time  = (uint16)tmp_limiter_config.mdrc_data.attack_time;
489a5b9c:	f0e0 c9fa 	sh	a3,250(s1)
489a5ba0:	f060 ad48 	lhu	v0,104(a1)
        p_dae_cfg->limiter_release_time = (uint16)tmp_limiter_config.mdrc_data.release_time;
489a5ba4:	f0e0 c95c 	sh	v0,252(s1)

489a5ba8 <.LBE12>:
489a5ba8:	e840      	jalr	s0
    }

    p_dae_cfg->enable_2823T            = (uint8) com_get_config_default(SETTING_APP_SUPPORT_2823T);
489a5baa:	6c0e      	li	a0,14
489a5bac:	b311      	lw	v1,489a5bf0 <.LBE12+0x48>

    com_get_config_struct((uint16) NOISE_AUX_REDUCTION, (uint8 *) &noise_reduction_temp, sizeof(noise_reduction_config_t));
489a5bae:	0504      	addiu	a1,sp,16
489a5bb0:	c152      	sb	v0,18(s1)
489a5bb2:	f1a0 6c03 	li	a0,419
489a5bb6:	eb40      	jalr	v1
489a5bb8:	6e10      	li	a2,16
489a5bba:	679d      	move	a0,sp
    p_dae_cfg->noise_reduction_enable = noise_reduction_temp.noise_reduction.enable;
489a5bbc:	acca      	lhu	a2,20(a0)
489a5bbe:	f1a0 6c06 	li	a0,422

    p_dae_cfg->dae_print_enable        = (uint8) com_get_config_default(DAE_PRINT_ENABLE);
489a5bc2:	e840      	jalr	s0
489a5bc4:	c1d1      	sb	a2,17(s1)
489a5bc6:	c153      	sb	v0,19(s1)
489a5bc8:	f010 6472 	restore	144,ra,s0-s1
489a5bcc:	e8a0      	jrc	ra
489a5bce:	0000      	addiu	s0,sp,0
489a5bd0:	453c      	daddiu	s1,a1,-4
489a5bd2:	203e      	beqz	s0,489a5c50 <com_reset_dae_config+0x4c>
489a5bd4:	6564      	move	v1,a0
489a5bd6:	2077      	beqz	s0,489a5cc6 <com_reset_dae_config+0xc2>
489a5bd8:	6162      	btnez	489a5c9e <com_reset_dae_config+0x9a>
489a5bda:	646e      	restore	112,ra,s0
489a5bdc:	2073      	beqz	s0,489a5cc4 <com_reset_dae_config+0xc0>
489a5bde:	616d      	btnez	489a5cba <com_reset_dae_config+0xb6>
489a5be0:	6c6c      	li	a0,108
489a5be2:	636f      	addiu	sp,888
489a5be4:	6620      	0x6620
489a5be6:	6961      	li	s1,97
489a5be8:	216c      	beqz	s1,489a5cc2 <com_reset_dae_config+0xbe>
489a5bea:	0021      	addiu	s0,sp,132
489a5bec:	5ac5      	sltiu	v0,197
489a5bee:	4846      	addiu	s0,70
489a5bf0:	5a55      	sltiu	v0,85
489a5bf2:	4846      	addiu	s0,70
489a5bf4:	e905      	break	8
489a5bf6:	bfc1      	lwu	a2,4(a3)
489a5bf8:	e901      	sdbbp	8
489a5bfa:	bfc1      	lwu	a2,4(a3)
489a5bfc:	0000      	addiu	s0,sp,0
489a5bfe:	0013      	addiu	s0,sp,76
489a5c00:	0000      	addiu	s0,sp,0
489a5c02:	0014      	addiu	s0,sp,80

489a5c04 <com_reset_dae_config>:
489a5c04:	64f5      	save	40,ra,s0-s1
}

//每次开机都重新某些DAE配置项及参数
void com_reset_dae_config(comval_t *setting_comval)
{
489a5c06:	6744      	move	v0,a0
    dae_config_t *p_dae_cfg;

    setting_comval->signal_variable_mode = 0;
    setting_comval->signal_energy_used = 0;
    setting_comval->aux_flag = FALSE;

    p_dae_cfg = &(setting_comval->dae_cfg);
489a5c08:	6d00      	li	a1,0
489a5c0a:	6e00      	li	a2,0
489a5c0c:	b354      	lw	v1,489a5d5c <.LBE13+0x54>

    p_dae_cfg->audiopp_type = (uint8) com_get_config_default(DAE_DEFAULT_TYPE);
489a5c0e:	4a4c      	addiu	v0,76
489a5c10:	f040 c4c0 	sb	a2,64(a0)
489a5c14:	f020 c4bf 	sb	a1,63(a0)
489a5c18:	f040 cca4 	sh	a1,68(a0)
489a5c1c:	6704      	move	s0,a0
489a5c1e:	f200 6c08 	li	a0,520
489a5c22:	eb40      	jalr	v1
489a5c24:	d204      	sw	v0,16(sp)
489a5c26:	9404      	lw	a0,16(sp)
489a5c28:	b14e      	lw	s1,489a5d60 <.LBE13+0x58>
 
    p_dae_cfg->p_mdrc_band_standard_mode = (dae_mdrc_band_standard_mode_t*)sys_malloc           \
489a5c2a:	f120 c453 	sb	v0,307(a0)
489a5c2e:	6d04      	li	a1,4
489a5c30:	6c30      	li	a0,48
489a5c32:	6e00      	li	a2,0
489a5c34:	e940      	jalr	s1
489a5c36:	6f16      	li	a3,22
489a5c38:	9304      	lw	v1,16(sp)
489a5c3a:	f140 db58 	sw	v0,344(v1)
489a5c3e:	2a06      	bnez	v0,489a5c4c <com_reset_dae_config+0x48>
        (sizeof(dae_mdrc_band_standard_mode_t)*MAX_MDRC_SEG_STANDARD);

    if (NULL == p_dae_cfg->p_mdrc_band_standard_mode)
489a5c40:	b148      	lw	s1,489a5d60 <.LBE13+0x58>
    {
        PRINT_ERR("mb_malloc_fail");
489a5c42:	0c3c      	la	a0,489a5d30 <.LBE13+0x28>
489a5c44:	67a2      	move	a1,v0
489a5c46:	67c2      	move	a2,v0
489a5c48:	e940      	jalr	s1
489a5c4a:	6f4b      	li	a3,75
489a5c4c:	6c01      	li	a0,1
    }
   
    //默认使能DAE
    p_dae_cfg->enable = TRUE;
489a5c4e:	b344      	lw	v1,489a5d5c <.LBE13+0x54>
    
#ifdef WAVES_ASET_TOOLS    
    p_dae_cfg->bypass = 1;   //使用WAVES pc tools，actions dae bypass模式 
#else
    p_dae_cfg->bypass = (uint8) com_get_config_default(DAE_BYPASS_ENABLE);
489a5c50:	f040 c08c 	sb	a0,76(s0)
489a5c54:	f1c0 6c02 	li	a0,450
489a5c58:	ebc0      	jalrc	v1
489a5c5a:	9704      	lw	a3,16(sp)
489a5c5c:	b041      	lw	s0,489a5d60 <.LBE13+0x58>
#endif

#if (SUPPORT_MULTI_FREQ_MULTI_BAND == 1)
    dae_attributes_t*  dae_attributes = (dae_attributes_t*)sys_malloc(sizeof(dae_attributes_t));
489a5c5e:	c741      	sb	v0,1(a3)
489a5c60:	6c2c      	li	a0,44
489a5c62:	6d04      	li	a1,4
489a5c64:	6e00      	li	a2,0
489a5c66:	e840      	jalr	s0
489a5c68:	6f16      	li	a3,22
489a5c6a:	6722      	move	s1,v0
489a5c6c:	2a06      	bnez	v0,489a5c7a <com_reset_dae_config+0x76>

    if (NULL == dae_attributes)
489a5c6e:	b03d      	lw	s0,489a5d60 <.LBE13+0x58>
    {
        PRINT_ERR("attri_malloc_fail");
489a5c70:	0c35      	la	a0,489a5d44 <.LBE13+0x3c>
489a5c72:	67a2      	move	a1,v0
489a5c74:	67c2      	move	a2,v0
489a5c76:	e840      	jalr	s0
489a5c78:	6f4b      	li	a3,75
489a5c7a:	b339      	lw	v1,489a5d5c <.LBE13+0x54>
    }

    p_dae_cfg->MultiFreqBandEnergy_enable = (uint8) com_get_config_default(MULTI_FREQ_BAND_ENABLE);
489a5c7c:	f1a0 6c04 	li	a0,420
489a5c80:	eb40      	jalr	v1
489a5c82:	68c8      	li	s0,200
489a5c84:	9504      	lw	a1,16(sp)
489a5c86:	f120 c548 	sb	v0,296(a1)
489a5c8a:	6c0a      	li	a0,10
    {
        dae_attributes->num_band = 10;
489a5c8c:	6f0a      	li	a3,10
        dae_attributes->duration_ms = 10;
489a5c8e:	6e64      	li	a2,100

        dae_attributes->f_c[0]  = 100;
489a5c90:	c903      	sh	s0,6(s1)
        dae_attributes->f_c[1]  = 200;
489a5c92:	f120 6b0c 	li	v1,300
        dae_attributes->f_c[2]  = 300;
489a5c96:	f743 6800 	li	s0,8000
        dae_attributes->f_c[3]  = 400;
        dae_attributes->f_c[4]  = 500;
        dae_attributes->f_c[5]  = 1000;
        dae_attributes->f_c[6]  = 2000;
        dae_attributes->f_c[7]  = 4000;
        dae_attributes->f_c[8]  = 8000;
489a5c9a:	f180 6d10 	li	a1,400
489a5c9e:	c180      	sb	a0,0(s1)
489a5ca0:	c9e1      	sh	a3,2(s1)
489a5ca2:	c9c2      	sh	a2,4(s1)
489a5ca4:	f7c0 6f10 	li	a3,2000
489a5ca8:	f7a1 6e00 	li	a2,4000
489a5cac:	c964      	sh	v1,8(s1)
489a5cae:	f1e0 6a14 	li	v0,500
489a5cb2:	f3e0 6c08 	li	a0,1000
489a5cb6:	c90a      	sh	s0,20(s1)
489a5cb8:	b329      	lw	v1,489a5d5c <.LBE13+0x54>
        dae_attributes->f_c[9]  = 16000;
    }

    p_dae_cfg->FreqSpetrumDisplay_enable = (uint8) com_get_config_default(MULTI_FREQ_SPETRUM_ENABLE);
489a5cba:	f687 6800 	li	s0,16000
489a5cbe:	c9a5      	sh	a1,10(s1)
489a5cc0:	c987      	sh	a0,14(s1)
489a5cc2:	c9e8      	sh	a3,16(s1)
489a5cc4:	c9c9      	sh	a2,18(s1)
489a5cc6:	f1a0 6c05 	li	a0,421
489a5cca:	c946      	sh	v0,12(s1)
489a5ccc:	eb40      	jalr	v1
489a5cce:	c90b      	sh	s0,22(s1)
489a5cd0:	9504      	lw	a1,16(sp)
489a5cd2:	f180 6e10 	li	a2,400
    {
        dae_attributes->num_freq_point = 10;
        
        dae_attributes->freq_point[0] = 100;
        dae_attributes->freq_point[1] = 200;
        dae_attributes->freq_point[2] = 300;
        dae_attributes->freq_point[3] = 400;
489a5cd6:	f120 c549 	sb	v0,297(a1)
489a5cda:	6a0a      	li	v0,10
489a5cdc:	c141      	sb	v0,1(s1)
489a5cde:	6c64      	li	a0,100
489a5ce0:	6bc8      	li	v1,200
489a5ce2:	f120 6f0c 	li	a3,300
489a5ce6:	c9cf      	sh	a2,30(s1)
489a5ce8:	f1e0 6d14 	li	a1,500
        dae_attributes->freq_point[4] = 500;
489a5cec:	9604      	lw	a2,16(sp)
        dae_attributes->freq_point[5] = 1000;
        dae_attributes->freq_point[6] = 2000;
        dae_attributes->freq_point[7] = 4000;
        dae_attributes->freq_point[8] = 8000;
        dae_attributes->freq_point[9] = 16000;
    }  

    p_dae_cfg->dae_attributes = dae_attributes;
489a5cee:	c98c      	sh	a0,24(s1)
489a5cf0:	c96d      	sh	v1,26(s1)
489a5cf2:	c9ee      	sh	a3,28(s1)
489a5cf4:	c9b0      	sh	a1,32(s1)
489a5cf6:	f3e0 6a08 	li	v0,1000
489a5cfa:	f7c0 6c10 	li	a0,2000
489a5cfe:	f7a1 6b00 	li	v1,4000
489a5d02:	f743 6f00 	li	a3,8000

489a5d06 <.LBB13>:
489a5d06:	b518      	lw	a1,489a5d64 <.LBE13+0x5c>

489a5d08 <.LBE13>:
489a5d08:	c951      	sh	v0,34(s1)
489a5d0a:	c992      	sh	a0,36(s1)
489a5d0c:	c973      	sh	v1,38(s1)
489a5d0e:	c9f4      	sh	a3,40(s1)
489a5d10:	c915      	sh	s0,42(s1)
489a5d12:	f120 de2c 	sw	s1,300(a2)
489a5d16:	a548      	lbu	v0,8(a1)
489a5d18:	7201      	cmpi	v0,1
489a5d1a:	6103      	btnez	489a5d22 <.LBE13+0x1a>
489a5d1c:	b213      	lw	v0,489a5d68 <.LBE13+0x60>
#endif

#if (SPEAKER_HEADPHONE_FIX == 0)
    //带耳机上电需要禁用DAE
    if (get_headphone_state() == HEADPHONE_STATE_IN)
    {
        com_set_dae_onoff(FALSE);
489a5d1e:	ea40      	jalr	v0
489a5d20:	6c00      	li	a0,0
489a5d22:	6d01      	li	a1,1
    }
#endif

    com_load_mdrc_config(p_dae_cfg, TRUE, TRUE);
489a5d24:	9404      	lw	a0,16(sp)
489a5d26:	b212      	lw	v0,489a5d6c <.LBE13+0x64>
489a5d28:	ea40      	jalr	v0
489a5d2a:	67c5      	move	a2,a1
489a5d2c:	6475      	restore	40,ra,s0-s1
489a5d2e:	e8a0      	jrc	ra
489a5d30:	453c      	daddiu	s1,a1,-4
489a5d32:	203e      	beqz	s0,489a5db0 <com_init_dae_config+0x40>
489a5d34:	626d      	sw	ra,436(sp)
489a5d36:	6d5f      	li	a1,95
489a5d38:	6c61      	li	a0,97
489a5d3a:	6f6c      	li	a3,108
489a5d3c:	5f63      	sltiu	a3,99
489a5d3e:	6166      	btnez	489a5e0c <com_init_dae_config+0x9c>
489a5d40:	6c69      	li	a0,105
489a5d42:	0000      	addiu	s0,sp,0
489a5d44:	453c      	daddiu	s1,a1,-4
489a5d46:	203e      	beqz	s0,489a5dc4 <com_init_dae_config+0x54>
489a5d48:	7461      	cmpi	a0,97
489a5d4a:	7274      	cmpi	v0,116
489a5d4c:	5f69      	sltiu	a3,105
489a5d4e:	616d      	btnez	489a5e2a <com_inner_load_mdrc_param+0x1a>
489a5d50:	6c6c      	li	a0,108
489a5d52:	636f      	addiu	sp,888
489a5d54:	665f      	0x665f
489a5d56:	6961      	li	s1,97
489a5d58:	006c      	addiu	s0,sp,432
489a5d5a:	0000      	addiu	s0,sp,0
489a5d5c:	5ac5      	sltiu	v0,197
489a5d5e:	4846      	addiu	s0,70
489a5d60:	e901      	sdbbp	8
489a5d62:	bfc1      	lwu	a2,4(a3)
489a5d64:	a0c0      	lbu	a2,0(s0)
489a5d66:	9fc1      	lw	a2,4(a3)
489a5d68:	5e65      	sltiu	a2,101
489a5d6a:	4846      	addiu	s0,70
489a5d6c:	5801      	sltiu	s0,1
489a5d6e:	484a      	addiu	s0,74

489a5d70 <com_init_dae_config>:
489a5d70:	f004 64f4 	save	a0,32,ra,s0-s1
}

//该接口仅仅在CONFIG开机时调用一次
//注：这里初始化后DAE配置参数还是不完全的，还需要设置物理音量之后才会完整有效
void com_init_dae_config(comval_t *setting_comval)
{
489a5d74:	b125      	lw	s1,489a5e08 <com_init_dae_config+0x98>
    dae_config_t *p_dae_cfg;

    p_dae_cfg = sys_malloc(sizeof(dae_config_t));
489a5d76:	6cff      	li	a0,255
489a5d78:	4c61      	addiu	a0,97
489a5d7a:	6d04      	li	a1,4
489a5d7c:	6e00      	li	a2,0
489a5d7e:	e940      	jalr	s1
489a5d80:	6f16      	li	a3,22
489a5d82:	6702      	move	s0,v0
489a5d84:	2a06      	bnez	v0,489a5d92 <com_init_dae_config+0x22>
    if (p_dae_cfg == NULL)
489a5d86:	0c12      	la	a0,489a5dcc <com_init_dae_config+0x5c>
    {
        PRINT_ERR("dae_cfg malloc fail!!");
489a5d88:	67a2      	move	a1,v0
489a5d8a:	67c2      	move	a2,v0
489a5d8c:	e940      	jalr	s1
489a5d8e:	6f4b      	li	a3,75
489a5d90:	17ff      	b	489a5d90 <com_init_dae_config+0x20>
        while (1)
489a5d92:	9508      	lw	a1,32(sp)
        {
            ; //nothing for QAC
        }
    }

    libc_memcpy(p_dae_cfg, &(setting_comval->dae_cfg), sizeof(dae_config_t));
489a5d94:	6782      	move	a0,v0
489a5d96:	6eff      	li	a2,255
489a5d98:	b21d      	lw	v0,489a5e0c <com_init_dae_config+0x9c>
489a5d9a:	4d4c      	addiu	a1,76
489a5d9c:	4e61      	addiu	a2,97
489a5d9e:	ea40      	jalr	v0
489a5da0:	6f00      	li	a3,0
489a5da2:	67b0      	move	a1,s0

    if (sys_shm_creat(SHARE_MEM_ID_DAECFG, p_dae_cfg, sizeof(dae_config_t)) == -1)
489a5da4:	6eff      	li	a2,255
489a5da6:	b019      	lw	s0,489a5e08 <com_init_dae_config+0x98>
489a5da8:	6c03      	li	a0,3
489a5daa:	4e61      	addiu	a2,97
489a5dac:	e840      	jalr	s0
489a5dae:	6f47      	li	a3,71
489a5db0:	ea4f      	not	v0
489a5db2:	2a06      	bnez	v0,489a5dc0 <com_init_dae_config+0x50>
489a5db4:	6d00      	li	a1,0
    {
        PRINT_ERR("dae_cfg shm create fail!!");
489a5db6:	0c0d      	la	a0,489a5de8 <com_init_dae_config+0x78>
489a5db8:	67c5      	move	a2,a1
489a5dba:	e840      	jalr	s0
489a5dbc:	6f4b      	li	a3,75
489a5dbe:	17ff      	b	489a5dbe <com_init_dae_config+0x4e>
        while (1)
489a5dc0:	9308      	lw	v1,32(sp)
        {
            ; //nothing for QAC
        }
    }

    setting_comval->dae_inited_flag = TRUE;
489a5dc2:	6c01      	li	a0,1
489a5dc4:	f020 c397 	sb	a0,55(v1)
489a5dc8:	6474      	restore	32,ra,s0-s1
489a5dca:	e8a0      	jrc	ra
489a5dcc:	453c      	daddiu	s1,a1,-4
489a5dce:	203e      	beqz	s0,489a5e4c <com_inner_load_mdrc_param+0x3c>
489a5dd0:	6164      	btnez	489a5e9a <.LBB15+0x4>
489a5dd2:	5f65      	sltiu	a3,101
489a5dd4:	6663      	0x6663
489a5dd6:	2067      	beqz	s0,489a5ea6 <.LBB15+0x10>
489a5dd8:	616d      	btnez	489a5eb4 <.LBB15+0x1e>
489a5dda:	6c6c      	li	a0,108
489a5ddc:	636f      	addiu	sp,888
489a5dde:	6620      	0x6620
489a5de0:	6961      	li	s1,97
489a5de2:	216c      	beqz	s1,489a5ebc <.LBB15+0x26>
489a5de4:	0021      	addiu	s0,sp,132
489a5de6:	0000      	addiu	s0,sp,0
489a5de8:	453c      	daddiu	s1,a1,-4
489a5dea:	203e      	beqz	s0,489a5e68 <com_inner_load_mdrc_param+0x58>
489a5dec:	6164      	btnez	489a5eb6 <.LBB15+0x20>
489a5dee:	5f65      	sltiu	a3,101
489a5df0:	6663      	0x6663
489a5df2:	2067      	beqz	s0,489a5ec2 <.LBB15+0x2c>
489a5df4:	6873      	li	s0,115
489a5df6:	206d      	beqz	s0,489a5ed2 <.LBB15+0x3c>
489a5df8:	7263      	cmpi	v0,99
489a5dfa:	6165      	btnez	489a5ec6 <.LBB15+0x30>
489a5dfc:	6574      	move	s3,a0
489a5dfe:	6620      	0x6620
489a5e00:	6961      	li	s1,97
489a5e02:	216c      	beqz	s1,489a5edc <.LBB15+0x46>
489a5e04:	0021      	addiu	s0,sp,132
489a5e06:	0000      	addiu	s0,sp,0
489a5e08:	e901      	sdbbp	8
489a5e0a:	bfc1      	lwu	a2,4(a3)
489a5e0c:	e905      	break	8
489a5e0e:	bfc1      	lwu	a2,4(a3)

489a5e10 <com_inner_load_mdrc_param>:
489a5e10:	64f8      	save	64,ra,s0-s1
}

//加载mdrc参数
void com_inner_load_mdrc_param(dae_config_t *p_dae_cfg, bool aux_flag)
{
489a5e12:	ed11      	zeb	a1
489a5e14:	d408      	sw	a0,32(sp)
    uint16 config_id;
    uint8 i;

    load_standard_mode_mdrc_param(p_dae_cfg,aux_flag);
489a5e16:	19b1 9600 	jal	48b65800 <load_standard_mode_mdrc_param>
489a5e1a:	d509      	sw	a1,36(sp)
489a5e1c:	9308      	lw	v1,32(sp)
        
    if (p_dae_cfg->mdrc_enable == 0)
489a5e1e:	a34e      	lbu	v0,14(v1)
489a5e20:	227a      	beqz	v0,489a5f16 <.LBE15+0xa>
489a5e22:	b53f      	lw	a1,489a5f1c <.LBE15+0x10>
    {
        return ;
    }

    sys_comval->dae_mdrc_peak_gain  = (uint8) com_get_config_default(DAE_PRECUT_RATIO);
489a5e24:	b13f      	lw	s1,489a5f20 <.LBE15+0x14>
489a5e26:	f1c0 6c03 	li	a0,451
489a5e2a:	e940      	jalr	s1
489a5e2c:	9d00      	lw	s0,0(a1)
489a5e2e:	f020 c056 	sb	v0,54(s0)
489a5e32:	9609      	lw	a2,36(sp)
    if (aux_flag == TRUE)
489a5e34:	7601      	cmpi	a2,1
489a5e36:	6113      	btnez	489a5e5e <com_inner_load_mdrc_param+0x4e>
489a5e38:	f200 6a00 	li	v0,512
    {
        config_id = DAE_MDRC_AUX_BANK0_SETTING;
489a5e3c:	f200 6c03 	li	a0,515
        p_dae_cfg->limiter_threshold_diff = (int16) com_get_config_default(DAE_MDRC_AUX_LIMITER_TH_DIFF);
489a5e40:	e940      	jalr	s1
489a5e42:	d20a      	sw	v0,40(sp)
489a5e44:	b436      	lw	a0,489a5f1c <.LBE15+0x10>
        sys_comval->mdrc_vol_adjust = (int8) (int16) com_get_config_default(DAE_MDRC_AUX_VOLUME_ADJUST);
489a5e46:	9708      	lw	a3,32(sp)
489a5e48:	9c00      	lw	s0,0(a0)
489a5e4a:	f120 cf46 	sh	v0,294(a3)
489a5e4e:	f200 6c04 	li	a0,516
489a5e52:	e9c0      	jalrc	s1
489a5e54:	f200 6c05 	li	a0,517
        p_dae_cfg->post_precut_ratio = (int8) (int16) com_get_config_default(DAE_MDRC_AUX_SIGNAL_ADJUST);
489a5e58:	f020 c054 	sb	v0,52(s0)
489a5e5c:	1012      	b	489a5e82 <com_inner_load_mdrc_param+0x72>
489a5e5e:	f1e0 6d1a 	li	a1,506
    }
    else
    {
        config_id = DAE_MDRC_BANK0_SETTING;
489a5e62:	f1e0 6c1d 	li	a0,509
        p_dae_cfg->limiter_threshold_diff = (int16) com_get_config_default(DAE_MDRC_LIMITER_TH_DIFF);
489a5e66:	e940      	jalr	s1
489a5e68:	d50a      	sw	a1,40(sp)
489a5e6a:	9608      	lw	a2,32(sp)
489a5e6c:	b32c      	lw	v1,489a5f1c <.LBE15+0x10>
        sys_comval->mdrc_vol_adjust = (int8) (int16) com_get_config_default(DAE_MDRC_VOLUME_ADJUST);
489a5e6e:	f1e0 6c1e 	li	a0,510
489a5e72:	9b00      	lw	s0,0(v1)
489a5e74:	f120 ce46 	sh	v0,294(a2)
489a5e78:	e9c0      	jalrc	s1
489a5e7a:	f020 c054 	sb	v0,52(s0)
489a5e7e:	f1e0 6c1f 	li	a0,511
        p_dae_cfg->post_precut_ratio = (int8) (int16) com_get_config_default(DAE_MDRC_SIGNAL_ADJUST);
489a5e82:	e9c0      	jalrc	s1
489a5e84:	9008      	lw	s0,32(sp)
489a5e86:	f240 6f18 	li	a3,600
    }

    p_dae_cfg->mdrc_threshold_base_max = -600;
489a5e8a:	efeb      	neg	a3
489a5e8c:	c048      	sb	v0,8(s0)
489a5e8e:	9408      	lw	a0,32(sp)
489a5e90:	6800      	li	s0,0
    for (i = 0; i < MAX_MDRC_SEG; i++)
489a5e92:	f120 cce4 	sh	a3,292(a0)

489a5e96 <.LBB15>:
489a5e96:	960a      	lw	a2,40(sp)
    {
        mdrc_config_t tmp_mdrc_config;

        com_get_config_struct((uint16) (config_id + i), (uint8 *) &tmp_mdrc_config, \
489a5e98:	b223      	lw	v0,489a5f24 <.LBE15+0x18>
489a5e9a:	e611      	addu	a0,a2,s0
489a5e9c:	0504      	addiu	a1,sp,16
489a5e9e:	ea40      	jalr	v0
489a5ea0:	6e0c      	li	a2,12
489a5ea2:	9608      	lw	a2,32(sp)
                sizeof(tmp_mdrc_config));

        p_dae_cfg->mdrc_bands[i].threshold = tmp_mdrc_config.mdrc_data.threshold;
489a5ea4:	67fd      	move	a3,sp
489a5ea6:	330c      	sll	v1,s0,3
489a5ea8:	e3d1      	addu	a0,v1,a2
489a5eaa:	af6a      	lhu	v1,20(a3)
489a5eac:	675d      	move	v0,sp
        p_dae_cfg->mdrc_bands[i].attack_time = tmp_mdrc_config.mdrc_data.attack_time;
        p_dae_cfg->mdrc_bands[i].release_time = tmp_mdrc_config.mdrc_data.release_time;
489a5eae:	f0e0 cc60 	sh	v1,224(a0)
489a5eb2:	afab      	lhu	a1,22(a3)
489a5eb4:	f0e0 cca2 	sh	a1,226(a0)
489a5eb8:	aaec      	lhu	a3,24(v0)
489a5eba:	6d00      	li	a1,0
        p_dae_cfg->mdrc_bands[i].reserve = 0;
489a5ebc:	f0e0 cce4 	sh	a3,228(a0)
489a5ec0:	f0e0 cca6 	sh	a1,230(a0)
489a5ec4:	a64f      	lbu	v0,15(a2)

        if ((p_dae_cfg->limiter_enable == 1)
489a5ec6:	7201      	cmpi	v0,1
489a5ec8:	610c      	btnez	489a5ee2 <.LBB15+0x4c>
489a5eca:	f120 aea6 	lhu	a1,294(a2)
489a5ece:	67e3      	move	a3,v1
489a5ed0:	6745      	move	v0,a1
489a5ed2:	eab1      	seh	v0
489a5ed4:	efb1      	seh	a3
489a5ed6:	eb4b      	neg	v1,v0
489a5ed8:	ebe2      	slt	v1,a3
489a5eda:	6003      	bteqz	489a5ee2 <.LBB15+0x4c>
489a5edc:	eeab      	neg	a2,a1
                && (p_dae_cfg->mdrc_bands[i].threshold > (0 - p_dae_cfg->limiter_threshold_diff)))
        {
            p_dae_cfg->mdrc_bands[i].threshold = (0 - p_dae_cfg->limiter_threshold_diff);
489a5ede:	f0e0 ccc0 	sh	a2,224(a0)
489a5ee2:	9608      	lw	a2,32(sp)
        }

        p_dae_cfg->mdrc_threshold_base[i] = p_dae_cfg->mdrc_bands[i].threshold;
489a5ee4:	f0e0 ac80 	lhu	a0,224(a0)
489a5ee8:	f120 8e64 	lh	v1,292(a2)
        if (p_dae_cfg->mdrc_threshold_base[i] > p_dae_cfg->mdrc_threshold_base_max)
489a5eec:	67e4      	move	a3,a0
489a5eee:	3204      	sll	v0,s0,1
489a5ef0:	efb1      	seh	a3
489a5ef2:	e2d5      	addu	a1,v0,a2
489a5ef4:	ebe2      	slt	v1,a3
489a5ef6:	f100 cd9e 	sh	a0,286(a1)
489a5efa:	6002      	bteqz	489a5f00 <.LBB15+0x6a>
489a5efc:	f120 ce84 	sh	a0,292(a2)
        {
            p_dae_cfg->mdrc_threshold_base_max = p_dae_cfg->mdrc_threshold_base[i];
489a5f00:	5802      	sltiu	s0,2
        }

        if (i < (MAX_MDRC_SEG-1))
489a5f02:	6004      	bteqz	489a5f0c <.LBE15>
489a5f04:	67dd      	move	a2,sp
        {
            p_dae_cfg->mdrc_crossover_freq[i] = (uint16)tmp_mdrc_config.mdrc_data.crossover_freq;
489a5f06:	ae8d      	lhu	a0,26(a2)
489a5f08:	f0c0 cd9c 	sh	a0,220(a1)

489a5f0c <.LBE15>:
489a5f0c:	40a1      	addiu	a1,s0,1
489a5f0e:	6705      	move	s0,a1
489a5f10:	e811      	zeb	s0
489a5f12:	5803      	sltiu	s0,3
489a5f14:	61c0      	btnez	489a5e96 <.LBB15>
489a5f16:	6478      	restore	64,ra,s0-s1
        }
    }
}
489a5f18:	e8a0      	jrc	ra
489a5f1a:	0000      	addiu	s0,sp,0
489a5f1c:	999c      	lw	a0,112(s1)
489a5f1e:	9fc1      	lw	a2,4(a3)
489a5f20:	5ac5      	sltiu	v0,197
489a5f22:	4846      	addiu	s0,70
489a5f24:	5a55      	sltiu	v0,85
489a5f26:	4846      	addiu	s0,70
	...
Disassembly of section BANK_UI_1_39:

489e5800 <stop_auto_con>:
489e5800:	64f5      	save	40,ra,s0-s1
489e5802:	b31d      	lw	v1,489e5874 <stop_auto_con+0x74>
489e5804:	ec11      	zeb	a0
489e5806:	a34b      	lbu	v0,11(v1)
489e5808:	d404      	sw	a0,16(sp)
489e580a:	7201      	cmpi	v0,1
489e580c:	6800      	li	s0,0
489e580e:	610f      	btnez	489e582e <stop_auto_con+0x2e>
489e5810:	b61a      	lw	a2,489e5878 <stop_auto_con+0x78>
489e5812:	6770      	move	v1,s0
489e5814:	6d12      	li	a1,18
489e5816:	6790      	move	a0,s0
489e5818:	ebb8      	mult	v1,a1
489e581a:	ef12      	mflo	a3
489e581c:	e7c9      	addu	v0,a3,a2
489e581e:	43e1      	addiu	a3,v1,1
489e5820:	6767      	move	v1,a3
489e5822:	eb11      	zeb	v1
489e5824:	5b02      	sltiu	v1,2
489e5826:	c29c      	sb	a0,28(v0)
489e5828:	c29d      	sb	a0,29(v0)
489e582a:	61f6      	btnez	489e5818 <stop_auto_con+0x18>
489e582c:	101f      	b	489e586c <stop_auto_con+0x6c>
489e582e:	6912      	li	s1,18
489e5830:	e838      	mult	s0,s1
489e5832:	9704      	lw	a3,16(sp)
489e5834:	ea12      	mflo	v0
489e5836:	b411      	lw	a0,489e5878 <stop_auto_con+0x78>
489e5838:	ef38      	mult	a3,s1
489e583a:	4c0e      	addiu	a0,14
489e583c:	ee12      	mflo	a2
489e583e:	b510      	lw	a1,489e587c <stop_auto_con+0x7c>
489e5840:	e291      	addu	a0,v0,a0
489e5842:	b210      	lw	v0,489e5880 <stop_auto_con+0x80>
489e5844:	e6b5      	addu	a1,a2,a1
489e5846:	6f02      	li	a3,2
489e5848:	ea40      	jalr	v0
489e584a:	6e06      	li	a2,6
489e584c:	2205      	beqz	v0,489e5858 <stop_auto_con+0x58>
489e584e:	40a1      	addiu	a1,s0,1
489e5850:	6705      	move	s0,a1
489e5852:	e811      	zeb	s0
489e5854:	5802      	sltiu	s0,2
489e5856:	61eb      	btnez	489e582e <stop_auto_con+0x2e>
489e5858:	5802      	sltiu	s0,2
489e585a:	6a00      	li	v0,0
489e585c:	6008      	bteqz	489e586e <stop_auto_con+0x6e>
489e585e:	e838      	mult	s0,s1
489e5860:	b306      	lw	v1,489e5878 <stop_auto_con+0x78>
489e5862:	ef12      	mflo	a3
489e5864:	6c00      	li	a0,0
489e5866:	e779      	addu	a2,a3,v1
489e5868:	c69c      	sb	a0,28(a2)
489e586a:	c69d      	sb	a0,29(a2)
489e586c:	6a01      	li	v0,1
489e586e:	6475      	restore	40,ra,s0-s1
489e5870:	e8a0      	jrc	ra
489e5872:	0000      	addiu	s0,sp,0
489e5874:	a33c      	lbu	s1,28(v1)
489e5876:	9fc1      	lw	a2,4(a3)
489e5878:	a2c8      	lbu	a2,8(v0)
489e587a:	9fc1      	lw	a2,4(a3)
489e587c:	a301      	lbu	s0,1(v1)
489e587e:	9fc1      	lw	a2,4(a3)
489e5880:	e905      	break	8
489e5882:	bfc1      	lwu	a2,4(a3)

489e5884 <com_ancs_GetNotificationAttributes>:
489e5884:	64c3      	save	24,ra

uint8 g_ancs_data_buf[16];

uint8 com_ancs_GetNotificationAttributes(uint8 * ntf_uuid)
{
489e5886:	67c4      	move	a2,a0
489e5888:	b410      	lw	a0,489e58c8 <com_ancs_GetNotificationAttributes+0x44>
    uint8 i;

    g_ancs_data_buf[0] = 0;
489e588a:	6a00      	li	v0,0
489e588c:	c440      	sb	v0,0(a0)
489e588e:	6d00      	li	a1,0
    for (i = 0; i < 4; i++)
489e5890:	e6ad      	addu	v1,a2,a1
    {
        g_ancs_data_buf[i + 1] = ntf_uuid[i];
489e5892:	a340      	lbu	v0,0(v1)
489e5894:	4561      	addiu	v1,a1,1
489e5896:	e59d      	addu	a3,a1,a0
489e5898:	67a3      	move	a1,v1
489e589a:	ed11      	zeb	a1
489e589c:	5d04      	sltiu	a1,4
489e589e:	c741      	sb	v0,1(a3)
489e58a0:	61f7      	btnez	489e5890 <com_ancs_GetNotificationAttributes+0xc>
489e58a2:	6d01      	li	a1,1
    }
    g_ancs_data_buf[5] = 1; // attribute id
489e58a4:	c4a5      	sb	a1,5(a0)
489e58a6:	6b02      	li	v1,2

    g_ancs_data_buf[6] = 2; // len
489e58a8:	6f04      	li	a3,4
    g_ancs_data_buf[7] = 3;

    g_ancs_data_buf[8] = 4; // attribute id
489e58aa:	6a03      	li	v0,3
489e58ac:	6e05      	li	a2,5

    g_ancs_data_buf[9] = 5; // len
489e58ae:	6d06      	li	a1,6
    g_ancs_data_buf[10] = 6;
489e58b0:	c4c9      	sb	a2,9(a0)
489e58b2:	c4aa      	sb	a1,10(a0)
489e58b4:	c466      	sb	v1,6(a0)
489e58b6:	c447      	sb	v0,7(a0)
489e58b8:	c4e8      	sb	a3,8(a0)
489e58ba:	6d0b      	li	a1,11

    com_rcp_ble_serv_send(g_ancs_data_buf, 11, RCP_ANCS_CTRL_POINT_FLAG);
489e58bc:	1a10 96ef 	jal	48425bbc <com_rcp_ble_serv_send>
489e58c0:	6e04      	li	a2,4
489e58c2:	6a01      	li	v0,1

    return TRUE;
}
489e58c4:	6443      	restore	24,ra
489e58c6:	e8a0      	jrc	ra
489e58c8:	a364      	lbu	v1,4(v1)
489e58ca:	9fc1      	lw	a2,4(a3)

489e58cc <ancs_notification_cb>:
489e58cc:	64f5      	save	40,ra,s0-s1

app_result_e ancs_notification_cb(void *data, uint16 data_len, uint8 serv_flag)
{
489e58ce:	ed31      	zeh	a1
489e58d0:	6900      	li	s1,0
    uint8 i = 0, *cmd_buf = NULL;
489e58d2:	d504      	sw	a1,16(sp)
489e58d4:	6711      	move	s0,s1
    uint32 ntf_uuid = 0;
489e58d6:	2410      	beqz	a0,489e58f8 <ancs_notification_cb+0x2c>

    //PRINT_INFO("==com_ancs_callback==   Notification ");    
    if (data != NULL)
489e58d8:	a445      	lbu	v0,5(a0)
    {
        cmd_buf = (uint8 *) data;
        ntf_uuid = cmd_buf[4] | (cmd_buf[5] << 8) | (cmd_buf[6] << 16) | (cmd_buf[7] << 24);
489e58da:	a4c6      	lbu	a2,6(a0)
489e58dc:	6724      	move	s1,a0
489e58de:	a404      	lbu	s0,4(a0)
489e58e0:	3740      	sll	a3,v0,8
489e58e2:	35c0      	sll	a1,a2,8
489e58e4:	a167      	lbu	v1,7(s1)
489e58e6:	34a0      	sll	a0,a1,8
489e58e8:	e8ed      	or	s0,a3
489e58ea:	e88d      	or	s0,a0
489e58ec:	f600 3260 	sll	v0,v1,24
489e58f0:	4184      	addiu	a0,s1,4
        //PRINT_INFO_INT("Event ID	  :", cmd_buf[0]);
        //PRINT_INFO_INT("Event Flag	  :", cmd_buf[1]);
        //PRINT_INFO_INT("Category ID   :", cmd_buf[2]);
        //PRINT_INFO_INT("Category Count:", cmd_buf[3]);
        //PRINT_INFO_INT("Notification UUID:", ntf_uuid);
        //com_start_key_tone(KEYTONE_NOBLOCK);

        com_ancs_GetNotificationAttributes(&cmd_buf[4]);
489e58f2:	18f1 9621 	jal	489e5884 <com_ancs_GetNotificationAttributes>
489e58f6:	e84d      	or	s0,v0
489e58f8:	67b0      	move	a1,s0
    }
    libc_print("==com_ancs_cb==  Notify",ntf_uuid, 2);
489e58fa:	b012      	lw	s0,489e5940 <ancs_notification_cb+0x74>
489e58fc:	0c09      	la	a0,489e5920 <ancs_notification_cb+0x54>
489e58fe:	6e02      	li	a2,2
489e5900:	e840      	jalr	s0
489e5902:	6f4b      	li	a3,75
489e5904:	6d00      	li	a1,0
    PRINT_DATA(cmd_buf, data_len);
489e5906:	67c5      	move	a2,a1
489e5908:	0c0c      	la	a0,489e5938 <ancs_notification_cb+0x6c>
489e590a:	e840      	jalr	s0
489e590c:	6f4b      	li	a3,75
489e590e:	9504      	lw	a1,16(sp)
489e5910:	6791      	move	a0,s1
489e5912:	6e03      	li	a2,3
489e5914:	e840      	jalr	s0
489e5916:	6f4b      	li	a3,75
489e5918:	6a00      	li	v0,0
    return RESULT_NULL;
}
489e591a:	6475      	restore	40,ra,s0-s1
489e591c:	e8a0      	jrc	ra
489e591e:	0000      	addiu	s0,sp,0
489e5920:	3d3d      	ld	s1,232(a1)
489e5922:	6f63      	li	a3,99
489e5924:	5f6d      	sltiu	a3,109
489e5926:	6e61      	li	a2,97
489e5928:	7363      	cmpi	v1,99
489e592a:	635f      	addiu	sp,760
489e592c:	3d62      	ld	v1,16(a1)
489e592e:	203d      	beqz	s0,489e59aa <tip_recv_cb+0x16>
489e5930:	4e20      	addiu	a2,32
489e5932:	746f      	cmpi	a0,111
489e5934:	6669      	0x6669
489e5936:	0079      	addiu	s0,sp,484
489e5938:	643c      	restore	96,s0-s1
489e593a:	7461      	cmpi	a0,97
489e593c:	3e61      	ld	v1,8(a2)
489e593e:	0020      	addiu	s0,sp,128
489e5940:	e901      	sdbbp	8
489e5942:	bfc1      	lwu	a2,4(a3)

489e5944 <ancs_data_cb>:
489e5944:	64c3      	save	24,ra

app_result_e ancs_data_cb(void *data, uint16 data_len, uint8 serv_flag)
{
489e5946:	6d00      	li	a1,0
    uint8 i = 0, *cmd_buf;

    //PRINT_INFO("==com_ancs_callback==   Data ");
    libc_print("==com_ancs_cb==  Data", 0, 0);
489e5948:	b20a      	lw	v0,489e5970 <ancs_data_cb+0x2c>
489e594a:	0c04      	la	a0,489e5958 <ancs_data_cb+0x14>
489e594c:	67c5      	move	a2,a1
489e594e:	ea40      	jalr	v0
489e5950:	6f4b      	li	a3,75
489e5952:	6a00      	li	v0,0
    if (data != NULL)
    {
        cmd_buf = (uint8 *) data;
        //PRINT_DATA(data, data_len);
    }
    
    return RESULT_NULL;
}
489e5954:	6443      	restore	24,ra
489e5956:	e8a0      	jrc	ra
489e5958:	3d3d      	ld	s1,232(a1)
489e595a:	6f63      	li	a3,99
489e595c:	5f6d      	sltiu	a3,109
489e595e:	6e61      	li	a2,97
489e5960:	7363      	cmpi	v1,99
489e5962:	635f      	addiu	sp,760
489e5964:	3d62      	ld	v1,16(a1)
489e5966:	203d      	beqz	s0,489e59e2 <com_tip_init+0x26>
489e5968:	4420      	addiu	s1,a0,0
489e596a:	7461      	cmpi	a0,97
489e596c:	0061      	addiu	s0,sp,388
489e596e:	0000      	addiu	s0,sp,0
489e5970:	e901      	sdbbp	8
489e5972:	bfc1      	lwu	a2,4(a3)

489e5974 <com_ancs_init>:
489e5974:	64c3      	save	24,ra

void com_ancs_init(void)
{
489e5976:	b406      	lw	a0,489e598c <com_ancs_init+0x18>
    com_rcp_set_ext_cb(ancs_notification_cb, RCP_ANCS_SERVN_FLAG);
489e5978:	1991 962f 	jal	48b258bc <com_rcp_set_ext_cb>
489e597c:	6d02      	li	a1,2
489e597e:	b405      	lw	a0,489e5990 <com_ancs_init+0x1c>
    com_rcp_set_ext_cb(ancs_data_cb, RCP_ANCS_SERVD_FLAG);
489e5980:	1991 962f 	jal	48b258bc <com_rcp_set_ext_cb>
489e5984:	6d03      	li	a1,3
489e5986:	6443      	restore	24,ra
489e5988:	e8a0      	jrc	ra
489e598a:	0000      	addiu	s0,sp,0
489e598c:	58cd      	sltiu	s0,205
489e598e:	489e      	addiu	s0,-98
489e5990:	5945      	sltiu	s1,69
489e5992:	489e      	addiu	s0,-98

489e5994 <tip_recv_cb>:
489e5994:	64c3      	save	24,ra
}

//#endif	// __SUPPORT_ANCS_

//for tip use

app_result_e tip_recv_cb(void *data, uint16 data_len, uint8 serv_flag)
{
489e5996:	6d00      	li	a1,0
    //PRINT_INFO("tip time info");
    libc_print("tip time info", 0, 0);
489e5998:	b208      	lw	v0,489e59b8 <tip_recv_cb+0x24>
489e599a:	0c04      	la	a0,489e59a8 <tip_recv_cb+0x14>
489e599c:	67c5      	move	a2,a1
489e599e:	ea40      	jalr	v0
489e59a0:	6f4b      	li	a3,75
489e59a2:	6a00      	li	v0,0
    return RESULT_NULL;
}
489e59a4:	6443      	restore	24,ra
489e59a6:	e8a0      	jrc	ra
489e59a8:	6974      	li	s1,116
489e59aa:	2070      	beqz	s0,489e5a8c <com_tip_init+0xd0>
489e59ac:	6974      	li	s1,116
489e59ae:	656d      	move	t3,a1
489e59b0:	6920      	li	s1,32
489e59b2:	666e      	0x666e
489e59b4:	006f      	addiu	s0,sp,444
489e59b6:	0000      	addiu	s0,sp,0
489e59b8:	e901      	sdbbp	8
489e59ba:	bfc1      	lwu	a2,4(a3)

489e59bc <com_tip_init>:
489e59bc:	64c3      	save	24,ra

void com_tip_init(void)
{
489e59be:	b404      	lw	a0,489e59cc <com_tip_init+0x10>
    com_rcp_set_ext_cb(tip_recv_cb, RCP_TIP_SERV_FLAG);
489e59c0:	1991 962f 	jal	48b258bc <com_rcp_set_ext_cb>
489e59c4:	6d01      	li	a1,1
489e59c6:	6443      	restore	24,ra
489e59c8:	e8a0      	jrc	ra
489e59ca:	0000      	addiu	s0,sp,0
489e59cc:	5995      	sltiu	s1,149
489e59ce:	489e      	addiu	s0,-98
	...
Disassembly of section BANK_UI_1_40:

48a25800 <CheckSum16>:
48a25800:	6b00      	li	v1,0
{
    UINT32 index;
    UINT16 sum = 0;

    for (index = 0; index < len; index++)
48a25802:	2507      	beqz	a1,48a25812 <CheckSum16+0x12>
48a25804:	acc0      	lhu	a2,0(a0)
    {
        sum += buf[index];
48a25806:	45af      	addiu	a1,a1,-1
48a25808:	e3c9      	addu	v0,v1,a2
48a2580a:	6762      	move	v1,v0
48a2580c:	eb31      	zeh	v1
48a2580e:	4482      	addiu	a0,a0,2
48a25810:	2df9      	bnez	a1,48a25804 <CheckSum16+0x4>
48a25812:	e820      	jr	ra
    }

    return sum;
}
48a25814:	6743      	move	v0,v1
	...

48a25818 <ota_receive_connect_data>:
48a25818:	64f6      	save	48,ra,s0-s1
48a2581a:	ae40      	lhu	v0,0(a2)
48a2581c:	f440 b104 	lw	s1,48a25c60 <.L24+0x26e>
48a25820:	6706      	move	s0,a2
48a25822:	f200 6c00 	li	a0,512
48a25826:	6d20      	li	a1,32
48a25828:	6e00      	li	a2,0
48a2582a:	6f16      	li	a3,22
48a2582c:	e940      	jalr	s1
48a2582e:	d204      	sw	v0,16(sp)
48a25830:	4084      	addiu	a0,s0,4
48a25832:	d407      	sw	a0,28(sp)
48a25834:	f420 b514 	lw	a1,48a25c68 <.L24+0x276>
48a25838:	f420 b40c 	lw	a0,48a25c64 <.L24+0x272>
48a2583c:	f420 b304 	lw	v1,48a25c60 <.L24+0x26e>
48a25840:	d206      	sw	v0,24(sp)
48a25842:	6e14      	li	a2,20
48a25844:	eb40      	jalr	v1
48a25846:	6f12      	li	a3,18
48a25848:	2204      	beqz	v0,48a25852 <ota_receive_connect_data+0x3a>
48a2584a:	f400 b51c 	lw	a1,48a25c64 <.L24+0x272>
48a2584e:	6e00      	li	a2,0
48a25850:	c5c2      	sb	a2,2(a1)
48a25852:	f400 b314 	lw	v1,48a25c64 <.L24+0x272>
48a25856:	f400 b718 	lw	a3,48a25c6c <.L24+0x27a>
48a2585a:	a322      	lbu	s1,2(v1)
48a2585c:	9f80      	lw	a0,0(a3)
48a2585e:	f080 2908 	bnez	s1,48a25972 <ota_receive_connect_data+0x15a>
48a25862:	6a00      	li	v0,0
48a25864:	f020 c44b 	sb	v0,43(a0)
48a25868:	9307      	lw	v1,28(sp)
48a2586a:	cc38      	sh	s1,48(a0)
48a2586c:	cc34      	sh	s1,40(a0)
48a2586e:	a3f0      	lbu	a3,16(v1)
48a25870:	6e0a      	li	a2,10
48a25872:	efd8      	mult	a3,a2
48a25874:	9407      	lw	a0,28(sp)
48a25876:	ed12      	mflo	a1
48a25878:	4542      	addiu	v0,a1,2
48a2587a:	3546      	srl	a1,v0,1
48a2587c:	4d08      	addiu	a1,8
48a2587e:	1911 9600 	jal	48a25800 <CheckSum16>
48a25882:	ed11      	zeb	a1
48a25884:	9404      	lw	a0,16(sp)
48a25886:	ea8e      	xor	v0,a0
48a25888:	2a69      	bnez	v0,48a2595c <ota_receive_connect_data+0x144>
48a2588a:	9607      	lw	a2,28(sp)
48a2588c:	6c0a      	li	a0,10
48a2588e:	a6b0      	lbu	a1,16(a2)
48a25890:	4814      	addiu	s0,20
48a25892:	ed98      	mult	a1,a0
48a25894:	b3f3      	lw	v1,48a25c60 <.L24+0x26e>
48a25896:	ef12      	mflo	a3
48a25898:	b5f6      	lw	a1,48a25c70 <.L24+0x27e>
48a2589a:	47c2      	addiu	a2,a3,2
48a2589c:	6790      	move	a0,s0
48a2589e:	eb40      	jalr	v1
48a258a0:	6f13      	li	a3,19
48a258a2:	b2f5      	lw	v0,48a25c74 <.L24+0x282>
48a258a4:	6c10      	li	a0,16
48a258a6:	67b0      	move	a1,s0
48a258a8:	67d1      	move	a2,s1
48a258aa:	ea40      	jalr	v0
48a258ac:	6f06      	li	a3,6
48a258ae:	d205      	sw	v0,20(sp)
48a258b0:	2a09      	bnez	v0,48a258c4 <ota_receive_connect_data+0xac>
48a258b2:	b7ef      	lw	a3,48a25c6c <.L24+0x27a>
48a258b4:	6a03      	li	v0,3
48a258b6:	9f60      	lw	v1,0(a3)
48a258b8:	0cb5      	la	a0,48a25b8c <.L24+0x19a>
48a258ba:	c340      	sb	v0,0(v1)
48a258bc:	1054      	b	48a25966 <ota_receive_connect_data+0x14e>
48a258be:	b0ea      	lw	s0,48a25c64 <.L24+0x272>
48a258c0:	c0c9      	sb	a2,9(s0)
48a258c2:	1040      	b	48a25944 <ota_receive_connect_data+0x12c>
48a258c4:	9505      	lw	a1,20(sp)
48a258c6:	6c0a      	li	a0,10
48a258c8:	a5e0      	lbu	a3,0(a1)
48a258ca:	b0e6      	lw	s0,48a25c60 <.L24+0x26e>
48a258cc:	ef98      	mult	a3,a0
48a258ce:	b5eb      	lw	a1,48a25c78 <.L24+0x286>
48a258d0:	ea12      	mflo	v0
48a258d2:	9405      	lw	a0,20(sp)
48a258d4:	42c2      	addiu	a2,v0,2
48a258d6:	e840      	jalr	s0
48a258d8:	6f13      	li	a3,19
48a258da:	b6e5      	lw	a2,48a25c6c <.L24+0x27a>
48a258dc:	b0e8      	lw	s0,48a25c7c <.L24+0x28a>
48a258de:	9e80      	lw	a0,0(a2)
48a258e0:	9507      	lw	a1,28(sp)
48a258e2:	4c20      	addiu	a0,32
48a258e4:	6e08      	li	a2,8
48a258e6:	e840      	jalr	s0
48a258e8:	67f1      	move	a3,s1
48a258ea:	b7e1      	lw	a3,48a25c6c <.L24+0x27a>
48a258ec:	6b02      	li	v1,2
48a258ee:	9fa0      	lw	a1,0(a3)
48a258f0:	b4dd      	lw	a0,48a25c64 <.L24+0x272>
48a258f2:	c560      	sb	v1,0(a1)
48a258f4:	9fa0      	lw	a1,0(a3)
48a258f6:	4c0c      	addiu	a0,12
48a258f8:	4d20      	addiu	a1,32
48a258fa:	6e08      	li	a2,8
48a258fc:	e840      	jalr	s0
48a258fe:	67f1      	move	a3,s1
48a25900:	b4d9      	lw	a0,48a25c64 <.L24+0x272>
48a25902:	9207      	lw	v0,28(sp)
48a25904:	cc22      	sh	s1,4(a0)
48a25906:	b5da      	lw	a1,48a25c6c <.L24+0x27a>
48a25908:	a2d3      	lbu	a2,19(v0)
48a2590a:	b0d7      	lw	s0,48a25c64 <.L24+0x272>
48a2590c:	9de0      	lw	a3,0(a1)
48a2590e:	c0c8      	sb	a2,8(s0)
48a25910:	6b00      	li	v1,0
48a25912:	6e01      	li	a2,1
48a25914:	c0c2      	sb	a2,2(s0)
48a25916:	f020 c772 	sb	v1,50(a3)
48a2591a:	9207      	lw	v0,28(sp)
48a2591c:	9d60      	lw	v1,0(a1)
48a2591e:	a213      	lbu	s0,19(v0)
48a25920:	b7d3      	lw	a3,48a25c6c <.L24+0x27a>
48a25922:	f020 c30a 	sb	s0,42(v1)
48a25926:	9405      	lw	a0,20(sp)
48a25928:	9f60      	lw	v1,0(a3)
48a2592a:	aca4      	lhu	a1,8(a0)
48a2592c:	cbb7      	sh	a1,46(v1)
48a2592e:	a480      	lbu	a0,0(a0)
48a25930:	67b1      	move	a1,s1
48a25932:	e983      	sltu	s1,a0
48a25934:	6007      	bteqz	48a25944 <ota_receive_connect_data+0x12c>
48a25936:	f020 a30a 	lbu	s0,42(v1)
48a2593a:	5810      	sltiu	s0,16
48a2593c:	61c0      	btnez	48a258be <ota_receive_connect_data+0xa6>
48a2593e:	45a1      	addiu	a1,a1,1
48a25940:	ed83      	sltu	a1,a0
48a25942:	61fd      	btnez	48a2593e <ota_receive_connect_data+0x126>
48a25944:	b4c8      	lw	a0,48a25c64 <.L24+0x272>
48a25946:	b5c9      	lw	a1,48a25c68 <.L24+0x276>
48a25948:	b0c6      	lw	s0,48a25c60 <.L24+0x26e>
48a2594a:	6e14      	li	a2,20
48a2594c:	e840      	jalr	s0
48a2594e:	6f13      	li	a3,19
48a25950:	6d00      	li	a1,0
48a25952:	0c96      	la	a0,48a25ba8 <.L24+0x1b6>
48a25954:	67c5      	move	a2,a1
48a25956:	e840      	jalr	s0
48a25958:	6f4b      	li	a3,75
48a2595a:	110f      	b	48a25b7a <.L24+0x188>
48a2595c:	b2c4      	lw	v0,48a25c6c <.L24+0x27a>
48a2595e:	6e01      	li	a2,1
48a25960:	9a60      	lw	v1,0(v0)
48a25962:	0c97      	la	a0,48a25bbc <.L24+0x1ca>
48a25964:	c3c0      	sb	a2,0(v1)
48a25966:	b3bf      	lw	v1,48a25c60 <.L24+0x26e>
48a25968:	67b1      	move	a1,s1
48a2596a:	67d1      	move	a2,s1
48a2596c:	eb40      	jalr	v1
48a2596e:	6f4b      	li	a3,75
48a25970:	1104      	b	48a25b7a <.L24+0x188>
48a25972:	b1c3      	lw	s1,48a25c7c <.L24+0x28a>
48a25974:	9507      	lw	a1,28(sp)
48a25976:	4c20      	addiu	a0,32
48a25978:	6e08      	li	a2,8
48a2597a:	e940      	jalr	s1
48a2597c:	6f00      	li	a3,0
48a2597e:	b0bd      	lw	s0,48a25c70 <.L24+0x27e>
48a25980:	9406      	lw	a0,24(sp)
48a25982:	b3b8      	lw	v1,48a25c60 <.L24+0x26e>
48a25984:	67b0      	move	a1,s0
48a25986:	6e01      	li	a2,1
48a25988:	eb40      	jalr	v1
48a2598a:	6f12      	li	a3,18
48a2598c:	9406      	lw	a0,24(sp)
48a2598e:	6d0a      	li	a1,10
48a25990:	a4c0      	lbu	a2,0(a0)
48a25992:	b3b4      	lw	v1,48a25c60 <.L24+0x26e>
48a25994:	eeb8      	mult	a2,a1
48a25996:	67b0      	move	a1,s0
48a25998:	ef12      	mflo	a3
48a2599a:	47c2      	addiu	a2,a3,2
48a2599c:	eb40      	jalr	v1
48a2599e:	6f12      	li	a3,18
48a259a0:	9406      	lw	a0,24(sp)
48a259a2:	6e0a      	li	a2,10
48a259a4:	a440      	lbu	v0,0(a0)
48a259a6:	b3b7      	lw	v1,48a25c80 <.L24+0x28e>
48a259a8:	ead8      	mult	v0,a2
48a259aa:	9ba0      	lw	a1,0(v1)
48a259ac:	ef12      	mflo	a3
48a259ae:	4d24      	addiu	a1,36
48a259b0:	47c2      	addiu	a2,a3,2
48a259b2:	e940      	jalr	s1
48a259b4:	6f02      	li	a3,2
48a259b6:	b4ae      	lw	a0,48a25c6c <.L24+0x27a>
48a259b8:	6722      	move	s1,v0
48a259ba:	9c60      	lw	v1,0(a0)
48a259bc:	220f      	beqz	v0,48a259dc <ota_receive_connect_data+0x1c4>
48a259be:	6c04      	li	a0,4
48a259c0:	c380      	sb	a0,0(v1)
48a259c2:	6d00      	li	a1,0
48a259c4:	b3a7      	lw	v1,48a25c60 <.L24+0x26e>
48a259c6:	67c5      	move	a2,a1
48a259c8:	0c83      	la	a0,48a25bd4 <.L24+0x1e2>
48a259ca:	eb40      	jalr	v1
48a259cc:	6f4b      	li	a3,75
48a259ce:	9406      	lw	a0,24(sp)
48a259d0:	b3a4      	lw	v1,48a25c60 <.L24+0x26e>
48a259d2:	6d20      	li	a1,32
48a259d4:	6e00      	li	a2,0
48a259d6:	eb40      	jalr	v1
48a259d8:	6f17      	li	a3,23
48a259da:	10d5      	b	48a25b86 <.L24+0x194>
48a259dc:	a300      	lbu	s0,0(v1)
48a259de:	7002      	cmpi	s0,2
48a259e0:	615f      	btnez	48a25aa0 <.L24+0xae>
48a259e2:	9707      	lw	a3,28(sp)
48a259e4:	f020 a34a 	lbu	v0,42(v1)
48a259e8:	a78e      	lbu	a0,14(a3)
48a259ea:	67c4      	move	a2,a0
48a259ec:	ee11      	zeb	a2
48a259ee:	eace      	xor	v0,a2
48a259f0:	2a0f      	bnez	v0,48a25a10 <.L24+0x1e>

48a259f2 <.L24>:
48a259f2:	6d00      	li	a1,0
48a259f4:	b09b      	lw	s0,48a25c60 <.L24+0x26e>
48a259f6:	67c5      	move	a2,a1
48a259f8:	0c7f      	la	a0,48a25bf4 <.L24+0x202>
48a259fa:	e840      	jalr	s0
48a259fc:	6f4b      	li	a3,75
48a259fe:	9406      	lw	a0,24(sp)
48a25a00:	6d20      	li	a1,32
48a25a02:	6e00      	li	a2,0
48a25a04:	e840      	jalr	s0
48a25a06:	6f17      	li	a3,23
48a25a08:	10be      	b	48a25b86 <.L24+0x194>
48a25a0a:	afa4      	lhu	a1,8(a3)
48a25a0c:	cbb7      	sh	a1,46(v1)
48a25a0e:	1035      	b	48a25a7a <.L24+0x88>
48a25a10:	76ff      	cmpi	a2,255
48a25a12:	60ef      	bteqz	48a259f2 <.L24>
48a25a14:	b099      	lw	s0,48a25c78 <.L24+0x286>
48a25a16:	f020 c38a 	sb	a0,42(v1)
48a25a1a:	9406      	lw	a0,24(sp)
48a25a1c:	b391      	lw	v1,48a25c60 <.L24+0x26e>
48a25a1e:	67b0      	move	a1,s0
48a25a20:	6e01      	li	a2,1
48a25a22:	eb40      	jalr	v1
48a25a24:	6f12      	li	a3,18
48a25a26:	9406      	lw	a0,24(sp)
48a25a28:	6d0a      	li	a1,10
48a25a2a:	a4c0      	lbu	a2,0(a0)
48a25a2c:	b38d      	lw	v1,48a25c60 <.L24+0x26e>
48a25a2e:	eeb8      	mult	a2,a1
48a25a30:	67b0      	move	a1,s0
48a25a32:	e812      	mflo	s0
48a25a34:	6f12      	li	a3,18
48a25a36:	eb40      	jalr	v1
48a25a38:	40c2      	addiu	a2,s0,2
48a25a3a:	b78d      	lw	a3,48a25c6c <.L24+0x27a>
48a25a3c:	b089      	lw	s0,48a25c60 <.L24+0x26e>
48a25a3e:	9f40      	lw	v0,0(a3)
48a25a40:	0c72      	la	a0,48a25c08 <.L24+0x216>
48a25a42:	f020 a2aa 	lbu	a1,42(v0)
48a25a46:	6e02      	li	a2,2
48a25a48:	e840      	jalr	s0
48a25a4a:	6f4b      	li	a3,75
48a25a4c:	b488      	lw	a0,48a25c6c <.L24+0x27a>
48a25a4e:	67b1      	move	a1,s1
48a25a50:	9c60      	lw	v1,0(a0)
48a25a52:	f020 c32b 	sb	s1,43(v1)
48a25a56:	9606      	lw	a2,24(sp)
48a25a58:	cb38      	sh	s1,48(v1)
48a25a5a:	cb34      	sh	s1,40(v1)
48a25a5c:	a680      	lbu	a0,0(a2)
48a25a5e:	e983      	sltu	s1,a0
48a25a60:	600c      	bteqz	48a25a7a <.L24+0x88>
48a25a62:	b283      	lw	v0,48a25c6c <.L24+0x27a>
48a25a64:	9706      	lw	a3,24(sp)
48a25a66:	9a60      	lw	v1,0(v0)
48a25a68:	f020 a3ca 	lbu	a2,42(v1)
48a25a6c:	a703      	lbu	s0,3(a3)
48a25a6e:	e8ce      	xor	s0,a2
48a25a70:	20cc      	beqz	s0,48a25a0a <.L24+0x18>
48a25a72:	45a1      	addiu	a1,a1,1
48a25a74:	ed83      	sltu	a1,a0
48a25a76:	4f0a      	addiu	a3,10
48a25a78:	61f9      	btnez	48a25a6c <.L24+0x7a>
48a25a7a:	b47b      	lw	a0,48a25c64 <.L24+0x272>
48a25a7c:	b57b      	lw	a1,48a25c68 <.L24+0x276>
48a25a7e:	b079      	lw	s0,48a25c60 <.L24+0x26e>
48a25a80:	6e14      	li	a2,20
48a25a82:	e840      	jalr	s0
48a25a84:	6f13      	li	a3,19
48a25a86:	b47a      	lw	a0,48a25c6c <.L24+0x27a>
48a25a88:	6e02      	li	a2,2
48a25a8a:	9ce0      	lw	a3,0(a0)
48a25a8c:	0c65      	la	a0,48a25c20 <.L24+0x22e>
48a25a8e:	afb7      	lhu	a1,46(a3)
48a25a90:	e840      	jalr	s0
48a25a92:	6f4b      	li	a3,75
48a25a94:	1063      	b	48a25b5c <.L24+0x16a>
48a25a96:	b676      	lw	a2,48a25c6c <.L24+0x27a>
48a25a98:	afa4      	lhu	a1,8(a3)
48a25a9a:	9e20      	lw	s1,0(a2)
48a25a9c:	c9b7      	sh	a1,46(s1)
48a25a9e:	1031      	b	48a25b02 <.L24+0x110>
48a25aa0:	b076      	lw	s0,48a25c78 <.L24+0x286>
48a25aa2:	b370      	lw	v1,48a25c60 <.L24+0x26e>
48a25aa4:	9406      	lw	a0,24(sp)
48a25aa6:	67b0      	move	a1,s0
48a25aa8:	6e01      	li	a2,1
48a25aaa:	eb40      	jalr	v1
48a25aac:	6f12      	li	a3,18
48a25aae:	9406      	lw	a0,24(sp)
48a25ab0:	6e0a      	li	a2,10
48a25ab2:	a4e0      	lbu	a3,0(a0)
48a25ab4:	67b0      	move	a1,s0
48a25ab6:	efd8      	mult	a3,a2
48a25ab8:	b06a      	lw	s0,48a25c60 <.L24+0x26e>
48a25aba:	ea12      	mflo	v0
48a25abc:	6f12      	li	a3,18
48a25abe:	e840      	jalr	s0
48a25ac0:	42c2      	addiu	a2,v0,2
48a25ac2:	b368      	lw	v1,48a25c60 <.L24+0x26e>
48a25ac4:	0c5c      	la	a0,48a25c34 <.L24+0x242>
48a25ac6:	67b1      	move	a1,s1
48a25ac8:	67d1      	move	a2,s1
48a25aca:	eb40      	jalr	v1
48a25acc:	6f4b      	li	a3,75
48a25ace:	9407      	lw	a0,28(sp)
48a25ad0:	6f0a      	li	a3,10
48a25ad2:	a4b0      	lbu	a1,16(a0)
48a25ad4:	b363      	lw	v1,48a25c60 <.L24+0x26e>
48a25ad6:	edf8      	mult	a1,a3
48a25ad8:	9406      	lw	a0,24(sp)
48a25ada:	e812      	mflo	s0
48a25adc:	6e03      	li	a2,3
48a25ade:	40a2      	addiu	a1,s0,2
48a25ae0:	eb40      	jalr	v1
48a25ae2:	6f4b      	li	a3,75
48a25ae4:	9206      	lw	v0,24(sp)
48a25ae6:	67b1      	move	a1,s1
48a25ae8:	a260      	lbu	v1,0(v0)
48a25aea:	e963      	sltu	s1,v1
48a25aec:	600a      	bteqz	48a25b02 <.L24+0x110>
48a25aee:	b15e      	lw	s1,48a25c64 <.L24+0x272>
48a25af0:	9706      	lw	a3,24(sp)
48a25af2:	a188      	lbu	a0,8(s1)
48a25af4:	a743      	lbu	v0,3(a3)
48a25af6:	ea8e      	xor	v0,a0
48a25af8:	22ce      	beqz	v0,48a25a96 <.L24+0xa4>
48a25afa:	45a1      	addiu	a1,a1,1
48a25afc:	ed63      	sltu	a1,v1
48a25afe:	4f0a      	addiu	a3,10
48a25b00:	61f9      	btnez	48a25af4 <.L24+0x102>
48a25b02:	b05b      	lw	s0,48a25c6c <.L24+0x27a>
48a25b04:	0c4f      	la	a0,48a25c40 <.L24+0x24e>
48a25b06:	9820      	lw	s1,0(s0)
48a25b08:	6e02      	li	a2,2
48a25b0a:	a9b7      	lhu	a1,46(s1)
48a25b0c:	b155      	lw	s1,48a25c60 <.L24+0x26e>
48a25b0e:	e940      	jalr	s1
48a25b10:	6f4b      	li	a3,75
48a25b12:	98c0      	lw	a2,0(s0)
48a25b14:	b354      	lw	v1,48a25c64 <.L24+0x272>
48a25b16:	6d02      	li	a1,2
48a25b18:	c6a0      	sb	a1,0(a2)
48a25b1a:	abe2      	lhu	a3,4(v1)
48a25b1c:	9880      	lw	a0,0(s0)
48a25b1e:	ccf8      	sh	a3,48(a0)
48a25b20:	a348      	lbu	v0,8(v1)
48a25b22:	f020 c44a 	sb	v0,42(a0)
48a25b26:	aba2      	lhu	a1,4(v1)
48a25b28:	98c0      	lw	a2,0(s0)
48a25b2a:	6c05      	li	a0,5
48a25b2c:	ceb4      	sh	a1,40(a2)
48a25b2e:	6d00      	li	a1,0
48a25b30:	f020 c6ab 	sb	a1,43(a2)
48a25b34:	98e0      	lw	a3,0(s0)
48a25b36:	f020 c7b2 	sb	a1,50(a3)
48a25b3a:	98c0      	lw	a2,0(s0)
48a25b3c:	c690      	sb	a0,16(a2)
48a25b3e:	98e0      	lw	a3,0(s0)
48a25b40:	f020 a76a 	lbu	v1,42(a3)
48a25b44:	af58      	lhu	v0,48(a3)
48a25b46:	c778      	sb	v1,24(a3)
48a25b48:	9880      	lw	a0,0(s0)
48a25b4a:	cf49      	sh	v0,18(a3)
48a25b4c:	c4b9      	sb	a1,25(a0)
48a25b4e:	98c0      	lw	a2,0(s0)
48a25b50:	0c2e      	la	a0,48a25c08 <.L24+0x216>
48a25b52:	f020 a6aa 	lbu	a1,42(a2)
48a25b56:	6f4b      	li	a3,75
48a25b58:	e940      	jalr	s1
48a25b5a:	6e02      	li	a2,2
48a25b5c:	b442      	lw	a0,48a25c64 <.L24+0x272>
48a25b5e:	a462      	lbu	v1,2(a0)
48a25b60:	7302      	cmpi	v1,2
48a25b62:	610b      	btnez	48a25b7a <.L24+0x188>
48a25b64:	b542      	lw	a1,48a25c6c <.L24+0x27a>
48a25b66:	6e02      	li	a2,2
48a25b68:	9de0      	lw	a3,0(a1)
48a25b6a:	b23e      	lw	v0,48a25c60 <.L24+0x26e>
48a25b6c:	6d00      	li	a1,0
48a25b6e:	f020 c7cb 	sb	a2,43(a3)
48a25b72:	0c39      	la	a0,48a25c54 <.L24+0x262>
48a25b74:	67c5      	move	a2,a1
48a25b76:	ea40      	jalr	v0
48a25b78:	6f4b      	li	a3,75
48a25b7a:	9406      	lw	a0,24(sp)
48a25b7c:	b239      	lw	v0,48a25c60 <.L24+0x26e>
48a25b7e:	6d20      	li	a1,32
48a25b80:	6e00      	li	a2,0
48a25b82:	ea40      	jalr	v0
48a25b84:	6f17      	li	a3,23
48a25b86:	6a00      	li	v0,0
48a25b88:	6476      	restore	48,ra,s0-s1
48a25b8a:	e8a0      	jrc	ra
48a25b8c:	6f63      	li	a3,99
48a25b8e:	6e6e      	li	a2,110
48a25b90:	6365      	addiu	sp,808
48a25b92:	2074      	beqz	s0,48a25c7c <.L24+0x28a>
48a25b94:	6166      	btnez	48a25c62 <.L24+0x270>
48a25b96:	6c69      	li	a0,105
48a25b98:	2820      	bnez	s0,48a25bda <.L24+0x1e8>
48a25b9a:	5746      	slti	a3,70
48a25b9c:	7420      	cmpi	a0,32
48a25b9e:	6f6f      	li	a3,111
48a25ba0:	4220      	addiu	s1,v0,0
48a25ba2:	6769      	move	v1,t1
48a25ba4:	2921      	bnez	s1,48a25be8 <.L24+0x1f6>
48a25ba6:	0000      	addiu	s0,sp,0
48a25ba8:	6f63      	li	a3,99
48a25baa:	6e6e      	li	a2,110
48a25bac:	6365      	addiu	sp,808
48a25bae:	2074      	beqz	s0,48a25c98 <fw_download_new+0x14>
48a25bb0:	7573      	cmpi	a1,115
48a25bb2:	6363      	addiu	sp,792
48a25bb4:	7365      	cmpi	v1,101
48a25bb6:	2173      	beqz	s1,48a25c9e <fw_download_new+0x1a>
48a25bb8:	0021      	addiu	s0,sp,132
48a25bba:	0000      	addiu	s0,sp,0
48a25bbc:	6f63      	li	a3,99
48a25bbe:	6e6e      	li	a2,110
48a25bc0:	6365      	addiu	sp,808
48a25bc2:	2074      	beqz	s0,48a25cac <fw_download_new+0x28>
48a25bc4:	656d      	move	t3,a1
48a25bc6:	7373      	cmpi	v1,115
48a25bc8:	6761      	move	v1,at
48a25bca:	2065      	beqz	s0,48a25c96 <fw_download_new+0x12>
48a25bcc:	5245      	slti	v0,69
48a25bce:	4f52      	addiu	a3,82
48a25bd0:	2121      	beqz	s1,48a25c14 <.L24+0x222>
48a25bd2:	0000      	addiu	s0,sp,0
48a25bd4:	6f63      	li	a3,99
48a25bd6:	6e6e      	li	a2,110
48a25bd8:	6365      	addiu	sp,808
48a25bda:	2074      	beqz	s0,48a25cc4 <fw_download_new+0x40>
48a25bdc:	656d      	move	t3,a1
48a25bde:	7373      	cmpi	v1,115
48a25be0:	6761      	move	v1,at
48a25be2:	2065      	beqz	s0,48a25cae <fw_download_new+0x2a>
48a25be4:	7369      	cmpi	v1,105
48a25be6:	6420      	restore	128,s0
48a25be8:	6669      	0x6669
48a25bea:	6566      	move	v1,a2
48a25bec:	6572      	move	s3,v0
48a25bee:	746e      	cmpi	a0,110
48a25bf0:	0000      	addiu	s0,sp,0
48a25bf2:	0000      	addiu	s0,sp,0
48a25bf4:	6863      	li	s0,99
48a25bf6:	6e61      	li	a2,97
48a25bf8:	6567      	move	v1,a3
48a25bfa:	6120      	btnez	48a25c3c <.L24+0x24a>
48a25bfc:	7070      	cmpi	s0,112
48a25bfe:	696c      	li	s1,108
48a25c00:	6163      	btnez	48a25cc8 <fw_download_new+0x44>
48a25c02:	746e      	cmpi	a0,110
48a25c04:	2121      	beqz	s1,48a25c48 <.L24+0x256>
48a25c06:	0000      	addiu	s0,sp,0
48a25c08:	5f67      	sltiu	a3,103
48a25c0a:	7563      	cmpi	a1,99
48a25c0c:	5f72      	sltiu	a3,114
48a25c0e:	6572      	move	s3,v0
48a25c10:	5f63      	sltiu	a3,99
48a25c12:	7473      	cmpi	a0,115
48a25c14:	7461      	cmpi	a0,97
48a25c16:	2e65      	bnez	a2,48a25ce2 <fw_download_new+0x5e>
48a25c18:	6170      	btnez	48a25cfa <fw_download_new+0x76>
48a25c1a:	7472      	cmpi	a0,114
48a25c1c:	695f      	li	s1,95
48a25c1e:	0064      	addiu	s0,sp,400
48a25c20:	5f67      	sltiu	a3,103
48a25c22:	6162      	btnez	48a25ce8 <fw_download_new+0x64>
48a25c24:	6b63      	li	v1,99
48a25c26:	7075      	cmpi	s0,117
48a25c28:	705f      	cmpi	s0,95
48a25c2a:	7261      	cmpi	v0,97
48a25c2c:	5f74      	sltiu	a3,116
48a25c2e:	6461      	restore	8,ra,s0
48a25c30:	7264      	cmpi	v0,100
48a25c32:	0000      	addiu	s0,sp,0
48a25c34:	643c      	restore	96,s0-s1
48a25c36:	7672      	cmpi	a2,114
48a25c38:	6420      	restore	128,s0
48a25c3a:	7461      	cmpi	a0,97
48a25c3c:	3e61      	ld	v1,8(a2)
48a25c3e:	0020      	addiu	s0,sp,128
48a25c40:	5f67      	sltiu	a3,103
48a25c42:	6162      	btnez	48a25d08 <fw_download_new+0x84>
48a25c44:	6b63      	li	v1,99
48a25c46:	7075      	cmpi	s0,117
48a25c48:	705f      	cmpi	s0,95
48a25c4a:	7261      	cmpi	v0,97
48a25c4c:	5f74      	sltiu	a3,116
48a25c4e:	6461      	restore	8,ra,s0
48a25c50:	7264      	cmpi	v0,100
48a25c52:	0020      	addiu	s0,sp,128
48a25c54:	7073      	cmpi	s0,115
48a25c56:	2165      	beqz	s1,48a25d22 <fw_download_new+0x9e>
48a25c58:	2121      	beqz	s1,48a25c9c <fw_download_new+0x18>
48a25c5a:	7e7e      	sd	v1,240(a2)
48a25c5c:	7e7e      	sd	v1,240(a2)
48a25c5e:	0000      	addiu	s0,sp,0
48a25c60:	e901      	sdbbp	8
48a25c62:	bfc1      	lwu	a2,4(a3)
48a25c64:	99e8      	lw	a3,32(s1)
48a25c66:	9fc1      	lw	a2,4(a3)
48a25c68:	0000      	addiu	s0,sp,0
48a25c6a:	0015      	addiu	s0,sp,84
48a25c6c:	a198      	lbu	a0,24(s1)
48a25c6e:	9fc1      	lw	a2,4(a3)
48a25c70:	0000      	addiu	s0,sp,0
48a25c72:	0017      	addiu	s0,sp,92
48a25c74:	e91d      	dmultu	s1,s0
48a25c76:	bfc1      	lwu	a2,4(a3)
48a25c78:	0000      	addiu	s0,sp,0
48a25c7a:	0016      	addiu	s0,sp,88
48a25c7c:	e905      	break	8
48a25c7e:	bfc1      	lwu	a2,4(a3)
48a25c80:	a298      	lbu	a0,24(v0)
48a25c82:	9fc1      	lw	a2,4(a3)

48a25c84 <fw_download_new>:
48a25c84:	64f6      	save	48,ra,s0-s1
48a25c86:	6901      	li	s1,1
48a25c88:	b422      	lw	a0,48a25d10 <fw_download_new+0x8c>
48a25c8a:	d106      	sw	s1,24(sp)
48a25c8c:	b122      	lw	s1,48a25d14 <fw_download_new+0x90>
48a25c8e:	9c40      	lw	v0,0(a0)
48a25c90:	9960      	lw	v1,0(s1)
48a25c92:	4a14      	addiu	v0,20
48a25c94:	abd7      	lhu	a2,46(v1)
48a25c96:	d205      	sw	v0,20(sp)
48a25c98:	679d      	move	a0,sp
48a25c9a:	f020 a3ea 	lbu	a3,42(v1)
48a25c9e:	ccce      	sh	a2,28(a0)
48a25ca0:	abb8      	lhu	a1,48(v1)
48a25ca2:	b21e      	lw	v0,48a25d18 <fw_download_new+0x94>
48a25ca4:	ccaf      	sh	a1,30(a0)
48a25ca6:	6d00      	li	a1,0
48a25ca8:	d704      	sw	a3,16(sp)
48a25caa:	0404      	addiu	a0,sp,16
48a25cac:	67c5      	move	a2,a1
48a25cae:	ea40      	jalr	v0
48a25cb0:	6f04      	li	a3,4
48a25cb2:	ea4f      	not	v0
48a25cb4:	6b00      	li	v1,0
48a25cb6:	2229      	beqz	v0,48a25d0a <fw_download_new+0x86>
48a25cb8:	9940      	lw	v0,0(s1)
48a25cba:	6c01      	li	a0,1
48a25cbc:	f020 c28b 	sb	a0,43(v0)
48a25cc0:	9960      	lw	v1,0(s1)
48a25cc2:	aab8      	lhu	a1,48(v0)
48a25cc4:	abf8      	lhu	a3,48(v1)
48a25cc6:	cab4      	sh	a1,40(v0)
48a25cc8:	47c1      	addiu	a2,a3,1
48a25cca:	cbd8      	sh	a2,48(v1)
48a25ccc:	6766      	move	v1,a2
48a25cce:	eb31      	zeh	v1
48a25cd0:	6d7f      	li	a1,127
48a25cd2:	ed6c      	and	a1,v1
48a25cd4:	2502      	beqz	a1,48a25cda <fw_download_new+0x56>
48a25cd6:	7301      	cmpi	v1,1
48a25cd8:	6117      	btnez	48a25d08 <fw_download_new+0x84>
48a25cda:	b011      	lw	s0,48a25d1c <fw_download_new+0x98>
48a25cdc:	b511      	lw	a1,48a25d20 <fw_download_new+0x9c>
48a25cde:	b312      	lw	v1,48a25d24 <fw_download_new+0xa0>
48a25ce0:	6790      	move	a0,s0
48a25ce2:	6e14      	li	a2,20
48a25ce4:	eb40      	jalr	v1
48a25ce6:	6f12      	li	a3,18
48a25ce8:	9980      	lw	a0,0(s1)
48a25cea:	6d01      	li	a1,1
48a25cec:	c0a2      	sb	a1,2(s0)
48a25cee:	f020 a44a 	lbu	v0,42(a0)
48a25cf2:	6e00      	li	a2,0
48a25cf4:	c048      	sb	v0,8(s0)
48a25cf6:	acf8      	lhu	a3,48(a0)
48a25cf8:	b50a      	lw	a1,48a25d20 <fw_download_new+0x9c>
48a25cfa:	b30b      	lw	v1,48a25d24 <fw_download_new+0xa0>
48a25cfc:	c8e2      	sh	a3,4(s0)
48a25cfe:	c0c3      	sb	a2,3(s0)
48a25d00:	6790      	move	a0,s0
48a25d02:	6e14      	li	a2,20
48a25d04:	eb40      	jalr	v1
48a25d06:	6f13      	li	a3,19
48a25d08:	6b01      	li	v1,1
48a25d0a:	6743      	move	v0,v1
48a25d0c:	6476      	restore	48,ra,s0-s1
48a25d0e:	e8a0      	jrc	ra
48a25d10:	a298      	lbu	a0,24(v0)
48a25d12:	9fc1      	lw	a2,4(a3)
48a25d14:	a198      	lbu	a0,24(s1)
48a25d16:	9fc1      	lw	a2,4(a3)
48a25d18:	e91d      	dmultu	s1,s0
48a25d1a:	bfc1      	lwu	a2,4(a3)
48a25d1c:	99e8      	lw	a3,32(s1)
48a25d1e:	9fc1      	lw	a2,4(a3)
48a25d20:	0000      	addiu	s0,sp,0
48a25d22:	0015      	addiu	s0,sp,84
48a25d24:	e901      	sdbbp	8
48a25d26:	bfc1      	lwu	a2,4(a3)

48a25d28 <ota_receive_data>:
48a25d28:	64f4      	save	32,ra,s0-s1
48a25d2a:	6dff      	li	a1,255
48a25d2c:	ae00      	lhu	s0,0(a2)
48a25d2e:	45a2      	addiu	a1,a1,2
48a25d30:	4682      	addiu	a0,a2,2
48a25d32:	1911 9600 	jal	48a25800 <CheckSum16>
48a25d36:	ae21      	lhu	s1,2(a2)
48a25d38:	ea0e      	xor	v0,s0
48a25d3a:	b015      	lw	s0,48a25d8c <ota_receive_data+0x64>
48a25d3c:	98a0      	lw	a1,0(s0)
48a25d3e:	2a14      	bnez	v0,48a25d68 <ota_receive_data+0x40>
48a25d40:	adb8      	lhu	a1,48(a1)
48a25d42:	6745      	move	v0,a1
48a25d44:	ea2e      	xor	v0,s1
48a25d46:	220c      	beqz	v0,48a25d60 <ota_receive_data+0x38>
48a25d48:	b212      	lw	v0,48a25d90 <ota_receive_data+0x68>
48a25d4a:	6e02      	li	a2,2
48a25d4c:	0c0b      	la	a0,48a25d78 <ota_receive_data+0x50>
48a25d4e:	ea40      	jalr	v0
48a25d50:	6f4b      	li	a3,75
48a25d52:	9860      	lw	v1,0(s0)
48a25d54:	f020 a3f2 	lbu	a3,50(v1)
48a25d58:	47c1      	addiu	a2,a3,1
48a25d5a:	f020 c3d2 	sb	a2,50(v1)
48a25d5e:	1009      	b	48a25d72 <ota_receive_data+0x4a>
48a25d60:	1911 9721 	jal	48a25c84 <fw_download_new>
48a25d64:	6500      	nop
48a25d66:	1005      	b	48a25d72 <ota_receive_data+0x4a>
48a25d68:	ad78      	lhu	v1,48(a1)
48a25d6a:	6c00      	li	a0,0
48a25d6c:	cd74      	sh	v1,40(a1)
48a25d6e:	f020 c58b 	sb	a0,43(a1)
48a25d72:	6a00      	li	v0,0
48a25d74:	6474      	restore	32,ra,s0-s1
48a25d76:	e8a0      	jrc	ra
48a25d78:	6170      	btnez	48a25e5a <ota_enquiry_message+0x62>
48a25d7a:	676b      	move	v1,t3
48a25d7c:	6920      	li	s1,32
48a25d7e:	2073      	beqz	s0,48a25e66 <ota_enquiry_connect+0x6>
48a25d80:	6f6e      	li	a3,110
48a25d82:	2074      	beqz	s0,48a25e6c <ota_enquiry_connect+0xc>
48a25d84:	656e      	move	t3,a2
48a25d86:	6465      	restore	40,ra,s0
48a25d88:	0021      	addiu	s0,sp,132
48a25d8a:	0000      	addiu	s0,sp,0
48a25d8c:	a198      	lbu	a0,24(s1)
48a25d8e:	9fc1      	lw	a2,4(a3)
48a25d90:	e901      	sdbbp	8
48a25d92:	bfc1      	lwu	a2,4(a3)

48a25d94 <ota_receive_vram_data>:
48a25d94:	e820      	jr	ra
48a25d96:	6a00      	li	v0,0

48a25d98 <CheckSum32>:
48a25d98:	6b00      	li	v1,0

UINT32 CheckSum32(UINT32 *buf, UINT32 len)
{
    UINT32 index;
    UINT32 sum = 0;

    for (index = 0; index < len; index++)
48a25d9a:	2505      	beqz	a1,48a25da6 <CheckSum32+0xe>
48a25d9c:	9c40      	lw	v0,0(a0)
    {
        sum += buf[index];
48a25d9e:	45af      	addiu	a1,a1,-1
48a25da0:	e34d      	addu	v1,v0
48a25da2:	4484      	addiu	a0,a0,4
48a25da4:	2dfb      	bnez	a1,48a25d9c <CheckSum32+0x4>
48a25da6:	e820      	jr	ra
    }

    return sum;
}
48a25da8:	6743      	move	v0,v1
48a25daa:	6500      	nop

48a25dac <message_copy>:
48a25dac:	64e3      	save	24,ra,s0
    return RESULT_NULL;
}

uint32 message_copy(void *data,uint8 message_type)
{
48a25dae:	ed11      	zeb	a1
48a25db0:	7501      	cmpi	a1,1
    if(message_type==1)
48a25db2:	6107      	btnez	48a25dc2 <message_copy+0x16>
48a25db4:	b30e      	lw	v1,48a25dec <message_copy+0x40>
    {
        libc_memcpy(data, &g_OTA_var->g_connect_repy, 16);
48a25db6:	b20f      	lw	v0,48a25df0 <message_copy+0x44>
48a25db8:	9ba0      	lw	a1,0(v1)
48a25dba:	6e10      	li	a2,16
48a25dbc:	ea40      	jalr	v0
48a25dbe:	6f00      	li	a3,0
48a25dc0:	1013      	b	48a25de8 <message_copy+0x3c>
48a25dc2:	7502      	cmpi	a1,2

    }
    else if(message_type==2)
48a25dc4:	b00b      	lw	s0,48a25df0 <message_copy+0x44>
48a25dc6:	b50a      	lw	a1,48a25dec <message_copy+0x40>
48a25dc8:	6104      	btnez	48a25dd2 <message_copy+0x26>
48a25dca:	9da0      	lw	a1,0(a1)
    {
        libc_memcpy(data, &g_OTA_var->g_reply_bkinfo, 16); 
48a25dcc:	6e10      	li	a2,16
48a25dce:	4d10      	addiu	a1,16
48a25dd0:	1009      	b	48a25de4 <message_copy+0x38>
48a25dd2:	b209      	lw	v0,48a25df4 <message_copy+0x48>
    }
    else
    {
#ifdef        ENABLE_TRUE_WIRELESS_STEREO
        g_OTA_var->g_cur_rec_state.tws_connect_sta = g_bt_stack_cur_info.dev_role ;
48a25dd4:	9dc0      	lw	a2,0(a1)
48a25dd6:	f020 a2ee 	lbu	a3,46(v0)
48a25dda:	f020 c6ec 	sb	a3,44(a2)
48a25dde:	9da0      	lw	a1,0(a1)
        //libc_print("dev_role",g_OTA_var->g_cur_rec_state.tws_connect_sta,2);
#else
        g_OTA_var->g_cur_rec_state.tws_connect_sta = 0;
        //libc_print("dev_role",0,2);
#endif
        libc_memcpy(data, &g_OTA_var->g_cur_rec_state, 14);
48a25de0:	6e0e      	li	a2,14
48a25de2:	4d20      	addiu	a1,32
48a25de4:	e840      	jalr	s0
48a25de6:	6f00      	li	a3,0
48a25de8:	6463      	restore	24,ra,s0
    }
}
48a25dea:	e8a0      	jrc	ra
48a25dec:	a198      	lbu	a0,24(s1)
48a25dee:	9fc1      	lw	a2,4(a3)
48a25df0:	e905      	break	8
48a25df2:	bfc1      	lwu	a2,4(a3)
48a25df4:	a2fc      	lbu	a3,28(v0)
48a25df6:	9fc1      	lw	a2,4(a3)

48a25df8 <ota_enquiry_message>:
48a25df8:	64c8      	save	64,ra
48a25dfa:	040a      	addiu	a0,sp,40
48a25dfc:	1911 976b 	jal	48a25dac <message_copy>
48a25e00:	6d03      	li	a1,3
48a25e02:	b215      	lw	v0,48a25e54 <ota_enquiry_message+0x5c>
48a25e04:	9a60      	lw	v1,0(v0)
48a25e06:	f020 a3b2 	lbu	a1,50(v1)
48a25e0a:	250a      	beqz	a1,48a25e20 <ota_enquiry_message+0x28>
48a25e0c:	6c00      	li	a0,0
48a25e0e:	6d00      	li	a1,0
48a25e10:	b212      	lw	v0,48a25e58 <ota_enquiry_message+0x60>
48a25e12:	f020 c392 	sb	a0,50(v1)
48a25e16:	67c5      	move	a2,a1
48a25e18:	0c07      	la	a0,48a25e34 <ota_enquiry_message+0x3c>
48a25e1a:	ea40      	jalr	v0
48a25e1c:	6f4b      	li	a3,75
48a25e1e:	1006      	b	48a25e2c <ota_enquiry_message+0x34>
48a25e20:	6f0e      	li	a3,14
48a25e22:	b30f      	lw	v1,48a25e5c <ota_enquiry_message+0x64>
48a25e24:	d704      	sw	a3,16(sp)
48a25e26:	6785      	move	a0,a1
48a25e28:	eb40      	jalr	v1
48a25e2a:	0606      	addiu	a2,sp,24
48a25e2c:	6a00      	li	v0,0
48a25e2e:	6448      	restore	64,ra
48a25e30:	e8a0      	jrc	ra
48a25e32:	0000      	addiu	s0,sp,0
48a25e34:	5f67      	sltiu	a3,103
48a25e36:	6573      	move	s3,v1
48a25e38:	646e      	restore	112,ra,s0
48a25e3a:	655f      	move	k0,a3
48a25e3c:	7272      	cmpi	v0,114
48a25e3e:	5f6f      	sltiu	a3,111
48a25e40:	6f63      	li	a3,99
48a25e42:	6e75      	li	a2,117
48a25e44:	2074      	beqz	s0,48a25f2e <ota_get_ver_num+0x6>
48a25e46:	6863      	li	s0,99
48a25e48:	6e61      	li	a2,97
48a25e4a:	6568      	move	t3,s0
48a25e4c:	7420      	cmpi	a0,32
48a25e4e:	206f      	beqz	s0,48a25f2e <ota_get_ver_num+0x6>
48a25e50:	0030      	addiu	s0,sp,192
48a25e52:	0000      	addiu	s0,sp,0
48a25e54:	a198      	lbu	a0,24(s1)
48a25e56:	9fc1      	lw	a2,4(a3)
48a25e58:	e901      	sdbbp	8
48a25e5a:	bfc1      	lwu	a2,4(a3)
48a25e5c:	5f29      	sltiu	a3,41
48a25e5e:	482a      	addiu	s0,42

48a25e60 <ota_enquiry_connect>:
48a25e60:	64f9      	save	72,ra,s0-s1
48a25e62:	6d00      	li	a1,0
48a25e64:	b11f      	lw	s1,48a25ee0 <ota_enquiry_connect+0x80>
48a25e66:	0c13      	la	a0,48a25eb0 <ota_enquiry_connect+0x50>
48a25e68:	67c5      	move	a2,a1
48a25e6a:	e940      	jalr	s1
48a25e6c:	6f4b      	li	a3,75
48a25e6e:	b11e      	lw	s1,48a25ee4 <ota_enquiry_connect+0x84>
48a25e70:	000a      	addiu	s0,sp,40
48a25e72:	9960      	lw	v1,0(s1)
48a25e74:	a350      	lbu	v0,16(v1)
48a25e76:	7205      	cmpi	v0,5
48a25e78:	610d      	btnez	48a25e94 <ota_enquiry_connect+0x34>
48a25e7a:	6790      	move	a0,s0
48a25e7c:	1911 976b 	jal	48a25dac <message_copy>
48a25e80:	6d02      	li	a1,2
48a25e82:	9980      	lw	a0,0(s1)
48a25e84:	6d00      	li	a1,0
48a25e86:	c4b0      	sb	a1,16(a0)
48a25e88:	6c00      	li	a0,0
48a25e8a:	6f10      	li	a3,16
48a25e8c:	67a4      	move	a1,a0
48a25e8e:	67d0      	move	a2,s0
48a25e90:	d704      	sw	a3,16(sp)
48a25e92:	1009      	b	48a25ea6 <ota_enquiry_connect+0x46>
48a25e94:	6790      	move	a0,s0
48a25e96:	1911 976b 	jal	48a25dac <message_copy>
48a25e9a:	6d01      	li	a1,1
48a25e9c:	6f10      	li	a3,16
48a25e9e:	6c00      	li	a0,0
48a25ea0:	d704      	sw	a3,16(sp)
48a25ea2:	67a4      	move	a1,a0
48a25ea4:	0606      	addiu	a2,sp,24
48a25ea6:	b211      	lw	v0,48a25ee8 <ota_enquiry_connect+0x88>
48a25ea8:	eac0      	jalrc	v0
48a25eaa:	6a00      	li	v0,0
48a25eac:	6479      	restore	72,ra,s0-s1
48a25eae:	e8a0      	jrc	ra
48a25eb0:	6572      	move	s3,v0
48a25eb2:	6563      	move	v1,v1
48a25eb4:	7669      	cmpi	a2,105
48a25eb6:	2065      	beqz	s0,48a25f82 <reboot_system+0x1e>
48a25eb8:	6e65      	li	a2,101
48a25eba:	7571      	cmpi	a1,113
48a25ebc:	7269      	cmpi	v0,105
48a25ebe:	2079      	beqz	s0,48a25fb2 <reboot_system+0x4e>
48a25ec0:	6f63      	li	a3,99
48a25ec2:	6e6e      	li	a2,110
48a25ec4:	6365      	addiu	sp,808
48a25ec6:	2074      	beqz	s0,48a25fb0 <reboot_system+0x4c>
48a25ec8:	7573      	cmpi	a1,115
48a25eca:	6363      	addiu	sp,792
48a25ecc:	7365      	cmpi	v1,101
48a25ece:	2073      	beqz	s0,48a25fb6 <reboot_system+0x52>
48a25ed0:	726f      	cmpi	v0,111
48a25ed2:	6e20      	li	a2,32
48a25ed4:	746f      	cmpi	a0,111
48a25ed6:	4320      	addiu	s1,v1,0
48a25ed8:	444d      	addiu	v0,a0,-3
48a25eda:	2120      	beqz	s1,48a25f1c <get_ver_message+0x30>
48a25edc:	0021      	addiu	s0,sp,132
48a25ede:	0000      	addiu	s0,sp,0
48a25ee0:	e901      	sdbbp	8
48a25ee2:	bfc1      	lwu	a2,4(a3)
48a25ee4:	a198      	lbu	a0,24(s1)
48a25ee6:	9fc1      	lw	a2,4(a3)
48a25ee8:	5f29      	sltiu	a3,41
48a25eea:	482a      	addiu	s0,42

48a25eec <get_ver_message>:
48a25eec:	64f4      	save	32,ra,s0-s1
uint32 get_ver_message(Fw_Ver_Module_t *ver_buf)
{
48a25eee:	b10d      	lw	s1,48a25f20 <get_ver_message+0x34>
    //从CONFIG读取case的版本号PID VID
    ver_buf->fw_ver.PID= com_get_config_default(SETTING_CASE_PID);
48a25ef0:	6704      	move	s0,a0
48a25ef2:	e940      	jalr	s1
48a25ef4:	6c0a      	li	a0,10
48a25ef6:	c840      	sh	v0,0(s0)
48a25ef8:	e940      	jalr	s1
    ver_buf->fw_ver.VID = com_get_config_default(SETTING_CASE_VID);
48a25efa:	6c0b      	li	a0,11
48a25efc:	b10a      	lw	s1,48a25f24 <get_ver_message+0x38>
    //com_get_config_struct(SETTING_CASE_VER, (void*) ver_buf->Version, 4);
    //sys_get_fw_case_version();
    sys_get_fw_info((void*) ver_buf->fw_ver.Version, FW_INFO_CASE_VERSION_ADDR, FW_INFO_CASE_VERSION_LEN);
48a25efe:	4084      	addiu	a0,s0,4
48a25f00:	c841      	sh	v0,2(s0)
48a25f02:	6d08      	li	a1,8
48a25f04:	6e04      	li	a2,4
48a25f06:	e940      	jalr	s1
48a25f08:	6f1b      	li	a3,27
48a25f0a:	6790      	move	a0,s0
    sys_get_fw_info((void*) ver_buf->module, FW_INFO_MODULE_NUM_ADDR, FW_INFO_MODULE_NUM_LEN);
48a25f0c:	4c08      	addiu	a0,8
48a25f0e:	f1c0 6d10 	li	a1,464
48a25f12:	6e08      	li	a2,8
48a25f14:	e940      	jalr	s1
48a25f16:	6f1b      	li	a3,27
48a25f18:	6a01      	li	v0,1
    
    return 1;
}
48a25f1a:	6474      	restore	32,ra,s0-s1
48a25f1c:	e8a0      	jrc	ra
48a25f1e:	0000      	addiu	s0,sp,0
48a25f20:	5ac5      	sltiu	v0,197
48a25f22:	4846      	addiu	s0,70
48a25f24:	e901      	sdbbp	8
48a25f26:	bfc1      	lwu	a2,4(a3)

48a25f28 <ota_get_ver_num>:
48a25f28:	64c8      	save	64,ra
48a25f2a:	6d00      	li	a1,0
48a25f2c:	b20c      	lw	v0,48a25f5c <ota_get_ver_num+0x34>
48a25f2e:	67c5      	move	a2,a1
48a25f30:	0c08      	la	a0,48a25f50 <ota_get_ver_num+0x28>
48a25f32:	ea40      	jalr	v0
48a25f34:	6f4b      	li	a3,75
48a25f36:	1911 97bb 	jal	48a25eec <get_ver_message>
48a25f3a:	040a      	addiu	a0,sp,40
48a25f3c:	6f10      	li	a3,16
48a25f3e:	6c00      	li	a0,0
48a25f40:	b208      	lw	v0,48a25f60 <ota_get_ver_num+0x38>
48a25f42:	d704      	sw	a3,16(sp)
48a25f44:	67a4      	move	a1,a0
48a25f46:	ea40      	jalr	v0
48a25f48:	0606      	addiu	a2,sp,24
48a25f4a:	6a00      	li	v0,0
48a25f4c:	6448      	restore	64,ra
48a25f4e:	e8a0      	jrc	ra
48a25f50:	6567      	move	v1,a3
48a25f52:	5f74      	sltiu	a3,116
48a25f54:	6576      	move	s3,a2
48a25f56:	5f72      	sltiu	a3,114
48a25f58:	756e      	cmpi	a1,110
48a25f5a:	006d      	addiu	s0,sp,436
48a25f5c:	e901      	sdbbp	8
48a25f5e:	bfc1      	lwu	a2,4(a3)
48a25f60:	5f29      	sltiu	a3,41
48a25f62:	482a      	addiu	s0,42

48a25f64 <reboot_system>:
48a25f64:	b405      	lw	a0,48a25f78 <reboot_system+0x14>





void reboot_system(void)
{
    uint32 wd_ctl_tmp;

    //设置看门狗，176ms后复位重启
    wd_ctl_tmp = act_readl(WD_CTL);
48a25f66:	6d2f      	li	a1,47
    wd_ctl_tmp &= 0xffffffd1;//clksel = 176ms
48a25f68:	9c40      	lw	v0,0(a0)
48a25f6a:	ebab      	neg	v1,a1
48a25f6c:	ea6c      	and	v0,v1
48a25f6e:	4b40      	addiu	v1,64
    wd_ctl_tmp |= 0x11;//wden & clear wd timer
48a25f70:	ea6d      	or	v0,v1
48a25f72:	dc40      	sw	v0,0(a0)
    act_writel(wd_ctl_tmp, WD_CTL);
48a25f74:	17ff      	b	48a25f74 <reboot_system+0x10>
    while (1)
48a25f76:	0000      	addiu	s0,sp,0
48a25f78:	001c      	addiu	s0,sp,112
48a25f7a:	c012      	sb	s0,18(s0)
	...
Disassembly of section BANK_UI_1_41:

48a65800 <ota_restart_to_upgrade>:
48a65800:	64f4      	save	32,ra,s0-s1


/*APK向小机发送重启升级固件命令*/
app_result_e ota_restart_to_upgrade(uint32 data1, uint32 data2,  void *data, uint16 data_len)
{
48a65802:	b00b      	lw	s0,48a6582c <ota_restart_to_upgrade+0x2c>
    //libc_print("receive restat CMD!",0,0);    
    sys_vm_read(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));   //读VM为了把版本读回来  
48a65804:	b10c      	lw	s1,48a65834 <ota_restart_to_upgrade+0x34>
48a65806:	b50b      	lw	a1,48a65830 <ota_restart_to_upgrade+0x30>
48a65808:	6790      	move	a0,s0
48a6580a:	6e14      	li	a2,20
48a6580c:	e940      	jalr	s1
48a6580e:	6f12      	li	a3,18
48a65810:	b508      	lw	a1,48a65830 <ota_restart_to_upgrade+0x30>
    g_ota_restore_data.reboot_flg = 1 ;
    sys_vm_write(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));   //写VM   
48a65812:	6a01      	li	v0,1
48a65814:	6790      	move	a0,s0
48a65816:	6e14      	li	a2,20
48a65818:	6f13      	li	a3,19
48a6581a:	e940      	jalr	s1
48a6581c:	c04a      	sb	v0,10(s0)
48a6581e:	1911 97d9 	jal	48a25f64 <reboot_system>
    //for ota flag clear 
#ifdef OTA_VERSION    
    {
    otaval_t g_otaval;
    sys_vm_read(&g_otaval, VM_OTA_UPGRADE, sizeof(otaval_t));
    g_otaval.ota_upgrade_flag = 0;    // 清除
    sys_vm_write(&g_otaval, VM_OTA_UPGRADE, sizeof(otaval_t));
  }
#endif 
    reboot_system();
48a65822:	6500      	nop
48a65824:	6a00      	li	v0,0
    return RESULT_NULL;
}
48a65826:	6474      	restore	32,ra,s0-s1
48a65828:	e8a0      	jrc	ra
48a6582a:	0000      	addiu	s0,sp,0
48a6582c:	99e8      	lw	a3,32(s1)
48a6582e:	9fc1      	lw	a2,4(a3)
48a65830:	0000      	addiu	s0,sp,0
48a65832:	0015      	addiu	s0,sp,84
48a65834:	e901      	sdbbp	8
48a65836:	bfc1      	lwu	a2,4(a3)

48a65838 <ota_restart_to_clean_data>:
48a65838:	64f4      	save	32,ra,s0-s1


/*APK向小机发送重启清空备份区数据*/
app_result_e ota_restart_to_clean_data(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
48a6583a:	6d00      	li	a1,0

    uint32 ret ;
    libc_print("receive restat clean_data CMD!",0,0);    
48a6583c:	b120      	lw	s1,48a658bc <ota_restart_to_clean_data+0x84>
48a6583e:	67c5      	move	a2,a1
48a65840:	0c11      	la	a0,48a65884 <ota_restart_to_clean_data+0x4c>
48a65842:	e940      	jalr	s1
48a65844:	6f4b      	li	a3,75
48a65846:	b01f      	lw	s0,48a658c0 <ota_restart_to_clean_data+0x88>
    sys_vm_read(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));
48a65848:	b51f      	lw	a1,48a658c4 <ota_restart_to_clean_data+0x8c>
48a6584a:	6790      	move	a0,s0
48a6584c:	6e14      	li	a2,20
48a6584e:	e940      	jalr	s1
48a65850:	6f12      	li	a3,18
48a65852:	6b00      	li	v1,0
    g_ota_restore_data.updata_statue = OTA_UPDATE_STATE_NULL;
48a65854:	6d00      	li	a1,0
    g_ota_restore_data.dowmload_statue = OTA_DOWNLOAD_STATE_NULL;
    g_ota_restore_data.ud_att = 0;
    ret = base_ota_clear_part_table();  
48a65856:	b21d      	lw	v0,48a658c8 <ota_restart_to_clean_data+0x90>
48a65858:	c063      	sb	v1,3(s0)
48a6585a:	c062      	sb	v1,2(s0)
48a6585c:	c069      	sb	v1,9(s0)
48a6585e:	6c11      	li	a0,17
48a65860:	67c5      	move	a2,a1
48a65862:	ea40      	jalr	v0
48a65864:	6f06      	li	a3,6
48a65866:	2a05      	bnez	v0,48a65872 <ota_restart_to_clean_data+0x3a>
    if(ret == 0)
48a65868:	0c0f      	la	a0,48a658a4 <ota_restart_to_clean_data+0x6c>
    {
        libc_print("clear OTA data fail!!",0,0);     
48a6586a:	67a2      	move	a1,v0
48a6586c:	67c2      	move	a2,v0
48a6586e:	e940      	jalr	s1
48a65870:	6f4b      	li	a3,75
48a65872:	b515      	lw	a1,48a658c4 <ota_restart_to_clean_data+0x8c>
    }  
    sys_vm_write(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));
48a65874:	6790      	move	a0,s0
48a65876:	6e14      	li	a2,20
48a65878:	e940      	jalr	s1
48a6587a:	6f13      	li	a3,19
48a6587c:	6a00      	li	v0,0
    
    return RESULT_NULL;

}
48a6587e:	6474      	restore	32,ra,s0-s1
48a65880:	e8a0      	jrc	ra
48a65882:	0000      	addiu	s0,sp,0
48a65884:	6572      	move	s3,v0
48a65886:	6563      	move	v1,v1
48a65888:	7669      	cmpi	a2,105
48a6588a:	2065      	beqz	s0,48a65956 <ota_send_complete+0x8a>
48a6588c:	6572      	move	s3,v0
48a6588e:	7473      	cmpi	a0,115
48a65890:	7461      	cmpi	a0,97
48a65892:	6320      	addiu	sp,256
48a65894:	656c      	move	t3,a0
48a65896:	6e61      	li	a2,97
48a65898:	645f      	restore	120,ra,s1
48a6589a:	7461      	cmpi	a0,97
48a6589c:	2061      	beqz	s0,48a65960 <ota_send_complete+0x94>
48a6589e:	4d43      	addiu	a1,67
48a658a0:	2144      	beqz	s1,48a6592a <ota_send_complete+0x5e>
48a658a2:	0000      	addiu	s0,sp,0
48a658a4:	6c63      	li	a0,99
48a658a6:	6165      	btnez	48a65972 <ota_send_complete+0xa6>
48a658a8:	2072      	beqz	s0,48a6598e <ota_send_complete+0xc2>
48a658aa:	544f      	slti	a0,79
48a658ac:	2041      	beqz	s0,48a65930 <ota_send_complete+0x64>
48a658ae:	6164      	btnez	48a65978 <ota_send_complete+0xac>
48a658b0:	6174      	btnez	48a6599a <ota_send_complete+0xce>
48a658b2:	6620      	0x6620
48a658b4:	6961      	li	s1,97
48a658b6:	216c      	beqz	s1,48a65990 <ota_send_complete+0xc4>
48a658b8:	0021      	addiu	s0,sp,132
48a658ba:	0000      	addiu	s0,sp,0
48a658bc:	e901      	sdbbp	8
48a658be:	bfc1      	lwu	a2,4(a3)
48a658c0:	99e8      	lw	a3,32(s1)
48a658c2:	9fc1      	lw	a2,4(a3)
48a658c4:	0000      	addiu	s0,sp,0
48a658c6:	0015      	addiu	s0,sp,84
48a658c8:	e91d      	dmultu	s1,s0
48a658ca:	bfc1      	lwu	a2,4(a3)

48a658cc <ota_send_complete>:
48a658cc:	64f4      	save	32,ra,s0-s1

/*发送完成命令*/
app_result_e ota_send_complete(uint32 data1, uint32 data2,  void *data, uint16 data_len)
{
48a658ce:	b112      	lw	s1,48a65914 <ota_send_complete+0x48>
    libc_print("send complete",0,0);    
48a658d0:	6d00      	li	a1,0
48a658d2:	67c5      	move	a2,a1
48a658d4:	0c0c      	la	a0,48a65904 <ota_send_complete+0x38>
48a658d6:	e940      	jalr	s1
48a658d8:	6f4b      	li	a3,75
48a658da:	b010      	lw	s0,48a65918 <ota_send_complete+0x4c>
    sys_vm_read(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));   //读VM为了把版本读回来  
48a658dc:	b510      	lw	a1,48a6591c <ota_send_complete+0x50>
48a658de:	6790      	move	a0,s0
48a658e0:	6e14      	li	a2,20
48a658e2:	e940      	jalr	s1
48a658e4:	6f12      	li	a3,18
48a658e6:	b40f      	lw	a0,48a65920 <ota_send_complete+0x54>
    g_ota_restore_data.dowmload_statue = OTA_DOWNLOAD_STATE_END ;
    g_OTA_var->g_cur_rec_state.rec_data_state = RECEIVE_DARA_COMLETE;
48a658e8:	6b02      	li	v1,2
48a658ea:	9c40      	lw	v0,0(a0)
48a658ec:	b50c      	lw	a1,48a6591c <ota_send_complete+0x50>
    sys_vm_write(&g_ota_restore_data,VM_OTA,sizeof(restore_breakpoint_t));   //写VM   
48a658ee:	c062      	sb	v1,2(s0)
48a658f0:	6790      	move	a0,s0
48a658f2:	f020 c26b 	sb	v1,43(v0)
48a658f6:	6e14      	li	a2,20
48a658f8:	e940      	jalr	s1
48a658fa:	6f13      	li	a3,19
48a658fc:	6a00      	li	v0,0

    return RESULT_NULL;
}
48a658fe:	6474      	restore	32,ra,s0-s1
48a65900:	e8a0      	jrc	ra
48a65902:	0000      	addiu	s0,sp,0
48a65904:	6573      	move	s3,v1
48a65906:	646e      	restore	112,ra,s0
48a65908:	6320      	addiu	sp,256
48a6590a:	6d6f      	li	a1,111
48a6590c:	6c70      	li	a0,112
48a6590e:	7465      	cmpi	a0,101
48a65910:	0065      	addiu	s0,sp,404
48a65912:	0000      	addiu	s0,sp,0
48a65914:	e901      	sdbbp	8
48a65916:	bfc1      	lwu	a2,4(a3)
48a65918:	99e8      	lw	a3,32(s1)
48a6591a:	9fc1      	lw	a2,4(a3)
48a6591c:	0000      	addiu	s0,sp,0
48a6591e:	0015      	addiu	s0,sp,84
48a65920:	a198      	lbu	a0,24(s1)
48a65922:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_42:

48aa5800 <com_rcp_send_pkg_cont>:
48aa5800:	64c3      	save	24,ra
48aa5802:	b203      	lw	v0,48aa580c <com_rcp_send_pkg_cont+0xc>
48aa5804:	ea40      	jalr	v0
48aa5806:	ed31      	zeh	a1
48aa5808:	6443      	restore	24,ra
48aa580a:	e8a0      	jrc	ra
48aa580c:	5e3d      	sltiu	a2,61
48aa580e:	482a      	addiu	s0,42

48aa5810 <com_rcp_send_ack_pkg>:
48aa5810:	64c5      	save	40,ra
48aa5812:	b50f      	lw	a1,48aa584c <com_rcp_send_ack_pkg+0x3c>
48aa5814:	67dd      	move	a2,sp
48aa5816:	6a01      	li	v0,1
48aa5818:	c650      	sb	v0,16(a2)
48aa581a:	a540      	lbu	v0,0(a1)
48aa581c:	6b03      	li	v1,3
48aa581e:	67bd      	move	a1,sp
48aa5820:	ea6c      	and	v0,v1
48aa5822:	6f02      	li	a3,2
48aa5824:	efeb      	neg	a3
48aa5826:	6b00      	li	v1,0
48aa5828:	c6f1      	sb	a3,17(a2)
48aa582a:	c552      	sb	v0,18(a1)
48aa582c:	6f00      	li	a3,0
48aa582e:	6e52      	li	a2,82
48aa5830:	c595      	sb	a0,21(a1)
48aa5832:	b208      	lw	v0,48aa5850 <com_rcp_send_ack_pkg+0x40>
48aa5834:	6c10      	li	a0,16
48aa5836:	c5f3      	sb	a3,19(a1)
48aa5838:	c5d4      	sb	a2,20(a1)
48aa583a:	cd8b      	sh	a0,22(a1)
48aa583c:	d306      	sw	v1,24(sp)
48aa583e:	d307      	sw	v1,28(sp)
48aa5840:	0404      	addiu	a0,sp,16
48aa5842:	ea40      	jalr	v0
48aa5844:	6d10      	li	a1,16
48aa5846:	6445      	restore	40,ra
48aa5848:	e8a0      	jrc	ra
48aa584a:	0000      	addiu	s0,sp,0
48aa584c:	a290      	lbu	a0,16(v0)
48aa584e:	9fc1      	lw	a2,4(a3)
48aa5850:	5e3d      	sltiu	a2,61
48aa5852:	482a      	addiu	s0,42

48aa5854 <com_rcp_send_cmd_pkg>:
48aa5854:	64c5      	save	40,ra
48aa5856:	6a80      	li	v0,128
48aa5858:	ef4b      	neg	a3,v0
48aa585a:	efcd      	or	a3,a2
48aa585c:	b60c      	lw	a2,48aa588c <com_rcp_send_cmd_pkg+0x38>
48aa585e:	6b01      	li	v1,1
48aa5860:	c6e0      	sb	a3,0(a2)
48aa5862:	6a02      	li	v0,2
48aa5864:	ea4b      	neg	v0
48aa5866:	67dd      	move	a2,sp
48aa5868:	6f00      	li	a3,0
48aa586a:	c670      	sb	v1,16(a2)
48aa586c:	c651      	sb	v0,17(a2)
48aa586e:	6b00      	li	v1,0
48aa5870:	c695      	sb	a0,21(a2)
48aa5872:	b208      	lw	v0,48aa5890 <com_rcp_send_cmd_pkg+0x3c>
48aa5874:	6c10      	li	a0,16
48aa5876:	c6b4      	sb	a1,20(a2)
48aa5878:	ce8b      	sh	a0,22(a2)
48aa587a:	c6f2      	sb	a3,18(a2)
48aa587c:	c6f3      	sb	a3,19(a2)
48aa587e:	d306      	sw	v1,24(sp)
48aa5880:	d307      	sw	v1,28(sp)
48aa5882:	0404      	addiu	a0,sp,16
48aa5884:	ea40      	jalr	v0
48aa5886:	6d10      	li	a1,16
48aa5888:	6445      	restore	40,ra
48aa588a:	e8a0      	jrc	ra
48aa588c:	a249      	lbu	v0,9(v0)
48aa588e:	9fc1      	lw	a2,4(a3)
48aa5890:	5e3d      	sltiu	a2,61
48aa5892:	482a      	addiu	s0,42

48aa5894 <com_set_system_setting>:
48aa5894:	64f6      	save	48,ra,s0-s1

/*获取支持特性或功能*/
app_result_e __section__(".bank_2") com_get_support_feature(uint32 data1, uint32 data2)
{
    uint32 support_feature_low = 0;
    uint32 support_feature_high = 0;

    if (1 == sys_comval->dae_cfg.enable_2823T)
    {
        support_feature_low = SUPPORT_FEATURE_A2DP_PLAY
        | SUPPORT_FEATURE_SDCARD_PLAY
        | SUPPORT_FEATURE_UHOST_PLAY
        | SUPPORT_FEATURE_LINEIN_PLAY;
    }
    else
    {
        support_feature_low = SUPPORT_FEATURE_A2DP_PLAY
        | SUPPORT_FEATURE_SDCARD_PLAY
        | SUPPORT_FEATURE_UHOST_PLAY
        | SUPPORT_FEATURE_LINEIN_PLAY
        | SUPPORT_FEATURE_ALARM_CLOCK
        | SUPPORT_FEATURE_ALARM_BUILDIN_RING;
    }


    if (sys_comval->support_fmradio == 1)
    {
        support_feature_low |= SUPPORT_FEATURE_FMRADIO;
    }

    if (sys_comval->support_usbbox == 1)
    {
        support_feature_low |= SUPPORT_FEATURE_USBBOX_PLAY;
    }
    if (sys_comval->support_ota == 1)
    {
        support_feature_low |= SUPPORT_FEATURE_OTA;
    }

#if (SUPPORT_RECORD_PLAY == 1)
    support_feature_low |= SUPPORT_FEATURE_RECORD_PLAY;
#endif

#if (SUPPORT_MUSIC_FOLDER == 1)
    support_feature_low |= SUPPORT_FEATURE_FOLDER_PLAY;
#endif

#if (SUPPORT_RECORD == 1)
    support_feature_low |= SUPPORT_FEATURE_RECORD;
#endif

#if (SUPPORT_RING_FOLDER == 1)
    support_feature_low |= SUPPORT_FEATURE_ALARM_RING_FOLDER;
#endif

#if (SUPPORT_PLIST_FILE == 1)
    support_feature_low |= SUPPORT_FEATURE_PLIST_FILE;
#endif
#if (SUPPORT_PLIST_TITLE == 1)
    support_feature_low |= SUPPORT_FEATURE_PLIST_TITLE;
#endif
#if (SUPPORT_PLIST_ARTIST == 1)
    support_feature_low |= SUPPORT_FEATURE_PLIST_ARTIST;
#endif
#if (SUPPORT_PLIST_ALBUM == 1)
    support_feature_low |= SUPPORT_FEATURE_PLIST_ALBUM;
#endif
#if (SUPPORT_PLIST_GENRE == 1)
    support_feature_low |= SUPPORT_FEATURE_PLIST_GENRE;
#endif

    com_rcp_send_pkg(support_feature_low, support_feature_high, NULL, 0, 0);

    return RESULT_NULL;
}

/*获取设备信息，包括名称等*/
app_result_e __section__(".bank_2") com_get_bt_device_info(uint32 data1, uint32 data2)
{
    uint8 tmp_bt_device_info[sizeof(bt_device_info_t) + RCP_COMMAND_HEAD_SIZE];
    msg_apps_t rcp_msg;

    rcp_msg.type = MSG_BTSTACK_GET_DEVICE_INFO_SYNC;
    rcp_msg.content.addr = tmp_bt_device_info + RCP_COMMAND_HEAD_SIZE;
    send_sync_msg_btmanager(NULL, &rcp_msg, NULL, 0);

    com_rcp_send_pkg(0, 0, tmp_bt_device_info, sizeof(bt_device_info_t), sizeof(bt_device_info_t));

    return RESULT_NULL;
}

/*设置类命令――系统设置*/
app_result_e com_set_system_setting(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
48aa5896:	6764      	move	v1,a0
    uint8 setting_id = (uint8) data1;
48aa5898:	eb11      	zeb	v1
48aa589a:	5b05      	sltiu	v1,5

    switch (setting_id)
48aa589c:	d50d      	sw	a1,52(sp)
48aa589e:	6726      	move	s1,a2
48aa58a0:	6052      	bteqz	48aa5946 <.LBE11>
48aa58a2:	0a04      	la	v0,48aa58b0 <com_set_system_setting+0x1c>
48aa58a4:	3664      	sll	a2,v1,1
48aa58a6:	e655      	addu	a1,a2,v0
48aa58a8:	8d80      	lh	a0,0(a1)
48aa58aa:	e44d      	addu	v1,a0,v0
48aa58ac:	eb80      	jrc	v1
48aa58ae:	0000      	addiu	s0,sp,0
48aa58b0:	000b      	addiu	s0,sp,44
48aa58b2:	0023      	addiu	s0,sp,140
48aa58b4:	006d      	addiu	s0,sp,436
48aa58b6:	007f      	addiu	s0,sp,508
48aa58b8:	008b      	addiu	s0,sp,556

48aa58ba <.LBB4>:
48aa58ba:	6d00      	li	a1,0
    {
        case SETTING_ID_SS_DATETIME:/*设置系统日期时间*/
        {
            system_datetime_t *p_system_dt = (system_datetime_t *) data;

            sys_set_date(&(p_system_dt->date));
48aa58bc:	b024      	lw	s0,48aa594c <.LBE11+0x6>
48aa58be:	6791      	move	a0,s1
48aa58c0:	67c5      	move	a2,a1
48aa58c2:	e840      	jalr	s0
48aa58c4:	6f25      	li	a3,37
48aa58c6:	6d00      	li	a1,0
            sys_set_time(&(p_system_dt->time));
48aa58c8:	4184      	addiu	a0,s1,4
48aa58ca:	67c5      	move	a2,a1
48aa58cc:	e840      	jalr	s0
48aa58ce:	6f23      	li	a3,35

48aa58d0 <.LBE4>:
48aa58d0:	103a      	b	48aa5946 <.LBE11>

48aa58d2 <.LBB5>:
        }
        break;
48aa58d2:	b320      	lw	v1,48aa5950 <.LBE11+0xa>

48aa58d4 <.LBE6>:
48aa58d4:	679d      	move	a0,sp

        case SETTING_ID_SS_VOLUME:/*设置音量*/
        {
            uint8 volume = (uint8) data2;
48aa58d6:	a3e0      	lbu	a3,0(v1)
48aa58d8:	f020 a414 	lbu	s0,52(a0)
48aa58dc:	7701      	cmpi	a3,1
48aa58de:	6108      	btnez	48aa58f0 <.LBE6+0x1c>
48aa58e0:	6d00      	li	a1,0

            if (get_mute_enable() == TRUE)
            {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
                com_switch_mute(1,0,NULL);
48aa58e2:	b21d      	lw	v0,48aa5954 <.LBE11+0xe>
48aa58e4:	6c01      	li	a0,1
48aa58e6:	ea40      	jalr	v0
48aa58e8:	67c5      	move	a2,a1
48aa58ea:	b21c      	lw	v0,48aa5958 <.LBE11+0x12>
#else
                change_mute_enable(FALSE);
#endif

                com_reset_sound_volume(0);
48aa58ec:	ea40      	jalr	v0
48aa58ee:	6c00      	li	a0,0
48aa58f0:	b61b      	lw	a2,48aa595c <.LBE11+0x16>
            }
            //com_start_key_tone(KEYTONE_NOBLOCK);

            if(g_app_info_vector[1].app_id == 5)
48aa58f2:	a6a5      	lbu	a1,5(a2)
48aa58f4:	7505      	cmpi	a1,5
48aa58f6:	610d      	btnez	48aa5912 <.LBE8+0x2>

48aa58f8 <.LBB8>:
48aa58f8:	070d      	addiu	a3,sp,52
            {
                msg_apps_t msg;
                //返回消息内容存放变量
                msg_reply_t reply;
                
                //存放输入参数的地址
                msg.content.addr = &data2;
48aa58fa:	d705      	sw	a3,20(sp)
48aa58fc:	f401 6b07 	li	v1,3079
                
                //存放获取参数的地址
                reply.content = NULL;
                
                //消息类型(即消息名称)
                msg.type = MSG_UENGINE_VOL_SEND_SYNC;
48aa5900:	6f00      	li	a3,0
48aa5902:	b218      	lw	v0,48aa5960 <.LBE11+0x1a>
                
                //发送同步消息
                send_sync_msg(APP_ID_UENGINE, &msg, &reply, 0);
48aa5904:	d707      	sw	a3,28(sp)
48aa5906:	d304      	sw	v1,16(sp)
48aa5908:	6c13      	li	a0,19
48aa590a:	0504      	addiu	a1,sp,16
48aa590c:	ea40      	jalr	v0
48aa590e:	0606      	addiu	a2,sp,24

48aa5910 <.LBE8>:
48aa5910:	101a      	b	48aa5946 <.LBE11>
48aa5912:	b215      	lw	v0,48aa5964 <.LBE11+0x1e>
            }
            else
            {
                com_set_sound_volume(volume, SET_VOLUME_SYNC_TO_REMOTE);
48aa5914:	6790      	move	a0,s0
48aa5916:	ea40      	jalr	v0
48aa5918:	6d01      	li	a1,1

48aa591a <.LBE5>:
48aa591a:	1015      	b	48aa5946 <.LBE11>

48aa591c <.LBB9>:
            }
        }
        break;
48aa591c:	679d      	move	a0,sp

        case SETTING_ID_SS_EQ:/*EQ模式*/
        {
            com_eqtype_e eq_type = (com_eqtype_e) data2;
48aa591e:	f020 a4b4 	lbu	a1,52(a0)
48aa5922:	5d08      	sltiu	a1,8

            if (eq_type > EQ_USR_DEF) //防止引入错误EQ类型
48aa5924:	6101      	btnez	48aa5928 <.LBB9+0xc>
48aa5926:	6d00      	li	a1,0
            {
                eq_type = EQ_NOR;
48aa5928:	6c00      	li	a0,0
            }
            com_set_sound_eq(SETEQ_TYPE, eq_type, NULL);
48aa592a:	67c4      	move	a2,a0
48aa592c:	1003      	b	48aa5934 <.LBB10+0x6>

48aa592e <.LBB10>:
48aa592e:	6c00      	li	a0,0
        }
        break;

        case SETTING_ID_SS_USREQ:/*用户EQ*/
        {
            uint8 *p_eq_param = (uint8 *) data;

            com_set_sound_eq(SETEQ_TYPE, EQ_USR_DEF, p_eq_param);
48aa5930:	6d07      	li	a1,7
48aa5932:	67d1      	move	a2,s1
48aa5934:	b20d      	lw	v0,48aa5968 <.LBE11+0x22>
48aa5936:	eac0      	jalrc	v0

48aa5938 <.LBE10>:
48aa5938:	1006      	b	48aa5946 <.LBE11>

48aa593a <.LBB11>:
        }
        break;
48aa593a:	b20d      	lw	v0,48aa596c <.LBE11+0x26>

        case SETTING_ID_SS_DAEMODE:/*DAE模式*/
        {
            daemode_param_t *p_daemode_param = (daemode_param_t *) data;

            com_set_dae_config(p_daemode_param);
48aa593c:	ea40      	jalr	v0
48aa593e:	6791      	move	a0,s1
48aa5940:	b206      	lw	v0,48aa5958 <.LBE11+0x12>

            //更新DAE参数后，需要重新设置音量
            com_reset_sound_volume(0);
48aa5942:	ea40      	jalr	v0
48aa5944:	6c00      	li	a0,0

48aa5946 <.LBE11>:
48aa5946:	6a00      	li	v0,0
        }
        break;

        default:
        break;
    }

    return RESULT_NULL;
}
48aa5948:	6476      	restore	48,ra,s0-s1
48aa594a:	e8a0      	jrc	ra
48aa594c:	e901      	sdbbp	8
48aa594e:	bfc1      	lwu	a2,4(a3)
48aa5950:	a0c0      	lbu	a2,0(s0)
48aa5952:	9fc1      	lw	a2,4(a3)
48aa5954:	5c09      	sltiu	a0,9
48aa5956:	48be      	addiu	s0,-66
48aa5958:	5af9      	sltiu	v0,249
48aa595a:	48be      	addiu	s0,-66
48aa595c:	a080      	lbu	a0,0(s0)
48aa595e:	9fc1      	lw	a2,4(a3)
48aa5960:	5a65      	sltiu	v0,101
48aa5962:	482e      	addiu	s0,46
48aa5964:	5a49      	sltiu	v0,73
48aa5966:	48be      	addiu	s0,-66
48aa5968:	580d      	sltiu	s0,13
48aa596a:	489a      	addiu	s0,-102
48aa596c:	5e99      	sltiu	a2,153
48aa596e:	4846      	addiu	s0,70

48aa5970 <com_set_system_status>:
48aa5970:	b202      	lw	v0,48aa5978 <.LBE12+0x4>
48aa5972:	c294      	sb	a0,20(v0)

48aa5974 <.LBE12>:
48aa5974:	e820      	jr	ra

/*设置类命令――APK状态*/
app_result_e com_set_system_status(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
    set_apk_status((apk_status_e) data1);

    return RESULT_NULL;
}
48aa5976:	6a00      	li	v0,0
48aa5978:	a0c0      	lbu	a2,0(s0)
48aa597a:	9fc1      	lw	a2,4(a3)

48aa597c <com_set_system_dialog>:
48aa597c:	ec11      	zeb	a0

/*设置类命令――对话框提示*/
app_result_e com_set_system_dialog(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
    uint8 control_id = (uint8) data1;
48aa597e:	2403      	beqz	a0,48aa5986 <com_set_system_dialog+0xa>

    switch (control_id)
48aa5980:	7401      	cmpi	a0,1
48aa5982:	600a      	bteqz	48aa5998 <com_set_system_dialog+0x1c>
48aa5984:	1011      	b	48aa59a8 <com_set_system_dialog+0x2c>
48aa5986:	b30a      	lw	v1,48aa59ac <com_set_system_dialog+0x30>
    {
        case SETTING_ID_SD_ANSWER:
        {
            //等待APK回应请求
            if (g_dialog_state == DIALOG_STATE_LAUNCH)
48aa5988:	a340      	lbu	v0,0(v1)
48aa598a:	7201      	cmpi	v0,1
48aa598c:	610d      	btnez	48aa59a8 <com_set_system_dialog+0x2c>
48aa598e:	b609      	lw	a2,48aa59b0 <com_set_system_dialog+0x34>
            {
                g_dialog_overtime = (uint8) data2;
48aa5990:	6c02      	li	a0,2
                g_dialog_state = DIALOG_STATE_CHOOSING;
48aa5992:	c6a0      	sb	a1,0(a2)
48aa5994:	c380      	sb	a0,0(v1)
48aa5996:	1008      	b	48aa59a8 <com_set_system_dialog+0x2c>
            }
        }
        break;
48aa5998:	b305      	lw	v1,48aa59ac <com_set_system_dialog+0x30>

        case SETTING_ID_SD_CONFIRM:
        {
            //等待APK对话框选择
            if (g_dialog_state == DIALOG_STATE_CHOOSING)
48aa599a:	a3e0      	lbu	a3,0(v1)
48aa599c:	7702      	cmpi	a3,2
48aa599e:	6104      	btnez	48aa59a8 <com_set_system_dialog+0x2c>
48aa59a0:	6a03      	li	v0,3
            {
                g_dialog_state = DIALOG_STATE_CONFIRM;
48aa59a2:	c340      	sb	v0,0(v1)
48aa59a4:	b304      	lw	v1,48aa59b4 <com_set_system_dialog+0x38>
                g_dialog_choosed = (uint8) data2;
48aa59a6:	c3a0      	sb	a1,0(v1)
48aa59a8:	e820      	jr	ra
            }
        }
        break;

        default:
        break;
    }

    return RESULT_NULL;
}
48aa59aa:	6a00      	li	v0,0
48aa59ac:	a240      	lbu	v0,0(v0)
48aa59ae:	9fc1      	lw	a2,4(a3)
48aa59b0:	a242      	lbu	v0,2(v0)
48aa59b2:	9fc1      	lw	a2,4(a3)
48aa59b4:	a243      	lbu	v0,3(v0)
48aa59b6:	9fc1      	lw	a2,4(a3)

48aa59b8 <com_ctrl_switch_mute>:
48aa59b8:	64c3      	save	24,ra

/*设置类命令――设备信息*/
app_result_e __section__(".bank_2") com_set_device_name(uint32 data1, uint32 data2, void *data, uint16 data_len)
{
    msg_apps_t rcp_msg;

    rcp_msg.type = MSG_BTSTACK_SET_DEVICE_NAME_SYNC;
    rcp_msg.content.addr = (bt_device_name_t *) data;
    send_sync_msg_btmanager(NULL, &rcp_msg, NULL, 0);

    return RESULT_NULL;
}

/*控制类命令――静音切换*/
app_result_e com_ctrl_switch_mute(uint32 data1, uint32 data2)
{
48aa59ba:	b206      	lw	v0,48aa59d0 <com_ctrl_switch_mute+0x18>
    if (g_ignore_switch_mute == FALSE)
48aa59bc:	a2c0      	lbu	a2,0(v0)
48aa59be:	2e04      	bnez	a2,48aa59c8 <com_ctrl_switch_mute+0x10>
48aa59c0:	b205      	lw	v0,48aa59d4 <com_ctrl_switch_mute+0x1c>
    {
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        com_switch_mute(1,0,NULL);
48aa59c2:	6c01      	li	a0,1
48aa59c4:	ea40      	jalr	v0
48aa59c6:	67a6      	move	a1,a2
48aa59c8:	6a00      	li	v0,0
#else
        com_switch_mute();
#endif 
    }

    return RESULT_NULL;
}
48aa59ca:	6443      	restore	24,ra
48aa59cc:	e8a0      	jrc	ra
48aa59ce:	0000      	addiu	s0,sp,0
48aa59d0:	99ff      	lw	a3,124(s1)
48aa59d2:	9fc1      	lw	a2,4(a3)
48aa59d4:	5c09      	sltiu	a0,9
48aa59d6:	48be      	addiu	s0,-66
	...
Disassembly of section BANK_UI_1_43:

48ae5800 <com_btmanager_event_check_for_tts>:
48ae5800:	64c4      	save	32,ra
48ae5802:	ac60      	lhu	v1,0(a0)
48ae5804:	6a00      	li	v0,0
48ae5806:	f101 7305 	cmpi	v1,2309
48ae580a:	600b      	bteqz	48ae5822 <.LBB2>
48ae580c:	f101 5306 	slti	v1,2310
48ae5810:	6003      	bteqz	48ae5818 <com_btmanager_event_check_for_tts+0x18>
48ae5812:	f101 5301 	slti	v1,2305
48ae5816:	1002      	b	48ae581c <com_btmanager_event_check_for_tts+0x1c>
48ae5818:	f101 7306 	cmpi	v1,2310
48ae581c:	6116      	btnez	48ae584a <.LBE2>
48ae581e:	6a00      	li	v0,0
48ae5820:	1014      	b	48ae584a <.LBE2>

48ae5822 <.LBB2>:
48ae5822:	9ce1      	lw	a3,4(a0)
48ae5824:	677d      	move	v1,sp
48ae5826:	d704      	sw	a3,16(sp)
48ae5828:	a4c9      	lbu	a2,9(a0)
48ae582a:	a448      	lbu	v0,8(a0)
48ae582c:	35c0      	sll	a1,a2,8
48ae582e:	eaad      	or	v0,a1
48ae5830:	cb4a      	sh	v0,20(v1)
48ae5832:	a4ca      	lbu	a2,10(a0)
48ae5834:	67fd      	move	a3,sp
48ae5836:	c7d6      	sb	a2,22(a3)
48ae5838:	a48b      	lbu	a0,11(a0)
48ae583a:	b508      	lw	a1,48ae5858 <.LBE2+0xe>
48ae583c:	b308      	lw	v1,48ae585c <.LBE2+0x12>
48ae583e:	b209      	lw	v0,48ae5860 <.LBE2+0x16>
48ae5840:	c797      	sb	a0,23(a3)
48ae5842:	c380      	sb	a0,0(v1)
48ae5844:	c5c0      	sb	a2,0(a1)
48ae5846:	ea40      	jalr	v0
48ae5848:	0404      	addiu	a0,sp,16

48ae584a <.LBE2>:
48ae584a:	7201      	cmpi	v0,1
48ae584c:	6a85      	li	v0,133
48ae584e:	6001      	bteqz	48ae5852 <.LBE2+0x8>
48ae5850:	6a00      	li	v0,0
48ae5852:	6444      	restore	32,ra
48ae5854:	e8a0      	jrc	ra
48ae5856:	0000      	addiu	s0,sp,0
48ae5858:	a248      	lbu	v0,8(v0)
48ae585a:	9fc1      	lw	a2,4(a3)
48ae585c:	a249      	lbu	v0,9(v0)
48ae585e:	9fc1      	lw	a2,4(a3)
48ae5860:	5ad9      	sltiu	v0,217
48ae5862:	48ae      	addiu	s0,-82

48ae5864 <com_btmanager_event_dispatch_bank>:
48ae5864:	64f9      	save	72,ra,s0-s1

app_result_e com_btmanager_event_dispatch_bank(btstack_event_t *p_event, bool tts_flag)
{
48ae5866:	ac40      	lhu	v0,0(a0)
    msg_apps_type_e msg_type;
    app_result_e result = RESULT_NULL;
    uint8 i;

    msg_type = p_event->msg.type;
48ae5868:	6b00      	li	v1,0
48ae586a:	d30c      	sw	v1,48(sp)
48ae586c:	f6fe 426f 	addiu	v1,v0,-2305
    switch (msg_type)
48ae5870:	5b0b      	sltiu	v1,11
48ae5872:	6704      	move	s0,a0
48ae5874:	ed11      	zeb	a1
48ae5876:	f0e0 6001 	bteqz	48ae5a3c <.LBE18>
48ae587a:	0f04      	la	a3,48ae5888 <com_btmanager_event_dispatch_bank+0x24>
48ae587c:	3364      	sll	v1,1
48ae587e:	e3e9      	addu	v0,v1,a3
48ae5880:	8ac0      	lh	a2,0(v0)
48ae5882:	e6f1      	addu	a0,a2,a3
48ae5884:	ec80      	jrc	a0
48ae5886:	0000      	addiu	s0,sp,0
48ae5888:	0017      	addiu	s0,sp,92
48ae588a:	001d      	addiu	s0,sp,116
48ae588c:	0023      	addiu	s0,sp,140
48ae588e:	002d      	addiu	s0,sp,180
48ae5890:	01b5      	addiu	s1,sp,724
48ae5892:	00b5      	addiu	s0,sp,724
48ae5894:	00c9      	addiu	s0,sp,804
48ae5896:	00e5      	addiu	s0,sp,916
48ae5898:	01b5      	addiu	s1,sp,724
48ae589a:	00ed      	addiu	s0,sp,948
48ae589c:	0179      	addiu	s1,sp,484
48ae589e:	a084      	lbu	a0,4(s0)
    {
        case MSG_BTSTACK_AVRCP_RX_OPID:
        {
            result = com_btmanager_avrcp_ind(p_event->msg.content.data[0], tts_flag);
48ae58a0:	b27e      	lw	v0,48ae5a98 <.LBE18+0x5c>
48ae58a2:	1005      	b	48ae58ae <com_btmanager_event_dispatch_bank+0x4a>
48ae58a4:	a084      	lbu	a0,4(s0)
        }
        break;

        case MSG_BTSTACK_AVRCP_VOLUME_ABS:
        {
            result = com_btmanager_avrcp_set_volume_to_soundbox(p_event->msg.content.data[0], tts_flag);
48ae58a6:	b27e      	lw	v0,48ae5a9c <.LBE18+0x60>
48ae58a8:	1002      	b	48ae58ae <com_btmanager_event_dispatch_bank+0x4a>
48ae58aa:	a084      	lbu	a0,4(s0)
        }
        break;

        case MSG_BTSTACK_HFP_VOLUME_ABS:
        {
            result = com_btmanager_hfp_set_volume_to_soundbox(p_event->msg.content.data[0], tts_flag);
48ae58ac:	b27d      	lw	v0,48ae5aa0 <.LBE18+0x64>
48ae58ae:	eac0      	jalrc	v0
48ae58b0:	d20c      	sw	v0,48(sp)
48ae58b2:	10c4      	b	48ae5a3c <.LBE18>
        }
        break;
48ae58b4:	a0a8      	lbu	a1,8(s0)

        case MSG_BTSTACK_ERR_CONNECTION_TIMEOUT:
        {
           
            if(p_event->reserve[0]==3)
48ae58b6:	7503      	cmpi	a1,3
48ae58b8:	610c      	btnez	48ae58d2 <com_btmanager_event_dispatch_bank+0x6e>
48ae58ba:	6d00      	li	a1,0
            {
                PRINT_INFO("page time out");
48ae58bc:	b27a      	lw	v0,48ae5aa4 <.LBE18+0x68>
48ae58be:	0c62      	la	a0,48ae5a44 <.LBE18+0x8>
48ae58c0:	67c5      	move	a2,a1
48ae58c2:	ea40      	jalr	v0
48ae58c4:	6f4b      	li	a3,75
48ae58c6:	b479      	lw	a0,48ae5aa8 <.LBE18+0x6c>
                p_event->reserve[0]=0;
                g_bt_auto_connect_ctrl.connect_tick_cnt = g_bt_auto_connect_ctrl.auto_connect_interval;
48ae58c8:	6f00      	li	a3,0
48ae58ca:	c0e8      	sb	a3,8(s0)
48ae58cc:	acc5      	lhu	a2,10(a0)
48ae58ce:	ccc6      	sh	a2,12(a0)
48ae58d0:	10b5      	b	48ae5a3c <.LBE18>
48ae58d2:	b476      	lw	a0,48ae5aa8 <.LBE18+0x6c>
            }
            else
            {
                g_bt_auto_connect_ctrl.need_auto_connect = 0x01;
48ae58d4:	b378      	lw	v1,48ae5ab4 <.LBE18+0x78>
                g_bt_auto_connect_ctrl.auto_connect_type = AUTO_CONNECT_TYPE_TIMEOUT;
                //sys_del_mpu_irq(0);
                g_need_reset_controller_timeout = 1;
                g_neednot_tts_play_timeout = 1;
                //g_neednot_tts_play_timeout1=1;
                for (i = 0; i < g_btmanager_gl_var.support_dev_num; i++)
48ae58d6:	b776      	lw	a3,48ae5aac <.LBE18+0x70>
48ae58d8:	b576      	lw	a1,48ae5ab0 <.LBE18+0x74>
48ae58da:	6e01      	li	a2,1
48ae58dc:	c4c1      	sb	a2,1(a0)
48ae58de:	c7c0      	sb	a2,0(a3)
48ae58e0:	c5c0      	sb	a2,0(a1)
48ae58e2:	a3cb      	lbu	a2,11(v1)
48ae58e4:	6a02      	li	v0,2
48ae58e6:	c445      	sb	v0,5(a0)
48ae58e8:	6b00      	li	v1,0
48ae58ea:	f0a0 2607 	beqz	a2,48ae5a3c <.LBE18>
48ae58ee:	6912      	li	s1,18
                {
                    if (g_bt_auto_connect_ctrl.dev_info[i].conn_flag == 0)
48ae58f0:	eb38      	mult	v1,s1
48ae58f2:	ef12      	mflo	a3
48ae58f4:	e785      	addu	s1,a3,a0
48ae58f6:	653f      	move	t9,a3
48ae58f8:	a1fd      	lbu	a3,29(s1)
48ae58fa:	2f18      	bnez	a3,48ae592c <com_btmanager_event_dispatch_bank+0xc8>
48ae58fc:	6b01      	li	v1,1
                    {
                        g_bt_auto_connect_ctrl.dev_info[i].conn_flag = 1;
48ae58fe:	c17d      	sb	v1,29(s1)
48ae5900:	a0c8      	lbu	a2,8(s0)
                        if(p_event->reserve[0]==2)
48ae5902:	7602      	cmpi	a2,2
48ae5904:	6106      	btnez	48ae5912 <com_btmanager_event_dispatch_bank+0xae>
48ae5906:	b66d      	lw	a2,48ae5ab8 <.LBE18+0x7c>
                        {
                            g_neednot_tts_play_timeout1=1;
48ae5908:	c660      	sb	v1,0(a2)
48ae590a:	c0e8      	sb	a3,8(s0)
                            p_event->reserve[0]=0;
48ae590c:	ac45      	lhu	v0,10(a0)
                            g_bt_auto_connect_ctrl.connect_tick_cnt = g_bt_auto_connect_ctrl.auto_connect_interval*2; 
48ae590e:	3344      	sll	v1,v0,1
48ae5910:	cc66      	sh	v1,12(a0)
48ae5912:	67b9      	move	a1,t9
                        }
                        libc_memcpy(g_bt_auto_connect_ctrl.dev_info[i].remote_addr.bytes,
48ae5914:	4c0e      	addiu	a0,14
48ae5916:	e591      	addu	a0,a1,a0
48ae5918:	b269      	lw	v0,48ae5abc <.LBE18+0x80>
48ae591a:	67b0      	move	a1,s0
48ae591c:	4d0a      	addiu	a1,10
48ae591e:	ea40      	jalr	v0
48ae5920:	6e06      	li	a2,6
48ae5922:	a084      	lbu	a0,4(s0)
                        p_event->bd_addr, 6);
                        g_bt_auto_connect_ctrl.dev_info[i].support_profile = p_event->msg.content.data[0];
48ae5924:	c194      	sb	a0,20(s1)
48ae5926:	a0a4      	lbu	a1,4(s0)
                        PRINT_INFO_INT("recv profile:", p_event->msg.content.data[0]);
48ae5928:	0c4c      	la	a0,48ae5a58 <.LBE18+0x1c>
48ae592a:	100d      	b	48ae5946 <com_btmanager_event_dispatch_bank+0xe2>
48ae592c:	4341      	addiu	v0,v1,1
48ae592e:	6762      	move	v1,v0
48ae5930:	67e6      	move	a3,a2
48ae5932:	eb11      	zeb	v1
48ae5934:	ef11      	zeb	a3
48ae5936:	ebe3      	sltu	v1,a3
48ae5938:	61da      	btnez	48ae58ee <com_btmanager_event_dispatch_bank+0x8a>
48ae593a:	1080      	b	48ae5a3c <.LBE18>
                        break;
                    }

                }
            }
        }
        break;
48ae593c:	a0a4      	lbu	a1,4(s0)

        case MSG_BTSTACK_PATCH_DOWNLOAD_FLAG:
        {
            g_app_info_state.patch_download_flag = p_event->msg.content.data[0];
48ae593e:	b361      	lw	v1,48ae5ac0 <.LBE18+0x84>
48ae5940:	0c4b      	la	a0,48ae5a6c <.LBE18+0x30>
            PRINT_INFO_INT("REC_FLAG:",g_app_info_state.patch_download_flag);
48ae5942:	c3ae      	sb	a1,14(v1)
48ae5944:	ed11      	zeb	a1
48ae5946:	b258      	lw	v0,48ae5aa4 <.LBE18+0x68>
48ae5948:	6e02      	li	a2,2
48ae594a:	ea40      	jalr	v0
48ae594c:	6f4b      	li	a3,75
48ae594e:	1076      	b	48ae5a3c <.LBE18>

48ae5950 <.LBB3>:
        }
        break;
48ae5950:	b75d      	lw	a3,48ae5ac4 <.LBE18+0x88>

        case MSG_BTSTACK_ERR_HARDWARE_EXCEPTION:
        {
            #if 0
            act_writel((0 << WD_CTL_CLKSEL_SHIFT) | (1 << WD_CTL_WDEN) | (1 << WD_CTL_CLR), WD_CTL);//176ms
            while (1)
            {
                ;//等待重启
            }
            #endif

            //转发给COMMON，由COMMON重新装载BT STACK，且需要恢复回连
            msg_apps_t msg;
#ifdef ENABLE_TRUE_WIRELESS_STEREO
            if ((g_this_app_info->app_id == APP_ID_BTPLAY)
48ae5952:	f101 6a07 	li	v0,2311
            	  ||(g_this_app_info->app_id == APP_ID_LINEIN))
#else
            if (g_this_app_info->app_id == APP_ID_BTPLAY)
#endif
            {
                msg.type = MSG_BTSTACK_ERR_HARDWARE_EXCEPTION;
48ae5956:	9fa0      	lw	a1,0(a3)
48ae5958:	a581      	lbu	a0,1(a1)
48ae595a:	44cf      	addiu	a2,a0,-1
48ae595c:	ee11      	zeb	a2
48ae595e:	5e02      	sltiu	a2,2
48ae5960:	6102      	btnez	48ae5966 <.LBB3+0x16>
48ae5962:	f101 6a09 	li	v0,2313
            }
            else
            {
                msg.type = MSG_BTSTACK_ERR_HARDWARE;
48ae5966:	0404      	addiu	a0,sp,16
            }        
            
            broadcast_msg(&msg, TRUE);
48ae5968:	d204      	sw	v0,16(sp)
48ae596a:	1038      	b	48ae59dc <.LBB14+0x8>

48ae596c <.LBB4>:
48ae596c:	6b84      	li	v1,132
        }
        break;
#ifdef ENABLE_TRUE_WIRELESS_STEREO
        case MSG_BTSTACK_POWER_OFF:
        {
            //广播关机消息
            msg_apps_t msg;
            msg.type = MSG_POWER_OFF;
48ae596e:	0406      	addiu	a0,sp,24
            broadcast_msg(&msg, TRUE);
48ae5970:	d306      	sw	v1,24(sp)
48ae5972:	1034      	b	48ae59dc <.LBB14+0x8>

48ae5974 <.LBB5>:
48ae5974:	a004      	lbu	s0,4(s0)
        }
        break;
        
        case MSG_BTSTACK_TWS_APSWITCH_SYNC:
        {
        	//libc_print("@ap switch#",0,0);
        	
        	//高4bit 代表主从,全为1则为主
        	uint8 tmp_val = p_event->msg.content.data[0];
48ae5976:	b14c      	lw	s1,48ae5aa4 <.LBE18+0x68>
        	libc_print("@val:",p_event->msg.content.data[0],2);
48ae5978:	0c41      	la	a0,48ae5a7c <.LBE18+0x40>
48ae597a:	67b0      	move	a1,s0
48ae597c:	6e02      	li	a2,2
48ae597e:	e940      	jalr	s1
48ae5980:	6f4b      	li	a3,75
48ae5982:	6a0f      	li	v0,15
        	
        	if ((tmp_val&0xf) == 1)
48ae5984:	ea0c      	and	v0,s0
48ae5986:	7201      	cmpi	v0,1
48ae5988:	6111      	btnez	48ae59ac <.LBE8+0x8>
48ae598a:	6d00      	li	a1,0
        	{
        		libc_print("@switch s#",0,0);
48ae598c:	0c3e      	la	a0,48ae5a84 <.LBE18+0x48>
48ae598e:	67c5      	move	a2,a1
48ae5990:	e940      	jalr	s1
48ae5992:	6f4b      	li	a3,75
48ae5994:	70f1      	cmpi	s0,241
        		//com_key_deal_switch_app();
        		
        		if (tmp_val == 0xf1)
48ae5996:	6103      	btnez	48ae599e <.LBB6>
48ae5998:	b24d      	lw	v0,48ae5acc <.LBE18+0x90>
            {
            	g_tws_m_linein_flag  = 0;
48ae599a:	6e00      	li	a2,0
48ae599c:	c2c0      	sb	a2,0(v0)

48ae599e <.LBB6>:
48ae599e:	b549      	lw	a1,48ae5ac0 <.LBE18+0x84>

48ae59a0 <.LBB8>:
48ae59a0:	f101 6a0a 	li	v0,2314

48ae59a4 <.LBE8>:
            }
        		
        		if (get_cur_func_id() == APP_FUNC_PLAYLINEIN)
        		{
        			 msg_apps_t msg;           
               msg.type = MSG_BTSTACK_TWS_APSWITCH_SYNC;
48ae59a4:	a593      	lbu	a0,19(a1)
48ae59a6:	7403      	cmpi	a0,3
48ae59a8:	6017      	bteqz	48ae59d8 <.LBB14+0x4>
48ae59aa:	1048      	b	48ae5a3c <.LBE18>
48ae59ac:	7202      	cmpi	v0,2
               broadcast_msg(&msg, TRUE);
        		}		 
        	} 
        	else if ((tmp_val&0xf) == 2)
48ae59ae:	610d      	btnez	48ae59ca <.LBE11>

48ae59b0 <.LBB9>:
48ae59b0:	b344      	lw	v1,48ae5ac0 <.LBE18+0x84>

48ae59b2 <.LBE9>:
48ae59b2:	a3f3      	lbu	a3,19(v1)
48ae59b4:	7703      	cmpi	a3,3
48ae59b6:	6042      	bteqz	48ae5a3c <.LBE18>

48ae59b8 <.LBB11>:
48ae59b8:	70f2      	cmpi	s0,242
        	{
        		if (get_cur_func_id() != APP_FUNC_PLAYLINEIN)
        		{	
        		  if (tmp_val == 0xf2)
48ae59ba:	6105      	btnez	48ae59c6 <.LBB11+0xe>
48ae59bc:	b444      	lw	a0,48ae5acc <.LBE18+0x90>
              {
            	  g_tws_m_linein_flag  = 1;
48ae59be:	b645      	lw	a2,48ae5ad0 <.LBE18+0x94>
            	  g_tws_m_switchap_flag = 1;
48ae59c0:	6a01      	li	v0,1
48ae59c2:	c440      	sb	v0,0(a0)
48ae59c4:	c640      	sb	v0,0(a2)
48ae59c6:	6a03      	li	v0,3
              }
        		  
        		  msg_apps_t msg;
              msg.type = EVENT_ENTER_LINEIN;
48ae59c8:	1007      	b	48ae59d8 <.LBB14+0x4>

48ae59ca <.LBE11>:
48ae59ca:	7003      	cmpi	s0,3
              broadcast_msg(&msg, TRUE);
             
            }
        	}
        	else if (tmp_val == 3)
48ae59cc:	610b      	btnez	48ae59e4 <.LBE14+0x2>

48ae59ce <.LBB12>:
48ae59ce:	b53d      	lw	a1,48ae5ac0 <.LBE18+0x84>

48ae59d0 <.LBE12>:
48ae59d0:	a553      	lbu	v0,19(a1)
48ae59d2:	2a34      	bnez	v0,48ae5a3c <.LBE18>

48ae59d4 <.LBB14>:
48ae59d4:	f101 4a0a 	addiu	v0,2314
        	{
        		if (get_cur_func_id() == APP_FUNC_BTPLAY)
        		{
        			 msg_apps_t msg;           
               msg.type = MSG_BTSTACK_TWS_APSWITCH_SYNC;
48ae59d8:	d208      	sw	v0,32(sp)
48ae59da:	0408      	addiu	a0,sp,32
               broadcast_msg(&msg, TRUE);
48ae59dc:	b23b      	lw	v0,48ae5ac8 <.LBE18+0x8c>
48ae59de:	ea40      	jalr	v0
48ae59e0:	6d01      	li	a1,1

48ae59e2 <.LBE14>:
48ae59e2:	102c      	b	48ae5a3c <.LBE18>
48ae59e4:	7004      	cmpi	s0,4
        		}        		
        	}
        	else if (tmp_val == 4)
48ae59e6:	612a      	btnez	48ae5a3c <.LBE18>

48ae59e8 <.LBB15>:
48ae59e8:	b336      	lw	v1,48ae5ac0 <.LBE18+0x84>

48ae59ea <.LBE15>:
48ae59ea:	a3f3      	lbu	a3,19(v1)
48ae59ec:	2727      	beqz	a3,48ae5a3c <.LBE18>

48ae59ee <.LBB17>:
48ae59ee:	6801      	li	s0,1
        	{
        		if (get_cur_func_id() != APP_FUNC_BTPLAY)
        		{
        		     msg_apps_t msg;
                           msg.type = EVENT_ENTER_BTPLAY;
48ae59f0:	b236      	lw	v0,48ae5ac8 <.LBE18+0x8c>
                           broadcast_msg(&msg, TRUE);
48ae59f2:	d008      	sw	s0,32(sp)
48ae59f4:	0408      	addiu	a0,sp,32
48ae59f6:	ea40      	jalr	v0
48ae59f8:	67b0      	move	a1,s0
48ae59fa:	b636      	lw	a2,48ae5ad0 <.LBE18+0x94>
                           g_tws_m_switchap_flag = 1;
48ae59fc:	c600      	sb	s0,0(a2)

48ae59fe <.LBE17>:
48ae59fe:	101e      	b	48ae5a3c <.LBE18>

48ae5a00 <.LBB18>:
48ae5a00:	a084      	lbu	a0,4(s0)
        		}	        		
        	}
        	else
        	{
        	  ;//do nothing	
        	}					

        }
        break;	
        case MSG_BTSTACK_PARSE_GENARAL_CMD:
        {
           uint8 buffer[4];
           //cmd flag,
           buffer[0]=p_event->msg.content.data[0];
48ae5a02:	67dd      	move	a2,sp
48ae5a04:	f020 a6a9 	lbu	a1,41(a2)
           libc_print("vol#:",buffer[1],2);
48ae5a08:	b227      	lw	v0,48ae5aa4 <.LBE18+0x68>
48ae5a0a:	f020 c688 	sb	a0,40(a2)
48ae5a0e:	6f4b      	li	a3,75
48ae5a10:	0c20      	la	a0,48ae5a90 <.LBE18+0x54>
48ae5a12:	ea40      	jalr	v0
48ae5a14:	6e02      	li	a2,2
48ae5a16:	a0c5      	lbu	a2,5(s0)
           buffer[1]=p_event->msg.content.data[1];
48ae5a18:	67bd      	move	a1,sp
48ae5a1a:	f020 c5c9 	sb	a2,41(a1)
48ae5a1e:	a066      	lbu	v1,6(s0)
           buffer[2]=p_event->msg.content.data[2];
48ae5a20:	f020 a588 	lbu	a0,40(a1)
           buffer[3]=p_event->msg.content.data[3];
            if(buffer[0]==MUTE_STATE_FLAG)
48ae5a24:	f020 c56a 	sb	v1,42(a1)
48ae5a28:	a0e7      	lbu	a3,7(s0)
48ae5a2a:	7403      	cmpi	a0,3
48ae5a2c:	f020 c5eb 	sb	a3,43(a1)
48ae5a30:	6105      	btnez	48ae5a3c <.LBE18>
48ae5a32:	b229      	lw	v0,48ae5ad4 <.LBE18+0x98>
            {
                //com_switch_mute(0);
                com_switch_mute(0,2,buffer[1]);
48ae5a34:	6c00      	li	a0,0
48ae5a36:	6d02      	li	a1,2
48ae5a38:	ea40      	jalr	v0
48ae5a3a:	ee11      	zeb	a2

48ae5a3c <.LBE18>:
48ae5a3c:	920c      	lw	v0,48(sp)
            }
        }
        break;

#endif

        default:
        break;
    }

    return result;
}
48ae5a3e:	6479      	restore	72,ra,s0-s1
48ae5a40:	e8a0      	jrc	ra
48ae5a42:	0000      	addiu	s0,sp,0
48ae5a44:	493c      	addiu	s1,60
48ae5a46:	203e      	beqz	s0,48ae5ac4 <.LBE18+0x88>
48ae5a48:	6170      	btnez	48ae5b2a <com_rcp_check_for_tts+0x52>
48ae5a4a:	6567      	move	v1,a3
48ae5a4c:	7420      	cmpi	a0,32
48ae5a4e:	6d69      	li	a1,105
48ae5a50:	2065      	beqz	s0,48ae5b1c <com_rcp_check_for_tts+0x44>
48ae5a52:	756f      	cmpi	a1,111
48ae5a54:	0074      	addiu	s0,sp,464
48ae5a56:	0000      	addiu	s0,sp,0
48ae5a58:	493c      	addiu	s1,60
48ae5a5a:	203e      	beqz	s0,48ae5ad8 <com_rcp_check_for_tts>
48ae5a5c:	6572      	move	s3,v0
48ae5a5e:	7663      	cmpi	a2,99
48ae5a60:	7020      	cmpi	s0,32
48ae5a62:	6f72      	li	a3,114
48ae5a64:	6966      	li	s1,102
48ae5a66:	656c      	move	t3,a0
48ae5a68:	003a      	addiu	s0,sp,232
48ae5a6a:	0000      	addiu	s0,sp,0
48ae5a6c:	493c      	addiu	s1,60
48ae5a6e:	203e      	beqz	s0,48ae5aec <com_rcp_check_for_tts+0x14>
48ae5a70:	4552      	daddiu	v0,a1,2
48ae5a72:	5f43      	sltiu	a3,67
48ae5a74:	4c46      	addiu	a0,70
48ae5a76:	4741      	addiu	v0,a3,1
48ae5a78:	003a      	addiu	s0,sp,232
48ae5a7a:	0000      	addiu	s0,sp,0
48ae5a7c:	7640      	cmpi	a2,64
48ae5a7e:	6c61      	li	a0,97
48ae5a80:	003a      	addiu	s0,sp,232
48ae5a82:	0000      	addiu	s0,sp,0
48ae5a84:	7340      	cmpi	v1,64
48ae5a86:	6977      	li	s1,119
48ae5a88:	6374      	addiu	sp,928
48ae5a8a:	2068      	beqz	s0,48ae5b5c <com_rcp_check_for_tts+0x84>
48ae5a8c:	2373      	beqz	v1,48ae5b74 <com_rcp_check_for_tts+0x9c>
48ae5a8e:	0000      	addiu	s0,sp,0
48ae5a90:	6f76      	li	a3,118
48ae5a92:	236c      	beqz	v1,48ae5b6c <com_rcp_check_for_tts+0x94>
48ae5a94:	003a      	addiu	s0,sp,232
48ae5a96:	0000      	addiu	s0,sp,0
48ae5a98:	5851      	sltiu	s0,81
48ae5a9a:	4886      	addiu	s0,-122
48ae5a9c:	587d      	sltiu	s0,125
48ae5a9e:	4886      	addiu	s0,-122
48ae5aa0:	5b39      	sltiu	v1,57
48ae5aa2:	4886      	addiu	s0,-122
48ae5aa4:	e901      	sdbbp	8
48ae5aa6:	bfc1      	lwu	a2,4(a3)
48ae5aa8:	a2c8      	lbu	a2,8(v0)
48ae5aaa:	9fc1      	lw	a2,4(a3)
48ae5aac:	9a27      	lw	s1,28(v0)
48ae5aae:	9fc1      	lw	a2,4(a3)
48ae5ab0:	9a28      	lw	s1,32(v0)
48ae5ab2:	9fc1      	lw	a2,4(a3)
48ae5ab4:	a33c      	lbu	s1,28(v1)
48ae5ab6:	9fc1      	lw	a2,4(a3)
48ae5ab8:	a0b4      	lbu	a1,20(s0)
48ae5aba:	9fc1      	lw	a2,4(a3)
48ae5abc:	e905      	break	8
48ae5abe:	bfc1      	lwu	a2,4(a3)
48ae5ac0:	a0c0      	lbu	a2,0(s0)
48ae5ac2:	9fc1      	lw	a2,4(a3)
48ae5ac4:	9990      	lw	a0,64(s1)
48ae5ac6:	9fc1      	lw	a2,4(a3)
48ae5ac8:	5d21      	sltiu	a1,33
48ae5aca:	482e      	addiu	s0,46
48ae5acc:	a35c      	lbu	v0,28(v1)
48ae5ace:	9fc1      	lw	a2,4(a3)
48ae5ad0:	a35d      	lbu	v0,29(v1)
48ae5ad2:	9fc1      	lw	a2,4(a3)
48ae5ad4:	5c09      	sltiu	a0,9
48ae5ad6:	48be      	addiu	s0,-66

48ae5ad8 <com_rcp_check_for_tts>:
48ae5ad8:	64f4      	save	32,ra,s0-s1
48ae5ada:	b33f      	lw	v1,48ae5bd4 <com_rcp_check_for_tts+0xfc>
48ae5adc:	a355      	lbu	v0,21(v1)
48ae5ade:	6b00      	li	v1,0
48ae5ae0:	7202      	cmpi	v0,2
48ae5ae2:	6168      	btnez	48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5ae4:	b03d      	lw	s0,48ae5bd8 <com_rcp_check_for_tts+0x100>
48ae5ae6:	6783      	move	a0,v1
48ae5ae8:	67a3      	move	a1,v1
48ae5aea:	67c3      	move	a2,v1
48ae5aec:	e840      	jalr	s0
48ae5aee:	6f33      	li	a3,51
48ae5af0:	b73b      	lw	a3,48ae5bdc <com_rcp_check_for_tts+0x104>
48ae5af2:	9fa0      	lw	a1,0(a3)
48ae5af4:	ad60      	lhu	v1,0(a1)
48ae5af6:	ad02      	lhu	s0,4(a1)
48ae5af8:	4384      	addiu	a0,v1,4
48ae5afa:	ec1a      	div	zero,a0,s0
48ae5afc:	43c5      	addiu	a2,v1,5
48ae5afe:	9de2      	lw	a3,8(a1)
48ae5b00:	b336      	lw	v1,48ae5bd8 <com_rcp_check_for_tts+0x100>
48ae5b02:	e910      	mfhi	s1
48ae5b04:	ee1a      	div	zero,a2,s0
48ae5b06:	e729      	addu	v0,a3,s1
48ae5b08:	a220      	lbu	s1,0(v0)
48ae5b0a:	ed10      	mfhi	a1
48ae5b0c:	e7b1      	addu	a0,a3,a1
48ae5b0e:	a400      	lbu	s0,0(a0)
48ae5b10:	6c00      	li	a0,0
48ae5b12:	67a4      	move	a1,a0
48ae5b14:	67c4      	move	a2,a0
48ae5b16:	eb40      	jalr	v1
48ae5b18:	6f34      	li	a3,52
48ae5b1a:	7150      	cmpi	s1,80
48ae5b1c:	6127      	btnez	48ae5b6c <com_rcp_check_for_tts+0x94>
48ae5b1e:	b230      	lw	v0,48ae5bdc <com_rcp_check_for_tts+0x104>
48ae5b20:	9aa0      	lw	a1,0(v0)
48ae5b22:	b230      	lw	v0,48ae5be0 <com_rcp_check_for_tts+0x108>
48ae5b24:	ad80      	lhu	a0,0(a1)
48ae5b26:	ade2      	lhu	a3,4(a1)
48ae5b28:	9dc2      	lw	a2,8(a1)
48ae5b2a:	ecfb      	divu	zero,a0,a3
48ae5b2c:	6d10      	li	a1,16
48ae5b2e:	eb10      	mfhi	v1
48ae5b30:	ea40      	jalr	v0
48ae5b32:	e671      	addu	a0,a2,v1
48ae5b34:	7201      	cmpi	v0,1
48ae5b36:	6b01      	li	v1,1
48ae5b38:	603d      	bteqz	48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5b3a:	b328      	lw	v1,48ae5bd8 <com_rcp_check_for_tts+0x100>
48ae5b3c:	0c20      	la	a0,48ae5bbc <com_rcp_check_for_tts+0xe4>
48ae5b3e:	67b0      	move	a1,s0
48ae5b40:	6e02      	li	a2,2
48ae5b42:	eb40      	jalr	v1
48ae5b44:	6f4b      	li	a3,75
48ae5b46:	6d00      	li	a1,0
48ae5b48:	b324      	lw	v1,48ae5bd8 <com_rcp_check_for_tts+0x100>
48ae5b4a:	67c5      	move	a2,a1
48ae5b4c:	0c1f      	la	a0,48ae5bc8 <com_rcp_check_for_tts+0xf0>
48ae5b4e:	eb40      	jalr	v1
48ae5b50:	6f4b      	li	a3,75
48ae5b52:	b323      	lw	v1,48ae5bdc <com_rcp_check_for_tts+0x104>
48ae5b54:	9be0      	lw	a3,0(v1)
48ae5b56:	b321      	lw	v1,48ae5bd8 <com_rcp_check_for_tts+0x100>
48ae5b58:	af80      	lhu	a0,0(a3)
48ae5b5a:	af42      	lhu	v0,4(a3)
48ae5b5c:	9fc2      	lw	a2,8(a3)
48ae5b5e:	ec5b      	divu	zero,a0,v0
48ae5b60:	6f4b      	li	a3,75
48ae5b62:	ed10      	mfhi	a1
48ae5b64:	e6b1      	addu	a0,a2,a1
48ae5b66:	6d10      	li	a1,16
48ae5b68:	eb40      	jalr	v1
48ae5b6a:	6e03      	li	a2,3
48ae5b6c:	b21e      	lw	v0,48ae5be4 <com_rcp_check_for_tts+0x10c>
48ae5b6e:	6791      	move	a0,s1
48ae5b70:	ea40      	jalr	v0
48ae5b72:	67b0      	move	a1,s0
48ae5b74:	6762      	move	v1,v0
48ae5b76:	221e      	beqz	v0,48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5b78:	7143      	cmpi	s1,67
48ae5b7a:	6b01      	li	v1,1
48ae5b7c:	601b      	bteqz	48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5b7e:	7151      	cmpi	s1,81
48ae5b80:	6018      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b82:	714b      	cmpi	s1,75
48ae5b84:	6016      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b86:	7153      	cmpi	s1,83
48ae5b88:	6b00      	li	v1,0
48ae5b8a:	6114      	btnez	48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5b8c:	5802      	sltiu	s0,2
48ae5b8e:	6111      	btnez	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b90:	7080      	cmpi	s0,128
48ae5b92:	600f      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b94:	7010      	cmpi	s0,16
48ae5b96:	600d      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b98:	7070      	cmpi	s0,112
48ae5b9a:	600b      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5b9c:	7071      	cmpi	s0,113
48ae5b9e:	6009      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5ba0:	7072      	cmpi	s0,114
48ae5ba2:	6007      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5ba4:	7073      	cmpi	s0,115
48ae5ba6:	6005      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5ba8:	7074      	cmpi	s0,116
48ae5baa:	6003      	bteqz	48ae5bb2 <com_rcp_check_for_tts+0xda>
48ae5bac:	7075      	cmpi	s0,117
48ae5bae:	4361      	addiu	v1,v1,1
48ae5bb0:	6101      	btnez	48ae5bb4 <com_rcp_check_for_tts+0xdc>
48ae5bb2:	6b00      	li	v1,0
48ae5bb4:	6743      	move	v0,v1
48ae5bb6:	6474      	restore	32,ra,s0-s1
48ae5bb8:	e8a0      	jrc	ra
48ae5bba:	0000      	addiu	s0,sp,0
48ae5bbc:	6d63      	li	a1,99
48ae5bbe:	5f64      	sltiu	a3,100
48ae5bc0:	6469      	restore	72,ra,s0
48ae5bc2:	315f      	sra	s1,v0,7
48ae5bc4:	0000      	addiu	s0,sp,0
48ae5bc6:	0000      	addiu	s0,sp,0
48ae5bc8:	643c      	restore	96,s0-s1
48ae5bca:	7672      	cmpi	a2,114
48ae5bcc:	6420      	restore	128,s0
48ae5bce:	7461      	cmpi	a0,97
48ae5bd0:	3e61      	ld	v1,8(a2)
48ae5bd2:	0020      	addiu	s0,sp,128
48ae5bd4:	a0c0      	lbu	a2,0(s0)
48ae5bd6:	9fc1      	lw	a2,4(a3)
48ae5bd8:	e901      	sdbbp	8
48ae5bda:	bfc1      	lwu	a2,4(a3)
48ae5bdc:	a338      	lbu	s1,24(v1)
48ae5bde:	9fc1      	lw	a2,4(a3)
48ae5be0:	0b6d      	la	v1,48ae5d94 <com_rcp_check_for_tts+0x2bc>
48ae5be2:	bfc1      	lwu	a2,4(a3)
48ae5be4:	5d35      	sltiu	a1,53
48ae5be6:	4842      	addiu	s0,66
	...
Disassembly of section BANK_UI_1_44:

48b25800 <com_rcp_state_init>:
48b25800:	b208      	lw	v0,48b25820 <com_rcp_state_init+0x20>
48b25802:	6b01      	li	v1,1
48b25804:	eb6b      	neg	v1
48b25806:	c260      	sb	v1,0(v0)
48b25808:	b707      	lw	a3,48b25824 <com_rcp_state_init+0x24>
48b2580a:	b508      	lw	a1,48b25828 <com_rcp_state_init+0x28>
48b2580c:	b408      	lw	a0,48b2582c <com_rcp_state_init+0x2c>
48b2580e:	b209      	lw	v0,48b25830 <com_rcp_state_init+0x30>
48b25810:	6e00      	li	a2,0
48b25812:	6b00      	li	v1,0
48b25814:	c7c0      	sb	a2,0(a3)
48b25816:	c5c0      	sb	a2,0(a1)
48b25818:	cc60      	sh	v1,0(a0)
48b2581a:	e820      	jr	ra
48b2581c:	ca60      	sh	v1,0(v0)
48b2581e:	0000      	addiu	s0,sp,0
48b25820:	a293      	lbu	a0,19(v0)
48b25822:	9fc1      	lw	a2,4(a3)
48b25824:	a294      	lbu	a0,20(v0)
48b25826:	9fc1      	lw	a2,4(a3)
48b25828:	a2a0      	lbu	a1,0(v0)
48b2582a:	9fc1      	lw	a2,4(a3)
48b2582c:	a29c      	lbu	a0,28(v0)
48b2582e:	9fc1      	lw	a2,4(a3)
48b25830:	a29e      	lbu	a0,30(v0)
48b25832:	9fc1      	lw	a2,4(a3)

48b25834 <com_rcp_init>:
48b25834:	64e3      	save	24,ra,s0
48b25836:	b216      	lw	v0,48b2588c <.LBE3+0xa>
48b25838:	b714      	lw	a3,48b25888 <.LBE3+0x6>
48b2583a:	9a60      	lw	v1,0(v0)
48b2583c:	b515      	lw	a1,48b25890 <.LBE3+0xe>
48b2583e:	f200 6e18 	li	a2,536
48b25842:	b015      	lw	s0,48b25894 <.LBE3+0x12>
48b25844:	df60      	sw	v1,0(a3)
48b25846:	e840      	jalr	s0
48b25848:	cdc0      	sh	a2,0(a1)
48b2584a:	b414      	lw	a0,48b25898 <.LBE3+0x16>
48b2584c:	b214      	lw	v0,48b2589c <.LBE3+0x1a>
48b2584e:	6b00      	li	v1,0
48b25850:	dc60      	sw	v1,0(a0)
48b25852:	da60      	sw	v1,0(v0)
48b25854:	6783      	move	a0,v1
48b25856:	b313      	lw	v1,48b258a0 <.LBE3+0x1e>
48b25858:	6a0e      	li	v0,14
48b2585a:	424f      	addiu	v0,v0,-1
48b2585c:	5200      	slti	v0,0
48b2585e:	db80      	sw	a0,0(v1)
48b25860:	4364      	addiu	v1,v1,4
48b25862:	60fb      	bteqz	48b2585a <com_rcp_init+0x26>
48b25864:	6cff      	li	a0,255
48b25866:	b010      	lw	s0,48b258a4 <.LBE3+0x22>
48b25868:	e840      	jalr	s0
48b2586a:	4c4d      	addiu	a0,77
48b2586c:	2203      	beqz	v0,48b25874 <.LBE2>

48b2586e <.LBB2>:
48b2586e:	18f1 965d 	jal	489e5974 <com_ancs_init>
48b25872:	6500      	nop

48b25874 <.LBE2>:
48b25874:	6cff      	li	a0,255
48b25876:	e840      	jalr	s0
48b25878:	4c4e      	addiu	a0,78
48b2587a:	2203      	beqz	v0,48b25882 <.LBE3>

48b2587c <.LBB3>:
48b2587c:	18f1 966f 	jal	489e59bc <com_tip_init>
48b25880:	6500      	nop

48b25882 <.LBE3>:
48b25882:	6463      	restore	24,ra,s0
48b25884:	e8a0      	jrc	ra
48b25886:	0000      	addiu	s0,sp,0
48b25888:	a298      	lbu	a0,24(v0)
48b2588a:	9fc1      	lw	a2,4(a3)
48b2588c:	a0d8      	lbu	a2,24(s0)
48b2588e:	9fc1      	lw	a2,4(a3)
48b25890:	a2a2      	lbu	a1,2(v0)
48b25892:	9fc1      	lw	a2,4(a3)
48b25894:	5801      	sltiu	s0,1
48b25896:	48b2      	addiu	s0,-78
48b25898:	a24c      	lbu	v0,12(v0)
48b2589a:	9fc1      	lw	a2,4(a3)
48b2589c:	a250      	lbu	v0,16(v0)
48b2589e:	9fc1      	lw	a2,4(a3)
48b258a0:	a254      	lbu	v0,20(v0)
48b258a2:	9fc1      	lw	a2,4(a3)
48b258a4:	5ac5      	sltiu	v0,197
48b258a6:	4846      	addiu	s0,70

48b258a8 <com_rcp_set_callback>:
48b258a8:	b303      	lw	v1,48b258b4 <com_rcp_set_callback+0xc>
48b258aa:	b204      	lw	v0,48b258b8 <com_rcp_set_callback+0x10>
48b258ac:	db80      	sw	a0,0(v1)
48b258ae:	e820      	jr	ra
48b258b0:	daa0      	sw	a1,0(v0)
48b258b2:	0000      	addiu	s0,sp,0
48b258b4:	a24c      	lbu	v0,12(v0)
48b258b6:	9fc1      	lw	a2,4(a3)
48b258b8:	a250      	lbu	v0,16(v0)
48b258ba:	9fc1      	lw	a2,4(a3)

48b258bc <com_rcp_set_ext_cb>:
48b258bc:	5d0f      	sltiu	a1,15
48b258be:	6004      	bteqz	48b258c8 <com_rcp_set_ext_cb+0xc>
48b258c0:	b303      	lw	v1,48b258cc <com_rcp_set_ext_cb+0x10>
48b258c2:	36a8      	sll	a2,a1,2
48b258c4:	e669      	addu	v0,a2,v1
48b258c6:	da80      	sw	a0,0(v0)
48b258c8:	e8a0      	jrc	ra
48b258ca:	0000      	addiu	s0,sp,0
48b258cc:	a254      	lbu	v0,20(v0)
48b258ce:	9fc1      	lw	a2,4(a3)

48b258d0 <com_rcp_clr_ext_cb>:
48b258d0:	b305      	lw	v1,48b258e4 <com_rcp_clr_ext_cb+0x14>
48b258d2:	6c00      	li	a0,0
48b258d4:	6a0e      	li	v0,14
48b258d6:	424f      	addiu	v0,v0,-1
48b258d8:	5200      	slti	v0,0
48b258da:	db80      	sw	a0,0(v1)
48b258dc:	4364      	addiu	v1,v1,4
48b258de:	60fb      	bteqz	48b258d6 <com_rcp_clr_ext_cb+0x6>
48b258e0:	e8a0      	jrc	ra
48b258e2:	0000      	addiu	s0,sp,0
48b258e4:	a254      	lbu	v0,20(v0)
48b258e6:	9fc1      	lw	a2,4(a3)

48b258e8 <com_get_support_feature>:
48b258e8:	64e4      	save	32,ra,s0
48b258ea:	b412      	lw	a0,48b25930 <com_get_support_feature+0x48>
48b258ec:	9c60      	lw	v1,0(a0)
48b258ee:	6c47      	li	a0,71
48b258f0:	f040 a35e 	lbu	v0,94(v1)
48b258f4:	7201      	cmpi	v0,1
48b258f6:	6002      	bteqz	48b258fc <com_get_support_feature+0x14>
48b258f8:	f401 4c00 	addiu	a0,3072
48b258fc:	a3a5      	lbu	a1,5(v1)
48b258fe:	7501      	cmpi	a1,1
48b25900:	6102      	btnez	48b25906 <com_get_support_feature+0x1e>
48b25902:	6e20      	li	a2,32
48b25904:	eccd      	or	a0,a2
48b25906:	a3e9      	lbu	a3,9(v1)
48b25908:	7701      	cmpi	a3,1
48b2590a:	6102      	btnez	48b25910 <com_get_support_feature+0x28>
48b2590c:	b00a      	lw	s0,48b25934 <com_get_support_feature+0x4c>
48b2590e:	ec0d      	or	a0,s0
48b25910:	a34b      	lbu	v0,11(v1)
48b25912:	7201      	cmpi	v0,1
48b25914:	6102      	btnez	48b2591a <com_get_support_feature+0x32>
48b25916:	b309      	lw	v1,48b25938 <com_get_support_feature+0x50>
48b25918:	ec6d      	or	a0,v1
48b2591a:	6800      	li	s0,0
48b2591c:	b208      	lw	v0,48b2593c <com_get_support_feature+0x54>
48b2591e:	d004      	sw	s0,16(sp)
48b25920:	67b0      	move	a1,s0
48b25922:	67d0      	move	a2,s0
48b25924:	ea40      	jalr	v0
48b25926:	67f0      	move	a3,s0
48b25928:	6750      	move	v0,s0
48b2592a:	6464      	restore	32,ra,s0
48b2592c:	e8a0      	jrc	ra
48b2592e:	0000      	addiu	s0,sp,0
48b25930:	999c      	lw	a0,112(s1)
48b25932:	9fc1      	lw	a2,4(a3)
48b25934:	0000      	addiu	s0,sp,0
48b25936:	0001      	addiu	s0,sp,4
48b25938:	0000      	addiu	s0,sp,0
48b2593a:	0002      	addiu	s0,sp,8
48b2593c:	5f29      	sltiu	a3,41
48b2593e:	482a      	addiu	s0,42

48b25940 <com_get_bt_device_info>:
48b25940:	64cf      	save	120,ra
48b25942:	f001 6c02 	li	a0,2050
48b25946:	030a      	addiu	v1,sp,40
48b25948:	d41a      	sw	a0,104(sp)
48b2594a:	b209      	lw	v0,48b2596c <com_get_bt_device_info+0x2c>
48b2594c:	6c00      	li	a0,0
48b2594e:	d31b      	sw	v1,108(sp)
48b25950:	051a      	addiu	a1,sp,104
48b25952:	67c4      	move	a2,a0
48b25954:	ea40      	jalr	v0
48b25956:	67e4      	move	a3,a0
48b25958:	6f40      	li	a3,64
48b2595a:	6c00      	li	a0,0
48b2595c:	b205      	lw	v0,48b25970 <com_get_bt_device_info+0x30>
48b2595e:	d704      	sw	a3,16(sp)
48b25960:	67a4      	move	a1,a0
48b25962:	ea40      	jalr	v0
48b25964:	0606      	addiu	a2,sp,24
48b25966:	6a00      	li	v0,0
48b25968:	644f      	restore	120,ra
48b2596a:	e8a0      	jrc	ra
48b2596c:	0d15      	la	a1,48b259bc <com_set_device_name+0x48>
48b2596e:	bfc1      	lwu	a2,4(a3)
48b25970:	5f29      	sltiu	a3,41
48b25972:	482a      	addiu	s0,42

48b25974 <com_set_device_name>:
48b25974:	64c4      	save	32,ra
48b25976:	6c00      	li	a0,0
48b25978:	f001 6b01 	li	v1,2049
48b2597c:	b205      	lw	v0,48b25990 <com_set_device_name+0x1c>
48b2597e:	d605      	sw	a2,20(sp)
48b25980:	d304      	sw	v1,16(sp)
48b25982:	0504      	addiu	a1,sp,16
48b25984:	67c4      	move	a2,a0
48b25986:	ea40      	jalr	v0
48b25988:	67e4      	move	a3,a0
48b2598a:	6a00      	li	v0,0
48b2598c:	6444      	restore	32,ra
48b2598e:	e8a0      	jrc	ra
48b25990:	0d15      	la	a1,48b259e0 <com_set_device_name+0x6c>
48b25992:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_45:

48b65800 <load_standard_mode_mdrc_param>:
48b65800:	f004 64fb 	save	a0,88,ra,s0-s1

void __section__(".text.bank")load_standard_mode_mdrc_param(dae_config_t *p_dae_cfg, bool aux_flag)
{
48b65804:	ed11      	zeb	a1
48b65806:	6724      	move	s1,a0
48b65808:	7501      	cmpi	a1,1
    uint16 config_id;
    mdrc_extend_para_temp_standard_mode_t compressor_temp;
    mdrc_para_temp_standard_mode_t        mdrc_temp;
    mdrc_peak_detect_temp_standard_mode_t  mdrc_peak_detect_temp;
    uint8 i = 0;
    int16 mdrc_threshold_max = -600;
     
    if (aux_flag == TRUE)
48b6580a:	6800      	li	s0,0
48b6580c:	b232      	lw	v0,48b658d4 <load_standard_mode_mdrc_param+0xd4>
48b6580e:	f140 4908 	addiu	s1,328
48b65812:	612a      	btnez	48b65868 <load_standard_mode_mdrc_param+0x68>
48b65814:	f200 6c16 	li	a0,534
    {
        config_id = DAE_MDRC_AUX_EXPAND_BANK1_SETTING_STANDARD_MODE;

        com_get_config_struct((uint16) (config_id), (uint8 *)&compressor_temp ,             \
48b65818:	0504      	addiu	a1,sp,16
48b6581a:	ea40      	jalr	v0
48b6581c:	6e0e      	li	a2,14
48b6581e:	b62f      	lw	a2,48b658d8 <load_standard_mode_mdrc_param+0xd8>
            sizeof(mdrc_extend_para_temp_standard_mode_t));
        sys_comval->mdrc_vol_adjust_standard_mode = (int8)compressor_temp.vol_adjust;
48b65820:	679d      	move	a0,sp
48b65822:	acaa      	lhu	a1,20(a0)
48b65824:	9e60      	lw	v1,0(a2)
48b65826:	b22e      	lw	v0,48b658dc <load_standard_mode_mdrc_param+0xdc>
        libc_memcpy(&(p_dae_cfg->mdrc_extend_para_standard_mode), &compressor_temp.mdrc,    \
48b65828:	f040 c3aa 	sb	a1,74(v1)
48b6582c:	6791      	move	a0,s1
48b6582e:	f000 0516 	addiu	a1,sp,22
48b65832:	6e08      	li	a2,8
48b65834:	ea40      	jalr	v0
48b65836:	67f0      	move	a3,s0
48b65838:	b127      	lw	s1,48b658d4 <load_standard_mode_mdrc_param+0xd4>
            sizeof(mdrc_extend_para_standard_mode_t));

        config_id = DAE_MDRC_AUX_BANK0_SETTING_STANDARD_MODE;
     
        for (i = 0; i < MAX_MDRC_SEG_STANDARD; i++)
        {
            com_get_config_struct((uint16) (config_id + i), (uint8 *)&mdrc_temp , sizeof(mdrc_para_temp_standard_mode_t));
48b6583a:	f210 4083 	addiu	a0,s0,531
48b6583e:	0508      	addiu	a1,sp,32
48b65840:	e940      	jalr	s1
48b65842:	6e14      	li	a2,20
48b65844:	9316      	lw	v1,88(sp)
            libc_memcpy((p_dae_cfg->p_mdrc_band_standard_mode) + i, &(mdrc_temp.mdrc_band), sizeof(dae_mdrc_band_standard_mode_t));
48b65846:	3210      	sll	v0,s0,4
48b65848:	f140 9b38 	lw	s1,344(v1)
48b6584c:	6f00      	li	a3,0
48b6584e:	e151      	addu	a0,s1,v0
48b65850:	b123      	lw	s1,48b658dc <load_standard_mode_mdrc_param+0xdc>
48b65852:	0509      	addiu	a1,sp,36
48b65854:	e940      	jalr	s1
48b65856:	6e10      	li	a2,16
48b65858:	40e1      	addiu	a3,s0,1
48b6585a:	6707      	move	s0,a3
48b6585c:	e811      	zeb	s0
48b6585e:	5803      	sltiu	s0,3
48b65860:	61eb      	btnez	48b65838 <load_standard_mode_mdrc_param+0x38>
48b65862:	f200 6c17 	li	a0,535
        }      
             
        //MDRC峰值检测相关参数
        config_id = MDRC_PEAK_AUX_DETECTCOMPENSATION;
        com_get_config_struct((uint16) (MDRC_PEAK_AUX_DETECTCOMPENSATION), (uint8 *)&mdrc_peak_detect_temp , \
48b65866:	1029      	b	48b658ba <load_standard_mode_mdrc_param+0xba>
48b65868:	f200 6c11 	li	a0,529
            sizeof(mdrc_peak_detect_temp_standard_mode_t));
        libc_memcpy(&(p_dae_cfg->mdrc_peak_standard_mode), &mdrc_peak_detect_temp.mdrc_peak_detect,           \
            sizeof(mdrc_peak_detect_standard_mode_t));
    }
    else
    {
        config_id = DAE_MDRC_EXPAND_BANK1_SETTING_STANDARD_MODE;

        com_get_config_struct((uint16) (config_id), (uint8 *)&compressor_temp ,             \
48b6586c:	0504      	addiu	a1,sp,16
48b6586e:	ea40      	jalr	v0
48b65870:	6e0e      	li	a2,14
48b65872:	b71a      	lw	a3,48b658d8 <load_standard_mode_mdrc_param+0xd8>
            sizeof(mdrc_extend_para_temp_standard_mode_t));
        sys_comval->mdrc_vol_adjust_standard_mode = (int8)compressor_temp.vol_adjust;
48b65874:	679d      	move	a0,sp
48b65876:	9fa0      	lw	a1,0(a3)
48b65878:	acca      	lhu	a2,20(a0)
48b6587a:	b219      	lw	v0,48b658dc <load_standard_mode_mdrc_param+0xdc>
        libc_memcpy(&(p_dae_cfg->mdrc_extend_para_standard_mode), &compressor_temp.mdrc,    \
48b6587c:	f040 c5ca 	sb	a2,74(a1)
48b65880:	6791      	move	a0,s1
48b65882:	f000 0516 	addiu	a1,sp,22
48b65886:	6e08      	li	a2,8
48b65888:	ea40      	jalr	v0
48b6588a:	67f0      	move	a3,s0
48b6588c:	b312      	lw	v1,48b658d4 <load_standard_mode_mdrc_param+0xd4>
            sizeof(mdrc_extend_para_standard_mode_t));

        config_id = DAE_MDRC_BANK0_SETTING_STANDARD_MODE;
   
        for (i = 0; i < MAX_MDRC_SEG_STANDARD; i++)
        {
           com_get_config_struct((uint16) (config_id + i), (uint8 *)&mdrc_temp , sizeof(mdrc_para_temp_standard_mode_t));
48b6588e:	f200 408e 	addiu	a0,s0,526
48b65892:	0508      	addiu	a1,sp,32
48b65894:	eb40      	jalr	v1
48b65896:	6e14      	li	a2,20
48b65898:	9516      	lw	a1,88(sp)
           libc_memcpy((p_dae_cfg->p_mdrc_band_standard_mode) + i, &(mdrc_temp.mdrc_band), sizeof(dae_mdrc_band_standard_mode_t));
48b6589a:	3210      	sll	v0,s0,4
48b6589c:	f140 9d38 	lw	s1,344(a1)
48b658a0:	6e10      	li	a2,16
48b658a2:	e151      	addu	a0,s1,v0
48b658a4:	b10e      	lw	s1,48b658dc <load_standard_mode_mdrc_param+0xdc>
48b658a6:	0509      	addiu	a1,sp,36
48b658a8:	e940      	jalr	s1
48b658aa:	6f00      	li	a3,0
48b658ac:	4061      	addiu	v1,s0,1
48b658ae:	6703      	move	s0,v1
48b658b0:	e811      	zeb	s0
48b658b2:	5803      	sltiu	s0,3
48b658b4:	61eb      	btnez	48b6588c <load_standard_mode_mdrc_param+0x8c>
48b658b6:	f200 6c12 	li	a0,530
        }
                    
        //MDRC峰值检测相关参数
        config_id = MDRC_PEAK_DETECTCOMPENSATION;
        com_get_config_struct((uint16) (MDRC_PEAK_DETECTCOMPENSATION), (uint8 *)&mdrc_peak_detect_temp , \
48b658ba:	b307      	lw	v1,48b658d4 <load_standard_mode_mdrc_param+0xd4>
48b658bc:	050e      	addiu	a1,sp,56
48b658be:	eb40      	jalr	v1
48b658c0:	6e0c      	li	a2,12
48b658c2:	9416      	lw	a0,88(sp)
            sizeof(mdrc_peak_detect_temp_standard_mode_t));
        libc_memcpy(&(p_dae_cfg->mdrc_peak_standard_mode), &mdrc_peak_detect_temp.mdrc_peak_detect, \
48b658c4:	050f      	addiu	a1,sp,60
48b658c6:	f140 4c10 	addiu	a0,336
48b658ca:	6e08      	li	a2,8
48b658cc:	e940      	jalr	s1
48b658ce:	6f00      	li	a3,0
48b658d0:	647b      	restore	88,ra,s0-s1
            sizeof(mdrc_peak_detect_standard_mode_t));
    }       
}
48b658d2:	e8a0      	jrc	ra
48b658d4:	5a55      	sltiu	v0,85
48b658d6:	4846      	addiu	s0,70
48b658d8:	999c      	lw	a0,112(s1)
48b658da:	9fc1      	lw	a2,4(a3)
48b658dc:	e905      	break	8
48b658de:	bfc1      	lwu	a2,4(a3)

48b658e0 <update_peq_para>:
48b658e0:	f004 64f8 	save	a0,64,ra,s0-s1

void __section__(".text.bank") update_peq_para(comval_t *setting_comval,uint16 enable_id,uint16 para_id)
{
48b658e4:	ee31      	zeh	a2
48b658e6:	6724      	move	s1,a0
    dae_config_t *p_dae_cfg;
    uint8 i;
    p_dae_cfg = &(setting_comval->dae_cfg);
48b658e8:	b01c      	lw	s0,48b65958 <.LBE16+0x18>
    
    p_dae_cfg->peq_enable = (uint8) com_get_config_default(enable_id);
48b658ea:	6785      	move	a0,a1
48b658ec:	d608      	sw	a2,32(sp)
48b658ee:	e840      	jalr	s0
48b658f0:	ec31      	zeh	a0
48b658f2:	494c      	addiu	s1,76
48b658f4:	c149      	sb	v0,9(s1)
48b658f6:	6a00      	li	v0,0
    for (i = 0; i < MAX_PEQ_SEG; i++)
48b658f8:	d209      	sw	v0,36(sp)

48b658fa <.LBB16>:
48b658fa:	9708      	lw	a3,32(sp)
    {
        peq_config_t tmp_peq_config;

        com_get_config_struct((uint16) (para_id + i), (uint8 *) &tmp_peq_config,          \
48b658fc:	9609      	lw	a2,36(sp)
48b658fe:	b018      	lw	s0,48b6595c <.LBE16+0x1c>
48b65900:	e7d1      	addu	a0,a3,a2
48b65902:	ec31      	zeh	a0
48b65904:	0504      	addiu	a1,sp,16
48b65906:	e840      	jalr	s0
48b65908:	6e0c      	li	a2,12
48b6590a:	9509      	lw	a1,36(sp)
            sizeof(peq_config_t));
        libc_memcpy(&(p_dae_cfg->peq_bands[i]), &(tmp_peq_config.eq_data), sizeof(peq_band_t));
48b6590c:	b215      	lw	v0,48b65960 <.LBE16+0x20>
48b6590e:	34ac      	sll	a0,a1,3
48b65910:	e181      	addu	s0,s1,a0
48b65912:	6790      	move	a0,s0
48b65914:	4c16      	addiu	a0,22
48b65916:	d40a      	sw	a0,40(sp)
48b65918:	0505      	addiu	a1,sp,20
48b6591a:	6e08      	li	a2,8
48b6591c:	ea40      	jalr	v0
48b6591e:	6f00      	li	a3,0
48b65920:	a86e      	lhu	v1,28(s0)

        if ((p_dae_cfg->peq_bands[i].type == 2) && (p_dae_cfg->peq_bands[i].gain != 0))
48b65922:	7302      	cmpi	v1,2
48b65924:	6107      	btnez	48b65934 <.LBB16+0x3a>
48b65926:	886d      	lh	v1,26(s0)
48b65928:	2305      	beqz	v1,48b65934 <.LBB16+0x3a>
48b6592a:	950a      	lw	a1,40(sp)
        {
            setting_comval->highpass_cutoff = (uint8)p_dae_cfg->peq_bands[i].cutoff;
48b6592c:	9410      	lw	a0,64(sp)
48b6592e:	ad40      	lhu	v0,0(a1)
48b65930:	f020 c45d 	sb	v0,61(a0)
48b65934:	9509      	lw	a1,36(sp)
        }

        p_dae_cfg->peq_band_enable_type[i] = (uint8)tmp_peq_config.default_value;
48b65936:	679d      	move	a0,sp
48b65938:	ac48      	lhu	v0,16(a0)
48b6593a:	e52d      	addu	v1,a1,s1
48b6593c:	f0a0 c356 	sb	v0,182(v1)

48b65940 <.LBE16>:
48b65940:	9709      	lw	a3,36(sp)
48b65942:	47c1      	addiu	a2,a3,1
48b65944:	ee11      	zeb	a2
48b65946:	5e14      	sltiu	a2,20
48b65948:	d609      	sw	a2,36(sp)
48b6594a:	61d7      	btnez	48b658fa <.LBB16>
48b6594c:	b306      	lw	v1,48b65964 <.LBE16+0x24>
    }

    com_update_dae_config(p_dae_cfg);
48b6594e:	eb40      	jalr	v1
48b65950:	6791      	move	a0,s1
48b65952:	6478      	restore	64,ra,s0-s1
48b65954:	e8a0      	jrc	ra
48b65956:	0000      	addiu	s0,sp,0
48b65958:	5ac5      	sltiu	v0,197
48b6595a:	4846      	addiu	s0,70
48b6595c:	5a55      	sltiu	v0,85
48b6595e:	4846      	addiu	s0,70
48b65960:	e905      	break	8
48b65962:	bfc1      	lwu	a2,4(a3)
48b65964:	58f9      	sltiu	s0,249
48b65966:	484a      	addiu	s0,74

48b65968 <com_btmanager_exit>:
48b65968:	64f9      	save	72,ra,s0-s1
48b6596a:	ec11      	zeb	a0
48b6596c:	ed11      	zeb	a1
48b6596e:	b368      	lw	v1,48b65b0c <.LBE5+0x1a>
48b65970:	d40a      	sw	a0,40(sp)
48b65972:	d50b      	sw	a1,44(sp)
48b65974:	a34c      	lbu	v0,12(v1)
48b65976:	f0c0 2202 	beqz	v0,48b65afe <.LBE5+0xc>
48b6597a:	b666      	lw	a2,48b65b10 <.LBE5+0x1e>
48b6597c:	6901      	li	s1,1
48b6597e:	8682      	lb	a0,2(a2)
48b65980:	e92b      	neg	s1
48b65982:	ed8f      	not	a1,a0
48b65984:	2504      	beqz	a1,48b6598e <com_btmanager_exit+0x26>
48b65986:	b064      	lw	s0,48b65b14 <.LBE5+0x22>
48b65988:	e8c0      	jalrc	s0
48b6598a:	b462      	lw	a0,48b65b10 <.LBE5+0x1e>
48b6598c:	c422      	sb	s1,2(a0)
48b6598e:	b263      	lw	v0,48b65b18 <.LBE5+0x26>
48b65990:	8288      	lb	a0,8(v0)
48b65992:	ef8f      	not	a3,a0
48b65994:	2704      	beqz	a3,48b6599e <com_btmanager_exit+0x36>
48b65996:	b060      	lw	s0,48b65b14 <.LBE5+0x22>
48b65998:	e8c0      	jalrc	s0
48b6599a:	b360      	lw	v1,48b65b18 <.LBE5+0x26>
48b6599c:	c328      	sb	s1,8(v1)
48b6599e:	b65f      	lw	a2,48b65b18 <.LBE5+0x26>
48b659a0:	8687      	lb	a0,7(a2)
48b659a2:	ed8f      	not	a1,a0
48b659a4:	2504      	beqz	a1,48b659ae <com_btmanager_exit+0x46>
48b659a6:	b25c      	lw	v0,48b65b14 <.LBE5+0x22>
48b659a8:	eac0      	jalrc	v0
48b659aa:	b45c      	lw	a0,48b65b18 <.LBE5+0x26>
48b659ac:	c427      	sb	s1,7(a0)
48b659ae:	b35b      	lw	v1,48b65b18 <.LBE5+0x26>
48b659b0:	8389      	lb	a0,9(v1)
48b659b2:	ef8f      	not	a3,a0
48b659b4:	2704      	beqz	a3,48b659be <com_btmanager_exit+0x56>
48b659b6:	b258      	lw	v0,48b65b14 <.LBE5+0x22>
48b659b8:	eac0      	jalrc	v0
48b659ba:	b058      	lw	s0,48b65b18 <.LBE5+0x26>
48b659bc:	c029      	sb	s1,9(s0)
48b659be:	b657      	lw	a2,48b65b18 <.LBE5+0x26>
48b659c0:	868a      	lb	a0,10(a2)
48b659c2:	ed8f      	not	a1,a0
48b659c4:	2504      	beqz	a1,48b659ce <com_btmanager_exit+0x66>
48b659c6:	b054      	lw	s0,48b65b14 <.LBE5+0x22>
48b659c8:	e8c0      	jalrc	s0
48b659ca:	b454      	lw	a0,48b65b18 <.LBE5+0x26>
48b659cc:	c42a      	sb	s1,10(a0)
48b659ce:	b054      	lw	s0,48b65b1c <.LBE5+0x2a>
48b659d0:	8060      	lb	v1,0(s0)
48b659d2:	ef6f      	not	a3,v1
48b659d4:	270a      	beqz	a3,48b659ea <com_btmanager_exit+0x82>
48b659d6:	6d00      	li	a1,0
48b659d8:	b252      	lw	v0,48b65b20 <.LBE5+0x2e>
48b659da:	0c4b      	la	a0,48b65b04 <.LBE5+0x12>
48b659dc:	67c5      	move	a2,a1
48b659de:	ea40      	jalr	v0
48b659e0:	6f4b      	li	a3,75
48b659e2:	b24d      	lw	v0,48b65b14 <.LBE5+0x22>
48b659e4:	ea40      	jalr	v0
48b659e6:	8080      	lb	a0,0(s0)
48b659e8:	c020      	sb	s1,0(s0)
48b659ea:	6d00      	li	a1,0
48b659ec:	b14d      	lw	s1,48b65b20 <.LBE5+0x2e>
48b659ee:	67c5      	move	a2,a1
48b659f0:	6c01      	li	a0,1
48b659f2:	e940      	jalr	s1
48b659f4:	6f48      	li	a3,72
48b659f6:	6c00      	li	a0,0
48b659f8:	b04b      	lw	s0,48b65b24 <.LBE5+0x32>
48b659fa:	67a4      	move	a1,a0
48b659fc:	e840      	jalr	s0
48b659fe:	67c4      	move	a2,a0
48b65a00:	b64a      	lw	a2,48b65b28 <.LBE5+0x36>
48b65a02:	a6a9      	lbu	a1,9(a2)
48b65a04:	7501      	cmpi	a1,1
48b65a06:	6004      	bteqz	48b65a10 <com_btmanager_exit+0xa8>
48b65a08:	6d00      	li	a1,0
48b65a0a:	6c01      	li	a0,1
48b65a0c:	e840      	jalr	s0
48b65a0e:	67c5      	move	a2,a1
48b65a10:	970a      	lw	a3,40(sp)
48b65a12:	6801      	li	s0,1
48b65a14:	ef0e      	xor	a3,s0
48b65a16:	ef03      	sltu	a3,s0
48b65a18:	6798      	move	a0,t8
48b65a1a:	d40d      	sw	a0,52(sp)
48b65a1c:	2421      	beqz	a0,48b65a60 <.LBB3>

48b65a1e <.LBB2>:
48b65a1e:	b045      	lw	s0,48b65b30 <.LBE5+0x3e>
48b65a20:	b443      	lw	a0,48b65b2c <.LBE5+0x3a>
48b65a22:	6d00      	li	a1,0
48b65a24:	f200 6e00 	li	a2,512
48b65a28:	e840      	jalr	s0
48b65a2a:	6f01      	li	a3,1
48b65a2c:	6c4e      	li	a0,78
48b65a2e:	6d04      	li	a1,4
48b65a30:	6e00      	li	a2,0
48b65a32:	e940      	jalr	s1
48b65a34:	6f16      	li	a3,22
48b65a36:	b539      	lw	a1,48b65b18 <.LBE5+0x26>
48b65a38:	6782      	move	a0,v0
48b65a3a:	6e1c      	li	a2,28
48b65a3c:	6f00      	li	a3,0
48b65a3e:	e840      	jalr	s0
48b65a40:	d20c      	sw	v0,48(sp)
48b65a42:	940c      	lw	a0,48(sp)
48b65a44:	b533      	lw	a1,48b65b10 <.LBE5+0x1e>
48b65a46:	4c1c      	addiu	a0,28
48b65a48:	6e32      	li	a2,50
48b65a4a:	e840      	jalr	s0
48b65a4c:	6f00      	li	a3,0

48b65a4e <.LBE2>:
48b65a4e:	b133      	lw	s1,48b65b18 <.LBE5+0x26>
48b65a50:	6b00      	li	v1,0
48b65a52:	b439      	lw	a0,48b65b34 <.LBE5+0x42>
48b65a54:	c171      	sb	v1,17(s1)
48b65a56:	6d00      	li	a1,0
48b65a58:	f00c 6e00 	li	a2,24576
48b65a5c:	e840      	jalr	s0
48b65a5e:	6f01      	li	a3,1

48b65a60 <.LBB3>:
48b65a60:	677d      	move	v1,sp
48b65a62:	6d0d      	li	a1,13
48b65a64:	6900      	li	s1,0
48b65a66:	f020 c3a4 	sb	a1,36(v1)
48b65a6a:	f020 c325 	sb	s1,37(v1)
48b65a6e:	920d      	lw	v0,52(sp)
48b65a70:	f180 6e05 	li	a2,389
48b65a74:	d608      	sw	a2,32(sp)
48b65a76:	2203      	beqz	v0,48b65a7e <.LBB3+0x1e>
48b65a78:	6c01      	li	a0,1
48b65a7a:	f020 c385 	sb	a0,37(v1)
48b65a7e:	900b      	lw	s0,44(sp)
48b65a80:	7001      	cmpi	s0,1
48b65a82:	67f8      	move	a3,t8
48b65a84:	5f01      	sltiu	a3,1
48b65a86:	6718      	move	s0,t8
48b65a88:	2008      	beqz	s0,48b65a9a <.LBB3+0x3a>
48b65a8a:	67dd      	move	a2,sp
48b65a8c:	f020 a645 	lbu	v0,37(a2)
48b65a90:	6d02      	li	a1,2
48b65a92:	eaad      	or	v0,a1
48b65a94:	677d      	move	v1,sp
48b65a96:	f020 c345 	sb	v0,37(v1)
48b65a9a:	6e00      	li	a2,0
48b65a9c:	b227      	lw	v0,48b65b38 <.LBE5+0x46>
48b65a9e:	6c0b      	li	a0,11
48b65aa0:	0508      	addiu	a1,sp,32
48b65aa2:	ea40      	jalr	v0
48b65aa4:	67e6      	move	a3,a2

48b65aa6 <.LBE3>:
48b65aa6:	2003      	beqz	s0,48b65aae <.LBE3+0x8>
48b65aa8:	b420      	lw	a0,48b65b28 <.LBE5+0x36>
48b65aaa:	c42e      	sb	s1,14(a0)
48b65aac:	c42f      	sb	s1,15(a0)
48b65aae:	970d      	lw	a3,52(sp)
48b65ab0:	2720      	beqz	a3,48b65af2 <.LBE5>

48b65ab2 <.LBB5>:
48b65ab2:	b01a      	lw	s0,48b65b18 <.LBE5+0x26>
48b65ab4:	a051      	lbu	v0,17(s0)
48b65ab6:	2a09      	bnez	v0,48b65aca <.LBB5+0x18>
48b65ab8:	6d00      	li	a1,0
48b65aba:	b21a      	lw	v0,48b65b20 <.LBE5+0x2e>
48b65abc:	6c01      	li	a0,1
48b65abe:	67c5      	move	a2,a1
48b65ac0:	ea40      	jalr	v0
48b65ac2:	6f1e      	li	a3,30
48b65ac4:	b315      	lw	v1,48b65b18 <.LBE5+0x26>
48b65ac6:	a351      	lbu	v0,17(v1)
48b65ac8:	17f6      	b	48b65ab6 <.LBB5+0x4>
48b65aca:	b41d      	lw	a0,48b65b3c <.LBE5+0x4a>
48b65acc:	f2ab 6d05 	li	a1,23205
48b65ad0:	cca0      	sh	a1,0(a0)
48b65ad2:	b014      	lw	s0,48b65b20 <.LBE5+0x2e>
48b65ad4:	b51b      	lw	a1,48b65b40 <.LBE5+0x4e>
48b65ad6:	f00c 6e00 	li	a2,24576
48b65ada:	e840      	jalr	s0
48b65adc:	6f13      	li	a3,19
48b65ade:	940c      	lw	a0,48(sp)
48b65ae0:	b519      	lw	a1,48b65b44 <.LBE5+0x52>
48b65ae2:	6e4e      	li	a2,78
48b65ae4:	e840      	jalr	s0
48b65ae6:	6f13      	li	a3,19
48b65ae8:	940c      	lw	a0,48(sp)
48b65aea:	6d04      	li	a1,4
48b65aec:	6e00      	li	a2,0
48b65aee:	e840      	jalr	s0
48b65af0:	6f17      	li	a3,23

48b65af2 <.LBE5>:
48b65af2:	6d00      	li	a1,0
48b65af4:	b215      	lw	v0,48b65b48 <.LBE5+0x56>
48b65af6:	6c07      	li	a0,7
48b65af8:	67c5      	move	a2,a1
48b65afa:	ea40      	jalr	v0
48b65afc:	6f03      	li	a3,3
48b65afe:	6479      	restore	72,ra,s0-s1
48b65b00:	e8a0      	jrc	ra
48b65b02:	0000      	addiu	s0,sp,0
48b65b04:	6572      	move	s3,v0
48b65b06:	7473      	cmpi	a0,115
48b65b08:	7261      	cmpi	v0,97
48b65b0a:	0074      	addiu	s0,sp,464
48b65b0c:	a080      	lbu	a0,0(s0)
48b65b0e:	9fc1      	lw	a2,4(a3)
48b65b10:	a2c8      	lbu	a2,8(v0)
48b65b12:	9fc1      	lw	a2,4(a3)
48b65b14:	5b01      	sltiu	v1,1
48b65b16:	488e      	addiu	s0,-114
48b65b18:	a33c      	lbu	s1,28(v1)
48b65b1a:	9fc1      	lw	a2,4(a3)
48b65b1c:	a358      	lbu	v0,24(v1)
48b65b1e:	9fc1      	lw	a2,4(a3)
48b65b20:	e901      	sdbbp	8
48b65b22:	bfc1      	lwu	a2,4(a3)
48b65b24:	5885      	sltiu	s0,133
48b65b26:	485e      	addiu	s0,94
48b65b28:	a0c0      	lbu	a2,0(s0)
48b65b2a:	9fc1      	lw	a2,4(a3)
48b65b2c:	b800      	lwu	s0,0(s0)
48b65b2e:	9fc3      	lw	a2,12(a3)
48b65b30:	e905      	break	8
48b65b32:	bfc1      	lwu	a2,4(a3)
48b65b34:	5800      	sltiu	s0,0
48b65b36:	9fc3      	lw	a2,12(a3)
48b65b38:	5a65      	sltiu	v0,101
48b65b3a:	482e      	addiu	s0,46
48b65b3c:	57fe      	slti	a3,254
48b65b3e:	9fc3      	lw	a2,12(a3)
48b65b40:	0000      	addiu	s0,sp,0
48b65b42:	0040      	addiu	s0,sp,256
48b65b44:	0000      	addiu	s0,sp,0
48b65b46:	0011      	addiu	s0,sp,68
48b65b48:	e90d      	or	s1,s0
48b65b4a:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_46:

48ba5800 <mdrc_comp_handle>:
48ba5800:	b513      	lw	a1,48ba584c <.LBE2+0x4>
48ba5802:	9d60      	lw	v1,0(a1)
48ba5804:	f160 a35d 	lbu	v0,381(v1)
48ba5808:	7201      	cmpi	v0,1
48ba580a:	611e      	btnez	48ba5848 <.LBE2>

48ba580c <.LBB2>:
48ba580c:	f040 83ca 	lb	a2,74(v1)
48ba5810:	5601      	slti	a2,1
48ba5812:	35c8      	sll	a1,a2,2
48ba5814:	6105      	btnez	48ba5820 <.LBB2+0x14>
48ba5816:	6f0f      	li	a3,15
48ba5818:	edfa      	div	zero,a1,a3
48ba581a:	eb12      	mflo	v1
48ba581c:	e471      	addu	a0,v1
48ba581e:	1005      	b	48ba582a <.LBB2+0x1e>
48ba5820:	ebab      	neg	v1,a1
48ba5822:	6f0f      	li	a3,15
48ba5824:	ebfa      	div	zero,v1,a3
48ba5826:	ea12      	mflo	v0
48ba5828:	e453      	subu	a0,v0
48ba582a:	6a0f      	li	v0,15
48ba582c:	ed5a      	div	zero,a1,v0
48ba582e:	ed12      	mflo	a1
48ba5830:	37b0      	sll	a3,a1,4
48ba5832:	e7ab      	subu	v0,a3,a1
48ba5834:	5200      	slti	v0,0
48ba5836:	6001      	bteqz	48ba583a <.LBB2+0x2e>
48ba5838:	4243      	addiu	v0,v0,3
48ba583a:	334b      	sra	v1,v0,2
48ba583c:	ebce      	xor	v1,a2
48ba583e:	2301      	beqz	v1,48ba5842 <.LBB2+0x36>
48ba5840:	4481      	addiu	a0,a0,1
48ba5842:	5cc0      	sltiu	a0,192
48ba5844:	6101      	btnez	48ba5848 <.LBE2>
48ba5846:	6cbf      	li	a0,191

48ba5848 <.LBE2>:
48ba5848:	e820      	jr	ra
48ba584a:	6744      	move	v0,a0
48ba584c:	999c      	lw	a0,112(s1)
48ba584e:	9fc1      	lw	a2,4(a3)
	...
Disassembly of section BANK_UI_1_47:

48be5800 <__calc_dae_freq>:
48be5800:	f120 a448 	lbu	v0,296(a0)
    }
}

uint8 __section__(".BANK47")__calc_dae_freq(dae_config_t *p_dae_cfg)
{
    uint8 dae_freq = 0;
    uint8 band_freq_flag = 0;
    engine_type_e engine_type;
    
#if (SUPPORT_MULTI_FREQ_MULTI_BAND == 1)
        if (p_dae_cfg->MultiFreqBandEnergy_enable == 1)
48be5804:	6d00      	li	a1,0
48be5806:	7201      	cmpi	v0,1
48be5808:	67c5      	move	a2,a1
48be580a:	610d      	btnez	48be5826 <__calc_dae_freq+0x26>
48be580c:	f120 9c6c 	lw	v1,300(a0)
        {
            if (band_freq_flag == 0)
            {
                dae_freq += 1; //频段能量计算基础频率
                band_freq_flag = 1;
            }
            dae_freq += (p_dae_cfg->dae_attributes->num_band*21)/10;
48be5810:	45c1      	addiu	a2,a1,1
48be5812:	a3e0      	lbu	a3,0(v1)
48be5814:	6d15      	li	a1,21
48be5816:	efb8      	mult	a3,a1
48be5818:	4df5      	addiu	a1,-11
48be581a:	ea12      	mflo	v0
48be581c:	eaba      	div	zero,v0,a1
48be581e:	eb12      	mflo	v1
48be5820:	43e1      	addiu	a3,v1,1
48be5822:	67a7      	move	a1,a3
48be5824:	ed11      	zeb	a1
48be5826:	f120 a449 	lbu	v0,297(a0)
        }
    
        if (p_dae_cfg->FreqSpetrumDisplay_enable == 1)
48be582a:	7201      	cmpi	v0,1
48be582c:	6110      	btnez	48be584e <__calc_dae_freq+0x4e>
48be582e:	2e03      	bnez	a2,48be5836 <__calc_dae_freq+0x36>
        {
            if (band_freq_flag == 0)
48be5830:	45c1      	addiu	a2,a1,1
            {
                dae_freq += 1; //频点能量计算基础频率
48be5832:	67a6      	move	a1,a2
48be5834:	ed11      	zeb	a1
48be5836:	f120 9c4c 	lw	v0,300(a0)
                band_freq_flag = 1;
            }
            dae_freq += p_dae_cfg->dae_attributes->num_freq_point*6/10;
48be583a:	6f06      	li	a3,6
48be583c:	a261      	lbu	v1,1(v0)
48be583e:	4744      	addiu	v0,a3,4
48be5840:	ebf8      	mult	v1,a3
48be5842:	ee12      	mflo	a2
48be5844:	ee5a      	div	zero,a2,v0
48be5846:	eb12      	mflo	v1
48be5848:	e57d      	addu	a3,a1,v1
48be584a:	67a7      	move	a1,a3
48be584c:	ed11      	zeb	a1
48be584e:	a4d1      	lbu	a2,17(a0)
        }
#endif
    if(1 == p_dae_cfg->noise_reduction_enable) 
48be5850:	7601      	cmpi	a2,1
48be5852:	6103      	btnez	48be585a <__calc_dae_freq+0x5a>
48be5854:	45e5      	addiu	a3,a1,5
    {
         dae_freq += 5;
48be5856:	67a7      	move	a1,a3
48be5858:	ed11      	zeb	a1
48be585a:	a440      	lbu	v0,0(a0)
    }
        
    if (p_dae_cfg->enable == FALSE)
48be585c:	2a02      	bnez	v0,48be5862 <__calc_dae_freq+0x62>
48be585e:	e820      	jr	ra
    {
        p_dae_cfg->run_freq = 0;
        return 0;
48be5860:	c454      	sb	v0,20(a0)
48be5862:	a461      	lbu	v1,1(a0)
    }

    if (p_dae_cfg->bypass == TRUE)
48be5864:	7301      	cmpi	v1,1
48be5866:	6103      	btnez	48be586e <.LBB5>
48be5868:	6a00      	li	v0,0
    {
        p_dae_cfg->run_freq = dae_freq;
        return 0;
48be586a:	e820      	jr	ra
48be586c:	c4b4      	sb	a1,20(a0)

48be586e <.LBB5>:
48be586e:	b234      	lw	v0,48be593c <.LBE7+0x88>

48be5870 <.LBE5>:
48be5870:	45c2      	addiu	a2,a1,2
    }

    dae_freq += 2; //DAE基本频率
48be5872:	a2a0      	lbu	a1,0(v0)
48be5874:	6766      	move	v1,a2
48be5876:	7504      	cmpi	a1,4

    //避免小米手机蓝牙推歌场景下，在小音量下进行音量调节，性能不足问题
    engine_type = get_engine_type();
    if (engine_type == ENGINE_BTPLAY)
48be5878:	eb11      	zeb	v1
48be587a:	6104      	btnez	48be5884 <.LBE5+0x14>
48be587c:	67e3      	move	a3,v1
    {
        dae_freq += 9;
48be587e:	4f09      	addiu	a3,9
48be5880:	6767      	move	v1,a3
48be5882:	eb11      	zeb	v1
48be5884:	a4a9      	lbu	a1,9(a0)
    }

    if (p_dae_cfg->peq_enable == 1)
48be5886:	7501      	cmpi	a1,1
48be5888:	6115      	btnez	48be58b4 <.LBE7>

48be588a <.LBB7>:
48be588a:	4342      	addiu	v0,v1,2
    {
        uint8 peq_band_cnt, i;

        dae_freq += 2;
48be588c:	67c2      	move	a2,v0
48be588e:	6d00      	li	a1,0

        peq_band_cnt = 0;
48be5890:	ee11      	zeb	a2
48be5892:	6765      	move	v1,a1
        for (i = 0; i < MAX_PEQ_SEG; i++)
48be5894:	376c      	sll	a3,v1,3
        {
            if (p_dae_cfg->peq_bands[i].gain != 0)
48be5896:	e789      	addu	v0,a3,a0
48be5898:	8aed      	lh	a3,26(v0)
48be589a:	2703      	beqz	a3,48be58a2 <.LBB7+0x18>
48be589c:	4541      	addiu	v0,a1,1
            {
                peq_band_cnt++;
48be589e:	67a2      	move	a1,v0
48be58a0:	ed11      	zeb	a1
48be58a2:	43e1      	addiu	a3,v1,1
48be58a4:	6767      	move	v1,a3
48be58a6:	eb11      	zeb	v1
48be58a8:	5b14      	sltiu	v1,20
48be58aa:	61f4      	btnez	48be5894 <.LBB7+0xa>
48be58ac:	33a6      	srl	v1,a1,1
            }
        }

        dae_freq += (uint8) (((uint16) peq_band_cnt*5)/10);
48be58ae:	e675      	addu	a1,a2,v1
48be58b0:	6765      	move	v1,a1
48be58b2:	eb11      	zeb	v1

48be58b4 <.LBE7>:
48be58b4:	a4ca      	lbu	a2,10(a0)
    }

    if (p_dae_cfg->spk_compensation_enable == 1)
48be58b6:	7601      	cmpi	a2,1
48be58b8:	6104      	btnez	48be58c2 <.LBE7+0xe>
48be58ba:	6743      	move	v0,v1
    {
        dae_freq += 27;
48be58bc:	4a1b      	addiu	v0,27
48be58be:	6762      	move	v1,v0
48be58c0:	eb11      	zeb	v1
48be58c2:	a4eb      	lbu	a3,11(a0)
    }

    //VBASS
    if (p_dae_cfg->vbass_enable == 1)
48be58c4:	7701      	cmpi	a3,1
48be58c6:	6104      	btnez	48be58d0 <.LBE7+0x1c>
48be58c8:	67a3      	move	a1,v1
    {
        dae_freq += 12;            
48be58ca:	4d0c      	addiu	a1,12
48be58cc:	6765      	move	v1,a1
48be58ce:	eb11      	zeb	v1
48be58d0:	a4cd      	lbu	a2,13(a0)
    }

    //TREBLE
    if (p_dae_cfg->treble_enhance_enable == 1)
48be58d2:	7601      	cmpi	a2,1
48be58d4:	6103      	btnez	48be58dc <.LBE7+0x28>
48be58d6:	4342      	addiu	v0,v1,2
    {
        dae_freq += 2;
48be58d8:	6762      	move	v1,v0
48be58da:	eb11      	zeb	v1
48be58dc:	a4ec      	lbu	a3,12(a0)
    }

    //VSURROUND
    if (p_dae_cfg->vsurround_enable == 1)
48be58de:	7701      	cmpi	a3,1
48be58e0:	6104      	btnez	48be58ea <.LBE7+0x36>
48be58e2:	67a3      	move	a1,v1
    {
        dae_freq += 17;
48be58e4:	4d11      	addiu	a1,17
48be58e6:	6765      	move	v1,a1
48be58e8:	eb11      	zeb	v1
48be58ea:	f120 a4b3 	lbu	a1,307(a0)
    }
    if (SMART_MODE == p_dae_cfg->audiopp_type)
48be58ee:	2d08      	bnez	a1,48be5900 <.LBE7+0x4c>
48be58f0:	a4ce      	lbu	a2,14(a0)
    {
        //MDRC
        if (p_dae_cfg->mdrc_enable == 1)
48be58f2:	7601      	cmpi	a2,1
48be58f4:	6110      	btnez	48be5916 <.LBE7+0x62>
48be58f6:	6743      	move	v0,v1
        {
            dae_freq += 43;
48be58f8:	4a2b      	addiu	v0,43
48be58fa:	6762      	move	v1,v0
48be58fc:	eb11      	zeb	v1
48be58fe:	100b      	b	48be5916 <.LBE7+0x62>
48be5900:	7501      	cmpi	a1,1
        }
    }
    else if (STANDARD_MODE == p_dae_cfg->audiopp_type)
48be5902:	6108      	btnez	48be5914 <.LBE7+0x60>
48be5904:	f120 a4f1 	lbu	a3,305(a0)
    {
         //MDRC增强
        if (p_dae_cfg->mdrc_enable_standard_mode == 1)
48be5908:	7701      	cmpi	a3,1
48be590a:	6104      	btnez	48be5914 <.LBE7+0x60>
48be590c:	67c3      	move	a2,v1
        {
            dae_freq += 57;
48be590e:	4e39      	addiu	a2,57
48be5910:	6766      	move	v1,a2
48be5912:	eb11      	zeb	v1
48be5914:	2d05      	bnez	a1,48be5920 <.LBE7+0x6c>
        }
    }

    if (SMART_MODE == p_dae_cfg->audiopp_type)
48be5916:	a4af      	lbu	a1,15(a0)
    {
        //LIMITER
        if (p_dae_cfg->limiter_enable == 1)
48be5918:	4346      	addiu	v0,v1,6
        {
            dae_freq += 6;
48be591a:	7501      	cmpi	a1,1
48be591c:	6009      	bteqz	48be5930 <.LBE7+0x7c>
48be591e:	100a      	b	48be5934 <.LBE7+0x80>
48be5920:	7501      	cmpi	a1,1
        }
    }
    else if (STANDARD_MODE == p_dae_cfg->audiopp_type)
48be5922:	6108      	btnez	48be5934 <.LBE7+0x80>
48be5924:	f120 a450 	lbu	v0,304(a0)
    {
         //compressor
        if (p_dae_cfg->compressor_enable_standard_mode == 1)
48be5928:	7201      	cmpi	v0,1
48be592a:	6104      	btnez	48be5934 <.LBE7+0x80>
48be592c:	6743      	move	v0,v1
        {
            dae_freq += 10;
48be592e:	4a0a      	addiu	v0,10
48be5930:	6762      	move	v1,v0
48be5932:	eb11      	zeb	v1
48be5934:	6743      	move	v0,v1
        }
    }

    p_dae_cfg->run_freq = dae_freq;

    return dae_freq;
48be5936:	e820      	jr	ra
}
48be5938:	c474      	sb	v1,20(a0)
48be593a:	0000      	addiu	s0,sp,0
48be593c:	a094      	lbu	a0,20(s0)
48be593e:	9fc1      	lw	a2,4(a3)

48be5940 <update_dae_vol_table>:
48be5940:	64fb      	save	88,ra,s0-s1

//DAE 音量系数表更新
uint32 __section__(".BANK47") update_dae_vol_table(void)
{
48be5942:	b13b      	lw	s1,48be5a2c <update_dae_vol_table+0xec>
    vol_dae_para_temp_standard_mode_t vol_dae_para_temp_standard_mode;
    uint16 index = 0;
    uint16 tab_index = 0;
    dae_compressor_temp_standard_mode_t    compressor_temp_standard_mode;
    
    if (1 == sys_comval->aux_flag)
48be5944:	6800      	li	s0,0
48be5946:	9960      	lw	v1,0(s1)
48be5948:	050c      	addiu	a1,sp,48
48be594a:	f020 a35f 	lbu	v0,63(v1)
48be594e:	7201      	cmpi	v0,1
48be5950:	6116      	btnez	48be597e <update_dae_vol_table+0x3e>
48be5952:	b338      	lw	v1,48be5a30 <update_dae_vol_table+0xf0>
    {
        //设置压缩器(AUX)模式下参数
        com_get_config_struct((uint16) (DAE_COMPRESSOR_AUX_SETTING), (uint8 *)&compressor_temp_standard_mode ,  \
48be5954:	f200 6c0b 	li	a0,523
48be5958:	eb40      	jalr	v1
48be595a:	6e12      	li	a2,18
48be595c:	9980      	lw	a0,0(s1)
        sizeof(dae_compressor_temp_standard_mode_t));
        libc_memcpy(&(sys_comval->dae_cfg.compressor_standard_mode), &compressor_temp_standard_mode.compressor,      \
48be595e:	67f0      	move	a3,s0
48be5960:	b035      	lw	s0,48be5a34 <update_dae_vol_table+0xf4>
48be5962:	f180 4c06 	addiu	a0,390
48be5966:	050d      	addiu	a1,sp,52
48be5968:	e840      	jalr	s0
48be596a:	6e0e      	li	a2,14
48be596c:	99e0      	lw	a3,0(s1)
        sizeof(dae_compressor_standard_mode_t));

        index = (31 - sys_comval->volume_current) + VOL_31_DAE_AUX;
48be596e:	f220 6d17 	li	a1,567
48be5972:	a7db      	lbu	a2,27(a3)
48be5974:	e5d3      	subu	a0,a1,a2
48be5976:	6704      	move	s0,a0
48be5978:	e831      	zeh	s0
48be597a:	0c25      	la	a0,48be5a0c <update_dae_vol_table+0xcc>
        PRINT_INFO_INT("index_aux",index);
48be597c:	1014      	b	48be59a6 <update_dae_vol_table+0x66>
48be597e:	b32d      	lw	v1,48be5a30 <update_dae_vol_table+0xf0>
        
        com_get_config_struct(index , (uint8 *)&vol_dae_para_temp_standard_mode ,  \
        sizeof(vol_dae_para_temp_standard_mode_t));
    
        sys_comval->dae_cfg.precut_standard_mode                = vol_dae_para_temp_standard_mode.vol_dae_para_sm.precut_standard_mode;
        sys_comval->dae_cfg.compressor_standard_mode.threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compressor_th1;
        sys_comval->dae_cfg.compressor_standard_mode.threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compressor_th2;

        sys_comval->dae_cfg.mdrc_extend_para_standard_mode.signal_adjust        = vol_dae_para_temp_standard_mode.vol_dae_para_sm.signal_fine_tune;
        sys_comval->mdrc_vol_adjust_standard_mode                               = vol_dae_para_temp_standard_mode.vol_dae_para_sm.vol_fine_tune;
        sys_comval->dae_cfg.mdrc_extend_para_standard_mode.makeup_gain          = vol_dae_para_temp_standard_mode.vol_dae_para_sm.gain_compensation;
        sys_comval->dae_cfg.mdrc_peak_standard_mode.MDRC_compensation_threshold = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compensation_filter_threshold;
                                     
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[0].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_low_freq_th1;
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[0].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_low_freq_th2;
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[1].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_middle_freq_th1;
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[1].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_middle_freq_th2;
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[2].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_high_freq_th1;
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[2].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_high_freq_th2;
    }
    else
    {
        //设置压缩器(非AUX)模式下参数
        com_get_config_struct((uint16) (DAE_COMPRESSOR_SETTING), (uint8 *)&compressor_temp_standard_mode ,  \
48be5980:	f200 6c0c 	li	a0,524
48be5984:	eb40      	jalr	v1
48be5986:	6e12      	li	a2,18
48be5988:	9980      	lw	a0,0(s1)
        sizeof(dae_compressor_temp_standard_mode_t));
        libc_memcpy(&(sys_comval->dae_cfg.compressor_standard_mode), &compressor_temp_standard_mode.compressor,      \
48be598a:	67f0      	move	a3,s0
48be598c:	b02a      	lw	s0,48be5a34 <update_dae_vol_table+0xf4>
48be598e:	f180 4c06 	addiu	a0,390
48be5992:	050d      	addiu	a1,sp,52
48be5994:	e840      	jalr	s0
48be5996:	6e0e      	li	a2,14
48be5998:	99a0      	lw	a1,0(s1)
        sizeof(dae_compressor_standard_mode_t));

        index = (31 - sys_comval->volume_current) + VOL_31_DAE;
48be599a:	f240 6c17 	li	a0,599
48be599e:	a55b      	lbu	v0,27(a1)
48be59a0:	e443      	subu	s0,a0,v0
48be59a2:	e831      	zeh	s0
48be59a4:	0c1e      	la	a0,48be5a1c <update_dae_vol_table+0xdc>
        PRINT_INFO_INT("index_unaux",index);
48be59a6:	b225      	lw	v0,48be5a38 <update_dae_vol_table+0xf8>
48be59a8:	67b0      	move	a1,s0
48be59aa:	6f4b      	li	a3,75
48be59ac:	ea40      	jalr	v0
48be59ae:	6e02      	li	a2,2
48be59b0:	b320      	lw	v1,48be5a30 <update_dae_vol_table+0xf0>
        
        com_get_config_struct(index , (uint8 *)&vol_dae_para_temp_standard_mode ,  \
48be59b2:	6790      	move	a0,s0
48be59b4:	0504      	addiu	a1,sp,16
48be59b6:	eb40      	jalr	v1
48be59b8:	6e1e      	li	a2,30
48be59ba:	679d      	move	a0,sp
        sizeof(vol_dae_para_temp_standard_mode_t));
    
        sys_comval->dae_cfg.precut_standard_mode                = vol_dae_para_temp_standard_mode.vol_dae_para_sm.precut_standard_mode;
48be59bc:	ac4a      	lhu	v0,20(a0)
48be59be:	99a0      	lw	a1,0(s1)
48be59c0:	f180 c540 	sb	v0,384(a1)
48be59c4:	aceb      	lhu	a3,22(a0)
        sys_comval->dae_cfg.compressor_standard_mode.threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compressor_th1;
48be59c6:	99a0      	lw	a1,0(s1)
48be59c8:	f180 cde6 	sh	a3,390(a1)
48be59cc:	accc      	lhu	a2,24(a0)
        sys_comval->dae_cfg.compressor_standard_mode.threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compressor_th2;
48be59ce:	f180 cdca 	sh	a2,394(a1)
48be59d2:	ac6d      	lhu	v1,26(a0)

        sys_comval->dae_cfg.mdrc_extend_para_standard_mode.signal_adjust        = vol_dae_para_temp_standard_mode.vol_dae_para_sm.signal_fine_tune;
48be59d4:	f180 cd74 	sh	v1,404(a1)
48be59d8:	ac4e      	lhu	v0,28(a0)
        sys_comval->mdrc_vol_adjust_standard_mode                                             = vol_dae_para_temp_standard_mode.vol_dae_para_sm.vol_fine_tune;
48be59da:	f040 c54a 	sb	v0,74(a1)
48be59de:	acef      	lhu	a3,30(a0)
        sys_comval->dae_cfg.mdrc_extend_para_standard_mode.makeup_gain          = vol_dae_para_temp_standard_mode.vol_dae_para_sm.gain_compensation;
48be59e0:	9960      	lw	v1,0(s1)
48be59e2:	f180 cbfa 	sh	a3,410(v1)
48be59e6:	acd0      	lhu	a2,32(a0)
        sys_comval->dae_cfg.mdrc_peak_standard_mode.MDRC_compensation_threshold = vol_dae_para_temp_standard_mode.vol_dae_para_sm.compensation_filter_threshold;
48be59e8:	f180 cbdc 	sh	a2,412(v1)
48be59ec:	acb1      	lhu	a1,34(a0)
                                     
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[0].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_low_freq_th1;
48be59ee:	f1a0 9bc4 	lw	a2,420(v1)
48be59f2:	cea0      	sh	a1,0(a2)
48be59f4:	ac52      	lhu	v0,36(a0)
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[0].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_low_freq_th2;
48be59f6:	ce42      	sh	v0,4(a2)
48be59f8:	acf3      	lhu	a3,38(a0)
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[1].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_middle_freq_th1;
48be59fa:	cee8      	sh	a3,16(a2)
48be59fc:	acb4      	lhu	a1,40(a0)
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[1].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_middle_freq_th2;
48be59fe:	ceaa      	sh	a1,20(a2)
48be5a00:	ac55      	lhu	v0,42(a0)
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[2].threshold1 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_high_freq_th1;
48be5a02:	ce50      	sh	v0,32(a2)
48be5a04:	acf6      	lhu	a3,44(a0)
        sys_comval->dae_cfg.p_mdrc_band_standard_mode[2].threshold2 = vol_dae_para_temp_standard_mode.vol_dae_para_sm.mdrc_high_freq_th2;
48be5a06:	cef2      	sh	a3,36(a2)
48be5a08:	647b      	restore	88,ra,s0-s1
    }
}
48be5a0a:	e8a0      	jrc	ra
48be5a0c:	493c      	addiu	s1,60
48be5a0e:	203e      	beqz	s0,48be5a8c <.LBE2+0x18>
48be5a10:	6e69      	li	a2,105
48be5a12:	6564      	move	v1,a0
48be5a14:	5f78      	sltiu	a3,120
48be5a16:	7561      	cmpi	a1,97
48be5a18:	0078      	addiu	s0,sp,480
48be5a1a:	0000      	addiu	s0,sp,0
48be5a1c:	493c      	addiu	s1,60
48be5a1e:	203e      	beqz	s0,48be5a9c <.LBE2+0x28>
48be5a20:	6e69      	li	a2,105
48be5a22:	6564      	move	v1,a0
48be5a24:	5f78      	sltiu	a3,120
48be5a26:	6e75      	li	a2,117
48be5a28:	7561      	cmpi	a1,97
48be5a2a:	0078      	addiu	s0,sp,480
48be5a2c:	999c      	lw	a0,112(s1)
48be5a2e:	9fc1      	lw	a2,4(a3)
48be5a30:	5a55      	sltiu	v0,85
48be5a32:	4846      	addiu	s0,70
48be5a34:	e905      	break	8
48be5a36:	bfc1      	lwu	a2,4(a3)
48be5a38:	e901      	sdbbp	8
48be5a3a:	bfc1      	lwu	a2,4(a3)

48be5a3c <com_get_sound_volume>:
48be5a3c:	b302      	lw	v1,48be5a44 <com_get_sound_volume+0x8>
 * \note
 *******************************************************************************/
uint8 com_get_sound_volume(void)
{
    return sys_comval->volume_current;
48be5a3e:	9b40      	lw	v0,0(v1)
48be5a40:	e820      	jr	ra
}
48be5a42:	a25b      	lbu	v0,27(v0)
48be5a44:	999c      	lw	a0,112(s1)
48be5a46:	9fc1      	lw	a2,4(a3)

48be5a48 <com_set_sound_volume>:
48be5a48:	64f4      	save	32,ra,s0-s1

/******************************************************************************/
/*!
 * \par  Description:
 *    重置当前声音音量。
 * \param[in]    none
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 重置音量成功
 * \retval           FALSE 重置音量失败
 * \note
 *******************************************************************************/
bool com_reset_sound_volume(uint8 set_mode)
{
    sys_comval->volume_current_phy = 0xff;

    return com_set_sound_volume(sys_comval->volume_current, set_mode);
}

/******************************************************************************/
/*!
 * \par  Description:
 *    设置声音音量。
 * \param[in]    set_vol 设置音量值
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 设置音量成功
 * \retval           FALSE 设置音量失败
 * \note
 *******************************************************************************/
bool com_set_sound_volume(uint8 set_vol, uint8 set_mode)
{
48be5a4a:	b224      	lw	v0,48be5ad8 <.LBE2+0x64>
    bool bret = TRUE;

    sys_comval->volume_current = set_vol;
48be5a4c:	6704      	move	s0,a0
48be5a4e:	9a60      	lw	v1,0(v0)
48be5a50:	e811      	zeb	s0
48be5a52:	c31b      	sb	s0,27(v1)
48be5a54:	9a60      	lw	v1,0(v0)
#pragma __PRQA_IGNORE_START__
    if (sys_comval->volume_mode >= VOLUME_MODE_MAX)
48be5a56:	6725      	move	s1,a1
48be5a58:	a35d      	lbu	v0,29(v1)
48be5a5a:	e911      	zeb	s1
48be5a5c:	5a02      	sltiu	v0,2
48be5a5e:	6107      	btnez	48be5a6e <com_set_sound_volume+0x26>
48be5a60:	6d00      	li	a1,0
    {
        PRINT_WARNING("Invalid volume mode!");
48be5a62:	b21f      	lw	v0,48be5adc <.LBE2+0x68>
48be5a64:	0c16      	la	a0,48be5abc <.LBE2+0x48>
48be5a66:	67c5      	move	a2,a1
48be5a68:	ea40      	jalr	v0
48be5a6a:	6f4b      	li	a3,75
48be5a6c:	1002      	b	48be5a72 <.LBB2>
48be5a6e:	e271      	addu	a0,v0,v1
    }
    else
    {
        sys_comval->volume[sys_comval->volume_mode] = set_vol;
48be5a70:	c41e      	sb	s0,30(a0)

48be5a72 <.LBB2>:
48be5a72:	b61c      	lw	a2,48be5ae0 <.LBE2+0x6c>

48be5a74 <.LBE2>:
48be5a74:	a6a0      	lbu	a1,0(a2)
48be5a76:	2d1f      	bnez	a1,48be5ab6 <.LBE2+0x42>
48be5a78:	b31b      	lw	v1,48be5ae4 <.LBE2+0x70>
    }
#pragma __PRQA_IGNORE_END__

    if (get_mute_enable() == FALSE)
    {


        if ((g_app_info_vector[APP_TYPE_BTSTACK].used == 1)
48be5a7a:	a3ec      	lbu	a3,12(v1)
48be5a7c:	7701      	cmpi	a3,1
48be5a7e:	6114      	btnez	48be5aa8 <.LBE2+0x34>
48be5a80:	6a01      	li	v0,1
48be5a82:	ea2c      	and	v0,s1
48be5a84:	2211      	beqz	v0,48be5aa8 <.LBE2+0x34>
48be5a86:	b619      	lw	a2,48be5ae8 <.LBE2+0x74>
                && ((set_mode & SET_VOLUME_SYNC_TO_REMOTE) != 0))
        {
#ifndef ENABLE_TRUE_WIRELESS_STEREO
            if (g_this_app_info->app_id == APP_ID_BTPLAY)
#else
            if ((g_this_app_info->app_id == APP_ID_BTPLAY)
48be5a88:	9ea0      	lw	a1,0(a2)
48be5a8a:	a561      	lbu	v1,1(a1)
48be5a8c:	438f      	addiu	a0,v1,-1
48be5a8e:	ec11      	zeb	a0
48be5a90:	5c02      	sltiu	a0,2
48be5a92:	6003      	bteqz	48be5a9a <.LBE2+0x26>
48be5a94:	b216      	lw	v0,48be5aec <.LBE2+0x78>
            	  ||(g_this_app_info->app_id == APP_ID_LINEIN))
#endif            	
            {
                com_btmanager_avrcp_update_volume_to_phone(set_vol);
48be5a96:	6790      	move	a0,s0
48be5a98:	1006      	b	48be5aa6 <.LBE2+0x32>
48be5a9a:	67e3      	move	a3,v1
            }
            else if (g_this_app_info->app_id == APP_ID_BTCALL)
48be5a9c:	ef11      	zeb	a3
48be5a9e:	7703      	cmpi	a3,3
48be5aa0:	6103      	btnez	48be5aa8 <.LBE2+0x34>
48be5aa2:	b214      	lw	v0,48be5af0 <.LBE2+0x7c>
            {
                com_btmanager_hfp_update_volume_to_phone(set_vol);
48be5aa4:	6790      	move	a0,s0
48be5aa6:	eac0      	jalrc	v0
48be5aa8:	b20e      	lw	v0,48be5adc <.LBE2+0x68>
            }
            else
            {
                ; //nothing for QAC
            }
        }
        if (g_app_info_state.inner_pa_inited == TRUE)
48be5aaa:	a270      	lbu	v1,16(v0)
48be5aac:	7301      	cmpi	v1,1
48be5aae:	6103      	btnez	48be5ab6 <.LBE2+0x42>
48be5ab0:	b311      	lw	v1,48be5af4 <.LBE2+0x80>
        {
            com_set_phy_volume(set_vol);
48be5ab2:	eb40      	jalr	v1
48be5ab4:	6790      	move	a0,s0
48be5ab6:	6a01      	li	v0,1
        }       
    }

    return bret;
}
48be5ab8:	6474      	restore	32,ra,s0-s1
48be5aba:	e8a0      	jrc	ra
48be5abc:	573c      	slti	a3,60
48be5abe:	203e      	beqz	s0,48be5b3c <com_switch_volume_mode+0x20>
48be5ac0:	6e49      	li	a2,73
48be5ac2:	6176      	btnez	48be5bb0 <com_set_volume_gain+0x40>
48be5ac4:	696c      	li	s1,108
48be5ac6:	2064      	beqz	s0,48be5b90 <com_set_volume_gain+0x20>
48be5ac8:	6f76      	li	a3,118
48be5aca:	756c      	cmpi	a1,108
48be5acc:	656d      	move	t3,a1
48be5ace:	6d20      	li	a1,32
48be5ad0:	646f      	restore	120,ra,s0
48be5ad2:	2165      	beqz	s1,48be5b9e <com_set_volume_gain+0x2e>
48be5ad4:	0000      	addiu	s0,sp,0
48be5ad6:	0000      	addiu	s0,sp,0
48be5ad8:	999c      	lw	a0,112(s1)
48be5ada:	9fc1      	lw	a2,4(a3)
48be5adc:	e901      	sdbbp	8
48be5ade:	bfc1      	lwu	a2,4(a3)
48be5ae0:	a0c0      	lbu	a2,0(s0)
48be5ae2:	9fc1      	lw	a2,4(a3)
48be5ae4:	a080      	lbu	a0,0(s0)
48be5ae6:	9fc1      	lw	a2,4(a3)
48be5ae8:	9990      	lw	a0,64(s1)
48be5aea:	9fc1      	lw	a2,4(a3)
48be5aec:	597d      	sltiu	s1,125
48be5aee:	4886      	addiu	s0,-122
48be5af0:	5b9d      	sltiu	v1,157
48be5af2:	4886      	addiu	s0,-122
48be5af4:	5855      	sltiu	s0,85
48be5af6:	4836      	addiu	s0,54

48be5af8 <com_reset_sound_volume>:
48be5af8:	64c3      	save	24,ra
48be5afa:	67a4      	move	a1,a0
48be5afc:	b406      	lw	a0,48be5b14 <com_reset_sound_volume+0x1c>
48be5afe:	6f01      	li	a3,1
48be5b00:	efeb      	neg	a3
48be5b02:	9cc0      	lw	a2,0(a0)
48be5b04:	b205      	lw	v0,48be5b18 <com_reset_sound_volume+0x20>
48be5b06:	c6fc      	sb	a3,28(a2)
48be5b08:	9c60      	lw	v1,0(a0)
48be5b0a:	ed11      	zeb	a1
48be5b0c:	ea40      	jalr	v0
48be5b0e:	a39b      	lbu	a0,27(v1)
48be5b10:	6443      	restore	24,ra
48be5b12:	e8a0      	jrc	ra
48be5b14:	999c      	lw	a0,112(s1)
48be5b16:	9fc1      	lw	a2,4(a3)
48be5b18:	5a49      	sltiu	v0,73
48be5b1a:	48be      	addiu	s0,-66

48be5b1c <com_switch_volume_mode>:
48be5b1c:	64c3      	save	24,ra

//切换音量模式
void com_switch_volume_mode(volume_mode_e mode)
{
48be5b1e:	67a4      	move	a1,a0
48be5b20:	ed11      	zeb	a1
48be5b22:	5d02      	sltiu	a1,2
    if (mode >= VOLUME_MODE_MAX)
48be5b24:	6107      	btnez	48be5b34 <com_switch_volume_mode+0x18>
48be5b26:	6d00      	li	a1,0
    {
        PRINT_WARNING("invalid volume mode!!");
48be5b28:	b210      	lw	v0,48be5b68 <com_switch_volume_mode+0x4c>
48be5b2a:	0c09      	la	a0,48be5b4c <com_switch_volume_mode+0x30>
48be5b2c:	67c5      	move	a2,a1
48be5b2e:	ea40      	jalr	v0
48be5b30:	6f4b      	li	a3,75
48be5b32:	100a      	b	48be5b48 <com_switch_volume_mode+0x2c>
        return;
48be5b34:	b70e      	lw	a3,48be5b6c <com_switch_volume_mode+0x50>
    }

    sys_comval->volume_current_phy = 0xff;
48be5b36:	6a01      	li	v0,1
48be5b38:	ea4b      	neg	v0
48be5b3a:	9fc0      	lw	a2,0(a3)
48be5b3c:	c65c      	sb	v0,28(a2)
48be5b3e:	9fc0      	lw	a2,0(a3)
    sys_comval->volume_mode = mode;
48be5b40:	e5d1      	addu	a0,a1,a2
    sys_comval->volume_current = sys_comval->volume[mode];
48be5b42:	a47e      	lbu	v1,30(a0)
48be5b44:	c6bd      	sb	a1,29(a2)
48be5b46:	c67b      	sb	v1,27(a2)
48be5b48:	6443      	restore	24,ra
}
48be5b4a:	e8a0      	jrc	ra
48be5b4c:	573c      	slti	a3,60
48be5b4e:	203e      	beqz	s0,48be5bcc <com_set_mute+0x14>
48be5b50:	6e69      	li	a2,105
48be5b52:	6176      	btnez	48be5c40 <.LBE7+0x32>
48be5b54:	696c      	li	s1,108
48be5b56:	2064      	beqz	s0,48be5c20 <.LBE7+0x12>
48be5b58:	6f76      	li	a3,118
48be5b5a:	756c      	cmpi	a1,108
48be5b5c:	656d      	move	t3,a1
48be5b5e:	6d20      	li	a1,32
48be5b60:	646f      	restore	120,ra,s0
48be5b62:	2165      	beqz	s1,48be5c2e <.LBE7+0x20>
48be5b64:	0021      	addiu	s0,sp,132
48be5b66:	0000      	addiu	s0,sp,0
48be5b68:	e901      	sdbbp	8
48be5b6a:	bfc1      	lwu	a2,4(a3)
48be5b6c:	999c      	lw	a0,112(s1)
48be5b6e:	9fc1      	lw	a2,4(a3)

48be5b70 <com_set_volume_gain>:
48be5b70:	64c3      	save	24,ra

//设置音量负增益（衰减）
void com_set_volume_gain(uint8 gain)
{
48be5b72:	ec11      	zeb	a0
48be5b74:	5c0a      	sltiu	a0,10
    if (gain > VOLUME_TABLE_MAX)
48be5b76:	6107      	btnez	48be5b86 <com_set_volume_gain+0x16>
48be5b78:	6d00      	li	a1,0
    {
        PRINT_WARNING("Invalid volume gain!!");
48be5b7a:	b20e      	lw	v0,48be5bb0 <com_set_volume_gain+0x40>
48be5b7c:	0c06      	la	a0,48be5b94 <com_set_volume_gain+0x24>
48be5b7e:	67c5      	move	a2,a1
48be5b80:	ea40      	jalr	v0
48be5b82:	6f4b      	li	a3,75
48be5b84:	6c09      	li	a0,9
        gain = VOLUME_TABLE_MAX;
48be5b86:	b50c      	lw	a1,48be5bb4 <com_set_volume_gain+0x44>
    }

    sys_comval->volume_gain = gain;
48be5b88:	9d60      	lw	v1,0(a1)
48be5b8a:	f020 c380 	sb	a0,32(v1)
48be5b8e:	6443      	restore	24,ra
48be5b90:	e8a0      	jrc	ra
48be5b92:	0000      	addiu	s0,sp,0
48be5b94:	573c      	slti	a3,60
48be5b96:	203e      	beqz	s0,48be5c14 <.LBE7+0x6>
48be5b98:	6e49      	li	a2,73
48be5b9a:	6176      	btnez	48be5c88 <.LBE7+0x7a>
48be5b9c:	696c      	li	s1,108
48be5b9e:	2064      	beqz	s0,48be5c68 <.LBE7+0x5a>
48be5ba0:	6f76      	li	a3,118
48be5ba2:	756c      	cmpi	a1,108
48be5ba4:	656d      	move	t3,a1
48be5ba6:	6720      	move	s1,zero
48be5ba8:	6961      	li	s1,97
48be5baa:	216e      	beqz	s1,48be5c88 <.LBE7+0x7a>
48be5bac:	0021      	addiu	s0,sp,132
48be5bae:	0000      	addiu	s0,sp,0
48be5bb0:	e901      	sdbbp	8
48be5bb2:	bfc1      	lwu	a2,4(a3)
48be5bb4:	999c      	lw	a0,112(s1)
48be5bb6:	9fc1      	lw	a2,4(a3)

48be5bb8 <com_set_mute>:
48be5bb8:	64f4      	save	32,ra,s0-s1
}

/******************************************************************************/
/*!
 * \par  Description:
 *    启动或关闭静音。
 * \param[in]    mute TRUE表示静音，FALSE表示释放静音
 * \param[out]   none
 * \return       bool
 * \retval           TRUE 设置静音成功。
 * \retval           FALSE 设置静音失败。
 * \ingroup      common_func
 * \note
 *******************************************************************************/
bool com_set_mute(bool mute)
{
48be5bba:	b50f      	lw	a1,48be5bf4 <.LBE6+0xc>
    sys_comval->volume_current_phy = 0xff;
48be5bbc:	ec11      	zeb	a0
48be5bbe:	9d60      	lw	v1,0(a1)
48be5bc0:	6a01      	li	v0,1
48be5bc2:	ea4b      	neg	v0
48be5bc4:	7401      	cmpi	a0,1

    if (mute == TRUE)
48be5bc6:	c35c      	sb	v0,28(v1)
48be5bc8:	b10c      	lw	s1,48be5bf8 <.LBE6+0x10>
48be5bca:	610a      	btnez	48be5be0 <.LBE4+0x2>
48be5bcc:	a100      	lbu	s0,0(s1)
48be5bce:	280f      	bnez	s0,48be5bee <.LBE6+0x6>
48be5bd0:	b20b      	lw	v0,48be5bfc <.LBE6+0x14>
    {
        if (get_mute_enable() == FALSE) //当前为非静音状态
        {
            //等待按键音结束，这样才能完整听到按键音
            keytone_play_deal_wait();
48be5bd2:	eac0      	jalrc	v0
48be5bd4:	b30b      	lw	v1,48be5bfc <.LBE6+0x14>
            //设置PA音量为0，置为静音状态
            com_set_phy_volume(0); //直接调用 com_set_phy_volume 设置，以防止修改了 volume_current
48be5bd6:	eb40      	jalr	v1
48be5bd8:	6790      	move	a0,s0

48be5bda <.LBB4>:
48be5bda:	6c01      	li	a0,1
48be5bdc:	c180      	sb	a0,0(s1)

48be5bde <.LBE4>:
48be5bde:	1007      	b	48be5bee <.LBE6+0x6>
48be5be0:	a1c0      	lbu	a2,0(s1)
48be5be2:	7601      	cmpi	a2,1
48be5be4:	6104      	btnez	48be5bee <.LBE6+0x6>

48be5be6 <.LBB6>:
48be5be6:	6c00      	li	a0,0

48be5be8 <.LBE6>:
48be5be8:	b207      	lw	v0,48be5c04 <.LBE6+0x1c>
            change_mute_enable(TRUE);
        }
    }
    else
    {
        if (get_mute_enable() == TRUE) //当前为静音状态
        {
            //置为非静音状态，并设置PA音量
            change_mute_enable(FALSE);
            com_reset_sound_volume(0);
48be5bea:	ea40      	jalr	v0
48be5bec:	c180      	sb	a0,0(s1)
48be5bee:	6a01      	li	v0,1
        }
    }

    return TRUE;
}
48be5bf0:	6474      	restore	32,ra,s0-s1
48be5bf2:	e8a0      	jrc	ra
48be5bf4:	999c      	lw	a0,112(s1)
48be5bf6:	9fc1      	lw	a2,4(a3)
48be5bf8:	a0c0      	lbu	a2,0(s0)
48be5bfa:	9fc1      	lw	a2,4(a3)
48be5bfc:	5b6d      	sltiu	v1,109
48be5bfe:	485a      	addiu	s0,90
48be5c00:	5855      	sltiu	s0,85
48be5c02:	4836      	addiu	s0,54
48be5c04:	5af9      	sltiu	v0,249
48be5c06:	48be      	addiu	s0,-66

48be5c08 <com_switch_mute>:
48be5c08:	64f6      	save	48,ra,s0-s1

#ifdef ENABLE_TRUE_WIRELESS_STEREO
    //静音状态转换
    bool com_switch_mute(uint8 op1,uint8 op2,bool op3)
    {
48be5c0a:	ec11      	zeb	a0

48be5c0c <.LBB7>:
48be5c0c:	b213      	lw	v0,48be5c58 <.LBE7+0x4a>

48be5c0e <.LBE7>:
48be5c0e:	6725      	move	s1,a1
48be5c10:	ee11      	zeb	a2
48be5c12:	7401      	cmpi	a0,1
        bool cur_mute_state=0;
        cur_mute_state=get_mute_enable();
        //tws mod:need to notify the other
         if(op1==1)
48be5c14:	e911      	zeb	s1
48be5c16:	d606      	sw	a2,24(sp)
48be5c18:	a200      	lbu	s0,0(v0)
48be5c1a:	610f      	btnez	48be5c3a <.LBE7+0x2c>
48be5c1c:	b410      	lw	a0,48be5c5c <.LBE7+0x4e>
        {
             if(g_bt_stack_cur_info.dev_role!=0)
48be5c1e:	f020 a46e 	lbu	v1,46(a0)
48be5c22:	230b      	beqz	v1,48be5c3a <.LBE7+0x2c>
48be5c24:	f0a1 6e04 	li	a2,2212
            {
                com_btmanager_tws_send(MUTE_STATE_FLAG,(uint8)(1- cur_mute_state),NULL,NULL,MSG_BTSTACK_TWS_SEND_MSG_SYNC);
48be5c28:	6d01      	li	a1,1
48be5c2a:	e517      	subu	a1,s0
48be5c2c:	d604      	sw	a2,16(sp)
48be5c2e:	b20d      	lw	v0,48be5c60 <.LBE7+0x52>
48be5c30:	6e00      	li	a2,0
48be5c32:	6c03      	li	a0,3
48be5c34:	ed11      	zeb	a1
48be5c36:	ea40      	jalr	v0
48be5c38:	67e6      	move	a3,a2
48be5c3a:	7102      	cmpi	s1,2
            }
        }
        if(op2==2)
48be5c3c:	6103      	btnez	48be5c44 <.LBE7+0x36>
48be5c3e:	9406      	lw	a0,24(sp)
       {
            //tws accept set mute cmd
            com_set_mute(op3);
48be5c40:	b209      	lw	v0,48be5c64 <.LBE7+0x56>
48be5c42:	1005      	b	48be5c4e <.LBE7+0x40>
48be5c44:	7001      	cmpi	s0,1
       }
       else
      {
          if (cur_mute_state == TRUE) //当前为静音状态
48be5c46:	b208      	lw	v0,48be5c64 <.LBE7+0x56>
48be5c48:	6c00      	li	a0,0
          {
              com_set_mute(FALSE);
48be5c4a:	6001      	bteqz	48be5c4e <.LBE7+0x40>
48be5c4c:	6c01      	li	a0,1
          }
          else //当前为非静音状态
          {
              com_set_mute(TRUE);
48be5c4e:	eac0      	jalrc	v0
48be5c50:	6a01      	li	v0,1
          }
      }
        return TRUE;
    }
48be5c52:	6476      	restore	48,ra,s0-s1
48be5c54:	e8a0      	jrc	ra
48be5c56:	0000      	addiu	s0,sp,0
48be5c58:	a0c0      	lbu	a2,0(s0)
48be5c5a:	9fc1      	lw	a2,4(a3)
48be5c5c:	a2fc      	lbu	a3,28(v0)
48be5c5e:	9fc1      	lw	a2,4(a3)
48be5c60:	5921      	sltiu	s1,33
48be5c62:	4886      	addiu	s0,-122
48be5c64:	5bb9      	sltiu	v1,185
48be5c66:	48be      	addiu	s0,-66
	...
Disassembly of section BANK_UI_1_48:

48c25800 <check_auto_con_flag>:
48c25800:	64f5      	save	40,ra,s0-s1
48c25802:	b420      	lw	a0,48c25880 <check_auto_con_flag+0x80>
48c25804:	6b00      	li	v1,0
48c25806:	a44b      	lbu	v0,11(a0)
48c25808:	d304      	sw	v1,16(sp)
48c2580a:	2237      	beqz	v0,48c2587a <check_auto_con_flag+0x7a>
48c2580c:	9004      	lw	s0,16(sp)
48c2580e:	6f12      	li	a3,18
48c25810:	e8f8      	mult	s0,a3
48c25812:	b11d      	lw	s1,48c25884 <check_auto_con_flag+0x84>
48c25814:	e812      	mflo	s0
48c25816:	b61d      	lw	a2,48c25888 <check_auto_con_flag+0x88>
48c25818:	67b1      	move	a1,s1
48c2581a:	4d0e      	addiu	a1,14
48c2581c:	b21c      	lw	v0,48c2588c <check_auto_con_flag+0x8c>
48c2581e:	e0b1      	addu	a0,s0,a1
48c25820:	6f02      	li	a3,2
48c25822:	e0d5      	addu	a1,s0,a2
48c25824:	ea40      	jalr	v0
48c25826:	6e06      	li	a2,6
48c25828:	6782      	move	a0,v0
48c2582a:	2a1e      	bnez	v0,48c25868 <check_auto_con_flag+0x68>
48c2582c:	b517      	lw	a1,48c25888 <check_auto_con_flag+0x88>
48c2582e:	6b03      	li	v1,3
48c25830:	e519      	addu	a2,a1,s0
48c25832:	f7ff a65f 	lbu	v0,-1(a2)
48c25836:	ea6c      	and	v0,v1
48c25838:	2217      	beqz	v0,48c25868 <check_auto_con_flag+0x68>
48c2583a:	e029      	addu	v0,s0,s1
48c2583c:	c29d      	sb	a0,29(v0)
48c2583e:	c29c      	sb	a0,28(v0)
48c25840:	9704      	lw	a3,16(sp)
48c25842:	4481      	addiu	a0,a0,1
48c25844:	e4f7      	subu	a1,a0,a3
48c25846:	6e12      	li	a2,18
48c25848:	edd8      	mult	a1,a2
48c2584a:	eb12      	mflo	v1
48c2584c:	e329      	addu	v0,v1,s1
48c2584e:	a2fd      	lbu	a3,29(v0)
48c25850:	ef8a      	cmp	a3,a0
48c25852:	610a      	btnez	48c25868 <check_auto_con_flag+0x68>
48c25854:	a161      	lbu	v1,1(s1)
48c25856:	eb8a      	cmp	v1,a0
48c25858:	6107      	btnez	48c25868 <check_auto_con_flag+0x68>
48c2585a:	b30e      	lw	v1,48c25890 <check_auto_con_flag+0x90>
48c2585c:	a3c0      	lbu	a2,0(v1)
48c2585e:	2e04      	bnez	a2,48c25868 <check_auto_con_flag+0x68>
48c25860:	a9a5      	lhu	a1,10(s1)
48c25862:	c380      	sb	a0,0(v1)
48c25864:	eca4      	sllv	a1,a0
48c25866:	c9a6      	sh	a1,12(s1)
48c25868:	9304      	lw	v1,16(sp)
48c2586a:	b206      	lw	v0,48c25880 <check_auto_con_flag+0x80>
48c2586c:	43c1      	addiu	a2,v1,1
48c2586e:	ee11      	zeb	a2
48c25870:	d604      	sw	a2,16(sp)
48c25872:	a28b      	lbu	a0,11(v0)
48c25874:	9704      	lw	a3,16(sp)
48c25876:	ef83      	sltu	a3,a0
48c25878:	61c9      	btnez	48c2580c <check_auto_con_flag+0xc>
48c2587a:	6475      	restore	40,ra,s0-s1
48c2587c:	e8a0      	jrc	ra
48c2587e:	0000      	addiu	s0,sp,0
48c25880:	a33c      	lbu	s1,28(v1)
48c25882:	9fc1      	lw	a2,4(a3)
48c25884:	a2c8      	lbu	a2,8(v0)
48c25886:	9fc1      	lw	a2,4(a3)
48c25888:	a301      	lbu	s0,1(v1)
48c2588a:	9fc1      	lw	a2,4(a3)
48c2588c:	e905      	break	8
48c2588e:	bfc1      	lwu	a2,4(a3)
48c25890:	a361      	lbu	v1,1(v1)
48c25892:	9fc1      	lw	a2,4(a3)

48c25894 <com_exchange_vale>:
48c25894:	f004 64f5 	save	a0,40,ra,s0-s1
48c25898:	ee11      	zeb	a2
48c2589a:	b021      	lw	s0,48c2591c <com_exchange_vale+0x88>
48c2589c:	ed11      	zeb	a1
48c2589e:	d604      	sw	a2,16(sp)
48c258a0:	0c1b      	la	a0,48c2590c <com_exchange_vale+0x78>
48c258a2:	6e02      	li	a2,2
48c258a4:	6f4b      	li	a3,75
48c258a6:	e840      	jalr	s0
48c258a8:	6725      	move	s1,a1
48c258aa:	6f12      	li	a3,18
48c258ac:	e9f8      	mult	s1,a3
48c258ae:	b01d      	lw	s0,48c25920 <com_exchange_vale+0x8c>
48c258b0:	ed12      	mflo	a1
48c258b2:	480e      	addiu	s0,14
48c258b4:	e505      	addu	s1,a1,s0
48c258b6:	940a      	lw	a0,40(sp)
48c258b8:	b31b      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c258ba:	67b1      	move	a1,s1
48c258bc:	67c7      	move	a2,a3
48c258be:	eb40      	jalr	v1
48c258c0:	6f00      	li	a3,0
48c258c2:	940a      	lw	a0,40(sp)
48c258c4:	b318      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c258c6:	67b1      	move	a1,s1
48c258c8:	6e06      	li	a2,6
48c258ca:	eb40      	jalr	v1
48c258cc:	6f00      	li	a3,0
48c258ce:	9404      	lw	a0,16(sp)
48c258d0:	6f12      	li	a3,18
48c258d2:	ecf8      	mult	a0,a3
48c258d4:	b314      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c258d6:	ea12      	mflo	v0
48c258d8:	6791      	move	a0,s1
48c258da:	e201      	addu	s0,v0,s0
48c258dc:	67b0      	move	a1,s0
48c258de:	67c7      	move	a2,a3
48c258e0:	eb40      	jalr	v1
48c258e2:	6f00      	li	a3,0
48c258e4:	b310      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c258e6:	6791      	move	a0,s1
48c258e8:	67b0      	move	a1,s0
48c258ea:	6e06      	li	a2,6
48c258ec:	eb40      	jalr	v1
48c258ee:	6f00      	li	a3,0
48c258f0:	950a      	lw	a1,40(sp)
48c258f2:	b30d      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c258f4:	6790      	move	a0,s0
48c258f6:	6e12      	li	a2,18
48c258f8:	eb40      	jalr	v1
48c258fa:	6f00      	li	a3,0
48c258fc:	950a      	lw	a1,40(sp)
48c258fe:	b30a      	lw	v1,48c25924 <com_exchange_vale+0x90>
48c25900:	6790      	move	a0,s0
48c25902:	6e06      	li	a2,6
48c25904:	eb40      	jalr	v1
48c25906:	6f00      	li	a3,0
48c25908:	6475      	restore	40,ra,s0-s1
48c2590a:	e8a0      	jrc	ra
48c2590c:	650a      	move	t0,v0
48c2590e:	6378      	addiu	sp,960
48c25910:	6168      	btnez	48c259e2 <com_exchange_vale+0x14e>
48c25912:	676e      	move	v1,t6
48c25914:	2065      	beqz	s0,48c259e0 <com_exchange_vale+0x14c>
48c25916:	3d69      	ld	v1,72(a1)
48c25918:	003a      	addiu	s0,sp,232
48c2591a:	0000      	addiu	s0,sp,0
48c2591c:	e901      	sdbbp	8
48c2591e:	bfc1      	lwu	a2,4(a3)
48c25920:	a2c8      	lbu	a2,8(v0)
48c25922:	9fc1      	lw	a2,4(a3)
48c25924:	e905      	break	8
48c25926:	bfc1      	lwu	a2,4(a3)
	...
Disassembly of section BANK_UI_1_49:

48c65800 <com_btmanager_init>:
48c65800:	64ff      	save	120,ra,s0-s1
48c65802:	ec11      	zeb	a0
48c65804:	f660 b310 	lw	v1,48c65e74 <.LBE15+0xea>
48c65808:	d413      	sw	a0,76(sp)
48c6580a:	a34c      	lbu	v0,12(v1)
48c6580c:	7201      	cmpi	v0,1
48c6580e:	f300 6009 	bteqz	48c65e24 <.LBE15+0x9a>

48c65812 <.LBB6>:
48c65812:	67c4      	move	a2,a0
48c65814:	6d01      	li	a1,1
48c65816:	eeae      	xor	a2,a1
48c65818:	eea3      	sltu	a2,a1
48c6581a:	6798      	move	a0,t8
48c6581c:	d416      	sw	a0,88(sp)
48c6581e:	2425      	beqz	a0,48c6586a <.LBE8+0x2>

48c65820 <.LBB8>:
48c65820:	f640 b018 	lw	s0,48c65e78 <.LBE15+0xee>
48c65824:	6c4e      	li	a0,78
48c65826:	6d04      	li	a1,4
48c65828:	6e00      	li	a2,0
48c6582a:	e840      	jalr	s0
48c6582c:	6f16      	li	a3,22
48c6582e:	f640 b510 	lw	a1,48c65e7c <.LBE15+0xf2>
48c65832:	6782      	move	a0,v0
48c65834:	6e4e      	li	a2,78
48c65836:	6f12      	li	a3,18
48c65838:	e840      	jalr	s0
48c6583a:	6722      	move	s1,v0
48c6583c:	f640 b404 	lw	a0,48c65e80 <.LBE15+0xf6>
48c65840:	f640 b304 	lw	v1,48c65e84 <.LBE15+0xfa>
48c65844:	67b1      	move	a1,s1
48c65846:	6e1c      	li	a2,28
48c65848:	eb40      	jalr	v1
48c6584a:	6f00      	li	a3,0
48c6584c:	f620 b41c 	lw	a0,48c65e88 <.LBE15+0xfe>
48c65850:	67b1      	move	a1,s1
48c65852:	f620 b314 	lw	v1,48c65e84 <.LBE15+0xfa>
48c65856:	4d1c      	addiu	a1,28
48c65858:	6e32      	li	a2,50
48c6585a:	eb40      	jalr	v1
48c6585c:	6f00      	li	a3,0
48c6585e:	6791      	move	a0,s1
48c65860:	6d04      	li	a1,4
48c65862:	6e00      	li	a2,0
48c65864:	e840      	jalr	s0
48c65866:	6f17      	li	a3,23

48c65868 <.LBE8>:
48c65868:	104c      	b	48c65902 <.LBE8+0x9a>
48c6586a:	f620 b004 	lw	s0,48c65e8c <.LBE15+0x102>
48c6586e:	6900      	li	s1,0
48c65870:	c020      	sb	s1,0(s0)
48c65872:	f620 b700 	lw	a3,48c65e90 <.LBE15+0x106>
48c65876:	f600 b00c 	lw	s0,48c65e80 <.LBE15+0xf6>
48c6587a:	f600 b30c 	lw	v1,48c65e84 <.LBE15+0xfa>
48c6587e:	c720      	sb	s1,0(a3)
48c65880:	6790      	move	a0,s0
48c65882:	6f01      	li	a3,1
48c65884:	6d00      	li	a1,0
48c65886:	eb40      	jalr	v1
48c65888:	6e1c      	li	a2,28
48c6588a:	f600 b210 	lw	v0,48c65e98 <.LBE15+0x10e>
48c6588e:	f600 b508 	lw	a1,48c65e94 <.LBE15+0x10a>
48c65892:	6c00      	li	a0,0
48c65894:	6e01      	li	a2,1
48c65896:	eecb      	neg	a2
48c65898:	c02e      	sb	s1,14(s0)
48c6589a:	ca80      	sh	a0,0(v0)
48c6589c:	f600 b100 	lw	s1,48c65e9c <.LBE15+0x112>
48c658a0:	6cff      	li	a0,255
48c658a2:	c0c8      	sb	a2,8(s0)
48c658a4:	c0c7      	sb	a2,7(s0)
48c658a6:	c0c9      	sb	a2,9(s0)
48c658a8:	c0ca      	sb	a2,10(s0)
48c658aa:	c5c0      	sb	a2,0(a1)
48c658ac:	e940      	jalr	s1
48c658ae:	4c4a      	addiu	a0,74
48c658b0:	6cff      	li	a0,255
48c658b2:	c04b      	sb	v0,11(s0)
48c658b4:	e940      	jalr	s1
48c658b6:	4c49      	addiu	a0,73
48c658b8:	c04c      	sb	v0,12(s0)
48c658ba:	f5c0 b010 	lw	s0,48c65e88 <.LBE15+0xfe>
48c658be:	f5c0 b308 	lw	v1,48c65e84 <.LBE15+0xfa>
48c658c2:	6f01      	li	a3,1
48c658c4:	6d00      	li	a1,0
48c658c6:	6e32      	li	a2,50
48c658c8:	eb40      	jalr	v1
48c658ca:	6790      	move	a0,s0
48c658cc:	6cff      	li	a0,255
48c658ce:	e940      	jalr	s1
48c658d0:	4c43      	addiu	a0,67
48c658d2:	6cff      	li	a0,255
48c658d4:	4c44      	addiu	a0,68
48c658d6:	e940      	jalr	s1
48c658d8:	c040      	sb	v0,0(s0)
48c658da:	6cff      	li	a0,255
48c658dc:	4c45      	addiu	a0,69
48c658de:	e940      	jalr	s1
48c658e0:	c044      	sb	v0,4(s0)
48c658e2:	6cff      	li	a0,255
48c658e4:	4c46      	addiu	a0,70
48c658e6:	e940      	jalr	s1
48c658e8:	c046      	sb	v0,6(s0)
48c658ea:	6cff      	li	a0,255
48c658ec:	4c47      	addiu	a0,71
48c658ee:	e940      	jalr	s1
48c658f0:	c047      	sb	v0,7(s0)
48c658f2:	6cff      	li	a0,255
48c658f4:	c048      	sb	v0,8(s0)
48c658f6:	e940      	jalr	s1
48c658f8:	4c48      	addiu	a0,72
48c658fa:	ea11      	zeb	v0
48c658fc:	3744      	sll	a3,v0,1
48c658fe:	c845      	sh	v0,10(s0)
48c65900:	c8e6      	sh	a3,12(s0)
48c65902:	f580 b000 	lw	s0,48c65e80 <.LBE15+0xf6>
48c65906:	a04b      	lbu	v0,11(s0)
48c65908:	5a02      	sltiu	v0,2
48c6590a:	6107      	btnez	48c6591a <.LBE8+0xb2>
48c6590c:	6c00      	li	a0,0
48c6590e:	f560 b10c 	lw	s1,48c65e78 <.LBE15+0xee>
48c65912:	6d10      	li	a1,16
48c65914:	67c4      	move	a2,a0
48c65916:	e940      	jalr	s1
48c65918:	6f36      	li	a3,54
48c6591a:	6c00      	li	a0,0
48c6591c:	f540 b21c 	lw	v0,48c65e78 <.LBE15+0xee>
48c65920:	67a4      	move	a1,a0
48c65922:	67c4      	move	a2,a0
48c65924:	ea40      	jalr	v0
48c65926:	6f1c      	li	a3,28

48c65928 <.LBE6>:
48c65928:	f560 b318 	lw	v1,48c65ea0 <.LBE15+0x116>
48c6592c:	6c03      	li	a0,3
48c6592e:	eb40      	jalr	v1
48c65930:	d846      	sw	v0,24(s0)
48c65932:	9416      	lw	a0,88(sp)
48c65934:	2404      	beqz	a0,48c6593e <.LBE6+0x16>
48c65936:	f560 b510 	lw	a1,48c65ea4 <.LBE15+0x11a>
48c6593a:	6e01      	li	a2,1
48c6593c:	c5ce      	sb	a2,14(a1)
48c6593e:	f560 b408 	lw	a0,48c65ea4 <.LBE15+0x11a>
48c65942:	f540 b308 	lw	v1,48c65e88 <.LBE15+0xfe>
48c65946:	a44e      	lbu	v0,14(a0)
48c65948:	2a0b      	bnez	v0,48c65960 <.LBE6+0x38>
48c6594a:	f560 b000 	lw	s0,48c65ea8 <.LBE15+0x11e>
48c6594e:	c345      	sb	v0,5(v1)
48c65950:	a0e0      	lbu	a3,0(s0)
48c65952:	7701      	cmpi	a3,1
48c65954:	6102      	btnez	48c6595a <.LBE6+0x32>
48c65956:	6902      	li	s1,2
48c65958:	c325      	sb	s1,5(v1)
48c6595a:	6b01      	li	v1,1
48c6595c:	d314      	sw	v1,80(sp)
48c6595e:	1004      	b	48c65968 <.LBE6+0x40>
48c65960:	6d01      	li	a1,1
48c65962:	6a00      	li	v0,0
48c65964:	c3a5      	sb	a1,5(v1)
48c65966:	d214      	sw	v0,80(sp)
48c65968:	a4ef      	lbu	a3,15(a0)
48c6596a:	9416      	lw	a0,88(sp)
48c6596c:	5f01      	sltiu	a3,1
48c6596e:	67d8      	move	a2,t8
48c65970:	d615      	sw	a2,84(sp)
48c65972:	2422      	beqz	a0,48c659b8 <.LBB10>
48c65974:	f520 b418 	lw	a0,48c65eac <.LBE15+0x122>
48c65978:	f520 b518 	lw	a1,48c65eb0 <.LBE15+0x126>
48c6597c:	f4e0 b11c 	lw	s1,48c65e78 <.LBE15+0xee>
48c65980:	6e00      	li	a2,0
48c65982:	e940      	jalr	s1
48c65984:	6f53      	li	a3,83
48c65986:	f520 b010 	lw	s0,48c65eb4 <.LBE15+0x12a>
48c6598a:	f4e0 b218 	lw	v0,48c65e80 <.LBE15+0xf6>
48c6598e:	6b00      	li	v1,0
48c65990:	f500 b41c 	lw	a0,48c65eac <.LBE15+0x122>
48c65994:	67b0      	move	a1,s0
48c65996:	c271      	sb	v1,17(v0)
48c65998:	f00c 6e00 	li	a2,24576
48c6599c:	e940      	jalr	s1
48c6599e:	6f12      	li	a3,18
48c659a0:	67b0      	move	a1,s0
48c659a2:	f500 b018 	lw	s0,48c65eb8 <.LBE15+0x12e>
48c659a6:	6c22      	li	a0,34
48c659a8:	6e00      	li	a2,0
48c659aa:	e840      	jalr	s0
48c659ac:	6f06      	li	a3,6
48c659ae:	6d00      	li	a1,0
48c659b0:	6c23      	li	a0,35
48c659b2:	67c5      	move	a2,a1
48c659b4:	e840      	jalr	s0
48c659b6:	6f06      	li	a3,6

48c659b8 <.LBB10>:
48c659b8:	f4e0 b40c 	lw	a0,48c65ea4 <.LBE15+0x11a>
48c659bc:	6d7f      	li	a1,127
48c659be:	a4cc      	lbu	a2,12(a0)
48c659c0:	67fd      	move	a3,sp
48c659c2:	edcc      	and	a1,a2
48c659c4:	f020 a760 	lbu	v1,32(a3)
48c659c8:	2508      	beqz	a1,48c659da <.LBB10+0x22>
48c659ca:	6a04      	li	v0,4
48c659cc:	e84b      	neg	s0,v0
48c659ce:	e86c      	and	s0,v1
48c659d0:	6901      	li	s1,1
48c659d2:	e82d      	or	s0,s1
48c659d4:	f020 c700 	sb	s0,32(a3)
48c659d8:	1005      	b	48c659e4 <.LBB10+0x2c>
48c659da:	6d03      	li	a1,3
48c659dc:	ed6d      	or	a1,v1
48c659de:	67fd      	move	a3,sp
48c659e0:	f020 c7a0 	sb	a1,32(a3)
48c659e4:	9713      	lw	a3,76(sp)
48c659e6:	6c01      	li	a0,1
48c659e8:	ef8c      	and	a3,a0
48c659ea:	33e8      	sll	v1,a3,2
48c659ec:	67fd      	move	a3,sp
48c659ee:	f020 a7a0 	lbu	a1,32(a3)
48c659f2:	6905      	li	s1,5
48c659f4:	e82b      	neg	s0,s1
48c659f6:	9214      	lw	v0,80(sp)
48c659f8:	ed0c      	and	a1,s0
48c659fa:	ea8c      	and	v0,a0
48c659fc:	ed6d      	or	a1,v1
48c659fe:	6909      	li	s1,9
48c65a00:	9315      	lw	v1,84(sp)
48c65a02:	304c      	sll	s0,v0,3
48c65a04:	ea2b      	neg	v0,s1
48c65a06:	eb8c      	and	v1,a0
48c65a08:	ed4c      	and	a1,v0
48c65a0a:	ed0d      	or	a1,s0
48c65a0c:	d315      	sw	v1,84(sp)
48c65a0e:	3070      	sll	s0,v1,4
48c65a10:	f743 6b00 	li	v1,8000
48c65a14:	cf72      	sh	v1,36(a3)
48c65a16:	6b7f      	li	v1,127
48c65a18:	4228      	addiu	s1,v0,-8
48c65a1a:	6783      	move	a0,v1
48c65a1c:	ed2c      	and	a1,s1
48c65a1e:	eccc      	and	a0,a2
48c65a20:	ed0d      	or	a1,s0
48c65a22:	7442      	cmpi	a0,66
48c65a24:	f020 c7a0 	sb	a1,32(a3)
48c65a28:	6106      	btnez	48c65a36 <.LBB10+0x7e>
48c65a2a:	6c80      	li	a0,128
48c65a2c:	ee8b      	neg	a2,a0
48c65a2e:	eead      	or	a2,a1
48c65a30:	f020 c7c0 	sb	a2,32(a3)
48c65a34:	1004      	b	48c65a3e <.LBB11>
48c65a36:	ebac      	and	v1,a1
48c65a38:	67bd      	move	a1,sp
48c65a3a:	f020 c560 	sb	v1,32(a1)

48c65a3e <.LBB11>:
48c65a3e:	f460 b000 	lw	s0,48c65e9c <.LBE15+0x112>
48c65a42:	e840      	jalr	s0
48c65a44:	6c05      	li	a0,5
48c65a46:	679d      	move	a0,sp
48c65a48:	f020 a46c 	lbu	v1,44(a0)
48c65a4c:	6e02      	li	a2,2
48c65a4e:	eccb      	neg	a0,a2
48c65a50:	6d01      	li	a1,1
48c65a52:	eaac      	and	v0,a1
48c65a54:	eb8c      	and	v1,a0
48c65a56:	eb4d      	or	v1,v0
48c65a58:	675d      	move	v0,sp
48c65a5a:	f020 c26c 	sb	v1,44(v0)
48c65a5e:	f120 4c18 	addiu	a0,312
48c65a62:	e8c0      	jalrc	s0
48c65a64:	67bd      	move	a1,sp
48c65a66:	6f03      	li	a3,3
48c65a68:	ef4c      	and	a3,v0
48c65a6a:	6c07      	li	a0,7
48c65a6c:	f020 a54c 	lbu	v0,44(a1)
48c65a70:	ec8b      	neg	a0
48c65a72:	36e4      	sll	a2,a3,1
48c65a74:	ea8c      	and	v0,a0
48c65a76:	eacd      	or	v0,a2
48c65a78:	677d      	move	v1,sp
48c65a7a:	f020 c34c 	sb	v0,44(v1)
48c65a7e:	f120 4c1e 	addiu	a0,318
48c65a82:	e8c0      	jalrc	s0
48c65a84:	67bd      	move	a1,sp
48c65a86:	f020 a56c 	lbu	v1,44(a1)
48c65a8a:	6f01      	li	a3,1
48c65a8c:	6c09      	li	a0,9
48c65a8e:	eaec      	and	v0,a3
48c65a90:	ec8b      	neg	a0
48c65a92:	364c      	sll	a2,v0,3
48c65a94:	eb8c      	and	v1,a0
48c65a96:	ebcd      	or	v1,a2
48c65a98:	675d      	move	v0,sp
48c65a9a:	f020 c26c 	sb	v1,44(v0)
48c65a9e:	f140 4c01 	addiu	a0,321
48c65aa2:	e8c0      	jalrc	s0
48c65aa4:	67bd      	move	a1,sp
48c65aa6:	f020 a56c 	lbu	v1,44(a1)
48c65aaa:	6f01      	li	a3,1
48c65aac:	6c11      	li	a0,17
48c65aae:	eaec      	and	v0,a3
48c65ab0:	ec8b      	neg	a0
48c65ab2:	3650      	sll	a2,v0,4
48c65ab4:	eb8c      	and	v1,a0
48c65ab6:	ebcd      	or	v1,a2
48c65ab8:	675d      	move	v0,sp
48c65aba:	f020 c26c 	sb	v1,44(v0)
48c65abe:	f140 4c0a 	addiu	a0,330
48c65ac2:	e8c0      	jalrc	s0
48c65ac4:	67bd      	move	a1,sp
48c65ac6:	f020 a56c 	lbu	v1,44(a1)
48c65aca:	6f01      	li	a3,1
48c65acc:	6c21      	li	a0,33
48c65ace:	eaec      	and	v0,a3
48c65ad0:	ec8b      	neg	a0
48c65ad2:	3654      	sll	a2,v0,5
48c65ad4:	eb8c      	and	v1,a0
48c65ad6:	ebcd      	or	v1,a2
48c65ad8:	675d      	move	v0,sp
48c65ada:	f020 c26c 	sb	v1,44(v0)
48c65ade:	f140 4c1b 	addiu	a0,347
48c65ae2:	e8c0      	jalrc	s0
48c65ae4:	67bd      	move	a1,sp
48c65ae6:	f020 a56c 	lbu	v1,44(a1)
48c65aea:	6f01      	li	a3,1
48c65aec:	6c41      	li	a0,65
48c65aee:	eaec      	and	v0,a3
48c65af0:	ec8b      	neg	a0
48c65af2:	3658      	sll	a2,v0,6
48c65af4:	eb8c      	and	v1,a0
48c65af6:	ebcd      	or	v1,a2
48c65af8:	67fd      	move	a3,sp
48c65afa:	6a00      	li	v0,0
48c65afc:	f020 c76c 	sb	v1,44(a3)
48c65b00:	f160 4c1c 	addiu	a0,380
48c65b04:	e840      	jalr	s0
48c65b06:	d217      	sw	v0,92(sp)
48c65b08:	7201      	cmpi	v0,1
48c65b0a:	010b      	addiu	s1,sp,44
48c65b0c:	6106      	btnez	48c65b1a <.LBB11+0xdc>
48c65b0e:	e840      	jalr	s0
48c65b10:	6c06      	li	a0,6
48c65b12:	7201      	cmpi	v0,1
48c65b14:	6102      	btnez	48c65b1a <.LBB11+0xdc>
48c65b16:	6801      	li	s0,1
48c65b18:	d017      	sw	s0,92(sp)
48c65b1a:	9617      	lw	a2,92(sp)
48c65b1c:	a160      	lbu	v1,0(s1)
48c65b1e:	6c7f      	li	a0,127
48c65b20:	32dc      	sll	v0,a2,7
48c65b22:	eb8c      	and	v1,a0
48c65b24:	eb4d      	or	v1,v0
48c65b26:	377e      	srl	a3,v1,7
48c65b28:	c160      	sb	v1,0(s1)
48c65b2a:	6800      	li	s0,0
48c65b2c:	2707      	beqz	a3,48c65b3c <.LBB11+0xfe>
48c65b2e:	4c7f      	addiu	a0,127
48c65b30:	b2db      	lw	v0,48c65e9c <.LBE15+0x112>
48c65b32:	ea40      	jalr	v0
48c65b34:	4c3e      	addiu	a0,62
48c65b36:	7201      	cmpi	v0,1
48c65b38:	6101      	btnez	48c65b3c <.LBB11+0xfe>
48c65b3a:	4001      	addiu	s0,s0,1
48c65b3c:	a1e1      	lbu	a3,1(s1)
48c65b3e:	6e02      	li	a2,2
48c65b40:	ebcb      	neg	v1,a2
48c65b42:	a1a0      	lbu	a1,0(s1)
48c65b44:	ef6c      	and	a3,v1
48c65b46:	e8ed      	or	s0,a3
48c65b48:	34be      	srl	a0,a1,7
48c65b4a:	c101      	sb	s0,1(s1)
48c65b4c:	6800      	li	s0,0
48c65b4e:	2407      	beqz	a0,48c65b5e <.LBB11+0x120>
48c65b50:	6cff      	li	a0,255
48c65b52:	b2d3      	lw	v0,48c65e9c <.LBE15+0x112>
48c65b54:	ea40      	jalr	v0
48c65b56:	4c3e      	addiu	a0,62
48c65b58:	7201      	cmpi	v0,1
48c65b5a:	6101      	btnez	48c65b5e <.LBB11+0x120>
48c65b5c:	4001      	addiu	s0,s0,1
48c65b5e:	3704      	sll	a3,s0,1
48c65b60:	6e03      	li	a2,3
48c65b62:	a101      	lbu	s0,1(s1)
48c65b64:	ebcb      	neg	v1,a2
48c65b66:	a1a0      	lbu	a1,0(s1)
48c65b68:	e86c      	and	s0,v1
48c65b6a:	e8ed      	or	s0,a3
48c65b6c:	34be      	srl	a0,a1,7
48c65b6e:	c101      	sb	s0,1(s1)
48c65b70:	6800      	li	s0,0
48c65b72:	2407      	beqz	a0,48c65b82 <.LBB11+0x144>
48c65b74:	6cff      	li	a0,255
48c65b76:	b2ca      	lw	v0,48c65e9c <.LBE15+0x112>
48c65b78:	ea40      	jalr	v0
48c65b7a:	4c3f      	addiu	a0,63
48c65b7c:	7201      	cmpi	v0,1
48c65b7e:	6101      	btnez	48c65b82 <.LBB11+0x144>
48c65b80:	4001      	addiu	s0,s0,1
48c65b82:	3408      	sll	a0,s0,2
48c65b84:	6d05      	li	a1,5
48c65b86:	a101      	lbu	s0,1(s1)
48c65b88:	efab      	neg	a3,a1
48c65b8a:	e8ec      	and	s0,a3
48c65b8c:	e88d      	or	s0,a0
48c65b8e:	c101      	sb	s0,1(s1)
48c65b90:	6cff      	li	a0,255
48c65b92:	b0c3      	lw	s0,48c65e9c <.LBE15+0x112>
48c65b94:	e840      	jalr	s0
48c65b96:	4c40      	addiu	a0,64
48c65b98:	6e01      	li	a2,1
48c65b9a:	a1a1      	lbu	a1,1(s1)
48c65b9c:	6b09      	li	v1,9
48c65b9e:	ec6b      	neg	a0,v1
48c65ba0:	eacc      	and	v0,a2
48c65ba2:	324c      	sll	v0,3
48c65ba4:	ed8c      	and	a1,a0
48c65ba6:	ed4d      	or	a1,v0
48c65ba8:	f140 4c09 	addiu	a0,329
48c65bac:	e840      	jalr	s0
48c65bae:	c1a1      	sb	a1,1(s1)
48c65bb0:	6f01      	li	a3,1
48c65bb2:	a161      	lbu	v1,1(s1)
48c65bb4:	6c11      	li	a0,17
48c65bb6:	eaec      	and	v0,a3
48c65bb8:	ec8b      	neg	a0
48c65bba:	3650      	sll	a2,v0,4
48c65bbc:	eb8c      	and	v1,a0
48c65bbe:	ebcd      	or	v1,a2
48c65bc0:	f140 4c12 	addiu	a0,338
48c65bc4:	e840      	jalr	s0
48c65bc6:	c161      	sb	v1,1(s1)
48c65bc8:	a1c1      	lbu	a2,1(s1)
48c65bca:	6d21      	li	a1,33
48c65bcc:	6c01      	li	a0,1
48c65bce:	efab      	neg	a3,a1
48c65bd0:	ea8c      	and	v0,a0
48c65bd2:	eeec      	and	a2,a3
48c65bd4:	3254      	sll	v0,5
48c65bd6:	ee4d      	or	a2,v0
48c65bd8:	f140 4c0a 	addiu	a0,330
48c65bdc:	e840      	jalr	s0
48c65bde:	c1c1      	sb	a2,1(s1)
48c65be0:	6d41      	li	a1,65
48c65be2:	6b01      	li	v1,1
48c65be4:	a1e1      	lbu	a3,1(s1)
48c65be6:	ecab      	neg	a0,a1
48c65be8:	ea6c      	and	v0,v1
48c65bea:	3658      	sll	a2,v0,6
48c65bec:	ef8c      	and	a3,a0
48c65bee:	efcd      	or	a3,a2
48c65bf0:	f180 4c0d 	addiu	a0,397
48c65bf4:	e840      	jalr	s0
48c65bf6:	c1e1      	sb	a3,1(s1)
48c65bf8:	a161      	lbu	v1,1(s1)
48c65bfa:	6c7f      	li	a0,127
48c65bfc:	325c      	sll	v0,7
48c65bfe:	eb8c      	and	v1,a0
48c65c00:	eb4d      	or	v1,v0
48c65c02:	6cff      	li	a0,255
48c65c04:	c161      	sb	v1,1(s1)
48c65c06:	e840      	jalr	s0
48c65c08:	4c4e      	addiu	a0,78
48c65c0a:	a1e2      	lbu	a3,2(s1)
48c65c0c:	6e02      	li	a2,2
48c65c0e:	6d01      	li	a1,1
48c65c10:	eccb      	neg	a0,a2
48c65c12:	eaac      	and	v0,a1
48c65c14:	ef8c      	and	a3,a0
48c65c16:	ef4d      	or	a3,v0
48c65c18:	f140 4c10 	addiu	a0,336
48c65c1c:	e840      	jalr	s0
48c65c1e:	c1e2      	sb	a3,2(s1)
48c65c20:	6f01      	li	a3,1
48c65c22:	a162      	lbu	v1,2(s1)
48c65c24:	6c03      	li	a0,3
48c65c26:	eaec      	and	v0,a3
48c65c28:	ec8b      	neg	a0
48c65c2a:	ef44      	sllv	v0,a3
48c65c2c:	eb8c      	and	v1,a0
48c65c2e:	eb4d      	or	v1,v0
48c65c30:	b09d      	lw	s0,48c65ea4 <.LBE15+0x11a>
48c65c32:	c162      	sb	v1,2(s1)
48c65c34:	a0ac      	lbu	a1,12(s0)
48c65c36:	6b7f      	li	v1,127
48c65c38:	ed6c      	and	a1,v1
48c65c3a:	7504      	cmpi	a1,4
48c65c3c:	610c      	btnez	48c65c56 <.LBE11>
48c65c3e:	a140      	lbu	v0,0(s1)
48c65c40:	4b80      	addiu	v1,-128
48c65c42:	4b81      	addiu	v1,-127
48c65c44:	ea6d      	or	v0,v1
48c65c46:	a161      	lbu	v1,1(s1)
48c65c48:	eaed      	or	v0,a3
48c65c4a:	44c1      	addiu	a2,a0,1
48c65c4c:	4fbe      	addiu	a3,-66
48c65c4e:	ebcc      	and	v1,a2
48c65c50:	eaec      	and	v0,a3
48c65c52:	c161      	sb	v1,1(s1)
48c65c54:	c140      	sb	v0,0(s1)

48c65c56 <.LBE11>:
48c65c56:	b49a      	lw	a0,48c65ebc <.LBE15+0x132>
48c65c58:	b29a      	lw	v0,48c65ec0 <.LBE15+0x136>
48c65c5a:	9ce0      	lw	a3,0(a0)
48c65c5c:	671d      	move	s0,sp
48c65c5e:	ea40      	jalr	v0
48c65c60:	a79e      	lbu	a0,30(a3)
48c65c62:	b186      	lw	s1,48c65e78 <.LBE15+0xee>
48c65c64:	0412      	addiu	a0,sp,72
48c65c66:	6f1b      	li	a3,27
48c65c68:	f020 c042 	sb	v0,34(s0)
48c65c6c:	6d48      	li	a1,72
48c65c6e:	e940      	jalr	s1
48c65c70:	6e01      	li	a2,1
48c65c72:	67fd      	move	a3,sp
48c65c74:	f040 a788 	lbu	a0,72(a3)
48c65c78:	f020 a760 	lbu	v1,32(a3)
48c65c7c:	7401      	cmpi	a0,1
48c65c7e:	6107      	btnez	48c65c8e <.LBE11+0x38>
48c65c80:	6d20      	li	a1,32
48c65c82:	ed6d      	or	a1,v1
48c65c84:	6b40      	li	v1,64
48c65c86:	ed6d      	or	a1,v1
48c65c88:	f020 c7a0 	sb	a1,32(a3)
48c65c8c:	101f      	b	48c65ccc <.LBE11+0x76>
48c65c8e:	7403      	cmpi	a0,3
48c65c90:	6106      	btnez	48c65c9e <.LBE11+0x48>
48c65c92:	6920      	li	s1,32
48c65c94:	e96d      	or	s1,v1
48c65c96:	67dd      	move	a2,sp
48c65c98:	f020 c620 	sb	s1,32(a2)
48c65c9c:	1006      	b	48c65caa <.LBE11+0x54>
48c65c9e:	6f21      	li	a3,33
48c65ca0:	eaeb      	neg	v0,a3
48c65ca2:	ea6c      	and	v0,v1
48c65ca4:	671d      	move	s0,sp
48c65ca6:	f020 c040 	sb	v0,32(s0)
48c65caa:	7402      	cmpi	a0,2
48c65cac:	679d      	move	a0,sp
48c65cae:	f020 a460 	lbu	v1,32(a0)
48c65cb2:	6106      	btnez	48c65cc0 <.LBE11+0x6a>
48c65cb4:	6e40      	li	a2,64
48c65cb6:	ee6d      	or	a2,v1
48c65cb8:	67bd      	move	a1,sp
48c65cba:	f020 c5c0 	sb	a2,32(a1)
48c65cbe:	1006      	b	48c65ccc <.LBE11+0x76>
48c65cc0:	6841      	li	s0,65
48c65cc2:	e90b      	neg	s1,s0
48c65cc4:	e96c      	and	s1,v1
48c65cc6:	677d      	move	v1,sp
48c65cc8:	f020 c320 	sb	s1,32(v1)
48c65ccc:	b07e      	lw	s0,48c65ec4 <.LBE15+0x13a>
48c65cce:	e840      	jalr	s0
48c65cd0:	673d      	move	s1,sp
48c65cd2:	b06c      	lw	s0,48c65e80 <.LBE15+0xf6>
48c65cd4:	d20a      	sw	v0,40(sp)
48c65cd6:	a04c      	lbu	v0,12(s0)
48c65cd8:	b584      	lw	a1,48c65ee8 <.LBE15+0x15e>
48c65cda:	f180 6e03 	li	a2,387
48c65cde:	f020 c141 	sb	v0,33(s1)
48c65ce2:	0306      	addiu	v1,sp,24
48c65ce4:	d604      	sw	a2,16(sp)
48c65ce6:	6c0d      	li	a0,13
48c65ce8:	6e00      	li	a2,0
48c65cea:	0708      	addiu	a3,sp,32
48c65cec:	b277      	lw	v0,48c65ec8 <.LBE15+0x13e>
48c65cee:	c198      	sb	a0,24(s1)
48c65cf0:	d510      	sw	a1,64(sp)
48c65cf2:	d707      	sw	a3,28(sp)
48c65cf4:	d305      	sw	v1,20(sp)
48c65cf6:	67e6      	move	a3,a2
48c65cf8:	6c0b      	li	a0,11
48c65cfa:	ea40      	jalr	v0
48c65cfc:	0504      	addiu	a1,sp,16
48c65cfe:	b563      	lw	a1,48c65e88 <.LBE15+0xfe>
48c65d00:	67dd      	move	a2,sp
48c65d02:	65fd      	move	ra,a1
48c65d04:	679f      	move	a0,ra
48c65d06:	f020 a6ac 	lbu	a1,44(a2)
48c65d0a:	a443      	lbu	v0,3(a0)
48c65d0c:	6902      	li	s1,2
48c65d0e:	6e01      	li	a2,1
48c65d10:	ef2b      	neg	a3,s1
48c65d12:	6765      	move	v1,a1
48c65d14:	ebcc      	and	v1,a2
48c65d16:	eaec      	and	v0,a3
48c65d18:	34b2      	srl	a0,a1,4
48c65d1a:	6905      	li	s1,5
48c65d1c:	ea6d      	or	v0,v1
48c65d1e:	eccc      	and	a0,a2
48c65d20:	e92b      	neg	s1
48c65d22:	3388      	sll	v1,a0,2
48c65d24:	653f      	move	t9,a3
48c65d26:	34be      	srl	a0,a1,7
48c65d28:	ea2c      	and	v0,s1
48c65d2a:	6f03      	li	a3,3
48c65d2c:	ea6d      	or	v0,v1
48c65d2e:	efeb      	neg	a3
48c65d30:	eccc      	and	a0,a2
48c65d32:	ee84      	sllv	a0,a2
48c65d34:	eaec      	and	v0,a3
48c65d36:	677d      	move	v1,sp
48c65d38:	ea8d      	or	v0,a0
48c65d3a:	f020 a38d 	lbu	a0,45(v1)
48c65d3e:	47ea      	addiu	a3,a3,-6
48c65d40:	3396      	srl	v1,a0,5
48c65d42:	ebcc      	and	v1,a2
48c65d44:	336c      	sll	v1,3
48c65d46:	eaec      	and	v0,a3
48c65d48:	ea6d      	or	v0,v1
48c65d4a:	677f      	move	v1,ra
48c65d4c:	c343      	sb	v0,3(v1)
48c65d4e:	a073      	lbu	v1,19(s0)
48c65d50:	651f      	move	t8,a3
48c65d52:	328e      	srl	v0,a0,3
48c65d54:	67f9      	move	a3,t9
48c65d56:	eacc      	and	v0,a2
48c65d58:	ebec      	and	v1,a3
48c65d5a:	eb4d      	or	v1,v0
48c65d5c:	3792      	srl	a3,a0,4
48c65d5e:	6a03      	li	v0,3
48c65d60:	ea4b      	neg	v0
48c65d62:	efcc      	and	a3,a2
48c65d64:	eee4      	sllv	a3,a2
48c65d66:	eb4c      	and	v1,v0
48c65d68:	ebed      	or	v1,a3
48c65d6a:	67fd      	move	a3,sp
48c65d6c:	f020 a74e 	lbu	v0,46(a3)
48c65d70:	35ba      	srl	a1,6
48c65d72:	edcc      	and	a1,a2
48c65d74:	34a8      	sll	a0,a1,2
48c65d76:	eb2c      	and	v1,s1
48c65d78:	ee46      	srlv	v0,a2
48c65d7a:	eb8d      	or	v1,a0
48c65d7c:	eacc      	and	v0,a2
48c65d7e:	67b8      	move	a1,t8
48c65d80:	344c      	sll	a0,v0,3
48c65d82:	ebac      	and	v1,a1

48c65d84 <.LBE10>:
48c65d84:	b748      	lw	a3,48c65ea4 <.LBE15+0x11a>

48c65d86 <.LBB15>:
48c65d86:	eb8d      	or	v1,a0
48c65d88:	c073      	sb	v1,19(s0)

48c65d8a <.LBE15>:
48c65d8a:	c7cf      	sb	a2,15(a3)
48c65d8c:	9216      	lw	v0,88(sp)
48c65d8e:	2212      	beqz	v0,48c65db4 <.LBE15+0x2a>
48c65d90:	b356      	lw	v1,48c65ee8 <.LBE15+0x15e>
48c65d92:	a340      	lbu	v0,0(v1)
48c65d94:	2a09      	bnez	v0,48c65da8 <.LBE15+0x1e>
48c65d96:	6d00      	li	a1,0
48c65d98:	b238      	lw	v0,48c65e78 <.LBE15+0xee>
48c65d9a:	6f1e      	li	a3,30
48c65d9c:	6c01      	li	a0,1
48c65d9e:	ea40      	jalr	v0
48c65da0:	67c5      	move	a2,a1
48c65da2:	b738      	lw	a3,48c65e80 <.LBE15+0xf6>
48c65da4:	a751      	lbu	v0,17(a3)
48c65da6:	17f6      	b	48c65d94 <.LBE15+0xa>
48c65da8:	b441      	lw	a0,48c65eac <.LBE15+0x122>
48c65daa:	b542      	lw	a1,48c65eb0 <.LBE15+0x126>
48c65dac:	b033      	lw	s0,48c65e78 <.LBE15+0xee>
48c65dae:	6e00      	li	a2,0
48c65db0:	e840      	jalr	s0
48c65db2:	6f52      	li	a3,82
48c65db4:	9413      	lw	a0,76(sp)
48c65db6:	2c02      	bnez	a0,48c65dbc <.LBE15+0x32>
48c65db8:	b345      	lw	v1,48c65ecc <.LBE15+0x142>
48c65dba:	ebc0      	jalrc	v1
48c65dbc:	b245      	lw	v0,48c65ecc <.LBE15+0x142>
48c65dbe:	eac0      	jalrc	v0
48c65dc0:	b539      	lw	a1,48c65ea0 <.LBE15+0x116>
48c65dc2:	a5cd      	lbu	a2,13(a1)
48c65dc4:	2e08      	bnez	a2,48c65dd6 <.LBE15+0x4c>
48c65dc6:	b644      	lw	a2,48c65ed4 <.LBE15+0x14a>
48c65dc8:	b044      	lw	s0,48c65ed8 <.LBE15+0x14e>
48c65dca:	f1e0 6d14 	li	a1,500
48c65dce:	e840      	jalr	s0
48c65dd0:	6c03      	li	a0,3
48c65dd2:	b72e      	lw	a3,48c65e88 <.LBE15+0xfe>
48c65dd4:	c742      	sb	v0,2(a3)
48c65dd6:	9416      	lw	a0,88(sp)
48c65dd8:	2403      	beqz	a0,48c65de0 <.LBE15+0x56>
48c65dda:	b341      	lw	v1,48c65edc <.LBE15+0x152>
48c65ddc:	eb40      	jalr	v1
48c65dde:	6c01      	li	a0,1
48c65de0:	b540      	lw	a1,48c65ee0 <.LBE15+0x156>
48c65de2:	b026      	lw	s0,48c65e78 <.LBE15+0xee>
48c65de4:	6e3c      	li	a2,60
48c65de6:	6c01      	li	a0,1
48c65de8:	e840      	jalr	s0
48c65dea:	6f47      	li	a3,71
48c65dec:	ee4f      	not	a2,v0
48c65dee:	2e06      	bnez	a2,48c65dfc <.LBE15+0x72>
48c65df0:	6d00      	li	a1,0
48c65df2:	0c0e      	la	a0,48c65e28 <.LBE15+0x9e>
48c65df4:	67c5      	move	a2,a1
48c65df6:	e840      	jalr	s0
48c65df8:	6f4b      	li	a3,75
48c65dfa:	17ff      	b	48c65dfa <.LBE15+0x70>
48c65dfc:	b221      	lw	v0,48c65e80 <.LBE15+0xf6>
48c65dfe:	6f03      	li	a3,3
48c65e00:	a2b3      	lbu	a1,19(v0)
48c65e02:	edec      	and	a1,a3
48c65e04:	250f      	beqz	a1,48c65e24 <.LBE15+0x9a>
48c65e06:	6d00      	li	a1,0
48c65e08:	b01c      	lw	s0,48c65e78 <.LBE15+0xee>
48c65e0a:	6c02      	li	a0,2
48c65e0c:	67c5      	move	a2,a1
48c65e0e:	e840      	jalr	s0
48c65e10:	6f49      	li	a3,73
48c65e12:	b435      	lw	a0,48c65ee4 <.LBE15+0x15a>
48c65e14:	67c2      	move	a2,v0
48c65e16:	dc40      	sw	v0,0(a0)
48c65e18:	2a05      	bnez	v0,48c65e24 <.LBE15+0x9a>
48c65e1a:	0c0e      	la	a0,48c65e50 <.LBE15+0xc6>
48c65e1c:	67a2      	move	a1,v0
48c65e1e:	e840      	jalr	s0
48c65e20:	6f4b      	li	a3,75
48c65e22:	17ff      	b	48c65e22 <.LBE15+0x98>
48c65e24:	647f      	restore	120,ra,s0-s1
48c65e26:	e8a0      	jrc	ra
48c65e28:	453c      	daddiu	s1,a1,-4
48c65e2a:	203e      	beqz	s0,48c65ea8 <.LBE15+0x11e>
48c65e2c:	7462      	cmpi	a0,98
48c65e2e:	7473      	cmpi	a0,115
48c65e30:	6361      	addiu	sp,776
48c65e32:	206b      	beqz	s0,48c65f0a <.LBE15+0x180>
48c65e34:	7473      	cmpi	a0,115
48c65e36:	7461      	cmpi	a0,97
48c65e38:	7375      	cmpi	v1,117
48c65e3a:	7320      	cmpi	v1,32
48c65e3c:	6d68      	li	a1,104
48c65e3e:	6320      	addiu	sp,256
48c65e40:	6572      	move	s3,v0
48c65e42:	7461      	cmpi	a0,97
48c65e44:	2065      	beqz	s0,48c65f10 <.LBE15+0x186>
48c65e46:	6166      	btnez	48c65f14 <.LBE15+0x18a>
48c65e48:	6c69      	li	a0,105
48c65e4a:	2121      	beqz	s1,48c65e8e <.LBE15+0x104>
48c65e4c:	0000      	addiu	s0,sp,0
48c65e4e:	0000      	addiu	s0,sp,0
48c65e50:	453c      	daddiu	s1,a1,-4
48c65e52:	203e      	beqz	s0,48c65ed0 <.LBE15+0x146>
48c65e54:	7462      	cmpi	a0,98
48c65e56:	7473      	cmpi	a0,115
48c65e58:	6361      	addiu	sp,776
48c65e5a:	206b      	beqz	s0,48c65f32 <.LBE15+0x1a8>
48c65e5c:	6372      	addiu	sp,912
48c65e5e:	2070      	beqz	s0,48c65f40 <.LBE15+0x1b6>
48c65e60:	6e69      	li	a2,105
48c65e62:	7320      	cmpi	v1,32
48c65e64:	6d68      	li	a1,104
48c65e66:	6e20      	li	a2,32
48c65e68:	746f      	cmpi	a0,111
48c65e6a:	6520      	move	at,s0
48c65e6c:	6978      	li	s1,120
48c65e6e:	7473      	cmpi	a0,115
48c65e70:	2121      	beqz	s1,48c65eb4 <.LBE15+0x12a>
48c65e72:	0000      	addiu	s0,sp,0
48c65e74:	a080      	lbu	a0,0(s0)
48c65e76:	9fc1      	lw	a2,4(a3)
48c65e78:	e901      	sdbbp	8
48c65e7a:	bfc1      	lwu	a2,4(a3)
48c65e7c:	0000      	addiu	s0,sp,0
48c65e7e:	0011      	addiu	s0,sp,68
48c65e80:	a33c      	lbu	s1,28(v1)
48c65e82:	9fc1      	lw	a2,4(a3)
48c65e84:	e905      	break	8
48c65e86:	bfc1      	lwu	a2,4(a3)
48c65e88:	a2c8      	lbu	a2,8(v0)
48c65e8a:	9fc1      	lw	a2,4(a3)
48c65e8c:	a35e      	lbu	v0,30(v1)
48c65e8e:	9fc1      	lw	a2,4(a3)
48c65e90:	a35c      	lbu	v0,28(v1)
48c65e92:	9fc1      	lw	a2,4(a3)
48c65e94:	a358      	lbu	v0,24(v1)
48c65e96:	9fc1      	lw	a2,4(a3)
48c65e98:	a35a      	lbu	v0,26(v1)
48c65e9a:	9fc1      	lw	a2,4(a3)
48c65e9c:	5ac5      	sltiu	v0,197
48c65e9e:	4846      	addiu	s0,70
48c65ea0:	5dc5      	sltiu	a1,197
48c65ea2:	4882      	addiu	s0,-126
48c65ea4:	a0c0      	lbu	a2,0(s0)
48c65ea6:	9fc1      	lw	a2,4(a3)
48c65ea8:	9a26      	lw	s1,24(v0)
48c65eaa:	9fc1      	lw	a2,4(a3)
48c65eac:	5800      	sltiu	s0,0
48c65eae:	9fc3      	lw	a2,12(a3)
48c65eb0:	b800      	lwu	s0,0(s0)
48c65eb2:	9fc3      	lw	a2,12(a3)
48c65eb4:	0000      	addiu	s0,sp,0
48c65eb6:	0040      	addiu	s0,sp,256
48c65eb8:	e91d      	dmultu	s1,s0
48c65eba:	bfc1      	lwu	a2,4(a3)
48c65ebc:	999c      	lw	a0,112(s1)
48c65ebe:	9fc1      	lw	a2,4(a3)
48c65ec0:	58e5      	sltiu	s0,229
48c65ec2:	4886      	addiu	s0,-122
48c65ec4:	59f9      	sltiu	s1,249
48c65ec6:	488a      	addiu	s0,-118
48c65ec8:	5a65      	sltiu	v0,101
48c65eca:	482e      	addiu	s0,46
48c65ecc:	5801      	sltiu	s0,1
48c65ece:	4882      	addiu	s0,-126
48c65ed0:	0501      	addiu	a1,sp,4
48c65ed2:	bfc1      	lwu	a2,4(a3)
48c65ed4:	5db1      	sltiu	a1,177
48c65ed6:	482a      	addiu	s0,42
48c65ed8:	5915      	sltiu	s1,21
48c65eda:	488e      	addiu	s0,-114
48c65edc:	5edd      	sltiu	a2,221
48c65ede:	4882      	addiu	s0,-126
48c65ee0:	a2fc      	lbu	a3,28(v0)
48c65ee2:	9fc1      	lw	a2,4(a3)
48c65ee4:	a338      	lbu	s1,24(v1)
48c65ee6:	9fc1      	lw	a2,4(a3)
48c65ee8:	a34d      	lbu	v0,13(v1)
48c65eea:	9fc1      	lw	a2,4(a3)
	...
